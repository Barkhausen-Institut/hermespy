# -*- coding: utf-8 -*-

from __future__ import annotations

from __future__ import annotations
from collections.abc import Sequence
import matplotlib.pyplot as plt

import numpy as np

from .device import Receiver
from .monte_carlo import Artifact, Evaluation, ScalarEvaluationResult, Evaluator, GridDimension
from .visualize import VAT

__author__ = "Jan Adler"
__copyright__ = "Copyright 2023, Barkhausen Institut gGmbH"
__credits__ = ["Jan Adler"]
__license__ = "AGPLv3"
__version__ = "1.1.0"
__maintainer__ = "Jan Adler"
__email__ = "jan.adler@barkhauseninstitut.org"
__status__ = "Prototype"


class ReceivedPowerResult(ScalarEvaluationResult):
    """The result of a received power evaluation.

    Generated by the :meth:`generate_result<ReceivedPowerEvaluator.generate_result>` of :class:`ReceivedPowerEvaluator`
    after all evaluation artifacts have been collected.
    """

    __average_powers: np.ndarray

    def __init__(
        self,
        average_powers: np.ndarray,
        grid: Sequence[GridDimension],
        evaluator: ReceivedPowerEvaluator,
        plot_surface: bool = False,
    ) -> None:
        """
        Args:

            average_powers (numpy.ndarray):
                The received power in Watts for each antenna stream.

            grid (Sequence[GridDimension]):
                The grid dimensions of the evaluation.

            evaluator (ReceivedPowerEvaluator):
                The evaluator that generated this result.

            plot_surface (bool):
                Whether two-dimensional evaluations should be plotted as surface plots.
        """

        # Initialize the base class
        scalars = np.sum(average_powers, axis=-1, keepdims=False)
        ScalarEvaluationResult.__init__(self, grid, scalars, evaluator, plot_surface)

        # Initialize class members
        self.__average_powers = average_powers

    @property
    def average_powers(self) -> np.ndarray:
        """The received power in Watts for each antenna stream."""

        return self.__average_powers

    def to_array(self) -> np.ndarray:
        return self.__average_powers


class ReceivePowerArtifact(Artifact):
    """The artifact of a received power evaluation.

    Generated by the :meth:`artifact<ReceivedPowerEvaluator.artifact>` of :class:`ReceivedPowerEvaluator`.
    """

    __power: np.ndarray

    def __init__(self, power: np.ndarray) -> None:
        """
        Args:

            power: The received power in Watts for each antenna stream.
        """

        # Initialize the base class
        Artifact.__init__(self)

        # Initialize class members
        self.__power = power

    @property
    def power(self) -> np.ndarray:
        """The received power in Watts for each antenna stream."""

        return self.__power

    def __str__(self) -> str:
        power_db = 10 * np.log10(np.sum(self.__power))
        return f"{power_db:.2} dB"

    def to_scalar(self) -> float:
        return float(np.sum(self.__power))


class ReceivedPowerEvaluation(Evaluation):
    """The evaluation of a received power evaluation.

    Generated by the :meth:`evaluate<ReceivedPowerEvaluator.evaluate>` of :class:`ReceivedPowerEvaluator`.
    """

    __power: np.ndarray

    def __init__(self, power: np.ndarray) -> None:
        """
        Args:

            power: The received power in Watts for each antenna stream.
        """

        # Initialize the base class
        Evaluation.__init__(self)

        # Initialize class members
        self.__power = power

    def artifact(self) -> ReceivePowerArtifact:
        return ReceivePowerArtifact(self.__power)

    @property
    def title(self) -> str:
        return "Received Power"

    def _plot(self, axes: VAT) -> None:
        ax: plt.Axes = axes.flat[0]
        ax.stem(self.__power)


class ReceivedPowerEvaluator(Evaluator):
    """Measure the signal power received by devcies or receivers."""

    __target: Receiver

    def __init__(self, target: Receiver, plot_scale: str = "log") -> None:
        """

        Args:

            target (Receiver):
                The device or receiver to measure the received power of.

            plot_scale (str):
                The scale of the plot. Can be ``'linear'`` or ``'log'``.
        """

        # Initialize the base class
        Evaluator.__init__(self)

        # Initialize class members
        self.__target = target
        self.plot_scale = plot_scale

    @property
    def target(self) -> Receiver:
        """The device or receiver to measure the received power of."""

        return self.__target

    def evaluate(self) -> ReceivedPowerEvaluation:
        if self.target.reception is None:
            raise RuntimeError("The target has no reception to evaluate")

        power = self.target.reception.signal.power
        return ReceivedPowerEvaluation(power)

    @property
    def abbreviation(self) -> str:
        return "RxPwr"

    @property
    def title(self) -> str:
        return "Received Power"

    def generate_result(
        self, grid: Sequence[GridDimension], artifacts: np.ndarray
    ) -> ReceivedPowerResult:
        if self.target.device is None:
            raise RuntimeError("The target has no device to evaluate")

        average_powers = np.zeros(
            (*artifacts.shape, self.target.device.num_receive_antennas), dtype=np.float_
        )
        for grid_index, artifacts in np.ndenumerate(artifacts):
            for artifact in artifacts:
                average_powers[grid_index] += artifact.power

            num_artifacts = len(artifacts)
            if num_artifacts > 0:
                average_powers[grid_index] /= len(artifacts)

        return ReceivedPowerResult(average_powers, grid, self)

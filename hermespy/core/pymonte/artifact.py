# -*- coding: utf-8 -*-

from abc import ABC, abstractmethod
from typing import Generic, Sequence, TypeVar, SupportsFloat

import numpy as np

__author__ = "Jan Adler"
__copyright__ = "Copyright 2025, Barkhausen Institut gGmbH"
__credits__ = ["Jan Adler"]
__license__ = "AGPLv3"
__version__ = "1.5.0"
__maintainer__ = "Jan Adler"
__email__ = "jan.adler@barkhauseninstitut.org"
__status__ = "Prototype"


FAT = TypeVar("FAT", bound=SupportsFloat)
"""Type of floating point Monte Carlo evaluation artifact."""


AT = TypeVar("AT", bound="Artifact")
"""Type of Monte Carlo evaluation artifact."""


class Artifact(ABC):
    """Result of an investigated object evaluation.

    Generated by :class:`.Evaluator` instances operating on investigated object states.
    In other words, :meth:`Evaluator.evaluate<hermespy.core.monte_carlo.Evaluator.evaluate>` is expected to return an instance derived of this base class.

    Artifacts may, in general represent any sort of object.
    However, it is encouraged to provide a scalar floating-point representation for data visualization by implementing
    the :meth:`.to_scalar` method.
    """

    @abstractmethod
    def __str__(self) -> str:
        """String representation of this artifact.

        Will be used to visualize the artifact's content in console outputs.

        Returns: String representation.
        """
        ...  # pragma: no cover

    @abstractmethod
    def to_scalar(self) -> float | None:
        """Scalar representation of this artifact's content.

        Used to evaluate premature stopping criteria for the underlying evaluation.

        Returns:
            Scalar floating-point representation.
            :py:obj:`None` if a conversion to scalar is impossible.
        """
        ...  # pragma: no cover


class ArtifactTemplate(Generic[FAT], Artifact):
    """Scalar numerical result of an investigated object evaluation.

    Implements the common case of an :class:`.Artifact` representing a scalar numerical value.
    """

    __artifact: FAT  # Artifact

    def __init__(self, artifact: FAT) -> None:
        """
        Args:

            artifact: Artifact value.
        """

        self.__artifact = artifact

    @property
    def artifact(self) -> FAT:
        """Evaluation artifact.

        Provides direct access to the represented artifact.

        Returns: Copy of the artifact.
        """

        return self.__artifact

    def __str__(self) -> str:
        return f"{self.to_scalar():.3f}"

    def to_scalar(self) -> float:
        return float(self.artifact)


class MonteCarloSample:
    """Single sample of a Monte Carlo simulation."""

    __sample_index: int  # Index of the sample
    # Grid section from which the sample was generated
    __grid_section: tuple[int, ...]
    __artifacts: Sequence[Artifact]  # Artifacts of evaluation

    def __init__(
        self, grid_section: tuple[int, ...], sample_index: int, artifacts: Sequence[Artifact]
    ) -> None:
        """
        Args:

            grid_section:
                Grid section from which the sample was generated.

            sample_index:
                Index of the sample.
                In other words this object represents the `sample_index`th sample of the selected `grid_section`.

            artifacts:
                Artifacts of evaluation
        """

        self.__grid_section = grid_section
        self.__sample_index = sample_index
        self.__artifacts = artifacts

    @property
    def grid_section(self) -> tuple[int, ...]:
        """Grid section from which this sample was generated."""

        return self.__grid_section

    @property
    def sample_index(self) -> int:
        """Index of the sample this object represents."""

        return self.__sample_index

    @property
    def artifacts(self) -> Sequence[Artifact]:
        """Artifacts resulting from the sample's evaluations."""

        return self.__artifacts

    @property
    def num_artifacts(self) -> int:
        """Number of contained artifact objects."""

        return len(self.__artifacts)

    @property
    def artifact_scalars(self) -> np.ndarray:
        """Collect scalar artifact representations.

        Returns: Vector of scalar artifact representations.
        """

        return np.array([artifact.to_scalar() for artifact in self.artifacts], dtype=float)

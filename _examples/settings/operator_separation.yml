# This simulation configuration demonstrates the HermesPy concept of operator separation.
#
# Operator separation allows for the performance comparison of two communication waveforms
# over identical channels, hardware models and additional noises.

!<Simulation>

# Physical device models within the simulated scenario
Devices:

   # Representation of a single (virtual) device
  - &device_alpha !<SimulatedDevice>

    carrier_frequency: 865e6      # Center frequency of Rf-band emitted signal
    operator_separation: True     # Enable separation of operator streams at transmit


# Channel models between devices
Channels:

  # Rayleigh fading between transmitter n = 0 and receiver m = 1
  - !<MultipathFading_0_0>
    delays: [ 0 ]           # Delay of the channel in seconds
    power_profile: [ 0 ]    # Channel gain in dB
    rice_factors: [ .inf ]


# Operators transmitting or receiving signals over the devices
Operators:

  # First modem operating the device alpha
  - &modem_alpha !<Modem>

    device: *device_alpha          # Device the modem is operating on

    Waveform: !<ChirpFsk>         # Configuration of the waveform emitted by this transmitter

      chirp_bandwidth: 500e3      # Bandwidth of each dedicated chirp in Hz
      chirp_duration: .512e-3     # Duration each dedicated chirp in s
      freq_difference: 1953.125   # Frequency offset between each modulated data symbol
      num_data_chirps: 20         # Number of chirps generated per data frame
      modulation_order: 256       # Modulation order, in other words 16 bit per data chirp

      guard_interval: 0.          # Pause between frame transmissions in seconds

  # Second modem operating the device alpha
  - &modem_beta !<Modem>

    device: *device_alpha          # Device the modem is operating on

    # Bit encoding configuration before mapping to modulation symbols
    Encoding:

      # Repetition encoding, repeating bit sections for redundancy
      - !<Repetition>

        bit_block_size: 16        # Block size
        repetitions: 3            # Number of times the bits within the block get repeated

    Waveform: !<ChirpFsk>         # Configuration of the waveform emitted by this transmitter

      chirp_bandwidth: 500e3      # Bandwidth of each dedicated chirp in Hz
      chirp_duration: .512e-3     # Duration each dedicated chirp in s
      freq_difference: 1953.125   # Frequency offset between each modulated data symbol
      num_data_chirps: 20         # Number of chirps generated per data frame
      modulation_order: 256       # Modulation order, in other words 16 bit per data chirp

      guard_interval: 0.          # Pause between frame transmissions in seconds


# Performance indication evaluation configuration
Evaluators:

  # Evaluate the bit errors of `modem_alpha` communicating over `device_alpha`
  - !<BitErrorEvaluator>

    transmitting_modem: *modem_alpha
    receiving_modem: *modem_alpha
    confidence: .9
    tolerance: .01
    plot_scale: log

  # Evaluate the bit errors of `modem_beta` communicating over `device_alpha`
  - !<BitErrorEvaluator>

    transmitting_modem: *modem_beta
    receiving_modem: *modem_beta
    confidence: .9
    tolerance: .01
    plot_scale: log


# Simulation parameters
num_samples: 1000                  # Number of samples per simulation grid section
min_num_samples: 50                # Minimum number of samples per simulation grid section before premature stopping
snr_type: EBN0                     # SNR is defined as the ratio between bit energy and noise power
plot_results: True                 # Visualize the evaluations after the simulation has finished


# Scenario parameters over which the Monte-Carlo simulation sweeps
Dimensions:

  snr: [10, 9, ..., -2] dB
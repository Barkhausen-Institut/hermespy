{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementing Precodings\n",
    "========================\n",
    "\n",
    "[Symbol Precoders](../api/precoding.symbol_precoding.rst#hermespy.precoding.symbol_precoding.SymbolPrecoder) are Hermes' abstraction for operations on time-domain series of complex numbers representing communication symbols.\n",
    "Within the signal processing chain for communication, modeled by the [Modem](../api/modem.rst) module, [Symbols](../api/modem.symbols.rst) are considered in between the mapping of bit streams to symbols and their modulation to base-band signals during transmission, and, inversely, in between the demodulation of base-band signals to symbols and their following unmapping to bit streams.\n",
    "\n",
    "At this stage, users may configure custom operations on the symbol series for any coherent modulation scheme.\n",
    "This tutorial will demonstrate the programming interface by implementing a symbol precoding which only reverses the modulated symbols in time-domain.\n",
    "We don't expect any performance gain or loss from this operation, the only purpose of this exercise is to get new users and developers accustomed to the specific interface.\n",
    "\n",
    "Let's jump right into it and implement the prosed precoding as a class titled *SymbolFlipper*, which inherits from the base [Symbol Precoder](../api/precoding.symbol_precoding.rst#hermespy.precoding.symbol_precoding.SymbolPrecoder), common to all symbol precoding routines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "from hermespy.modem import StatedSymbols\n",
    "from hermespy.precoding import SymbolPrecoder\n",
    "\n",
    "\n",
    "class SymbolFlipper(SymbolPrecoder):\n",
    "    \n",
    "    def encode(self, symbols: StatedSymbols) -> StatedSymbols:\n",
    "        \n",
    "        encoded_symbols = symbols.copy()\n",
    "        encoded_symbols.raw = np.flip(encoded_symbols.raw, axis=1)\n",
    "        \n",
    "        return encoded_symbols\n",
    "        \n",
    "    def decode(self, symbols: StatedSymbols) -> StatedSymbols:\n",
    "        \n",
    "        decoded_symbols = symbols.copy()\n",
    "        decoded_symbols.raw = np.flip(decoded_symbols.raw, axis=1)\n",
    "        decoded_symbols.states = np.flip(decoded_symbols.states, axis=2)\n",
    "        \n",
    "        return decoded_symbols\n",
    "    \n",
    "    @property\n",
    "    def num_input_streams(self) -> int:\n",
    "        \n",
    "        return self.required_num_input_streams\n",
    "    \n",
    "    @property\n",
    "    def num_output_streams(self) -> int:\n",
    "        \n",
    "        return self.required_num_output_streams"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Symbol Precoders](../api/precoding.symbol_precoding.rst#hermespy.precoding.symbol_precoding.SymbolPrecoder) expect their two abstract methods [encode](../api/precoding.symbol_precoding.rst#hermespy.precoding.symbol_precoding.SymbolPrecoder.encode) and [decode](../api/precoding.symbol_precoding.rst#hermespy.precoding.symbol_precoding.SymbolPrecoder.decode) to be defined.\n",
    "As their names already hint, the encode routine will be called during data transmission and perform an operation on an incoming stream of [StadedSymbols](../api/modem.symbols.rst#hermespy.modem.symbols.StatedSymbols), the decoding routine will be called during data reception and is expected to reverse the effects of its encoding counterpart.\n",
    "Additionally, some precodings might alter the number of antenna streams during their coding operations, so two additional properties [num_input_streams](../api/precoding.precoding.rst#hermespy.precoding.precoding.Precoder.num_input_streams) and [num_output_streams](../api/precoding.precoding.rst#hermespy.precoding.precoding.Precoder.num_output_streams) must be specified.\n",
    "\n",
    "[StadedSymbols](../api/modem.symbols.rst#hermespy.modem.symbols.StatedSymbols) are an extension of [Symbols](../api/modem.symbols.rst#hermespy.modem.symbols.StatedSymbols) and carry [ChannelStateInformation](../api/core.channel_state_information.rst) as additional information next to the raw symbol stream.\n",
    "This is required since some symbol precodings might rely on a channel estimate for effective precoding.\n",
    "Both the raw symbol stream and channel state information are essentially numpy arrays of specific dimensions.\n",
    "The raw symbol array has three dimensions, representing antenna streams, words and symbols, respectively, while the channel state information has four dimensions, representing output antennas, input antennas, words and symbols, respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">──────────────────────────────────── </span>Simulation Campaign<span style=\"color: #00ff00; text-decoration-color: #00ff00\"> ────────────────────────────────────</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[92m──────────────────────────────────── \u001b[0mSimulation Campaign\u001b[92m ────────────────────────────────────\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[10:37:32] </span>Launched simulation campaign with <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span> dedicated actors          <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1672\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1672</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[10:37:32]\u001b[0m\u001b[2;36m \u001b[0mLaunched simulation campaign with \u001b[1;36m24\u001b[0m dedicated actors          \u001b]8;id=889916;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=2131;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1672\u001b\\\u001b[2m1672\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>Generating a maximum of <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1100</span> = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">100</span> x <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11</span> samples inspected by <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1692\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1692</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>evaluators                                                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>                                                               <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m          \u001b[0m\u001b[2;36m \u001b[0mGenerating a maximum of \u001b[1;36m1100\u001b[0m = \u001b[1;36m100\u001b[0m x \u001b[1;36m11\u001b[0m samples inspected by \u001b[1;36m1\u001b[0m \u001b]8;id=60450;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=598343;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1692\u001b\\\u001b[2m1692\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m           \u001b[0mevaluators                                                     \u001b[2m                   \u001b[0m\n",
       "\u001b[2;36m           \u001b[0m                                                               \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-style: italic\">Simulation Grid                                                              </span>\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Dimension </span>┃<span style=\"font-weight: bold\"> Sections                                                      </span>┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> snr       </span>│<span style=\"color: #008000; text-decoration-color: #008000\"> 1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00  </span>│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[3mSimulation Grid                                                              \u001b[0m\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mDimension\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mSections                                                     \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36msnr      \u001b[0m\u001b[36m \u001b[0m│\u001b[32m \u001b[0m\u001b[32m1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00 \u001b[0m\u001b[32m \u001b[0m│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3df2834c1c9d4476accb158fa27cf424",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[10:37:45] </span>Simulation finished after <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">12.45</span> seconds                        <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1832\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1832</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[10:37:45]\u001b[0m\u001b[2;36m \u001b[0mSimulation finished after \u001b[1;36m12.45\u001b[0m seconds                        \u001b]8;id=481700;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=248209;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1832\u001b\\\u001b[2m1832\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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x8dERESYYcOGJVpmjDEdOnRIdKx2796d7O9BcHBwqj83d3d3c+zYsURZJJmwsDATEBCQ4u/y3d/FggULmsjISLN169ZE+f38/IwxxnTs2DHJ71S7du0SlmXLls2cP3/erFq1yvLXKYPx70FHCMhgfn5++vXXXyVJRYoUSfifd1hYmNatW5ehzxUREaGGDRsmWX63o/RPc+bMUXx8fJLlkZGRCVMid73yyiu6cOGCli1blrAsNjZWU6ZM0fLly1WrVq1E5zutWbMm2edMSf369ZOsP3/+/CTTJ5GRkQn/zpUrl3LmzKn9+/fL1dVVlSpV0t9//53q87Ro0UI3btzQjh07EnXODh8+rLCwML344ouJ9jElTZs2VWhoaKJl4eHhCf9eu3atpk+frlatWiVMkVWoUEEVKlTQ5MmTE9aLjo5O+Lerq6vy5s2rW7du6dSpU6pcufI9c6TVP39uefPmlZubm7799lu1bt36vrZXp04deXh4aNKkSYmmHefMmaNPP/1Ur776qhYsWJCwPCwsLFEHNCYmRgcPHtTDDz98X88PZCYKISCDHTx4MNHJ0suWLdORI0c0bdo0bdq0KdWTiNMrLi5OX3/9dZrW/fd5JHedO3cuSSYfHx/99ttvid70JOnkyZMJ30/LtlMSGBioYcOGyc3NTU888YSGDRumfPnyJSoUJKlUqVIaOXKkXn/99STTU2n5mIEyZcoob968KU4xFi5cOE15v/nmm1RPlr569aq+/vprtWzZMqEQatWqlWJiYrR27dqE9e6er+Tn56fSpUvL3d090TYyyquvvqphw4bpqaeeSnQ+VXKFcFrcPd6nTp1KtDwmJkZ//vlnkt+Hu+eg/dP169fTdC4UkNUohIBMZozR7t279dZbb6lMmTI6ceKEJTlSuhIsIz5zKL3buHLlSkIBt337dv3yyy/66quv1L9/f02cOFHSnY7Jjh07lD9/fo0ePVq//PKLwsPDVaJECS1cuFCurve+1sPV1VUhISFq27Ztst9PyzlYabV8+XItWLBAvr6+Onr0qFq2bKmvv/46UYEzdOhQffzxx5o3b54++OADXbt2TfHx8Zo0adI998cYIxcXlyTL3dzcEn393HPPacOGDfrmm2/k5+enCxcuKCYmRp06dUrx55DRUvr4huTyA1ajEAKywN3/+efOnTvFdf7dfbHSX3/9pSeffFIuLi6JcpUvXz7h+xlp8+bN2rNnj4YOHapZs2bp9u3bqlixosqVK6f27dvriy++SFi3Tp06SR6f0s/ujz/+UJ06dbRv375E00WZYf369YqKilKrVq0kSeXKldOoUaMSrdO8eXPt2rUryWc/5c2b955Ti9evX092aunf3ZhmzZopMjJS9evXT9Rh69SpU5LHpvV37u7xLleuXKLuX7Zs2VS6dGnt3LkzTdsBbBGXzwOZzN3dXfXq1VNUVFTC1FJy7p5zklGXdT+IzZs3q1ixYglv6tKdzkPfvn0VFhamvXv3Zvhzjh49WgULFlS3bt0k/X9X4d9dhP79+yd57N2f3b+ny1auXCl3d3d98MEHSR7j5uaW5k/xToubN29q27Ztatmypd544w1FRUVp/fr1idaJi4tLsj/NmzdXyZIl77n9P/74Q+XLl1fBggUTlj355JN69tlnkzyHMSZRp8jHx0eNGzdOss3w8PA0/b7t3LlTUVFR6tevX6LlXbp0Ud68eROdLwbYGzpCQAZr0KBBQuekcOHCatOmjcqWLatRo0YluaT9n+6eV/TJJ59o+fLliomJ0caNG1P84EPpTpGV0nTHunXrUn1sambPnq0ePXpowYIFqlKlik6fPq3mzZvrueeeU//+/ZP9lOUHtXXrVgUFBemdd97R9OnT9csvv+j333/XuHHjVKJECYWGhqpZs2bKly9fksfe/dlNmTJF27ZtU1xcnFasWKFvvvlGM2fO1NChQ/XUU09p+/btiomJUZkyZdSiRQv1799fa9asuWe25s2bJ7vPO3bs0KVLlxK+XrFihZYsWSI/Pz9t27YtySeEb9q0Sf7+/po/f77279+vihUrqm3btqletn7X/Pnz9c4772jbtm2aN2+eChcurJ49e+r48ePy9vZOWO+rr77SgAEDtHXrVi1dulSFCxdW79699fvvv8vX1zfJz61OnTp6++23df78eQUHB+vgwYNJnvvKlSsaNWqUhg8frq1bt2rDhg0qV66c/Pz8dPDgwVQ/GgKwB5ZfusZgOMJI7vL527dvmx9//NH06NEjyfr/vnxeknn//ffN33//bWJjY+95KX1ql8//87F3c1WpUiXJNnbv3m2CgoKS3X6hQoXMvHnzzKVLl0xkZKQ5evRoosu5pf+/zHvAgAFp/jkFBwebjRs3Jvu99u3bJ7psvHz58mb7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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from hermespy.simulation import Simulation\n",
    "from hermespy.modem import BitErrorEvaluator, DuplexModem, ElementType, FrameElement, FrameResource, FrameSymbolSection, OFDMWaveform\n",
    "\n",
    "# Create a new Monte Carlo simulation\n",
    "simulation = Simulation()\n",
    "\n",
    "# Add a single device, operated by a communication modem\n",
    "operator = DuplexModem()\n",
    "operator.device = simulation.new_device()\n",
    "\n",
    "# Configure an OFDM waveform with a frame consisting of a single symbol section\n",
    "operator.waveform_generator = OFDMWaveform(resources=[FrameResource(elements=[FrameElement(ElementType.DATA, 1200)])],\n",
    "                                           structure=[FrameSymbolSection(pattern=[0])])\n",
    "\n",
    "# Configure our newly implemented symbol precoding\n",
    "operator.precoding[0] = SymbolFlipper()\n",
    "\n",
    "# Configure a parameter sweep over the receiver SNR, effectively simulating an AWGN channel\n",
    "simulation.new_dimension('snr', np.linspace(1, 20, 11, endpoint=True))\n",
    "\n",
    "# Evaluate the BER\n",
    "simulation.add_evaluator(BitErrorEvaluator(operator, operator))\n",
    "\n",
    "# Run the simulation and plot the results\n",
    "result = simulation.run()\n",
    "result.plot()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To hilight that the implemented precoder has no effect on the communication performance, we can deactivate it and re-run the simulation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">──────────────────────────────────── </span>Simulation Campaign<span style=\"color: #00ff00; text-decoration-color: #00ff00\"> ────────────────────────────────────</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[92m──────────────────────────────────── \u001b[0mSimulation Campaign\u001b[92m ────────────────────────────────────\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[10:42:34] </span>Launched simulation campaign with <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span> dedicated actors          <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1672\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1672</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[10:42:34]\u001b[0m\u001b[2;36m \u001b[0mLaunched simulation campaign with \u001b[1;36m24\u001b[0m dedicated actors          \u001b]8;id=783763;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=138808;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1672\u001b\\\u001b[2m1672\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>Generating a maximum of <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1100</span> = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">100</span> x <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11</span> samples inspected by <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1692\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1692</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>evaluators                                                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>                                                               <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m          \u001b[0m\u001b[2;36m \u001b[0mGenerating a maximum of \u001b[1;36m1100\u001b[0m = \u001b[1;36m100\u001b[0m x \u001b[1;36m11\u001b[0m samples inspected by \u001b[1;36m1\u001b[0m \u001b]8;id=779913;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=163217;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1692\u001b\\\u001b[2m1692\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m           \u001b[0mevaluators                                                     \u001b[2m                   \u001b[0m\n",
       "\u001b[2;36m           \u001b[0m                                                               \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-style: italic\">Simulation Grid                                                              </span>\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Dimension </span>┃<span style=\"font-weight: bold\"> Sections                                                      </span>┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> snr       </span>│<span style=\"color: #008000; text-decoration-color: #008000\"> 1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00  </span>│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[3mSimulation Grid                                                              \u001b[0m\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mDimension\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mSections                                                     \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36msnr      \u001b[0m\u001b[36m \u001b[0m│\u001b[32m \u001b[0m\u001b[32m1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00 \u001b[0m\u001b[32m \u001b[0m│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d83ad50961064d81b6883225afc0577f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[10:42:46] </span>Simulation finished after <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11.24</span> seconds                        <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1832\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1832</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[10:42:46]\u001b[0m\u001b[2;36m \u001b[0mSimulation finished after \u001b[1;36m11.24\u001b[0m seconds                        \u001b]8;id=555355;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=858123;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1832\u001b\\\u001b[2m1832\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "operator.precoding.pop_precoder(0)\n",
    "\n",
    "result = simulation.run()\n",
    "result.plot()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.13 ('hermes')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "15324ae639e283979e39f32b76ef84dde816ef5cb4e81fc04e688fd3d2128060"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

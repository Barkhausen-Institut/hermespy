{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementing Channels\n",
    "=====================\n",
    "\n",
    "Wireless propagation channels are a core concept in the physical layer modeling of communication and sensing systems.\n",
    "In essence, they describe the behaviour of electromagnetic waves during their propagation between devices capable of transmitting electromagnetic radiation, receiving electromagnetic radation, or both.\n",
    "Within Hermes' API, channels are addressed by the [Channel Module](../api/channel.rst), with each implemented channel model inheriting from a common [Channel](../api/channel.channel.rst) base class.\n",
    "\n",
    "Adding a new channel model to the set of provided implementations is rather straightfoward.\n",
    "On the most fundamental level, each channel model class is expected to provide only an [impulse_response](../api/channel.channel.rst#hermespy.channel.channel.Channel.impulse_response) generation method.\n",
    "To demonstrate the API workflow, we will implement a basic channel only introducing a random phase shift to the propagated waveform, no time of flight delays or multiple antenna scenarios are considered:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "from hermespy.channel import Channel\n",
    "\n",
    "\n",
    "class PhaseShiftChannel(Channel):\n",
    "    \n",
    "    def impulse_response(self, num_samples: int, sampling_rate: float) -> np.ndarray:\n",
    "        \n",
    "        if self.receiver.num_antennas != 1 or self.transmitter.num_antennas != 1:\n",
    "            raise RuntimeError(\"Phase shift channel only supports SISO links\")\n",
    "        \n",
    "        phase_shift = np.exp(2j * self._rng.normal(0, np.pi))\n",
    "        impulse_response = phase_shift * np.ones((num_samples, 1, 1, 1), dtype=complex)\n",
    "        \n",
    "        return impulse_response"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "During simulation runtime, the impulse response routine will be called for each channel propagation over a single link configured to the newly created *PhaseShiftChannel*.\n",
    "It is expected to return a four-dimensional numpy tensor modeling a channel impulse sampled *num_samples* times at frequency *sampling_rate*.\n",
    "The first tensor dimension denotes the number of time-domain impulse response samples, the second and third dimension the number of transmit and receive antennas, and the fourth dimension the impulse response of each sample instance, respectively.\n",
    "\n",
    "We can now plug the newly generated channel model into a simulation scenario evaluating an [OFDM waveform](../api/modem.waveform_generator_ofdm.rst) with access to ideal channel state information, equalizing the channel by [zero forcing](../api/modem.waveform_generator_ofdm.rst#hermespy.modem.waveform_generator_ofdm.OFDMZeroForcingChannelEqualization):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">──────────────────────────────────── </span>Simulation Campaign<span style=\"color: #00ff00; text-decoration-color: #00ff00\"> ────────────────────────────────────</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[92m──────────────────────────────────── \u001b[0mSimulation Campaign\u001b[92m ────────────────────────────────────\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[12:54:01] </span>Launched simulation campaign with <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span> dedicated actors          <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1691\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1691</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[12:54:01]\u001b[0m\u001b[2;36m \u001b[0mLaunched simulation campaign with \u001b[1;36m24\u001b[0m dedicated actors          \u001b]8;id=223194;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=985054;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1691\u001b\\\u001b[2m1691\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>Generating a maximum of <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1100</span> = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">100</span> x <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11</span> samples inspected by <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1711\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1711</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>evaluators                                                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>                                                               <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m          \u001b[0m\u001b[2;36m \u001b[0mGenerating a maximum of \u001b[1;36m1100\u001b[0m = \u001b[1;36m100\u001b[0m x \u001b[1;36m11\u001b[0m samples inspected by \u001b[1;36m1\u001b[0m \u001b]8;id=248435;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=406691;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1711\u001b\\\u001b[2m1711\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m           \u001b[0mevaluators                                                     \u001b[2m                   \u001b[0m\n",
       "\u001b[2;36m           \u001b[0m                                                               \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-style: italic\">Simulation Grid                                                              </span>\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Dimension </span>┃<span style=\"font-weight: bold\"> Sections                                                      </span>┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> snr       </span>│<span style=\"color: #008000; text-decoration-color: #008000\"> 1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00  </span>│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[3mSimulation Grid                                                              \u001b[0m\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mDimension\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mSections                                                     \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36msnr      \u001b[0m\u001b[36m \u001b[0m│\u001b[32m \u001b[0m\u001b[32m1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00 \u001b[0m\u001b[32m \u001b[0m│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3c35af8598fa4f5aa0a9d62b68776bd1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[12:54:14] </span>Simulation finished after <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">12.54</span> seconds                        <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1852\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1852</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[12:54:14]\u001b[0m\u001b[2;36m \u001b[0mSimulation finished after \u001b[1;36m12.54\u001b[0m seconds                        \u001b]8;id=832918;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=812454;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1852\u001b\\\u001b[2m1852\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from hermespy.simulation import Simulation\n",
    "from hermespy.modem import BitErrorEvaluator, DuplexModem, ElementType, FrameElement, FrameResource, FrameSymbolSection, OFDMIdealChannelEstimation, OFDMWaveform, OFDMZeroForcingChannelEqualization\n",
    "\n",
    "\n",
    "# Create a new Monte Carlo simulation\n",
    "simulation = Simulation()\n",
    "\n",
    "# Add a single device, operated by a communication modem\n",
    "operator = DuplexModem()\n",
    "operator.device = simulation.new_device()\n",
    "operator.reference = operator.device\n",
    "\n",
    "# Configure an OFDM waveform with a frame consisting of a single symbol section\n",
    "operator.waveform_generator = OFDMWaveform(resources=[FrameResource(elements=[FrameElement(ElementType.DATA, 1200)])],\n",
    "                                           structure=[FrameSymbolSection(pattern=[0])])\n",
    "\n",
    "# Add channel estimation and equalization routines\n",
    "operator.waveform_generator.channel_estimation = OFDMIdealChannelEstimation()\n",
    "operator.waveform_generator.channel_equalization = OFDMZeroForcingChannelEqualization()\n",
    "\n",
    "# Configure our newly implemented channel model\n",
    "simulation.scenario.set_channel(operator.device, operator.device, PhaseShiftChannel())\n",
    "\n",
    "# Configure a parameter sweep over the receiver SNR, effectively simulating an AWGN channel\n",
    "simulation.new_dimension('snr', np.linspace(1, 20, 11, endpoint=True))\n",
    "\n",
    "# Evaluate the BER\n",
    "simulation.add_evaluator(BitErrorEvaluator(operator, operator))\n",
    "\n",
    "# Run the simulation and plot the results\n",
    "result = simulation.run()\n",
    "result.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can hilight the channel effect by disabling the zero-forcing channel equalization routine for the configured OFDM waveform.\n",
    "\n",
    "In this case, the communication bit error rate should roughly approximate $\\tfrac{1}{2}$, indicating that no information is exchanged and the bits are esentially random at the receiver."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">──────────────────────────────────── </span>Simulation Campaign<span style=\"color: #00ff00; text-decoration-color: #00ff00\"> ────────────────────────────────────</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[92m──────────────────────────────────── \u001b[0mSimulation Campaign\u001b[92m ────────────────────────────────────\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>Launched simulation campaign with <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span> dedicated actors          <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1691\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1691</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m          \u001b[0m\u001b[2;36m \u001b[0mLaunched simulation campaign with \u001b[1;36m24\u001b[0m dedicated actors          \u001b]8;id=402118;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=820907;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1691\u001b\\\u001b[2m1691\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>Generating a maximum of <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1100</span> = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">100</span> x <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11</span> samples inspected by <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1711\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1711</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>evaluators                                                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>                                                               <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m          \u001b[0m\u001b[2;36m \u001b[0mGenerating a maximum of \u001b[1;36m1100\u001b[0m = \u001b[1;36m100\u001b[0m x \u001b[1;36m11\u001b[0m samples inspected by \u001b[1;36m1\u001b[0m \u001b]8;id=303555;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=726922;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1711\u001b\\\u001b[2m1711\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m           \u001b[0mevaluators                                                     \u001b[2m                   \u001b[0m\n",
       "\u001b[2;36m           \u001b[0m                                                               \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-style: italic\">Simulation Grid                                                              </span>\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Dimension </span>┃<span style=\"font-weight: bold\"> Sections                                                      </span>┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> snr       </span>│<span style=\"color: #008000; text-decoration-color: #008000\"> 1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00  </span>│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[3mSimulation Grid                                                              \u001b[0m\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mDimension\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mSections                                                     \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36msnr      \u001b[0m\u001b[36m \u001b[0m│\u001b[32m \u001b[0m\u001b[32m1.00 2.90 4.80 6.70 8.60 10.50 12.40 14.30 16.20 18.10 20.00 \u001b[0m\u001b[32m \u001b[0m│\n",
       "└───────────┴───────────────────────────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "adc1a18eedbd41f4bfdf04cd34ef5414",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fba76c5ad743482887aa6ed75d86e615",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[12:54:27] </span>Simulation finished after <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">12.96</span> seconds                        <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1852\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1852</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[12:54:27]\u001b[0m\u001b[2;36m \u001b[0mSimulation finished after \u001b[1;36m12.96\u001b[0m seconds                        \u001b]8;id=663882;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=374881;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1852\u001b\\\u001b[2m1852\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from hermespy.modem import OFDMChannelEqualization\n",
    "\n",
    "# Disable channel equalization by replacing the ZF routine with the default stub\n",
    "operator.waveform_generator.channel_equalization = OFDMChannelEqualization()\n",
    "\n",
    "# Run the simulation and plot the results\n",
    "result = simulation.run()\n",
    "result.plot()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.13 ('hermes')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "15324ae639e283979e39f32b76ef84dde816ef5cb4e81fc04e688fd3d2128060"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

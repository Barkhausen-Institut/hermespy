{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Implementing Evaluators\n",
    "=======================\n",
    "\n",
    "[Evaluators](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Evaluator) represent the process of estimating performance indicators within Hermes' API, both during simulation runtime and in custom use-cases.\n",
    "They are, arguably, one of the more complex concepts to grasp for library users not very accustomed to distributed computing.\n",
    "\n",
    "In order to demonstrate the programming workflow, we'll add an evaluator estimating the average signal power received at a wireless device.\n",
    "Such an tool could be useful to gain insight into the behaviour of beamformers in multipath environments, or simply as a debugging tool of channel models and waveforms.\n",
    "Let's get right into it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import List\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "from hermespy.core import Artifact, Device, Evaluation, EvaluationResult, Evaluator, Executable, GridDimension\n",
    "    \n",
    "\n",
    "class PowerArtifact(Artifact):\n",
    "    \n",
    "    power: float\n",
    "    \n",
    "    def __init__(self, power: float) -> None:\n",
    "        \n",
    "        self.power = power\n",
    "        \n",
    "    def __str__(self) -> str:\n",
    "        \n",
    "        return f\"{self.power:.2f}\"\n",
    "    \n",
    "    def to_scalar(self) -> float:\n",
    "        \n",
    "        return self.power\n",
    "    \n",
    "\n",
    "class PowerEvaluation(Evaluation):\n",
    "    \n",
    "    power: np.ndarray\n",
    "    \n",
    "    def __init__(self, device: Device) -> None:\n",
    "        \n",
    "        received_signal = device.received_signal\n",
    "        \n",
    "        if received_signal is None:\n",
    "            raise RuntimeError(\"Device has not received a signal yet\")\n",
    "        \n",
    "        self.power = received_signal.power\n",
    "        \n",
    "    def plot(self) -> None:\n",
    "        \n",
    "        with Executable.style_context():\n",
    "            \n",
    "            fig, axis = plt.subplots()\n",
    "            fig.suptitle('Received Signal Powers')\n",
    "            \n",
    "            axis.stem(np.arange(len(self.power)), self.power)\n",
    "            axis.set_xlabel('Antenna Index')\n",
    "            axis.set_ylabel('Power')\n",
    "            \n",
    "    def artifact(self) -> PowerArtifact:\n",
    "        \n",
    "        summed_power = np.sum(self.power, keepdims=False)\n",
    "        return PowerArtifact(summed_power)\n",
    "\n",
    "\n",
    "class PowerEvaluationResult(EvaluationResult):\n",
    "    \n",
    "    def __init__(self, grid: List[GridDimension], artifacts: np.ndarray) -> None:\n",
    "    \n",
    "        self.grid = grid\n",
    "        \n",
    "        self.artifacts = np.empty(artifacts.shape, dtype=float)\n",
    "        for section_coords in np.ndindex(artifacts.shape):\n",
    "            self.artifacts[section_coords] = np.mean([a.power for a in artifacts[section_coords]])\n",
    "        \n",
    "    def plot(self) -> plt.Figure:\n",
    "        \n",
    "        with Executable.style_context():\n",
    "            \n",
    "            fig = plt.figure()\n",
    "            fig.suptitle('Power Evaluation Result')\n",
    "            self._plot_multidim(self.grid, self.artifacts, 0, 'Average Power', 'linear', 'linear', fig)\n",
    "            \n",
    "            return fig\n",
    "        \n",
    "    def to_array(self) -> np.ndarray:\n",
    "        \n",
    "        return self.artifacts\n",
    "\n",
    "\n",
    "class PowerEstimator(Evaluator):\n",
    "    \n",
    "    def __init__(self, device: Device) -> None:\n",
    "        \n",
    "        self.__device = device\n",
    "        Evaluator.__init__(self)\n",
    "        \n",
    "    def evaluate(self) -> PowerEvaluation:\n",
    "        \n",
    "        return PowerEvaluation(self.__device)\n",
    "    \n",
    "    @property\n",
    "    def abbreviation(self) -> str:\n",
    "        \n",
    "        return \"Power\"\n",
    "    \n",
    "    @property\n",
    "    def title(self) -> str:\n",
    "        \n",
    "        return \"Received Power\"\n",
    "    \n",
    "    def generate_result(self, grid: List[GridDimension], artifacts: np.ndarray) -> PowerEvaluationResult:\n",
    "        \n",
    "        return PowerEvaluationResult(grid, artifacts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here's what you're probably thinking right now: [Artifacts](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Artifact), [Evaluations](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Evaluation), [EvaluationResults](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.EvaluationResult) and [Evaluators](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Evaluator), why do we need four interacting classes to investigate a single performance indicator?\n",
    "The answer is, this structure is required to enable efficient distributed execution of Monte Carlo simulations, while simulatenously offering an easily programmable interface for other use-cases such as software defined radio operation.\n",
    "\n",
    "The basis is the [Evaluator](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Evaluator), in our case the  *PowerEstimator*.\n",
    "Given a single scenario data drop, it generates an [Evaluation](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Evaluation) object representing the extracted performance indicator information.\n",
    "This information is then compressed to Artifacts [Artifacts](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Artifact) for each simulation grid sample and finally collected within the [generate_result](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Evaluator.generate_result) method of the [Evaluator](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Evaluator), creating an [EvaluationResult](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.EvaluationResult).\n",
    "\n",
    "During distributed simulations, the process of generating [Artifacts](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.Artifact) is executed multiple times in parallel, with only the resulting artifacts being sent to the simulation controller, in order to optimize the simulation data throughput between simulation controller and distributed simulation workers.\n",
    "Hermes is built around the [Ray](https://www.ray.io/), with optimizations like this Monte Carlo simulations become \"embarassingly parallel\" and, as a consequence, blazingly fast on multicore systems.\n",
    "\n",
    "We can now define the simulation scenario of a two-device $5 \\times 5$ MIMO simplex link transmitting an OFDM waveform over an ideal channel.\n",
    "Within a Monte Carlo simulation, we sweep the channel gain and observe the effect on the received signal power by our newly created Estimator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #00ff00; text-decoration-color: #00ff00\">──────────────────────────────────── </span>Simulation Campaign<span style=\"color: #00ff00; text-decoration-color: #00ff00\"> ────────────────────────────────────</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[92m──────────────────────────────────── \u001b[0mSimulation Campaign\u001b[92m ────────────────────────────────────\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[20:54:30] </span>Launched simulation campaign with <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">24</span> dedicated actors          <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1720\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1720</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[20:54:30]\u001b[0m\u001b[2;36m \u001b[0mLaunched simulation campaign with \u001b[1;36m24\u001b[0m dedicated actors          \u001b]8;id=770872;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=427327;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1720\u001b\\\u001b[2m1720\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>Generating a maximum of <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1100</span> = <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">100</span> x <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">11</span> samples inspected by <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1740\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1740</span></a>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>evaluators                                                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "<span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">           </span>                                                               <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">                   </span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m          \u001b[0m\u001b[2;36m \u001b[0mGenerating a maximum of \u001b[1;36m1100\u001b[0m = \u001b[1;36m100\u001b[0m x \u001b[1;36m11\u001b[0m samples inspected by \u001b[1;36m1\u001b[0m \u001b]8;id=842360;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=737865;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1740\u001b\\\u001b[2m1740\u001b[0m\u001b]8;;\u001b\\\n",
       "\u001b[2;36m           \u001b[0mevaluators                                                     \u001b[2m                   \u001b[0m\n",
       "\u001b[2;36m           \u001b[0m                                                               \u001b[2m                   \u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-style: italic\">Simulation Grid                                                        </span>\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Dimension </span>┃<span style=\"font-weight: bold\"> Sections                                                </span>┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│<span style=\"color: #008080; text-decoration-color: #008080\"> gain      </span>│<span style=\"color: #008000; text-decoration-color: #008000\"> 0.00 0.10 0.20 0.30 0.40 0.50 0.60 0.70 0.80 0.90 1.00  </span>│\n",
       "└───────────┴─────────────────────────────────────────────────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[3mSimulation Grid                                                        \u001b[0m\n",
       "┏━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mDimension\u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mSections                                               \u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n",
       "│\u001b[36m \u001b[0m\u001b[36mgain     \u001b[0m\u001b[36m \u001b[0m│\u001b[32m \u001b[0m\u001b[32m0.00 0.10 0.20 0.30 0.40 0.50 0.60 0.70 0.80 0.90 1.00 \u001b[0m\u001b[32m \u001b[0m│\n",
       "└───────────┴─────────────────────────────────────────────────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8c92ac5c651649f48c39087b6394d7bc",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f14064e177a3464f86c6bdfcce0192df",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Output()"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n"
      ],
      "text/plain": []
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"color: #7fbfbf; text-decoration-color: #7fbfbf\">[20:54:43] </span>Simulation finished after <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">13.14</span> seconds                        <a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">monte_carlo.py</span></a><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">:</span><a href=\"file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1881\"><span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">1881</span></a>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[2;36m[20:54:43]\u001b[0m\u001b[2;36m \u001b[0mSimulation finished after \u001b[1;36m13.14\u001b[0m seconds                        \u001b]8;id=960594;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py\u001b\\\u001b[2mmonte_carlo.py\u001b[0m\u001b]8;;\u001b\\\u001b[2m:\u001b[0m\u001b]8;id=377596;file://D:\\hermespy\\hermespy\\core\\monte_carlo.py#1881\u001b\\\u001b[2m1881\u001b[0m\u001b]8;;\u001b\\\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from hermespy.core import UniformArray, IdealAntenna\n",
    "from hermespy.modem import SimplexLink, ElementType, FrameElement, FrameResource, FrameSymbolSection, OFDMWaveform\n",
    "from hermespy.precoding import SpatialMultiplexing\n",
    "from hermespy.simulation import Simulation\n",
    "\n",
    "# Create a new Monte Carlo simulation\n",
    "simulation = Simulation()\n",
    "\n",
    "# Configure a simplex link between a transmitting and receiving device, interconnected by an ideal channel\n",
    "operator = SimplexLink(simulation.new_device(antennas=UniformArray(IdealAntenna, 1e-2, [5, 1, 1])),\n",
    "                       simulation.new_device(antennas=UniformArray(IdealAntenna, 1e-2, [5, 1, 1])))\n",
    "\n",
    "# Configure an OFDM waveform with a frame consisting of a single symbol section\n",
    "operator.waveform_generator = OFDMWaveform(resources=[FrameResource(elements=[FrameElement(ElementType.DATA, 1200)])],\n",
    "                                           structure=[FrameSymbolSection(pattern=[0])])\n",
    "operator.precoding[0] = SpatialMultiplexing()\n",
    "\n",
    "# Configure a sweep over the linking channel's gain\n",
    "simulation.new_dimension('gain',\n",
    "                         np.linspace(0, 1, 11, endpoint=True),\n",
    "                         simulation.scenario.channel(operator.transmitting_device, operator.receiving_device))\n",
    "\n",
    "# Configure our custom power evaluator\n",
    "power_estimator = PowerEstimator(operator.receiving_device)\n",
    "simulation.add_evaluator(power_estimator)\n",
    "\n",
    "# Run the simulation\n",
    "result = simulation.run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The simulation routine automatically distributes the workload to all detected CPU cores within the system (in this case $24$) and generates *PowerArtifact* objects in parallel.\n",
    "Once the simulation is finished, a single *PowerEvaluationResult* is generated and stored within a [MonteCarloResult](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.MonteCarloResult) returned by the simulation [run](../api/simulation.simulation.rst#hermespy.simulation.simulation.Simulation.run) method.\n",
    "\n",
    "Calling the result's [plot](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.MonteCarloResult.plot) method will then internally call the evaluation result's [plot](../api/core.monte_carlo.rst#hermespy.core.monte_carlo.EvaluationResult.plot), resulting in the following performance indicator visualization:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "result.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now while this renders the average power over a number of samples within a simulation, the [Hardware Loop](../api/hardware_loop.rst) has a feature representing performance indicator information in real time during data collection.\n",
    "\n",
    "This is internally realized by calling the plot funtion of evaluations generated by evaluators, before they are being compressed to artifacts. \n",
    "We can demonstrate the output in our current simulation scenario by generating a single drop and calling the evaluator:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Exception in thread 2022-12-08 23:27:15,626\tERROR worker.py:813 -- print_logs: <_MultiThreadedRendezvous of RPC that terminated with:\n",
      "\tstatus = StatusCode.UNKNOWN\n",
      "\tdetails = \"Stream removed\"\n",
      "\tdebug_error_string = \"UNKNOWN:Error received from peer ipv4:127.0.0.1:49322 {grpc_message:\"Stream removed\", grpc_status:2, created_time:\"2022-12-08T22:27:15.621707663+00:00\"}\"\n",
      ">\n",
      "ray_listen_error_messages:\n",
      "Traceback (most recent call last):\n",
      "  File \"C:\\Users\\Stealth\\AppData\\Local\\Programs\\Python\\Python3912\\lib\\threading.py\", line 980, in _bootstrap_inner\n",
      "2022-12-08 23:27:15,630\tERROR import_thread.py:76 -- ImportThread: <_MultiThreadedRendezvous of RPC that terminated with:\n",
      "\tstatus = StatusCode.UNKNOWN\n",
      "\tdetails = \"Stream removed\"\n",
      "\tdebug_error_string = \"UNKNOWN:Error received from peer ipv4:127.0.0.1:49322 {grpc_message:\"Stream removed\", grpc_status:2, created_time:\"2022-12-08T22:27:15.621687705+00:00\"}\"\n",
      ">\n",
      "    self.run()\n",
      "  File \"C:\\Users\\Stealth\\AppData\\Local\\Programs\\Python\\Python3912\\lib\\threading.py\", line 917, in run\n",
      "    self._target(*self._args, **self._kwargs)\n",
      "  File \"d:\\envs\\hermes\\lib\\site-packages\\ray\\_private\\worker.py\", line 1824, in listen_error_messages\n",
      "    _, error_data = worker.gcs_error_subscriber.poll()\n",
      "  File \"d:\\envs\\hermes\\lib\\site-packages\\ray\\_private\\gcs_pubsub.py\", line 317, in poll\n",
      "    self._poll_locked(timeout=timeout)\n",
      "  File \"d:\\envs\\hermes\\lib\\site-packages\\ray\\_private\\gcs_pubsub.py\", line 249, in _poll_locked\n",
      "    fut.result(timeout=1)\n",
      "  File \"d:\\envs\\hermes\\lib\\site-packages\\grpc\\_channel.py\", line 744, in result\n",
      "    raise self\n",
      "grpc._channel._MultiThreadedRendezvous: <_MultiThreadedRendezvous of RPC that terminated with:\n",
      "\tstatus = StatusCode.UNKNOWN\n",
      "\tdetails = \"Stream removed\"\n",
      "\tdebug_error_string = \"UNKNOWN:Error received from peer ipv4:127.0.0.1:49322 {grpc_message:\"Stream removed\", grpc_status:2, created_time:\"2022-12-08T22:27:15.621122805+00:00\"}\"\n",
      ">\n"
     ]
    }
   ],
   "source": [
    "_ = simulation.scenario.drop()\n",
    "\n",
    "power_estimator.evaluate().plot()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.9.13 ('hermes')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "15324ae639e283979e39f32b76ef84dde816ef5cb4e81fc04e688fd3d2128060"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

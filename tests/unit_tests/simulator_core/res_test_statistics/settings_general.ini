########################################################################################################################
#This file specifies the general simulation parameters, that control the simulation flow
########################################################################################################################

[RandomNumber]
########################################################################################################################
# Actual random number generator seeds will be obtained from a list of good seeds in "RandomNumberGeneratorSeeds.mat".
# If index is negative, then a random seed is used, based on the computer clock.

# Seed index for random number generator
# if seed < 0, then a clock-based random seed will be employed
seed = 11

# File containing all seeds (str)
seed_file = "RandomNumberGeneratorSeeds.mat"


[Drops]
########################################################################################################################
# The simulator will perform a number of simulation drops of 'duration' seconds.
# Up to 'max_num_drops' drops will be performed, but simulation may be stopped if a certain confidence interval is
# reached. However, at least 'min_num_drops' drops will be performed.

# duration of each drop (in seconds)
duration = .1

# minimum number of simulation drops
min_num_drops = 4

# maximum number of simulation drops
max_num_drops = 5

# desired confidence level (between 0 and 1)
confidence_level = 0.5

# desired relative confidence margin, i.e., if confidence interval is (lower, upper),
# then simulation is stopped when (upper-lower) < confidence_margin
# the confidence margin is calculated using the Bayesian approach from "scipy.stats.bayes_mvs"
# if confidence_margin == 0, then 'max_num_drops' drops are always performed
confidence_margin = .1

# target metric, i.e., confidence value will be calculated for this metric for stopping simulation
# allowed values: 'BER', 'BLER'
confidence_metric = BER

[NoiseLoop]
########################################################################################################################
# The simulator can run for different noise levels, as specified here

# definition of signal-to-noise ratio
# allowed values: "Eb/N0(dB)", "Eb/N0(dB) meas"
snr_type = Eb/N0(dB)

# simulator will run for all of the SNR values specified in this vector (in numpy format)
# e.g., snr_vector = [0,2,4,6,8]  or 'snr_vector = np.arange(0,10,2)'
snr_vector = np.arange(0,30)
#snr_vector = [40]

[Statistics]
########################################################################################################################
# parameters related to the generated statistics

# if true, then print results of every drop
verbose = True

# if true, then generate plots at the end of simulation
plot = True

# if true, then calculate theoretical BER/BLER for the given configuration (if available)
calc_theory = True

# if calc_spectrum_tx is true, then spectral analysis is done for the transmitted signal.
# a spectral analysis with 'spectrum_fft_size' following Welch's method is generated.
# if plot_stft_tx is true, then a short-time Fourier transform is done for the first frame of the transmitted signal.
calc_spectrum_tx = True
calc_stft_tx = True
spectrum_fft_size = 512
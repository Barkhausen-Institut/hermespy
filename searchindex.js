Search.setIndex({"alltitles": {"3GPP Cluster Delay Line Models": [[7, null]], "5G TDL": [[28, null]], "A/D Conversion": [[206, null]], "AWGN Model": [[203, null]], "AWGN Realization": [[204, null]], "Amplification": [[213, null]], "Analog Digital Converter": [[207, null]], "Animation": [[173, null]], "Antenna": [[175, null]], "Antenna Arrays": [[176, null]], "Antenna Calibration": [[83, null]], "Antenna Correlation": [[24, null]], "Antenna Descriptions": [[36, null]], "Antenna Port": [[177, null]], "Antennas": [[174, null]], "Audio Device": [[81, null]], "Audio Scenario": [[82, null]], "Automatic Gain Control": [[208, null]], "BCH Coding": [[69, null]], "Base Modem": [[112, null]], "Beamformer": [[1, null]], "Beamforming": [[4, null]], "Bit Error Rate": [[104, null]], "Bit Sources": [[100, null]], "Block Error Rate": [[105, null]], "C-FSK": [[135, null]], "Capon Beamformer": [[2, null]], "Channel": [[13, null]], "Channel Equalization": [[129, null]], "Channel Estimation": [[130, null]], "Channel Modeling": [[30, null]], "Channel Realization": [[14, null]], "Channel Sample": [[15, null]], "Channel State Information": [[37, null]], "Clipping Power Amplifier": [[214, null]], "Coding Pipeline": [[71, null]], "Coding Style": [[244, "coding-style"]], "Communication": [[110, null]], "Communication Evaluator": [[102, null]], "Communication Noise Level": [[197, null]], "Communication Precoding": [[121, null]], "Constant Gain": [[209, null]], "Conventional Beamformer": [[3, null]], "Coordinate System": [[67, null]], "Core": [[57, null]], "Correlation": [[136, null]], "Cost 259": [[21, null]], "Coupling": [[186, null]], "Custom Array": [[178, null]], "Custom Power Amplifier": [[215, null]], "Cyclic Redundancy Checks": [[72, null]], "DSP Reception": [[49, null]], "DSP Transmission": [[50, null]], "Delay Calibration": [[84, null]], "Delay Channels": [[18, null]], "Detection Probability Evaluator": [[163, null]], "Device Focus": [[184, null]], "Device Input": [[40, null]], "Device Model": [[39, null]], "Device Output": [[41, null], [227, null]], "Device Reception": [[42, null], [229, null]], "Device Transmission": [[43, null], [230, null]], "Devices": [[225, null]], "Dipole": [[179, null]], "Discrete Fourier Transform": [[122, null]], "Documentation": [[244, "documentation"]], "Drop": [[52, null]], "Duplex JCAS Operator": [[97, null]], "Duplex Modem": [[117, null]], "EBN0": [[198, null]], "ESN0": [[199, null]], "Error Correction": [[73, null]], "Error Vector Magnitude": [[106, null]], "Evaluators": [[53, null], [101, null], [190, null]], "Executable": [[54, null]], "Exponential": [[22, null]], "Extra Operators": [[60, null]], "FMCW": [[138, null], [167, null]], "For Developers": [[244, null]], "Frame Error Rate": [[107, null]], "Frame Generation": [[109, null]], "Gain Control Base": [[210, null]], "Gain Control Type": [[211, null]], "General Definitions": [[38, null]], "Getting Started": [[248, null]], "Grid Element": [[143, null]], "Guard Section": [[146, null]], "Hardaware Loop": [[86, null]], "Hardware Loop": [[88, null], [248, "hardware-loop"]], "Hardware Loop Plot": [[87, null]], "HermesPy": [[249, null]], "HermesPy API": [[0, null]], "HermesPy Architecture": [[248, "hermespy-architecture"]], "Hooks": [[56, null]], "Ideal Channel": [[29, null]], "Ideal Isotropic": [[180, null]], "Impedance Coupling": [[187, null]], "Implementing Beamformers": [[254, null]], "Implementing Channels": [[256, null]], "Implementing Communication Waveforms": [[262, null]], "Implementing Evaluators": [[258, null]], "Implementing FEC codings": [[259, null]], "Implementing Precodings": [[260, null]], "Indoor Factory": [[8, null]], "Indoor Office": [[9, null]], "Install Quadriga": [[250, "install-quadriga"]], "Install from PyPi": [[250, "install-from-pypi"]], "Install from Source": [[250, "install-from-source"]], "Installation": [[250, null]], "Interleaving": [[70, null]], "Isolation": [[192, null], [193, null]], "JCAS": [[96, null]], "Leakage Calibration": [[85, null]], "License": [[251, null]], "Linear": [[181, null]], "Link State": [[16, null]], "Logarithmics": [[58, null]], "Low Differential Parity Checks": [[74, null]], "Mapping": [[111, null]], "Matched Filtering": [[98, null]], "Math Tools": [[241, null]], "Matlab": [[252, null]], "Max": [[158, null]], "Maximal Ratio Combining": [[123, null]], "Mixing Operator": [[44, null]], "Multi Target": [[32, null]], "Multipath Fading": [[23, null]], "Multipath Fading Channel": [[25, null]], "Multipath Fading Realization": [[26, null]], "Multipath Fading Sample": [[27, null]], "Mutual Coupling": [[185, null]], "N0": [[201, null]], "No Phase Noise": [[220, null]], "Noise": [[200, null]], "Null Steering Beamformer": [[5, null]], "OCDM": [[150, null]], "OFDM": [[151, null]], "OFDM Radar": [[99, null]], "OFDM Synchronization": [[152, null]], "OFDM Waveform": [[153, null]], "OTFS": [[156, null]], "Operation Result": [[45, null]], "Operator": [[46, null]], "Optional Features": [[250, "id1"]], "Orthogonal": [[142, null]], "Oscillator Phase Noise": [[221, null]], "Patch": [[182, null]], "Perfect Coupling": [[188, null]], "Perfect Isolation": [[194, null]], "Phase Noise": [[219, null]], "Physical Device": [[89, null]], "Physical Device Dummy": [[90, null]], "Physical Scenario": [[92, null]], "Physical Scenario Dummy": [[91, null]], "Pilot Section": [[148, null]], "Pilot Symbol Sequence": [[131, null]], "Pipeline": [[61, null]], "Point Detection": [[159, null]], "Polar Coding": [[75, null]], "Power Amplifier": [[216, null]], "Precoding": [[62, null]], "Processed Device Input": [[47, null]], "Processed Input": [[226, null]], "Pulse Properties": [[138, "id1"], [139, "id1"], [140, "id1"], [141, "id1"]], "PyMonte": [[59, null]], "Quadriga": [[31, null]], "Quantizer Type": [[212, null]], "RSC Coding": [[78, null]], "Radar": [[169, null]], "Radar Channels": [[33, null]], "Radar Cube": [[157, null]], "Radar Detector": [[160, null]], "Radar Evaluator": [[164, null]], "Radar Point Cloud": [[161, null]], "Radar Reception": [[170, null]], "Radar Transmission": [[171, null]], "Radar Waveform": [[172, null]], "Radio-Frequency Chain": [[205, null]], "Raised Cosine": [[139, null]], "Random Delay Channel": [[19, null]], "Random Graph": [[63, null]], "Random Trigger": [[233, null]], "Rapp Power Amplifier": [[217, null]], "Receive Realization": [[228, null]], "Receiver": [[48, null]], "Receiver Operating Characteristics": [[261, null]], "Receiving Modem": [[118, null]], "Reception": [[113, null]], "Reception Frame": [[114, null]], "Recording Datasets": [[257, null]], "Rectangular": [[140, null]], "Reed-Solomon Coding": [[77, null]], "References": [[263, null]], "Reiver Operating Characteristic": [[165, null]], "Repetition Coding": [[76, null]], "Resampling Routines": [[242, null]], "Resource": [[144, null]], "Root Mean Square Error": [[166, null]], "Root Raised Cosine": [[141, null]], "Rural Macrocells": [[10, null]], "SNR": [[202, null]], "Saleh Power Amplifier": [[218, null]], "Sample Offset Trigger": [[234, null]], "Scenario Visualization": [[222, null]], "Scenario Visualizer": [[223, null]], "Schmidl Cox Pilot": [[154, null]], "Schmidl Cox Synchronization": [[155, null]], "Scrambling": [[79, null]], "Section": [[145, null]], "Selective Leakage": [[195, null]], "Sensing": [[168, null]], "Serialization": [[55, null]], "Signal": [[65, null]], "Simplex Link": [[119, null]], "Simulated Drop": [[189, null]], "Simulation": [[191, null], [231, null]], "Simulation Scenario": [[224, null]], "Simulations": [[248, "simulations"]], "Single Carrier": [[137, null]], "Single Carrier Decoding": [[124, null]], "Single Target": [[34, null]], "SionnaRT Channel": [[35, null]], "Space-Time Block Codes": [[125, null]], "Spatial Consistency": [[17, null]], "Spatial Delay Channel": [[20, null]], "Specific Isolation": [[196, null]], "State": [[66, null]], "Static CDL": [[6, null]], "Static Trigger": [[235, null]], "Symbol Precoding": [[126, null]], "Symbol Section": [[149, null]], "Symbols": [[127, null]], "Synchronization": [[132, null], [232, null]], "Threshold": [[162, null]], "Throughput": [[108, null]], "Tile Figures": [[243, null]], "Time Offset Trigger": [[236, null]], "Tools": [[240, null]], "Trajectory Types": [[173, "id1"]], "Transmission": [[115, null]], "Transmission Frame": [[116, null]], "Transmitter": [[51, null]], "Transmitting Modem": [[120, null]], "Trigger Model": [[237, null]], "Trigger Realization": [[238, null]], "Turbo Coding": [[80, null]], "Tutorials": [[264, null]], "Type Checking": [[244, "type-checking"]], "USRP Device": [[94, null]], "USRP System": [[93, null]], "Uniform Array": [[183, null]], "Unit Testing": [[244, "unit-testing"]], "Urban Macrocells": [[11, null]], "Urban Microcells": [[12, null]], "Using Audio Equipment": [[253, null]], "Using Beamformers": [[255, null]], "Visualization": [[68, null], [95, null]], "Waveform": [[147, null]], "Waveforms": [[128, null]], "Wireless Scenario": [[64, null]], "Zero-Forcing": [[133, null]]}, "docnames": ["api/api", "api/beamforming/beamformer", "api/beamforming/capon", "api/beamforming/conventional", "api/beamforming/index", "api/beamforming/nullsteeringbeamformer", "api/channel/cdl/cdl", "api/channel/cdl/cluster_delay_lines", "api/channel/cdl/indoor_factory", "api/channel/cdl/indoor_office", "api/channel/cdl/rural_macrocells", "api/channel/cdl/urban_macrocells", "api/channel/cdl/urban_microcells", "api/channel/channel.Channel", "api/channel/channel.ChannelRealization", "api/channel/channel.ChannelSample", "api/channel/channel.LinkState", "api/channel/consistent", "api/channel/delay/delay", "api/channel/delay/random", "api/channel/delay/spatial", "api/channel/fading/cost259", "api/channel/fading/exponential", "api/channel/fading/fading", "api/channel/fading/fading.AntennaCorrelation", "api/channel/fading/fading.MultipathFadingChannel", "api/channel/fading/fading.MultipathFadingRealization", "api/channel/fading/fading.MultipathFadingSample", "api/channel/fading/tdl", "api/channel/ideal", "api/channel/index", "api/channel/quadriga", "api/channel/radar/multi", "api/channel/radar/radar", "api/channel/radar/single", "api/channel/sionna-rt", "api/core/antennas", "api/core/channel", "api/core/definitions", "api/core/device.Device", "api/core/device.DeviceInput", "api/core/device.DeviceOutput", "api/core/device.DeviceReception", "api/core/device.DeviceTransmission", "api/core/device.MixingOperator", "api/core/device.OperationResult", "api/core/device.Operator", "api/core/device.ProcessedDeviceInput", "api/core/device.Receiver", "api/core/device.Reception", "api/core/device.Transmission", "api/core/device.Transmitter", "api/core/drop", "api/core/evaluators", "api/core/executable", "api/core/factory", "api/core/hooks", "api/core/index", "api/core/logarithmic", "api/core/monte_carlo", "api/core/operators", "api/core/pipeline", "api/core/precoding", "api/core/random_node", "api/core/scenario", "api/core/signal", "api/core/state", "api/core/transformation", "api/core/visualize", "api/fec/bch", "api/fec/block_interleaver", "api/fec/coding", "api/fec/crc", "api/fec/index", "api/fec/ldpc", "api/fec/polar", "api/fec/repetition", "api/fec/rs", "api/fec/rsc", "api/fec/scrambler", "api/fec/turbo", "api/hardware_loop/audio.device.AudioDevice", "api/hardware_loop/audio.scenario.AudioScenario", "api/hardware_loop/calibration.antenna", "api/hardware_loop/calibration.delay", "api/hardware_loop/calibration.leakage", "api/hardware_loop/hardware_loop.HardwareLoop", "api/hardware_loop/hardware_loop.HardwareLoopPlot", "api/hardware_loop/index", "api/hardware_loop/physical_device.PhysicalDevice", "api/hardware_loop/physical_device_dummy.PhysicalDeviceDummy", "api/hardware_loop/physical_device_dummy.PhysicalScenarioDummy", "api/hardware_loop/scenario.PhysicalScenario", "api/hardware_loop/uhd.system.UsrpSystem", "api/hardware_loop/uhd.usrp.UsrpDevice", "api/hardware_loop/visualizers", "api/jcas/index", "api/jcas/jcas", "api/jcas/matched_filtering", "api/jcas/ofdm_radar", "api/modem/bits_source", "api/modem/evaluators", "api/modem/evaluators.CommunicationEvaluator", "api/modem/evaluators._table", "api/modem/evaluators.ber", "api/modem/evaluators.bler", "api/modem/evaluators.evm", "api/modem/evaluators.fer", "api/modem/evaluators.throughput", "api/modem/frame_generator", "api/modem/index", "api/modem/mapping", "api/modem/modem.BaseModem", "api/modem/modem.CommunicationReception", "api/modem/modem.CommunicationReceptionFrame", "api/modem/modem.CommunicationTransmission", "api/modem/modem.CommunicationTransmissionFrame", "api/modem/modem.DuplexModem", "api/modem/modem.ReceivingModem", "api/modem/modem.SimplexLink", "api/modem/modem.TransmittingModem", "api/modem/precoding", "api/modem/precoding.dft", "api/modem/precoding.ratio_combining", "api/modem/precoding.single_carrier", "api/modem/precoding.space_time_block_coding", "api/modem/precoding.symbol_precoding.SymbolPrecoding", "api/modem/symbols", "api/modem/waveform", "api/modem/waveform.ChannelEqualization", "api/modem/waveform.ChannelEstimation", "api/modem/waveform.PilotSymbolSequence", "api/modem/waveform.Synchronization", "api/modem/waveform.ZeroForcingChannelEqualization", "api/modem/waveform._table", "api/modem/waveform.chirp_fsk", "api/modem/waveform.correlation_synchronization", "api/modem/waveform.single_carrier", "api/modem/waveform.single_carrier.FMCW", "api/modem/waveform.single_carrier.RaisedCosine", "api/modem/waveform.single_carrier.Rectangular", "api/modem/waveform.single_carrier.RootRaisedCosine", "api/modem/waveforms.orthogonal", "api/modem/waveforms.orthogonal.GridElement", "api/modem/waveforms.orthogonal.GridResource", "api/modem/waveforms.orthogonal.GridSection", "api/modem/waveforms.orthogonal.GuardSection", "api/modem/waveforms.orthogonal.OrthogonalWaveform", "api/modem/waveforms.orthogonal.PilotSection", "api/modem/waveforms.orthogonal.SymbolSection", "api/modem/waveforms.orthogonal.ocdm", "api/modem/waveforms.orthogonal.ofdm", "api/modem/waveforms.orthogonal.ofdm.OFDMSynchronization", "api/modem/waveforms.orthogonal.ofdm.OFDMWaveform", "api/modem/waveforms.orthogonal.ofdm.SchmidlCoxPilotSection", "api/modem/waveforms.orthogonal.ofdm.SchmidlCoxSynchronization", "api/modem/waveforms.orthogonal.otfs", "api/radar/cube.RadarCube", "api/radar/detection.MaxDetector", "api/radar/detection.PointDetection", "api/radar/detection.RadarDetector", "api/radar/detection.RadarPointCloud", "api/radar/detection.ThresholdDetector", "api/radar/evaluators.DetectionProbEvaluator", "api/radar/evaluators.RadarEvaluator", "api/radar/evaluators.ReceiverOperatingCharacteristic", "api/radar/evaluators.RootMeanSquareError", "api/radar/fmcw", "api/radar/index", "api/radar/radar.Radar", "api/radar/radar.RadarReception", "api/radar/radar.RadarTransmission", "api/radar/radar.RadarWaveform", "api/simulation/animation", "api/simulation/antennas", "api/simulation/antennas.SimulatedAntenna", "api/simulation/antennas.SimulatedAntennaArray", "api/simulation/antennas.SimulatedAntennaPort", "api/simulation/antennas.SimulatedCustomArray", "api/simulation/antennas.SimulatedDipole", "api/simulation/antennas.SimulatedIdealAntenna", "api/simulation/antennas.SimulatedLinearAntenna", "api/simulation/antennas.SimulatedPatchAntenna", "api/simulation/antennas.SimulatedUniformArray", "api/simulation/beamforming.DeviceFocus", "api/simulation/coupling", "api/simulation/coupling.coupling", "api/simulation/coupling.impedance", "api/simulation/coupling.perfect", "api/simulation/drop.SimulatedDrop", "api/simulation/evaluators", "api/simulation/index", "api/simulation/isolation", "api/simulation/isolation.isolation", "api/simulation/isolation.perfect", "api/simulation/isolation.selective", "api/simulation/isolation.specific", "api/simulation/modem.noise.CommunicationNoiseLevel", "api/simulation/modem.noise.EBN0", "api/simulation/modem.noise.ESN0", "api/simulation/noise", "api/simulation/noise.level.N0", "api/simulation/noise.level.SNR", "api/simulation/noise.model.AWGN", "api/simulation/noise.model.AWGNRealization", "api/simulation/rf_chain", "api/simulation/rf_chain.adc", "api/simulation/rf_chain.adc.AnalogDigitalConverter", "api/simulation/rf_chain.adc.AutomaticGainControl", "api/simulation/rf_chain.adc.Gain", "api/simulation/rf_chain.adc.GainControlBase", "api/simulation/rf_chain.adc.GainControlType", "api/simulation/rf_chain.adc.QuantizerType", "api/simulation/rf_chain.amplifier", "api/simulation/rf_chain.amplifier.ClippingPowerAmplifier", "api/simulation/rf_chain.amplifier.CustomPowerAmplifier", "api/simulation/rf_chain.amplifier.PowerAmplifier", "api/simulation/rf_chain.amplifier.RappPowerAmplifier", "api/simulation/rf_chain.amplifier.SalehPowerAmplifier", "api/simulation/rf_chain.phase_noise", "api/simulation/rf_chain.phase_noise.NoPhaseNoise", "api/simulation/rf_chain.phase_noise.OscillatorPhaseNoise", "api/simulation/scenario.ScenarioVisualization", "api/simulation/scenario.ScenarioVisualizer", "api/simulation/scenario.SimulationScenario", "api/simulation/simulated_device", "api/simulation/simulated_device.ProcessedSimulatedDeviceInput", "api/simulation/simulated_device.SimulatedDeviceOutput", "api/simulation/simulated_device.SimulatedDeviceReceiveRealization", "api/simulation/simulated_device.SimulatedDeviceReception", "api/simulation/simulated_device.SimulatedDeviceTransmission", "api/simulation/simulation.Simulation", "api/simulation/synchronization", "api/simulation/synchronization.RandomTrigger", "api/simulation/synchronization.SampleOffsetTrigger", "api/simulation/synchronization.StaticTrigger", "api/simulation/synchronization.TimeOffsetTrigger", "api/simulation/synchronization.TriggerModel", "api/simulation/synchronization.TriggerRealization", "api/simulation/synchronization._table", "api/tools/index", "api/tools/math", "api/tools/resampling", "api/tools/tile", "developer_hints", "flowcharts/device_rf_interaction", "flowcharts/simulated_physical_layer", "flowcharts/simulation_parallel_monte_carlo", "getting_started", "index", "installation", "license", "matlab", "notebooks/audio", "notebooks/beamforming_implementation", "notebooks/beamforming_usage", "notebooks/channel", "notebooks/datasets", "notebooks/evaluator", "notebooks/fec_coding", "notebooks/precoding", "notebooks/roc", "notebooks/waveform", "references", "tutorials"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9}, "filenames": ["api/api.rst", "api/beamforming/beamformer.rst", "api/beamforming/capon.rst", "api/beamforming/conventional.rst", "api/beamforming/index.rst", "api/beamforming/nullsteeringbeamformer.rst", "api/channel/cdl/cdl.rst", "api/channel/cdl/cluster_delay_lines.rst", "api/channel/cdl/indoor_factory.rst", "api/channel/cdl/indoor_office.rst", "api/channel/cdl/rural_macrocells.rst", "api/channel/cdl/urban_macrocells.rst", "api/channel/cdl/urban_microcells.rst", "api/channel/channel.Channel.rst", "api/channel/channel.ChannelRealization.rst", "api/channel/channel.ChannelSample.rst", "api/channel/channel.LinkState.rst", "api/channel/consistent.rst", "api/channel/delay/delay.rst", "api/channel/delay/random.rst", "api/channel/delay/spatial.rst", "api/channel/fading/cost259.rst", "api/channel/fading/exponential.rst", "api/channel/fading/fading.rst", "api/channel/fading/fading.AntennaCorrelation.rst", "api/channel/fading/fading.MultipathFadingChannel.rst", "api/channel/fading/fading.MultipathFadingRealization.rst", "api/channel/fading/fading.MultipathFadingSample.rst", "api/channel/fading/tdl.rst", "api/channel/ideal.rst", "api/channel/index.rst", "api/channel/quadriga.rst", "api/channel/radar/multi.rst", "api/channel/radar/radar.rst", "api/channel/radar/single.rst", "api/channel/sionna-rt.rst", "api/core/antennas.rst", "api/core/channel.rst", "api/core/definitions.rst", "api/core/device.Device.rst", "api/core/device.DeviceInput.rst", "api/core/device.DeviceOutput.rst", "api/core/device.DeviceReception.rst", "api/core/device.DeviceTransmission.rst", "api/core/device.MixingOperator.rst", "api/core/device.OperationResult.rst", "api/core/device.Operator.rst", "api/core/device.ProcessedDeviceInput.rst", "api/core/device.Receiver.rst", "api/core/device.Reception.rst", "api/core/device.Transmission.rst", "api/core/device.Transmitter.rst", "api/core/drop.rst", "api/core/evaluators.rst", "api/core/executable.rst", "api/core/factory.rst", "api/core/hooks.rst", "api/core/index.rst", "api/core/logarithmic.rst", "api/core/monte_carlo.rst", "api/core/operators.rst", "api/core/pipeline.rst", "api/core/precoding.rst", "api/core/random_node.rst", "api/core/scenario.rst", "api/core/signal.rst", "api/core/state.rst", "api/core/transformation.rst", "api/core/visualize.rst", "api/fec/bch.rst", "api/fec/block_interleaver.rst", "api/fec/coding.rst", "api/fec/crc.rst", "api/fec/index.rst", "api/fec/ldpc.rst", "api/fec/polar.rst", "api/fec/repetition.rst", "api/fec/rs.rst", "api/fec/rsc.rst", "api/fec/scrambler.rst", "api/fec/turbo.rst", "api/hardware_loop/audio.device.AudioDevice.rst", "api/hardware_loop/audio.scenario.AudioScenario.rst", "api/hardware_loop/calibration.antenna.rst", "api/hardware_loop/calibration.delay.rst", "api/hardware_loop/calibration.leakage.rst", "api/hardware_loop/hardware_loop.HardwareLoop.rst", "api/hardware_loop/hardware_loop.HardwareLoopPlot.rst", "api/hardware_loop/index.rst", "api/hardware_loop/physical_device.PhysicalDevice.rst", "api/hardware_loop/physical_device_dummy.PhysicalDeviceDummy.rst", "api/hardware_loop/physical_device_dummy.PhysicalScenarioDummy.rst", "api/hardware_loop/scenario.PhysicalScenario.rst", "api/hardware_loop/uhd.system.UsrpSystem.rst", "api/hardware_loop/uhd.usrp.UsrpDevice.rst", "api/hardware_loop/visualizers.rst", "api/jcas/index.rst", "api/jcas/jcas.rst", "api/jcas/matched_filtering.rst", "api/jcas/ofdm_radar.rst", "api/modem/bits_source.rst", "api/modem/evaluators.rst", "api/modem/evaluators.CommunicationEvaluator.rst", "api/modem/evaluators._table.rst", "api/modem/evaluators.ber.rst", "api/modem/evaluators.bler.rst", "api/modem/evaluators.evm.rst", "api/modem/evaluators.fer.rst", "api/modem/evaluators.throughput.rst", "api/modem/frame_generator.rst", "api/modem/index.rst", "api/modem/mapping.rst", "api/modem/modem.BaseModem.rst", "api/modem/modem.CommunicationReception.rst", "api/modem/modem.CommunicationReceptionFrame.rst", "api/modem/modem.CommunicationTransmission.rst", "api/modem/modem.CommunicationTransmissionFrame.rst", "api/modem/modem.DuplexModem.rst", "api/modem/modem.ReceivingModem.rst", "api/modem/modem.SimplexLink.rst", "api/modem/modem.TransmittingModem.rst", "api/modem/precoding.rst", "api/modem/precoding.dft.rst", "api/modem/precoding.ratio_combining.rst", "api/modem/precoding.single_carrier.rst", "api/modem/precoding.space_time_block_coding.rst", "api/modem/precoding.symbol_precoding.SymbolPrecoding.rst", "api/modem/symbols.rst", "api/modem/waveform.rst", "api/modem/waveform.ChannelEqualization.rst", "api/modem/waveform.ChannelEstimation.rst", "api/modem/waveform.PilotSymbolSequence.rst", "api/modem/waveform.Synchronization.rst", "api/modem/waveform.ZeroForcingChannelEqualization.rst", "api/modem/waveform._table.rst", "api/modem/waveform.chirp_fsk.rst", "api/modem/waveform.correlation_synchronization.rst", "api/modem/waveform.single_carrier.rst", "api/modem/waveform.single_carrier.FMCW.rst", "api/modem/waveform.single_carrier.RaisedCosine.rst", "api/modem/waveform.single_carrier.Rectangular.rst", "api/modem/waveform.single_carrier.RootRaisedCosine.rst", "api/modem/waveforms.orthogonal.rst", "api/modem/waveforms.orthogonal.GridElement.rst", "api/modem/waveforms.orthogonal.GridResource.rst", "api/modem/waveforms.orthogonal.GridSection.rst", "api/modem/waveforms.orthogonal.GuardSection.rst", "api/modem/waveforms.orthogonal.OrthogonalWaveform.rst", "api/modem/waveforms.orthogonal.PilotSection.rst", "api/modem/waveforms.orthogonal.SymbolSection.rst", "api/modem/waveforms.orthogonal.ocdm.rst", "api/modem/waveforms.orthogonal.ofdm.rst", "api/modem/waveforms.orthogonal.ofdm.OFDMSynchronization.rst", "api/modem/waveforms.orthogonal.ofdm.OFDMWaveform.rst", "api/modem/waveforms.orthogonal.ofdm.SchmidlCoxPilotSection.rst", "api/modem/waveforms.orthogonal.ofdm.SchmidlCoxSynchronization.rst", "api/modem/waveforms.orthogonal.otfs.rst", "api/radar/cube.RadarCube.rst", "api/radar/detection.MaxDetector.rst", "api/radar/detection.PointDetection.rst", "api/radar/detection.RadarDetector.rst", "api/radar/detection.RadarPointCloud.rst", "api/radar/detection.ThresholdDetector.rst", "api/radar/evaluators.DetectionProbEvaluator.rst", "api/radar/evaluators.RadarEvaluator.rst", "api/radar/evaluators.ReceiverOperatingCharacteristic.rst", "api/radar/evaluators.RootMeanSquareError.rst", "api/radar/fmcw.rst", "api/radar/index.rst", "api/radar/radar.Radar.rst", "api/radar/radar.RadarReception.rst", "api/radar/radar.RadarTransmission.rst", "api/radar/radar.RadarWaveform.rst", "api/simulation/animation.rst", "api/simulation/antennas.rst", "api/simulation/antennas.SimulatedAntenna.rst", "api/simulation/antennas.SimulatedAntennaArray.rst", "api/simulation/antennas.SimulatedAntennaPort.rst", "api/simulation/antennas.SimulatedCustomArray.rst", "api/simulation/antennas.SimulatedDipole.rst", "api/simulation/antennas.SimulatedIdealAntenna.rst", "api/simulation/antennas.SimulatedLinearAntenna.rst", "api/simulation/antennas.SimulatedPatchAntenna.rst", "api/simulation/antennas.SimulatedUniformArray.rst", "api/simulation/beamforming.DeviceFocus.rst", "api/simulation/coupling.rst", "api/simulation/coupling.coupling.rst", "api/simulation/coupling.impedance.rst", "api/simulation/coupling.perfect.rst", "api/simulation/drop.SimulatedDrop.rst", "api/simulation/evaluators.rst", "api/simulation/index.rst", "api/simulation/isolation.rst", "api/simulation/isolation.isolation.rst", "api/simulation/isolation.perfect.rst", "api/simulation/isolation.selective.rst", "api/simulation/isolation.specific.rst", "api/simulation/modem.noise.CommunicationNoiseLevel.rst", "api/simulation/modem.noise.EBN0.rst", "api/simulation/modem.noise.ESN0.rst", "api/simulation/noise.rst", "api/simulation/noise.level.N0.rst", "api/simulation/noise.level.SNR.rst", "api/simulation/noise.model.AWGN.rst", "api/simulation/noise.model.AWGNRealization.rst", "api/simulation/rf_chain.rst", "api/simulation/rf_chain.adc.rst", "api/simulation/rf_chain.adc.AnalogDigitalConverter.rst", "api/simulation/rf_chain.adc.AutomaticGainControl.rst", "api/simulation/rf_chain.adc.Gain.rst", "api/simulation/rf_chain.adc.GainControlBase.rst", "api/simulation/rf_chain.adc.GainControlType.rst", "api/simulation/rf_chain.adc.QuantizerType.rst", "api/simulation/rf_chain.amplifier.rst", "api/simulation/rf_chain.amplifier.ClippingPowerAmplifier.rst", "api/simulation/rf_chain.amplifier.CustomPowerAmplifier.rst", "api/simulation/rf_chain.amplifier.PowerAmplifier.rst", "api/simulation/rf_chain.amplifier.RappPowerAmplifier.rst", "api/simulation/rf_chain.amplifier.SalehPowerAmplifier.rst", "api/simulation/rf_chain.phase_noise.rst", "api/simulation/rf_chain.phase_noise.NoPhaseNoise.rst", "api/simulation/rf_chain.phase_noise.OscillatorPhaseNoise.rst", "api/simulation/scenario.ScenarioVisualization.rst", "api/simulation/scenario.ScenarioVisualizer.rst", "api/simulation/scenario.SimulationScenario.rst", "api/simulation/simulated_device.rst", "api/simulation/simulated_device.ProcessedSimulatedDeviceInput.rst", "api/simulation/simulated_device.SimulatedDeviceOutput.rst", "api/simulation/simulated_device.SimulatedDeviceReceiveRealization.rst", "api/simulation/simulated_device.SimulatedDeviceReception.rst", "api/simulation/simulated_device.SimulatedDeviceTransmission.rst", "api/simulation/simulation.Simulation.rst", "api/simulation/synchronization.rst", "api/simulation/synchronization.RandomTrigger.rst", "api/simulation/synchronization.SampleOffsetTrigger.rst", "api/simulation/synchronization.StaticTrigger.rst", "api/simulation/synchronization.TimeOffsetTrigger.rst", "api/simulation/synchronization.TriggerModel.rst", "api/simulation/synchronization.TriggerRealization.rst", "api/simulation/synchronization._table.rst", "api/tools/index.rst", "api/tools/math.rst", "api/tools/resampling.rst", "api/tools/tile.rst", "developer_hints.rst", "flowcharts/device_rf_interaction.rst", "flowcharts/simulated_physical_layer.rst", "flowcharts/simulation_parallel_monte_carlo.rst", "getting_started.rst", "index.rst", "installation.rst", "license.rst", "matlab.rst", "notebooks/audio.ipynb", "notebooks/beamforming_implementation.ipynb", "notebooks/beamforming_usage.ipynb", "notebooks/channel.ipynb", "notebooks/datasets.ipynb", "notebooks/evaluator.ipynb", "notebooks/fec_coding.ipynb", "notebooks/precoding.ipynb", "notebooks/roc.ipynb", "notebooks/waveform.ipynb", "references.rst", "tutorials.rst"], "indexentries": {"__num_delay_taps (channelstateinformation attribute)": [[37, "hermespy.core.channel.ChannelStateInformation.__num_delay_taps", false]], "__num_frequency_bins (channelstateinformation attribute)": [[37, "hermespy.core.channel.ChannelStateInformation.__num_frequency_bins", false]], "__state (channelstateinformation attribute)": [[37, "hermespy.core.channel.ChannelStateInformation.__state", false]], "__state_format (channelstateinformation attribute)": [[37, "hermespy.core.channel.ChannelStateInformation.__state_format", false]], "_angleplot (class in hermespy.radar.cube)": [[157, "hermespy.radar.cube._AnglePlot", false]], "_anglevisualization (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines._AngleVisualization", false]], "_constellationplot (class in hermespy.modem.symbols)": [[127, "hermespy.modem.symbols._ConstellationPlot", false]], "_decode() (caponbeamformer method)": [[2, "hermespy.beamforming.capon.CaponBeamformer._decode", false]], "_decode() (conventionalbeamformer method)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer._decode", false]], "_decode() (nullsteeringbeamformer method)": [[5, "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer._decode", false]], "_decode() (receivebeamformer method)": [[1, "hermespy.beamforming.beamformer.ReceiveBeamformer._decode", false]], "_default_title (hardwareloopplot property)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot._default_title", false]], "_encode() (conventionalbeamformer method)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer._encode", false]], "_encode() (nullsteeringbeamformer method)": [[5, "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer._encode", false]], "_encode() (transmitbeamformer method)": [[1, "hermespy.beamforming.beamformer.TransmitBeamformer._encode", false]], "_eyevisualization (class in hermespy.core.signal_model)": [[65, "hermespy.core.signal_model._EyeVisualization", false]], "_initial_plot() (hardwareloopplot method)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot._initial_plot", false]], "_ot (class in hermespy.core.factory)": [[55, "hermespy.core.factory._OT", false]], "_powerdelayvisualization (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines._PowerDelayVisualization", false]], "_prepare_plot() (hardwareloopplot method)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot._prepare_plot", false]], "_propagate() (channelsample method)": [[15, "hermespy.channel.channel.ChannelSample._propagate", false]], "_propagate() (idealchannelsample method)": [[29, "hermespy.channel.ideal.IdealChannelSample._propagate", false]], "_rangeplot (class in hermespy.radar.cube)": [[157, "hermespy.radar.cube._RangePlot", false]], "_rangevelocityplot (class in hermespy.radar.cube)": [[157, "hermespy.radar.cube._RangeVelocityPlot", false]], "_realize() (cdl method)": [[6, "hermespy.channel.cdl.cdl.CDL._realize", false]], "_realize() (channel method)": [[13, "hermespy.channel.channel.Channel._realize", false]], "_realize() (idealchannel method)": [[29, "hermespy.channel.ideal.IdealChannel._realize", false]], "_realize() (multipathfadingchannel method)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel._realize", false]], "_realize() (multitargetradarchannel method)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel._realize", false]], "_realize() (randomdelaychannel method)": [[19, "hermespy.channel.delay.random.RandomDelayChannel._realize", false]], "_realize() (singletargetradarchannel method)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel._realize", false]], "_realize() (sionnartchannel method)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannel._realize", false]], "_realize() (spatialdelaychannel method)": [[20, "hermespy.channel.delay.spatial.SpatialDelayChannel._realize", false]], "_receive() (radar method)": [[169, "hermespy.radar.radar.Radar._receive", false]], "_receive() (receiver method)": [[48, "hermespy.core.device.Receiver._receive", false]], "_receive() (receivingmodembase method)": [[118, "hermespy.modem.modem.ReceivingModemBase._receive", false]], "_rt (class in hermespy.core.factory)": [[55, "hermespy.core.factory._RT", false]], "_rt (class in hermespy.core.hooks)": [[56, "hermespy.core.hooks._RT", false]], "_sample() (cdlrealization method)": [[6, "hermespy.channel.cdl.cdl.CDLRealization._sample", false]], "_sample() (idealchannelrealization method)": [[29, "hermespy.channel.ideal.IdealChannelRealization._sample", false]], "_sample() (sionnartchannelrealization method)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelRealization._sample", false]], "_samplesvisualization (class in hermespy.core.signal_model)": [[65, "hermespy.core.signal_model._SamplesVisualization", false]], "_scenariovisualizer (class in hermespy.simulation.scenario)": [[223, "hermespy.simulation.scenario._ScenarioVisualizer", false]], "_signalvisualization (class in hermespy.core.signal_model)": [[65, "hermespy.core.signal_model._SignalVisualization", false]], "_transmit() (radar method)": [[169, "hermespy.radar.radar.Radar._transmit", false]], "_transmit() (transmitter method)": [[51, "hermespy.core.device.Transmitter._transmit", false]], "_transmit() (transmittingmodembase method)": [[120, "hermespy.modem.modem.TransmittingModemBase._transmit", false]], "_update_plot() (hardwareloopplot method)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot._update_plot", false]], "a (cdltype attribute)": [[6, "hermespy.channel.cdl.CDLType.A", false]], "a (tdltype attribute)": [[28, "hermespy.channel.fading.tdl.TDLType.A", false]], "aat (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.AAT", false]], "abbreviation (biterrorevaluator property)": [[104, "hermespy.modem.evaluators.BitErrorEvaluator.abbreviation", false]], "abbreviation (blockerrorevaluator property)": [[105, "hermespy.modem.evaluators.BlockErrorEvaluator.abbreviation", false]], "abbreviation (constellationevm property)": [[106, "hermespy.modem.evaluators.ConstellationEVM.abbreviation", false]], "abbreviation (detectionprobevaluator property)": [[163, "hermespy.radar.evaluators.DetectionProbEvaluator.abbreviation", false]], "abbreviation (evaluator property)": [[59, "hermespy.core.monte_carlo.Evaluator.abbreviation", false]], "abbreviation (evmevaluation property)": [[106, "hermespy.modem.evaluators.EVMEvaluation.abbreviation", false]], "abbreviation (frameerrorevaluator property)": [[107, "hermespy.modem.evaluators.FrameErrorEvaluator.abbreviation", false]], "abbreviation (receivepowerevaluator property)": [[53, "hermespy.core.evaluators.ReceivePowerEvaluator.abbreviation", false]], "abbreviation (receiveroperatingcharacteristic property)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.abbreviation", false]], "abbreviation (rootmeansquareerror property)": [[166, "hermespy.radar.evaluators.RootMeanSquareError.abbreviation", false]], "abbreviation (si property)": [[190, "hermespy.simulation.evaluators.interference.SI.abbreviation", false]], "abbreviation (ssinr property)": [[190, "hermespy.simulation.evaluators.interference.SSINR.abbreviation", false]], "abbreviation (throughputevaluator property)": [[108, "hermespy.modem.evaluators.ThroughputEvaluator.abbreviation", false]], "abbreviation (transmitpowerevaluator property)": [[53, "hermespy.core.evaluators.TransmitPowerEvaluator.abbreviation", false]], "actorrunresult (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.ActorRunResult", false]], "adaptive_sampling (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.adaptive_sampling", false]], "adc (rfchain property)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.adc", false]], "adc_sampling_rate (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.adc_sampling_rate", false]], "add_antenna() (antennaport method)": [[36, "hermespy.core.antennas.AntennaPort.add_antenna", false]], "add_antenna() (customantennaarray method)": [[36, "hermespy.core.antennas.CustomAntennaArray.add_antenna", false]], "add_antenna() (simulatedcustomarray method)": [[178, "hermespy.simulation.antennas.SimulatedCustomArray.add_antenna", false]], "add_callback() (hookable method)": [[56, "hermespy.core.hooks.Hookable.add_callback", false]], "add_device() (physicalscenario method)": [[92, "hermespy.hardware_loop.scenario.PhysicalScenario.add_device", false]], "add_device() (physicalscenariodummy method)": [[91, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.add_device", false]], "add_device() (pipeline method)": [[61, "hermespy.core.pipeline.Pipeline.add_device", false]], "add_device() (scenario method)": [[64, "hermespy.core.scenario.Scenario.add_device", false]], "add_device() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.add_device", false]], "add_device() (triggermodel method)": [[237, "hermespy.simulation.simulated_device.TriggerModel.add_device", false]], "add_device() (usrpsystem method)": [[93, "hermespy.hardware_loop.uhd.system.UsrpSystem.add_device", false]], "add_dimension() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_dimension", false]], "add_dimension() (montecarlo method)": [[59, "hermespy.core.monte_carlo.MonteCarlo.add_dimension", false]], "add_dsp() (device method)": [[39, "hermespy.core.device.Device.add_dsp", false]], "add_encoder() (encodermanager method)": [[71, "hermespy.fec.coding.EncoderManager.add_encoder", false]], "add_evaluator() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_evaluator", false]], "add_evaluator() (montecarlo method)": [[59, "hermespy.core.monte_carlo.MonteCarlo.add_evaluator", false]], "add_hook() (hookable method)": [[56, "hermespy.core.hooks.Hookable.add_hook", false]], "add_iq_imbalance() (rfchain method)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.add_iq_imbalance", false]], "add_link() (transformablelink method)": [[67, "hermespy.core.transformation.TransformableLink.add_link", false]], "add_noise() (noisemodel method)": [[200, "hermespy.simulation.noise.model.NoiseModel.add_noise", false]], "add_noise() (nophasenoise method)": [[220, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.add_noise", false]], "add_noise() (oscillatorphasenoise method)": [[221, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.add_noise", false]], "add_noise() (phasenoise method)": [[219, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise.add_noise", false]], "add_plot() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_plot", false]], "add_point() (radarpointcloud method)": [[161, "hermespy.radar.detection.RadarPointCloud.add_point", false]], "add_port() (customantennaarray method)": [[36, "hermespy.core.antennas.CustomAntennaArray.add_port", false]], "add_port() (simulatedcustomarray method)": [[178, "hermespy.simulation.antennas.SimulatedCustomArray.add_port", false]], "add_post_drop_hook() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_post_drop_hook", false]], "add_pre_drop_hook() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_pre_drop_hook", false]], "add_propagation() (radarpath method)": [[33, "hermespy.channel.radar.radar.RadarPath.add_propagation", false]], "add_receive_callback() (receiver method)": [[48, "hermespy.core.device.Receiver.add_receive_callback", false]], "add_sample_hook() (channel method)": [[13, "hermespy.channel.channel.Channel.add_sample_hook", false]], "add_samples() (gridsection method)": [[59, "hermespy.core.monte_carlo.GridSection.add_samples", false]], "add_state() (radarpath method)": [[33, "hermespy.channel.radar.radar.RadarPath.add_state", false]], "add_target() (multitargetradarchannel method)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel.add_target", false]], "add_to() (awgnrealization method)": [[204, "hermespy.simulation.noise.model.AWGNRealization.add_to", false]], "add_to() (noiserealization method)": [[200, "hermespy.simulation.noise.model.NoiseRealization.add_to", false]], "add_transmit_callback() (transmitter method)": [[51, "hermespy.core.device.Transmitter.add_transmit_callback", false]], "add_variable() (consistentgenerator method)": [[17, "hermespy.channel.consistent.ConsistentGenerator.add_variable", false]], "adjust_power (poweramplifier attribute)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.adjust_power", false]], "adjust_signal() (gaincontrolbase method)": [[210, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.adjust_signal", false]], "agc_type (automaticgaincontrol property)": [[208, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.agc_type", false]], "alamouti (class in hermespy.modem.precoding.space_time_block_coding)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti", false]], "all (verbosity attribute)": [[38, "hermespy.core.definitions.Verbosity.ALL", false]], "allow_padding (encodermanager attribute)": [[71, "hermespy.fec.coding.EncoderManager.allow_padding", false]], "allow_truncating (encodermanager attribute)": [[71, "hermespy.fec.coding.EncoderManager.allow_truncating", false]], "amplitude (dbconversiontype attribute)": [[241, "hermespy.tools.math.DbConversionType.AMPLITUDE", false]], "amplitude_alpha (salehpoweramplifier property)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_alpha", false]], "amplitude_beta (salehpoweramplifier property)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_beta", false]], "amplitude_imbalance (rfchain property)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.amplitude_imbalance", false]], "amplitude_path_loss() (in module hermespy.tools.math)": [[241, "hermespy.tools.math.amplitude_path_loss", false]], "analog_digital_conversion() (simulatedantennaarray method)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray.analog_digital_conversion", false]], "analogdigitalconverter (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter", false]], "angle_bins (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.angle_bins", false]], "angle_coupling_indices (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.angle_coupling_indices", false]], "angles (sphericalfocus property)": [[1, "hermespy.beamforming.beamformer.SphericalFocus.angles", false]], "antenna (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.Antenna", false]], "antenna_calibration (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.antenna_calibration", false]], "antenna_correlation (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.antenna_correlation", false]], "antenna_state() (simulatedantennaarray method)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray.antenna_state", false]], "antennaarray (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.AntennaArray", false]], "antennaarraybase (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.AntennaArrayBase", false]], "antennaarraystate (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.AntennaArrayState", false]], "antennacalibration (class in hermespy.hardware_loop.physical_device)": [[83, "hermespy.hardware_loop.physical_device.AntennaCalibration", false]], "antennacorrelation (class in hermespy.channel.fading.fading)": [[24, "hermespy.channel.fading.fading.AntennaCorrelation", false]], "antennamode (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.AntennaMode", false]], "antennaport (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.AntennaPort", false]], "antennas (antennaarray property)": [[36, "hermespy.core.antennas.AntennaArray.antennas", false]], "antennas (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.antennas", false]], "antennas (antennaarraystate property)": [[36, "hermespy.core.antennas.AntennaArrayState.antennas", false]], "antennas (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.antennas", false]], "antennas (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.antennas", false]], "antennas (device property)": [[39, "hermespy.core.device.Device.antennas", false]], "antennas (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.antennas", false]], "antennas (state property)": [[66, "hermespy.core.state.State.antennas", false]], "antennas (uniformarray property)": [[36, "hermespy.core.antennas.UniformArray.antennas", false]], "antennas (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.antennas", false]], "antennas_updated() (antennaport method)": [[36, "hermespy.core.antennas.AntennaPort.antennas_updated", false]], "append_samples() (densesignal method)": [[65, "hermespy.core.signal_model.DenseSignal.append_samples", false]], "append_samples() (signal method)": [[65, "hermespy.core.signal_model.Signal.append_samples", false]], "append_samples() (signalblock method)": [[65, "hermespy.core.signal_model.SignalBlock.append_samples", false]], "append_samples() (sparsesignal method)": [[65, "hermespy.core.signal_model.SparseSignal.append_samples", false]], "append_stream() (symbols method)": [[127, "hermespy.modem.symbols.Symbols.append_stream", false]], "append_streams() (densesignal method)": [[65, "hermespy.core.signal_model.DenseSignal.append_streams", false]], "append_streams() (signal method)": [[65, "hermespy.core.signal_model.Signal.append_streams", false]], "append_streams() (sparsesignal method)": [[65, "hermespy.core.signal_model.SparseSignal.append_streams", false]], "append_symbols() (symbols method)": [[127, "hermespy.modem.symbols.Symbols.append_symbols", false]], "apt (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.APT", false]], "array (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.array", false]], "artifact (artifacttemplate property)": [[59, "hermespy.core.monte_carlo.ArtifactTemplate.artifact", false]], "artifact (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.Artifact", false]], "artifact() (biterrorevaluation method)": [[104, "hermespy.modem.evaluators.BitErrorEvaluation.artifact", false]], "artifact() (blockerrorevaluation method)": [[105, "hermespy.modem.evaluators.BlockErrorEvaluation.artifact", false]], "artifact() (detectionprobabilityevaluation method)": [[163, "hermespy.radar.evaluators.DetectionProbabilityEvaluation.artifact", false]], "artifact() (evaluation method)": [[59, "hermespy.core.monte_carlo.Evaluation.artifact", false]], "artifact() (evmevaluation method)": [[106, "hermespy.modem.evaluators.EVMEvaluation.artifact", false]], "artifact() (frameerrorevaluation method)": [[107, "hermespy.modem.evaluators.FrameErrorEvaluation.artifact", false]], "artifact() (powerevaluation method)": [[53, "hermespy.core.evaluators.PowerEvaluation.artifact", false]], "artifact() (rocevaluation method)": [[165, "hermespy.radar.evaluators.RocEvaluation.artifact", false]], "artifact() (rootmeansquareevaluation method)": [[166, "hermespy.radar.evaluators.RootMeanSquareEvaluation.artifact", false]], "artifact() (throughputevaluation method)": [[108, "hermespy.modem.evaluators.ThroughputEvaluation.artifact", false]], "artifact_scalars (montecarlosample property)": [[59, "hermespy.core.monte_carlo.MonteCarloSample.artifact_scalars", false]], "artifactplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.ArtifactPlot", false]], "artifacts (evaluateddrop property)": [[52, "hermespy.core.drop.EvaluatedDrop.artifacts", false]], "artifacts (hardwareloopsample property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample.artifacts", false]], "artifacts (montecarlosample property)": [[59, "hermespy.core.monte_carlo.MonteCarloSample.artifacts", false]], "artifacttemplate (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.ArtifactTemplate", false]], "at (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.AT", false]], "at (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.AT", false]], "attached (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.attached", false]], "attenuate (radarchannelbase property)": [[33, "hermespy.channel.radar.radar.RadarChannelBase.attenuate", false]], "attenuate (radarpath property)": [[33, "hermespy.channel.radar.radar.RadarPath.attenuate", false]], "audioantenna (class in hermespy.hardware_loop.audio.device)": [[81, "hermespy.hardware_loop.audio.device.AudioAntenna", false]], "audiodevice (class in hermespy.hardware_loop.audio.device)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice", false]], "audiodeviceantennas (class in hermespy.hardware_loop.audio.device)": [[81, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas", false]], "audioplaybackport (class in hermespy.hardware_loop.audio.device)": [[81, "hermespy.hardware_loop.audio.device.AudioPlaybackPort", false]], "audioport (class in hermespy.hardware_loop.audio.device)": [[81, "hermespy.hardware_loop.audio.device.AudioPort", false]], "audiorecordport (class in hermespy.hardware_loop.audio.device)": [[81, "hermespy.hardware_loop.audio.device.AudioRecordPort", false]], "audioscenario (class in hermespy.hardware_loop.audio.scenario)": [[82, "hermespy.hardware_loop.audio.scenario.AudioScenario", false]], "automaticgaincontrol (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[208, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl", false]], "average_powers (powerresult property)": [[53, "hermespy.core.evaluators.PowerResult.average_powers", false]], "awgn (class in hermespy.simulation.noise.model)": [[203, "hermespy.simulation.noise.model.AWGN", false]], "awgnrealization (class in hermespy.simulation.noise.model)": [[204, "hermespy.simulation.noise.model.AWGNRealization", false]], "axes (visualization property)": [[68, "hermespy.core.visualize.Visualization.axes", false]], "azimuth_angle_variation_variable (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.azimuth_angle_variation_variable", false]], "azimuth_arrival_spread (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.azimuth_arrival_spread", false]], "azimuth_departure_spread (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.azimuth_departure_spread", false]], "azimuth_of_arrival (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.azimuth_of_arrival", false]], "azimuth_of_departure (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.azimuth_of_departure", false]], "azimuth_spread_sign (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.azimuth_spread_sign", false]], "b (cdltype attribute)": [[6, "hermespy.channel.cdl.CDLType.B", false]], "b (tdltype attribute)": [[28, "hermespy.channel.fading.tdl.TDLType.B", false]], "backoff (automaticgaincontrol property)": [[208, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.backoff", false]], "backward (dftnorm attribute)": [[122, "hermespy.modem.precoding.dft.DFTNorm.BACKWARD", false]], "backwards_transformation (transformable property)": [[67, "hermespy.core.transformation.Transformable.backwards_transformation", false]], "bandwidth (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.bandwidth", false]], "bandwidth (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bandwidth", false]], "bandwidth (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.bandwidth", false]], "bandwidth (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.bandwidth", false]], "bandwidth (fmcwwaveform property)": [[138, "hermespy.modem.waveform_single_carrier.FMCWWaveform.bandwidth", false]], "bandwidth (linkstate property)": [[16, "hermespy.channel.channel.LinkState.bandwidth", false]], "bandwidth (ocdmwaveform property)": [[150, "hermespy.modem.waveforms.orthogonal.ocdm.OCDMWaveform.bandwidth", false]], "bandwidth (ofdmwaveform property)": [[153, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform.bandwidth", false]], "bandwidth (rectangularwaveform property)": [[140, "hermespy.modem.waveform_single_carrier.RectangularWaveform.bandwidth", false]], "bandwidth (rolledoffsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.bandwidth", false]], "base_port (uniformarray property)": [[36, "hermespy.core.antennas.UniformArray.base_port", false]], "baseband_signal (processedsimulateddeviceinput property)": [[226, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.baseband_signal", false]], "basemodem (class in hermespy.modem.modem)": [[112, "hermespy.modem.modem.BaseModem", false]], "basic() (devicestate static method)": [[66, "hermespy.core.state.DeviceState.Basic", false]], "bchcoding (class in hermespy.fec.aff3ct.bch)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding", false]], "beamfocus (class in hermespy.beamforming.beamformer)": [[1, "hermespy.beamforming.beamformer.BeamFocus", false]], "bit_block_size (bchcoding property)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding.bit_block_size", false]], "bit_block_size (blockinterleaver property)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.bit_block_size", false]], "bit_block_size (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.bit_block_size", false]], "bit_block_size (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.bit_block_size", false]], "bit_block_size (cyclicredundancycheck property)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.bit_block_size", false]], "bit_block_size (encoder property)": [[71, "hermespy.fec.coding.Encoder.bit_block_size", false]], "bit_block_size (encodermanager property)": [[71, "hermespy.fec.coding.EncoderManager.bit_block_size", false]], "bit_block_size (ldpccoding property)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding.bit_block_size", false]], "bit_block_size (polarsccoding property)": [[75, "hermespy.fec.aff3ct.polar.PolarSCCoding.bit_block_size", false]], "bit_block_size (polarsclcoding property)": [[75, "hermespy.fec.aff3ct.polar.PolarSCLCoding.bit_block_size", false]], "bit_block_size (reedsolomoncoding property)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding.bit_block_size", false]], "bit_block_size (repetitionencoder property)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder.bit_block_size", false]], "bit_block_size (rsccoding property)": [[78, "hermespy.fec.aff3ct.rsc.RSCCoding.bit_block_size", false]], "bit_block_size (scrambler3gpp property)": [[79, "hermespy.fec.scrambler.Scrambler3GPP.bit_block_size", false]], "bit_block_size (scrambler80211a property)": [[79, "hermespy.fec.scrambler.Scrambler80211a.bit_block_size", false]], "bit_block_size (turbocoding property)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding.bit_block_size", false]], "bit_energy (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bit_energy", false]], "bit_energy (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.bit_energy", false]], "bit_energy (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.bit_energy", false]], "bit_energy (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.bit_energy", false]], "biterrorartifact (class in hermespy.modem.evaluators)": [[104, "hermespy.modem.evaluators.BitErrorArtifact", false]], "biterrorevaluation (class in hermespy.modem.evaluators)": [[104, "hermespy.modem.evaluators.BitErrorEvaluation", false]], "biterrorevaluator (class in hermespy.modem.evaluators)": [[104, "hermespy.modem.evaluators.BitErrorEvaluator", false]], "bits (communicationreception property)": [[113, "hermespy.modem.modem.CommunicationReception.bits", false]], "bits (communicationtransmission property)": [[115, "hermespy.modem.modem.CommunicationTransmission.bits", false]], "bits (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.bits", false]], "bits_per_frame() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.bits_per_frame", false]], "bits_per_symbol (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bits_per_symbol", false]], "bits_per_symbol (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.bits_per_symbol", false]], "bits_per_symbol (pskqammapping attribute)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.bits_per_symbol", false]], "bits_source (transmittingmodembase property)": [[120, "hermespy.modem.modem.TransmittingModemBase.bits_source", false]], "bitssource (class in hermespy.modem.bits_source)": [[100, "hermespy.modem.bits_source.BitsSource", false]], "block_size (blockinterleaver property)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.block_size", false]], "blockerrorartifact (class in hermespy.modem.evaluators)": [[105, "hermespy.modem.evaluators.BlockErrorArtifact", false]], "blockerrorevaluation (class in hermespy.modem.evaluators)": [[105, "hermespy.modem.evaluators.BlockErrorEvaluation", false]], "blockerrorevaluator (class in hermespy.modem.evaluators)": [[105, "hermespy.modem.evaluators.BlockErrorEvaluator", false]], "blockinterleaver (class in hermespy.fec.block_interleaver)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver", false]], "boolean() (consistentgenerator method)": [[17, "hermespy.channel.consistent.ConsistentGenerator.boolean", false]], "c (cdltype attribute)": [[6, "hermespy.channel.cdl.CDLType.C", false]], "c (tdltype attribute)": [[28, "hermespy.channel.fading.tdl.TDLType.C", false]], "calibration (class in hermespy.hardware_loop.physical_device)": [[89, "hermespy.hardware_loop.physical_device.Calibration", false]], "campaign (scenario property)": [[64, "hermespy.core.scenario.Scenario.campaign", false]], "caponbeamformer (class in hermespy.beamforming.capon)": [[2, "hermespy.beamforming.capon.CaponBeamformer", false]], "carrier_frequency (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.carrier_frequency", false]], "carrier_frequency (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.carrier_frequency", false]], "carrier_frequency (device property)": [[39, "hermespy.core.device.Device.carrier_frequency", false]], "carrier_frequency (deviceoutput property)": [[41, "hermespy.core.device.DeviceOutput.carrier_frequency", false]], "carrier_frequency (linkstate property)": [[16, "hermespy.channel.channel.LinkState.carrier_frequency", false]], "carrier_frequency (mixingoperator property)": [[44, "hermespy.core.device.MixingOperator.carrier_frequency", false]], "carrier_frequency (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.carrier_frequency", false]], "carrier_frequency (signal property)": [[65, "hermespy.core.signal_model.Signal.carrier_frequency", false]], "carrier_frequency (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.carrier_frequency", false]], "carrier_frequency (state property)": [[66, "hermespy.core.state.State.carrier_frequency", false]], "carrier_frequency (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.carrier_frequency", false]], "cartesian_array_response() (antennaarraybase method)": [[36, "hermespy.core.antennas.AntennaArrayBase.cartesian_array_response", false]], "cartesian_phase_response() (antennaarraybase method)": [[36, "hermespy.core.antennas.AntennaArrayBase.cartesian_phase_response", false]], "catch_exceptions (montecarlo attribute)": [[59, "hermespy.core.monte_carlo.MonteCarlo.catch_exceptions", false]], "catch_exceptions (montecarloactor attribute)": [[59, "hermespy.core.monte_carlo.MonteCarloActor.catch_exceptions", false]], "cdl (class in hermespy.channel.cdl.cdl)": [[6, "hermespy.channel.cdl.cdl.CDL", false]], "cdlrealization (class in hermespy.channel.cdl.cdl)": [[6, "hermespy.channel.cdl.cdl.CDLRealization", false]], "cdlrt (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.CDLRT", false]], "cdltype (class in hermespy.channel.cdl)": [[6, "hermespy.channel.cdl.CDLType", false]], "channel (antennacorrelation property)": [[24, "hermespy.channel.fading.fading.AntennaCorrelation.channel", false]], "channel (audioplaybackport property)": [[81, "hermespy.hardware_loop.audio.device.AudioPlaybackPort.channel", false]], "channel (audioport property)": [[81, "hermespy.hardware_loop.audio.device.AudioPort.channel", false]], "channel (audiorecordport property)": [[81, "hermespy.hardware_loop.audio.device.AudioRecordPort.channel", false]], "channel (class in hermespy.channel.channel)": [[13, "hermespy.channel.channel.Channel", false]], "channel() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.channel", false]], "channel_equalization (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.channel_equalization", false]], "channel_estimation (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.channel_estimation", false]], "channel_realizations (simulateddrop property)": [[189, "hermespy.simulation.drop.SimulatedDrop.channel_realizations", false]], "channelequalization (class in hermespy.modem.waveform)": [[129, "hermespy.modem.waveform.ChannelEqualization", false]], "channelestimation (class in hermespy.modem.waveform)": [[130, "hermespy.modem.waveform.ChannelEstimation", false]], "channelrealization (class in hermespy.channel.channel)": [[14, "hermespy.channel.channel.ChannelRealization", false]], "channels (simulationscenario property)": [[224, "hermespy.simulation.simulation.SimulationScenario.channels", false]], "channelsample (class in hermespy.channel.channel)": [[15, "hermespy.channel.channel.ChannelSample", false]], "channelsamplehook (class in hermespy.channel.channel)": [[13, "hermespy.channel.channel.ChannelSampleHook", false]], "channelstatedimension (class in hermespy.core.channel)": [[37, "hermespy.core.channel.ChannelStateDimension", false]], "channelstateformat (class in hermespy.core.channel)": [[37, "hermespy.core.channel.ChannelStateFormat", false]], "channelstateinformation (class in hermespy.core.channel)": [[37, "hermespy.core.channel.ChannelStateInformation", false]], "characteristics() (antennaarraybase method)": [[36, "hermespy.core.antennas.AntennaArrayBase.characteristics", false]], "check_block_size (cyclicredundancycheck property)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.check_block_size", false]], "chirp_bandwidth (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirp_bandwidth", false]], "chirp_duration (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirp_duration", false]], "chirp_duration (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.chirp_duration", false]], "chirp_duration (fmcwwaveform property)": [[138, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_duration", false]], "chirp_slope (fmcwwaveform property)": [[138, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_slope", false]], "chirpfskcorrelationsynchronization (class in hermespy.modem.waveform_chirp_fsk)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKCorrelationSynchronization", false]], "chirpfsksynchronization (class in hermespy.modem.waveform_chirp_fsk)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKSynchronization", false]], "chirpfskwaveform (class in hermespy.modem.waveform_chirp_fsk)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform", false]], "chirps_in_frame (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirps_in_frame", false]], "clippingpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[214, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier", false]], "cloud (radarreception property)": [[170, "hermespy.radar.radar.RadarReception.cloud", false]], "cluster_delay_spread (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.cluster_delay_spread", false]], "cluster_delays (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.cluster_delays", false]], "cluster_delays_variable (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.cluster_delays_variable", false]], "cluster_powers (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.cluster_powers", false]], "cluster_shadowing_log_variable (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.cluster_shadowing_log_variable", false]], "clusterdelaylinebase (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase", false]], "clusterdelaylinerealization (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealization", false]], "clusterdelaylinerealizationparameters (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters", false]], "clusterdelaylinesample (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample", false]], "clutter_density (factorytype property)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType.clutter_density", false]], "clutter_height (indoorfactory property)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.clutter_height", false]], "clutter_size (factorytype property)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType.clutter_size", false]], "code_block_size (bchcoding property)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding.code_block_size", false]], "code_block_size (blockinterleaver property)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.code_block_size", false]], "code_block_size (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.code_block_size", false]], "code_block_size (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.code_block_size", false]], "code_block_size (cyclicredundancycheck property)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.code_block_size", false]], "code_block_size (encoder property)": [[71, "hermespy.fec.coding.Encoder.code_block_size", false]], "code_block_size (encodermanager property)": [[71, "hermespy.fec.coding.EncoderManager.code_block_size", false]], "code_block_size (ldpccoding property)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding.code_block_size", false]], "code_block_size (polarsccoding property)": [[75, "hermespy.fec.aff3ct.polar.PolarSCCoding.code_block_size", false]], "code_block_size (polarsclcoding property)": [[75, "hermespy.fec.aff3ct.polar.PolarSCLCoding.code_block_size", false]], "code_block_size (reedsolomoncoding property)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding.code_block_size", false]], "code_block_size (repetitionencoder property)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder.code_block_size", false]], "code_block_size (rsccoding property)": [[78, "hermespy.fec.aff3ct.rsc.RSCCoding.code_block_size", false]], "code_block_size (scrambler3gpp property)": [[79, "hermespy.fec.scrambler.Scrambler3GPP.code_block_size", false]], "code_block_size (scrambler80211a property)": [[79, "hermespy.fec.scrambler.Scrambler80211a.code_block_size", false]], "code_block_size (turbocoding property)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding.code_block_size", false]], "communicationevaluator (class in hermespy.modem.evaluators)": [[102, "hermespy.modem.evaluators.CommunicationEvaluator", false]], "communicationnoiselevel (class in hermespy.simulation.modem.noise)": [[197, "hermespy.simulation.modem.noise.CommunicationNoiseLevel", false]], "communicationreception (class in hermespy.modem.modem)": [[113, "hermespy.modem.modem.CommunicationReception", false]], "communicationreceptionframe (class in hermespy.modem.modem)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame", false]], "communicationtransmission (class in hermespy.modem.modem)": [[115, "hermespy.modem.modem.CommunicationTransmission", false]], "communicationtransmissionframe (class in hermespy.modem.modem)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame", false]], "communicationwaveform (class in hermespy.modem.waveform)": [[128, "hermespy.modem.waveform.CommunicationWaveform", false]], "compute_num_offset_samples() (triggerrealization method)": [[238, "hermespy.simulation.simulated_device.TriggerRealization.compute_num_offset_samples", false]], "concatenate() (channelstateinformation static method)": [[37, "hermespy.core.channel.ChannelStateInformation.concatenate", false]], "confidence (evaluator property)": [[59, "hermespy.core.monte_carlo.Evaluator.confidence", false]], "confidence_status() (gridsection method)": [[59, "hermespy.core.monte_carlo.GridSection.confidence_status", false]], "confidences (gridsection property)": [[59, "hermespy.core.monte_carlo.GridSection.confidences", false]], "configurablepilotwaveform (class in hermespy.modem.waveform)": [[128, "hermespy.modem.waveform.ConfigurablePilotWaveform", false]], "configure_point() (griddimension method)": [[59, "hermespy.core.monte_carlo.GridDimension.configure_point", false]], "connect() (simplexlink method)": [[119, "hermespy.modem.modem.SimplexLink.connect", false]], "considered_objects (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.considered_objects", false]], "consistentboolean (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.ConsistentBoolean", false]], "consistentgaussian (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.ConsistentGaussian", false]], "consistentgenerator (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.ConsistentGenerator", false]], "consistentrealization (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.ConsistentRealization", false]], "consistentsample (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.ConsistentSample", false]], "consistentuniform (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.ConsistentUniform", false]], "consistentvariable (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.ConsistentVariable", false]], "console (executable property)": [[54, "hermespy.core.executable.Executable.console", false]], "console (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.console", false]], "console (simulation property)": [[231, "hermespy.simulation.simulation.Simulation.console", false]], "console_mode (executable property)": [[54, "hermespy.core.executable.Executable.console_mode", false]], "console_mode (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.console_mode", false]], "console_mode (simulation property)": [[231, "hermespy.simulation.simulation.Simulation.console_mode", false]], "consolemode (class in hermespy.core.definitions)": [[38, "hermespy.core.definitions.ConsoleMode", false]], "constellationevm (class in hermespy.modem.evaluators)": [[106, "hermespy.modem.evaluators.ConstellationEVM", false]], "container (stemvisualization property)": [[68, "hermespy.core.visualize.StemVisualization.container", false]], "conventionalbeamformer (class in hermespy.beamforming.conventional)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer", false]], "conversion (logarithmic property)": [[58, "hermespy.core.logarithmic.Logarithmic.conversion", false]], "conversion (logarithmicsequence property)": [[58, "hermespy.core.logarithmic.LogarithmicSequence.conversion", false]], "convert() (analogdigitalconverter method)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.convert", false]], "coordinatefocus (class in hermespy.beamforming.beamformer)": [[1, "hermespy.beamforming.beamformer.CoordinateFocus", false]], "coordinates (coordinatefocus property)": [[1, "hermespy.beamforming.beamformer.CoordinateFocus.coordinates", false]], "coordinates (gridsection property)": [[59, "hermespy.core.monte_carlo.GridSection.coordinates", false]], "copy() (antenna method)": [[36, "hermespy.core.antennas.Antenna.copy", false]], "copy() (antennaport method)": [[36, "hermespy.core.antennas.AntennaPort.copy", false]], "copy() (audioantenna method)": [[81, "hermespy.hardware_loop.audio.device.AudioAntenna.copy", false]], "copy() (beamfocus method)": [[1, "hermespy.beamforming.beamformer.BeamFocus.copy", false]], "copy() (coordinatefocus method)": [[1, "hermespy.beamforming.beamformer.CoordinateFocus.copy", false]], "copy() (devicefocus method)": [[184, "hermespy.simulation.beamforming.DeviceFocus.copy", false]], "copy() (dipole method)": [[36, "hermespy.core.antennas.Dipole.copy", false]], "copy() (idealantenna method)": [[36, "hermespy.core.antennas.IdealAntenna.copy", false]], "copy() (linearantenna method)": [[36, "hermespy.core.antennas.LinearAntenna.copy", false]], "copy() (patchantenna method)": [[36, "hermespy.core.antennas.PatchAntenna.copy", false]], "copy() (signal method)": [[65, "hermespy.core.signal_model.Signal.copy", false]], "copy() (signalblock method)": [[65, "hermespy.core.signal_model.SignalBlock.copy", false]], "copy() (sphericalfocus method)": [[1, "hermespy.beamforming.beamformer.SphericalFocus.copy", false]], "copy() (statedsymbols method)": [[127, "hermespy.modem.symbols.StatedSymbols.copy", false]], "copy() (symbols method)": [[127, "hermespy.modem.symbols.Symbols.copy", false]], "correct_receive_delay() (delaycalibrationbase method)": [[84, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.correct_receive_delay", false]], "correct_receive_delay() (nodelaycalibration method)": [[84, "hermespy.hardware_loop.physical_device.NoDelayCalibration.correct_receive_delay", false]], "correct_reception() (antennacalibration method)": [[83, "hermespy.hardware_loop.physical_device.AntennaCalibration.correct_reception", false]], "correct_reception() (noantennacalibration method)": [[83, "hermespy.hardware_loop.physical_device.NoAntennaCalibration.correct_reception", false]], "correct_reception() (scalarantennacalibration method)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration.correct_reception", false]], "correct_transmission() (antennacalibration method)": [[83, "hermespy.hardware_loop.physical_device.AntennaCalibration.correct_transmission", false]], "correct_transmission() (noantennacalibration method)": [[83, "hermespy.hardware_loop.physical_device.NoAntennaCalibration.correct_transmission", false]], "correct_transmission() (scalarantennacalibration method)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration.correct_transmission", false]], "correct_transmit_delay() (delaycalibrationbase method)": [[84, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.correct_transmit_delay", false]], "correct_transmit_delay() (nodelaycalibration method)": [[84, "hermespy.hardware_loop.physical_device.NoDelayCalibration.correct_transmit_delay", false]], "correction_power (bchcoding property)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding.correction_power", false]], "correction_power (reedsolomoncoding property)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding.correction_power", false]], "correlation_distance (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.correlation_distance", false]], "correlationsynchronization (class in hermespy.modem.waveform_correlation_synchronization)": [[136, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization", false]], "cost259 (class in hermespy.channel.fading.cost259)": [[21, "hermespy.channel.fading.cost259.Cost259", false]], "cost259type (class in hermespy.channel.fading.cost259)": [[21, "hermespy.channel.fading.cost259.Cost259Type", false]], "count_antennas() (antennaarray method)": [[36, "hermespy.core.antennas.AntennaArray.count_antennas", false]], "count_receive_antennas() (antennaarray method)": [[36, "hermespy.core.antennas.AntennaArray.count_receive_antennas", false]], "count_transmit_antennas() (antennaarray method)": [[36, "hermespy.core.antennas.AntennaArray.count_transmit_antennas", false]], "coupling (class in hermespy.simulation.coupling.coupling)": [[186, "hermespy.simulation.coupling.coupling.Coupling", false]], "coupling (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.coupling", false]], "covariance (customantennacorrelation property)": [[24, "hermespy.channel.fading.fading.CustomAntennaCorrelation.covariance", false]], "cpus_per_actor (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.cpus_per_actor", false]], "create() (densesignal static method)": [[65, "hermespy.core.signal_model.DenseSignal.Create", false]], "create() (signal static method)": [[65, "hermespy.core.signal_model.Signal.Create", false]], "create() (sparsesignal static method)": [[65, "hermespy.core.signal_model.SparseSignal.Create", false]], "create_figure() (_anglevisualization method)": [[7, "hermespy.channel.cdl.cluster_delay_lines._AngleVisualization.create_figure", false]], "create_figure() (_samplesvisualization method)": [[65, "hermespy.core.signal_model._SamplesVisualization.create_figure", false]], "create_figure() (_scenariovisualizer method)": [[223, "hermespy.simulation.scenario._ScenarioVisualizer.create_figure", false]], "create_figure() (radarpointcloud method)": [[161, "hermespy.radar.detection.RadarPointCloud.create_figure", false]], "create_figure() (scalarevaluationresult method)": [[59, "hermespy.core.monte_carlo.ScalarEvaluationResult.create_figure", false]], "create_figure() (visualizable method)": [[68, "hermespy.core.visualize.Visualizable.create_figure", false]], "cross_polarization_phase_variable (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.cross_polarization_phase_variable", false]], "cross_polarization_power_variable (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.cross_polarization_power_variable", false]], "cross_section (fixedcrosssection property)": [[32, "hermespy.channel.radar.multi.FixedCrossSection.cross_section", false]], "cross_section (physicalradartarget property)": [[32, "hermespy.channel.radar.multi.PhysicalRadarTarget.cross_section", false]], "cross_section (radartargetpath property)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.cross_section", false]], "cross_section (virtualradartarget property)": [[32, "hermespy.channel.radar.multi.VirtualRadarTarget.cross_section", false]], "crt (class in hermespy.channel.channel)": [[14, "hermespy.channel.channel.CRT", false]], "cst (class in hermespy.channel.channel)": [[15, "hermespy.channel.channel.CST", false]], "ct (class in hermespy.hardware_loop.physical_device)": [[89, "hermespy.hardware_loop.physical_device.CT", false]], "cube (radarreception property)": [[170, "hermespy.radar.radar.RadarReception.cube", false]], "cube_h0 (rocevaluation property)": [[165, "hermespy.radar.evaluators.RocEvaluation.cube_h0", false]], "cube_h1 (rocevaluation property)": [[165, "hermespy.radar.evaluators.RocEvaluation.cube_h1", false]], "cummulation (rootmeansquareartifact property)": [[166, "hermespy.radar.evaluators.RootMeanSquareArtifact.cummulation", false]], "customantennaarray (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.CustomAntennaArray", false]], "customantennacorrelation (class in hermespy.channel.fading.fading)": [[24, "hermespy.channel.fading.fading.CustomAntennaCorrelation", false]], "custompoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[215, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier", false]], "cwt (class in hermespy.modem.waveform)": [[128, "hermespy.modem.waveform.CWT", false]], "cyclic (prefixtype attribute)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.PrefixType.CYCLIC", false]], "cyclicredundancycheck (class in hermespy.fec.cyclic_redundancy_check)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck", false]], "d (cdltype attribute)": [[6, "hermespy.channel.cdl.CDLType.D", false]], "d (tdltype attribute)": [[28, "hermespy.channel.fading.tdl.TDLType.D", false]], "data (elementtype attribute)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.ElementType.DATA", false]], "data (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.data", false]], "data_rate() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.data_rate", false]], "db (class in hermespy.core.logarithmic)": [[58, "hermespy.core.logarithmic.dB", false]], "db (valuetype attribute)": [[58, "hermespy.core.ValueType.DB", false]], "db2lin() (in module hermespy.tools.math)": [[241, "hermespy.tools.math.db2lin", false]], "dbconversiontype (class in hermespy.tools.math)": [[241, "hermespy.tools.math.DbConversionType", false]], "dc_suppression (ofdmwaveform attribute)": [[153, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform.dc_suppression", false]], "dcrt (class in hermespy.channel.delay.delay)": [[18, "hermespy.channel.delay.delay.DCRT", false]], "debug (executable property)": [[54, "hermespy.core.executable.Executable.debug", false]], "decode() (bchcoding method)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding.decode", false]], "decode() (blockinterleaver method)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.decode", false]], "decode() (cyclicredundancycheck method)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.decode", false]], "decode() (encoder method)": [[71, "hermespy.fec.coding.Encoder.decode", false]], "decode() (encodermanager method)": [[71, "hermespy.fec.coding.EncoderManager.decode", false]], "decode() (ldpccoding method)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding.decode", false]], "decode() (polarsccoding method)": [[75, "hermespy.fec.aff3ct.polar.PolarSCCoding.decode", false]], "decode() (polarsclcoding method)": [[75, "hermespy.fec.aff3ct.polar.PolarSCLCoding.decode", false]], "decode() (reedsolomoncoding method)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding.decode", false]], "decode() (repetitionencoder method)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder.decode", false]], "decode() (rsccoding method)": [[78, "hermespy.fec.aff3ct.rsc.RSCCoding.decode", false]], "decode() (scrambler3gpp method)": [[79, "hermespy.fec.scrambler.Scrambler3GPP.decode", false]], "decode() (scrambler80211a method)": [[79, "hermespy.fec.scrambler.Scrambler80211a.decode", false]], "decode() (turbocoding method)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding.decode", false]], "decode_rate (receivesymbolcoding property)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolCoding.decode_rate", false]], "decode_rate (receivesymboldecoder property)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolDecoder.decode_rate", false]], "decode_streams() (receivebeamformer method)": [[1, "hermespy.beamforming.beamformer.ReceiveBeamformer.decode_streams", false]], "decode_streams() (receivesignalcoding method)": [[62, "hermespy.core.precoding.ReceiveSignalCoding.decode_streams", false]], "decode_streams() (receivestreamdecoder method)": [[62, "hermespy.core.precoding.ReceiveStreamDecoder.decode_streams", false]], "decode_symbols() (alamouti method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.decode_symbols", false]], "decode_symbols() (dft method)": [[122, "hermespy.modem.precoding.dft.DFT.decode_symbols", false]], "decode_symbols() (ganesan method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.decode_symbols", false]], "decode_symbols() (maximumratiocombining method)": [[123, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.decode_symbols", false]], "decode_symbols() (receivesymbolcoding method)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolCoding.decode_symbols", false]], "decode_symbols() (receivesymboldecoder method)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolDecoder.decode_symbols", false]], "decode_symbols() (singlecarrier method)": [[124, "hermespy.modem.precoding.single_carrier.SingleCarrier.decode_symbols", false]], "decoded_bits (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_bits", false]], "decoded_signal (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_signal", false]], "decoded_symbols (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_symbols", false]], "decorrelation_distance (cdl property)": [[6, "hermespy.channel.cdl.cdl.CDL.decorrelation_distance", false]], "decorrelation_distance (multitargetradarchannel property)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel.decorrelation_distance", false]], "decorrelation_distance (randomdelaychannel property)": [[19, "hermespy.channel.delay.random.RandomDelayChannel.decorrelation_distance", false]], "decorrelation_distance (singletargetradarchannel property)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.decorrelation_distance", false]], "default (scenariomode attribute)": [[64, "hermespy.core.scenario.ScenarioMode.DEFAULT", false]], "default_results_dir() (executable static method)": [[54, "hermespy.core.executable.Executable.default_results_dir", false]], "delay (delaycalibration property)": [[84, "hermespy.hardware_loop.calibration.delay.DelayCalibration.delay", false]], "delay (delaycalibrationbase property)": [[84, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.delay", false]], "delay (delaychannelsample property)": [[18, "hermespy.channel.delay.delay.DelayChannelSample.delay", false]], "delay (nodelaycalibration property)": [[84, "hermespy.hardware_loop.physical_device.NoDelayCalibration.delay", false]], "delay (randomdelaychannel property)": [[19, "hermespy.channel.delay.random.RandomDelayChannel.delay", false]], "delay (randomdelaychannelrealization property)": [[19, "hermespy.channel.delay.random.RandomDelayChannelRealization.delay", false]], "delay (selectiveleakagecalibration property)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.delay", false]], "delay (signal attribute)": [[65, "hermespy.core.signal_model.Signal.delay", false]], "delay_calibration (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.delay_calibration", false]], "delay_normalization (clusterdelaylinebase property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase.delay_normalization", false]], "delay_normalization (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.delay_normalization", false]], "delay_offset (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.delay_offset", false]], "delay_profile (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.delay_profile", false]], "delay_resampling_matrix() (in module hermespy.tools.resampling)": [[242, "hermespy.tools.resampling.delay_resampling_matrix", false]], "delaycalibration (class in hermespy.hardware_loop.calibration.delay)": [[84, "hermespy.hardware_loop.calibration.delay.DelayCalibration", false]], "delaycalibrationbase (class in hermespy.hardware_loop.physical_device)": [[84, "hermespy.hardware_loop.physical_device.DelayCalibrationBase", false]], "delaychannelbase (class in hermespy.channel.delay.delay)": [[18, "hermespy.channel.delay.delay.DelayChannelBase", false]], "delaychannelrealization (class in hermespy.channel.delay.delay)": [[18, "hermespy.channel.delay.delay.DelayChannelRealization", false]], "delaychannelsample (class in hermespy.channel.delay.delay)": [[18, "hermespy.channel.delay.delay.DelayChannelSample", false]], "delaynormalization (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.DelayNormalization", false]], "delays (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.delays", false]], "deleter() (registereddimension method)": [[59, "hermespy.core.monte_carlo.RegisteredDimension.deleter", false]], "demodulate() (chirpfskwaveform method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.demodulate", false]], "demodulate() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.demodulate", false]], "demodulate() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.demodulate", false]], "demodulate() (orthogonalwaveform method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.demodulate", false]], "dense_state() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.dense_state", false]], "dense_states() (statedsymbols method)": [[127, "hermespy.modem.symbols.StatedSymbols.dense_states", false]], "densesignal (class in hermespy.core.signal_model)": [[65, "hermespy.core.signal_model.DenseSignal", false]], "deserializationprocess (class in hermespy.core.factory)": [[55, "hermespy.core.factory.DeserializationProcess", false]], "deserialize() (alamouti class method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.Deserialize", false]], "deserialize() (analogdigitalconverter class method)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.Deserialize", false]], "deserialize() (antennaport class method)": [[36, "hermespy.core.antennas.AntennaPort.Deserialize", false]], "deserialize() (audiodevice class method)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.Deserialize", false]], "deserialize() (automaticgaincontrol class method)": [[208, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.Deserialize", false]], "deserialize() (awgn class method)": [[203, "hermespy.simulation.noise.model.AWGN.Deserialize", false]], "deserialize() (basemodem class method)": [[112, "hermespy.modem.modem.BaseModem.Deserialize", false]], "deserialize() (blockinterleaver class method)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.Deserialize", false]], "deserialize() (caponbeamformer class method)": [[2, "hermespy.beamforming.capon.CaponBeamformer.Deserialize", false]], "deserialize() (cdl class method)": [[6, "hermespy.channel.cdl.cdl.CDL.Deserialize", false]], "deserialize() (cdlrealization class method)": [[6, "hermespy.channel.cdl.cdl.CDLRealization.Deserialize", false]], "deserialize() (channelequalization class method)": [[129, "hermespy.modem.waveform.ChannelEqualization.Deserialize", false]], "deserialize() (channelestimation class method)": [[130, "hermespy.modem.waveform.ChannelEstimation.Deserialize", false]], "deserialize() (channelstateinformation class method)": [[37, "hermespy.core.channel.ChannelStateInformation.Deserialize", false]], "deserialize() (chirpfskwaveform class method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.Deserialize", false]], "deserialize() (clusterdelaylinerealizationparameters class method)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.Deserialize", false]], "deserialize() (communicationevaluator class method)": [[102, "hermespy.modem.evaluators.CommunicationEvaluator.Deserialize", false]], "deserialize() (communicationreception class method)": [[113, "hermespy.modem.modem.CommunicationReception.Deserialize", false]], "deserialize() (communicationreceptionframe class method)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.Deserialize", false]], "deserialize() (communicationtransmission class method)": [[115, "hermespy.modem.modem.CommunicationTransmission.Deserialize", false]], "deserialize() (communicationtransmissionframe class method)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.Deserialize", false]], "deserialize() (consistentvariable class method)": [[17, "hermespy.channel.consistent.ConsistentVariable.Deserialize", false]], "deserialize() (conventionalbeamformer class method)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer.Deserialize", false]], "deserialize() (coordinatefocus class method)": [[1, "hermespy.beamforming.beamformer.CoordinateFocus.Deserialize", false]], "deserialize() (correlationsynchronization class method)": [[136, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.Deserialize", false]], "deserialize() (cost259 class method)": [[21, "hermespy.channel.fading.cost259.Cost259.Deserialize", false]], "deserialize() (customantennaarray class method)": [[36, "hermespy.core.antennas.CustomAntennaArray.Deserialize", false]], "deserialize() (customantennacorrelation class method)": [[24, "hermespy.channel.fading.fading.CustomAntennaCorrelation.Deserialize", false]], "deserialize() (custompoweramplifier class method)": [[215, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.Deserialize", false]], "deserialize() (cyclicredundancycheck class method)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.Deserialize", false]], "deserialize() (delaycalibration class method)": [[84, "hermespy.hardware_loop.calibration.delay.DelayCalibration.Deserialize", false]], "deserialize() (device class method)": [[39, "hermespy.core.device.Device.Deserialize", false]], "deserialize() (devicefocus class method)": [[184, "hermespy.simulation.beamforming.DeviceFocus.Deserialize", false]], "deserialize() (deviceinput class method)": [[40, "hermespy.core.device.DeviceInput.Deserialize", false]], "deserialize() (deviceoutput class method)": [[41, "hermespy.core.device.DeviceOutput.Deserialize", false]], "deserialize() (devicereception class method)": [[42, "hermespy.core.device.DeviceReception.Deserialize", false]], "deserialize() (devicetransmission class method)": [[43, "hermespy.core.device.DeviceTransmission.Deserialize", false]], "deserialize() (dft class method)": [[122, "hermespy.modem.precoding.dft.DFT.Deserialize", false]], "deserialize() (dipole class method)": [[36, "hermespy.core.antennas.Dipole.Deserialize", false]], "deserialize() (drop class method)": [[52, "hermespy.core.drop.Drop.Deserialize", false]], "deserialize() (dualconsistentrealization class method)": [[17, "hermespy.channel.consistent.DualConsistentRealization.Deserialize", false]], "deserialize() (duplexjcasoperator class method)": [[97, "hermespy.jcas.jcas.DuplexJCASOperator.Deserialize", false]], "deserialize() (duplexmodem class method)": [[117, "hermespy.modem.modem.DuplexModem.Deserialize", false]], "deserialize() (encodermanager class method)": [[71, "hermespy.fec.coding.EncoderManager.Deserialize", false]], "deserialize() (exponential class method)": [[22, "hermespy.channel.fading.exponential.Exponential.Deserialize", false]], "deserialize() (factory method)": [[55, "hermespy.core.factory.Factory.deserialize", false]], "deserialize() (filteredsinglecarrierwaveform class method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.Deserialize", false]], "deserialize() (fixedcrosssection class method)": [[32, "hermespy.channel.radar.multi.FixedCrossSection.Deserialize", false]], "deserialize() (fmcw class method)": [[167, "hermespy.radar.fmcw.FMCW.Deserialize", false]], "deserialize() (fmcwwaveform class method)": [[138, "hermespy.modem.waveform_single_carrier.FMCWWaveform.Deserialize", false]], "deserialize() (framegeneratorstub class method)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGeneratorStub.Deserialize", false]], "deserialize() (gain class method)": [[209, "hermespy.simulation.rf_chain.analog_digital_converter.Gain.Deserialize", false]], "deserialize() (ganesan class method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.Deserialize", false]], "deserialize() (gridelement class method)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.GridElement.Deserialize", false]], "deserialize() (gridresource class method)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.Deserialize", false]], "deserialize() (guardsection class method)": [[146, "hermespy.modem.waveforms.orthogonal.waveform.GuardSection.Deserialize", false]], "deserialize() (idealantenna class method)": [[36, "hermespy.core.antennas.IdealAntenna.Deserialize", false]], "deserialize() (idealchannel class method)": [[29, "hermespy.channel.ideal.IdealChannel.Deserialize", false]], "deserialize() (idealchannelrealization class method)": [[29, "hermespy.channel.ideal.IdealChannelRealization.Deserialize", false]], "deserialize() (impedancecoupling class method)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.Deserialize", false]], "deserialize() (indoorfactory class method)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.Deserialize", false]], "deserialize() (indoorfactoryrealization class method)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactoryRealization.Deserialize", false]], "deserialize() (indooroffice class method)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOffice.Deserialize", false]], "deserialize() (indoorofficerealization class method)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOfficeRealization.Deserialize", false]], "deserialize() (jcasreception class method)": [[97, "hermespy.jcas.jcas.JCASReception.Deserialize", false]], "deserialize() (jcastransmission class method)": [[97, "hermespy.jcas.jcas.JCASTransmission.Deserialize", false]], "deserialize() (linearantenna class method)": [[36, "hermespy.core.antennas.LinearAntenna.Deserialize", false]], "deserialize() (lineartrajectory class method)": [[173, "hermespy.simulation.animation.LinearTrajectory.Deserialize", false]], "deserialize() (matchedfilterjcas class method)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas.Deserialize", false]], "deserialize() (maxdetector class method)": [[158, "hermespy.radar.detection.MaxDetector.Deserialize", false]], "deserialize() (maximumratiocombining class method)": [[123, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.Deserialize", false]], "deserialize() (mixingoperator class method)": [[44, "hermespy.core.device.MixingOperator.Deserialize", false]], "deserialize() (moveable class method)": [[173, "hermespy.simulation.animation.Moveable.Deserialize", false]], "deserialize() (multipathfadingchannel class method)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.Deserialize", false]], "deserialize() (multipathfadingrealization class method)": [[26, "hermespy.channel.fading.fading.MultipathFadingRealization.Deserialize", false]], "deserialize() (multitargetradarchannel class method)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel.Deserialize", false]], "deserialize() (multitargetradarchannelrealization class method)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannelRealization.Deserialize", false]], "deserialize() (n0 class method)": [[201, "hermespy.simulation.noise.level.N0.Deserialize", false]], "deserialize() (noantennacalibration class method)": [[83, "hermespy.hardware_loop.physical_device.NoAntennaCalibration.Deserialize", false]], "deserialize() (nodelaycalibration class method)": [[84, "hermespy.hardware_loop.physical_device.NoDelayCalibration.Deserialize", false]], "deserialize() (noiserealization class method)": [[200, "hermespy.simulation.noise.model.NoiseRealization.Deserialize", false]], "deserialize() (noleakagecalibration class method)": [[85, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.Deserialize", false]], "deserialize() (nophasenoise class method)": [[220, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.Deserialize", false]], "deserialize() (ofdmradar class method)": [[99, "hermespy.jcas.ofdm_radar.OFDMRadar.Deserialize", false]], "deserialize() (operationresult class method)": [[45, "hermespy.core.device.OperationResult.Deserialize", false]], "deserialize() (orthogonalwaveform class method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.Deserialize", false]], "deserialize() (oscillatorphasenoise class method)": [[221, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.Deserialize", false]], "deserialize() (patchantenna class method)": [[36, "hermespy.core.antennas.PatchAntenna.Deserialize", false]], "deserialize() (perfectcoupling class method)": [[188, "hermespy.simulation.coupling.perfect.PerfectCoupling.Deserialize", false]], "deserialize() (perfectisolation class method)": [[194, "hermespy.simulation.isolation.perfect.PerfectIsolation.Deserialize", false]], "deserialize() (physicaldevicedummy class method)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.Deserialize", false]], "deserialize() (physicalradartarget class method)": [[32, "hermespy.channel.radar.multi.PhysicalRadarTarget.Deserialize", false]], "deserialize() (pilotsection class method)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.Deserialize", false]], "deserialize() (pointdetection class method)": [[159, "hermespy.radar.detection.PointDetection.Deserialize", false]], "deserialize() (poweramplifier class method)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.Deserialize", false]], "deserialize() (precoding class method)": [[62, "hermespy.core.precoding.Precoding.Deserialize", false]], "deserialize() (processeddeviceinput class method)": [[47, "hermespy.core.device.ProcessedDeviceInput.Deserialize", false]], "deserialize() (processedsimulateddeviceinput class method)": [[226, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.Deserialize", false]], "deserialize() (pskqammapping class method)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.Deserialize", false]], "deserialize() (quadrigachannel class method)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannel.Deserialize", false]], "deserialize() (quadrigachannelrealization class method)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannelRealization.Deserialize", false]], "deserialize() (radarcube class method)": [[157, "hermespy.radar.cube.RadarCube.Deserialize", false]], "deserialize() (radarinterferencepath class method)": [[33, "hermespy.channel.radar.radar.RadarInterferencePath.Deserialize", false]], "deserialize() (radarpointcloud class method)": [[161, "hermespy.radar.detection.RadarPointCloud.Deserialize", false]], "deserialize() (radarreception class method)": [[170, "hermespy.radar.radar.RadarReception.Deserialize", false]], "deserialize() (radartargetpath class method)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.Deserialize", false]], "deserialize() (randombitssource class method)": [[100, "hermespy.modem.bits_source.RandomBitsSource.Deserialize", false]], "deserialize() (randomdelaychannel class method)": [[19, "hermespy.channel.delay.random.RandomDelayChannel.Deserialize", false]], "deserialize() (randomdelaychannelrealization class method)": [[19, "hermespy.channel.delay.random.RandomDelayChannelRealization.Deserialize", false]], "deserialize() (randomrealization class method)": [[63, "hermespy.core.random_node.RandomRealization.Deserialize", false]], "deserialize() (randomtrigger class method)": [[233, "hermespy.simulation.simulated_device.RandomTrigger.Deserialize", false]], "deserialize() (rapppoweramplifier class method)": [[217, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.Deserialize", false]], "deserialize() (receivingmodem class method)": [[118, "hermespy.modem.modem.ReceivingModem.Deserialize", false]], "deserialize() (repetitionencoder class method)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder.Deserialize", false]], "deserialize() (rfchain class method)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.Deserialize", false]], "deserialize() (ruralmacrocells class method)": [[10, "hermespy.channel.cdl.rural_macrocells.RuralMacrocells.Deserialize", false]], "deserialize() (ruralmacrocellsrealization class method)": [[10, "hermespy.channel.cdl.rural_macrocells.RuralMacrocellsRealization.Deserialize", false]], "deserialize() (salehpoweramplifier class method)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.Deserialize", false]], "deserialize() (sampleoffsettrigger class method)": [[234, "hermespy.simulation.simulated_device.SampleOffsetTrigger.Deserialize", false]], "deserialize() (scalarantennacalibration class method)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration.Deserialize", false]], "deserialize() (scenario class method)": [[64, "hermespy.core.scenario.Scenario.Deserialize", false]], "deserialize() (scrambler3gpp class method)": [[79, "hermespy.fec.scrambler.Scrambler3GPP.Deserialize", false]], "deserialize() (scrambler80211a class method)": [[79, "hermespy.fec.scrambler.Scrambler80211a.Deserialize", false]], "deserialize() (selectiveleakage class method)": [[195, "hermespy.simulation.isolation.selective.SelectiveLeakage.Deserialize", false]], "deserialize() (selectiveleakagecalibration class method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.Deserialize", false]], "deserialize() (serializable class method)": [[55, "hermespy.core.factory.Serializable.Deserialize", false]], "deserialize() (serializableenum class method)": [[55, "hermespy.core.factory.SerializableEnum.Deserialize", false]], "deserialize() (si class method)": [[190, "hermespy.simulation.evaluators.interference.SI.Deserialize", false]], "deserialize() (signal class method)": [[65, "hermespy.core.signal_model.Signal.Deserialize", false]], "deserialize() (signalblock class method)": [[65, "hermespy.core.signal_model.SignalBlock.Deserialize", false]], "deserialize() (signalreceiver class method)": [[60, "hermespy.core.operators.SignalReceiver.Deserialize", false]], "deserialize() (signaltransmitter class method)": [[60, "hermespy.core.operators.SignalTransmitter.Deserialize", false]], "deserialize() (silenttransmitter class method)": [[60, "hermespy.core.operators.SilentTransmitter.Deserialize", false]], "deserialize() (simplexlink class method)": [[119, "hermespy.modem.modem.SimplexLink.Deserialize", false]], "deserialize() (simulateddevice class method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.Deserialize", false]], "deserialize() (simulateddeviceoutput class method)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.Deserialize", false]], "deserialize() (simulateddevicereceiverealization class method)": [[228, "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization.Deserialize", false]], "deserialize() (simulateddevicereception class method)": [[229, "hermespy.simulation.simulated_device.SimulatedDeviceReception.Deserialize", false]], "deserialize() (simulateddevicetransmission class method)": [[230, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission.Deserialize", false]], "deserialize() (simulateddrop class method)": [[189, "hermespy.simulation.drop.SimulatedDrop.Deserialize", false]], "deserialize() (singlecarrier class method)": [[124, "hermespy.modem.precoding.single_carrier.SingleCarrier.Deserialize", false]], "deserialize() (singletargetradarchannel class method)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.Deserialize", false]], "deserialize() (singletargetradarchannelrealization class method)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannelRealization.Deserialize", false]], "deserialize() (sionnartchannel class method)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannel.Deserialize", false]], "deserialize() (sionnartchannelrealization class method)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelRealization.Deserialize", false]], "deserialize() (snr class method)": [[202, "hermespy.simulation.noise.level.SNR.Deserialize", false]], "deserialize() (spatialdelaychannel class method)": [[20, "hermespy.channel.delay.spatial.SpatialDelayChannel.Deserialize", false]], "deserialize() (spatialdelaychannelrealization class method)": [[20, "hermespy.channel.delay.spatial.SpatialDelayChannelRealization.Deserialize", false]], "deserialize() (specificisolation class method)": [[196, "hermespy.simulation.isolation.specific.SpecificIsolation.Deserialize", false]], "deserialize() (sphericalfocus class method)": [[1, "hermespy.beamforming.beamformer.SphericalFocus.Deserialize", false]], "deserialize() (statedsymbols class method)": [[127, "hermespy.modem.symbols.StatedSymbols.Deserialize", false]], "deserialize() (staticconsistentrealization class method)": [[17, "hermespy.channel.consistent.StaticConsistentRealization.Deserialize", false]], "deserialize() (statictrajectory class method)": [[173, "hermespy.simulation.animation.StaticTrajectory.Deserialize", false]], "deserialize() (statictrigger class method)": [[235, "hermespy.simulation.simulated_device.StaticTrigger.Deserialize", false]], "deserialize() (streambitssource class method)": [[100, "hermespy.modem.bits_source.StreamBitsSource.Deserialize", false]], "deserialize() (symbols class method)": [[127, "hermespy.modem.symbols.Symbols.Deserialize", false]], "deserialize() (symbolsection class method)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.Deserialize", false]], "deserialize() (synchronization class method)": [[132, "hermespy.modem.waveform.Synchronization.Deserialize", false]], "deserialize() (tdl class method)": [[28, "hermespy.channel.fading.tdl.TDL.Deserialize", false]], "deserialize() (thresholddetector class method)": [[162, "hermespy.radar.detection.ThresholdDetector.Deserialize", false]], "deserialize() (timeoffsettrigger class method)": [[236, "hermespy.simulation.simulated_device.TimeOffsetTrigger.Deserialize", false]], "deserialize() (transformable class method)": [[67, "hermespy.core.transformation.Transformable.Deserialize", false]], "deserialize() (transformation class method)": [[67, "hermespy.core.transformation.Transformation.Deserialize", false]], "deserialize() (transmittingmodem class method)": [[120, "hermespy.modem.modem.TransmittingModem.Deserialize", false]], "deserialize() (triggerrealization class method)": [[238, "hermespy.simulation.simulated_device.TriggerRealization.Deserialize", false]], "deserialize() (uniformarray class method)": [[36, "hermespy.core.antennas.UniformArray.Deserialize", false]], "deserialize() (urbanmacrocells class method)": [[11, "hermespy.channel.cdl.urban_macrocells.UrbanMacrocells.Deserialize", false]], "deserialize() (urbanmacrocellsrealization class method)": [[11, "hermespy.channel.cdl.urban_macrocells.UrbanMacrocellsRealization.Deserialize", false]], "deserialize() (urbanmicrocells class method)": [[12, "hermespy.channel.cdl.urban_microcells.UrbanMicrocells.Deserialize", false]], "deserialize() (urbanmicrocellsrealization class method)": [[12, "hermespy.channel.cdl.urban_microcells.UrbanMicrocellsRealization.Deserialize", false]], "deserialize() (usrpdevice class method)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.Deserialize", false]], "deserialize() (virtualradartarget class method)": [[32, "hermespy.channel.radar.multi.VirtualRadarTarget.Deserialize", false]], "deserialize_antenna() (antenna class method)": [[36, "hermespy.core.antennas.Antenna.Deserialize_Antenna", false]], "deserialize_array() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_array", false]], "deserialize_array() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.deserialize_array", false]], "deserialize_complex() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_complex", false]], "deserialize_complex() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.deserialize_complex", false]], "deserialize_custom() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_custom", false]], "deserialize_custom() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.deserialize_custom", false]], "deserialize_floating() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_floating", false]], "deserialize_floating() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.deserialize_floating", false]], "deserialize_integer() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_integer", false]], "deserialize_integer() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.deserialize_integer", false]], "deserialize_object() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_object", false]], "deserialize_object_sequence() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_object_sequence", false]], "deserialize_object_sequence() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.deserialize_object_sequence", false]], "deserialize_range() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_range", false]], "deserialize_string() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.deserialize_string", false]], "deserialize_string() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.deserialize_string", false]], "detect() (maxdetector method)": [[158, "hermespy.radar.detection.MaxDetector.detect", false]], "detect() (radardetector method)": [[160, "hermespy.radar.detection.RadarDetector.detect", false]], "detect() (thresholddetector method)": [[162, "hermespy.radar.detection.ThresholdDetector.detect", false]], "detect_bits() (pskqammapping method)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.detect_bits", false]], "detectionprobabilityevaluation (class in hermespy.radar.evaluators)": [[163, "hermespy.radar.evaluators.DetectionProbabilityEvaluation", false]], "detectionprobartifact (class in hermespy.radar.evaluators)": [[163, "hermespy.radar.evaluators.DetectionProbArtifact", false]], "detectionprobevaluator (class in hermespy.radar.evaluators)": [[163, "hermespy.radar.evaluators.DetectionProbEvaluator", false]], "detector (radarbase property)": [[169, "hermespy.radar.radar.RadarBase.detector", false]], "device (calibration property)": [[89, "hermespy.hardware_loop.physical_device.Calibration.device", false]], "device (class in hermespy.core.device)": [[39, "hermespy.core.device.Device", false]], "device (coupling property)": [[186, "hermespy.simulation.coupling.coupling.Coupling.device", false]], "device (hardwareloopdeviceplot property)": [[95, "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot.device", false]], "device (isolation property)": [[193, "hermespy.simulation.isolation.isolation.Isolation.device", false]], "device (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.device", false]], "device_channels() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.device_channels", false]], "device_id (devicestate property)": [[66, "hermespy.core.state.DeviceState.device_id", false]], "device_index() (pipeline method)": [[61, "hermespy.core.pipeline.Pipeline.device_index", false]], "device_index() (scenario method)": [[64, "hermespy.core.scenario.Scenario.device_index", false]], "device_receptions (drop property)": [[52, "hermespy.core.drop.Drop.device_receptions", false]], "device_registered() (scenario method)": [[64, "hermespy.core.scenario.Scenario.device_registered", false]], "device_transmissions (drop property)": [[52, "hermespy.core.drop.Drop.device_transmissions", false]], "devicefocus (class in hermespy.simulation.beamforming)": [[184, "hermespy.simulation.beamforming.DeviceFocus", false]], "deviceinput (class in hermespy.core.device)": [[40, "hermespy.core.device.DeviceInput", false]], "deviceoutput (class in hermespy.core.device)": [[41, "hermespy.core.device.DeviceOutput", false]], "devicereception (class in hermespy.core.device)": [[42, "hermespy.core.device.DeviceReception", false]], "devicereceptionplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.DeviceReceptionPlot", false]], "devices (scenario property)": [[64, "hermespy.core.scenario.Scenario.devices", false]], "devices (simulation property)": [[231, "hermespy.simulation.simulation.Simulation.devices", false]], "devices (triggermodel property)": [[237, "hermespy.simulation.simulated_device.TriggerModel.devices", false]], "devicestate (class in hermespy.core.state)": [[66, "hermespy.core.state.DeviceState", false]], "devicetransmission (class in hermespy.core.device)": [[43, "hermespy.core.device.DeviceTransmission", false]], "devicetransmissionplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.DeviceTransmissionPlot", false]], "devicetype (class in hermespy.core.device)": [[39, "hermespy.core.device.DeviceType", false]], "dft (class in hermespy.modem.precoding.dft)": [[122, "hermespy.modem.precoding.dft.DFT", false]], "dftnorm (class in hermespy.modem.precoding.dft)": [[122, "hermespy.modem.precoding.dft.DFTNorm", false]], "dh (factorytype attribute)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType.DH", false]], "dimension (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.dimension", false]], "dimensions (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.dimensions", false]], "dimensions (uniformarray property)": [[36, "hermespy.core.antennas.UniformArray.dimensions", false]], "dipole (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.Dipole", false]], "direction (class in hermespy.core.transformation)": [[67, "hermespy.core.transformation.Direction", false]], "dl (factorytype attribute)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType.DL", false]], "doppler_bins (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.doppler_bins", false]], "doppler_frequency (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.doppler_frequency", false]], "drop (class in hermespy.core.drop)": [[52, "hermespy.core.drop.Drop", false]], "drop (hardwareloopsample property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample.drop", false]], "drop() (scenario method)": [[64, "hermespy.core.scenario.Scenario.drop", false]], "drop() (simulation method)": [[231, "hermespy.simulation.simulation.Simulation.drop", false]], "drop() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.drop", false]], "drop_duration (scenario property)": [[64, "hermespy.core.scenario.Scenario.drop_duration", false]], "drop_interval (simulation property)": [[231, "hermespy.simulation.simulation.Simulation.drop_interval", false]], "drops (iterationpriority attribute)": [[86, "hermespy.hardware_loop.hardware_loop.IterationPriority.DROPS", false]], "droptype (class in hermespy.core.drop)": [[52, "hermespy.core.drop.DropType", false]], "drt (class in hermespy.core.device)": [[42, "hermespy.core.device.DRT", false]], "dst (class in hermespy.core.state)": [[66, "hermespy.core.state.DST", false]], "dtt (class in hermespy.core.device)": [[43, "hermespy.core.device.DTT", false]], "dualconsistentrealization (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.DualConsistentRealization", false]], "dualconsistentsample (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.DualConsistentSample", false]], "dump_results (simulation attribute)": [[231, "hermespy.simulation.simulation.Simulation.dump_results", false]], "duplex (antennamode attribute)": [[36, "hermespy.core.antennas.AntennaMode.DUPLEX", false]], "duplexjcasoperator (class in hermespy.jcas.jcas)": [[97, "hermespy.jcas.jcas.DuplexJCASOperator", false]], "duplexmodem (class in hermespy.modem.modem)": [[117, "hermespy.modem.modem.DuplexModem", false]], "duration (guardsection property)": [[146, "hermespy.modem.waveforms.orthogonal.waveform.GuardSection.duration", false]], "duration (signal property)": [[65, "hermespy.core.signal_model.Signal.duration", false]], "e (cdltype attribute)": [[6, "hermespy.channel.cdl.CDLType.E", false]], "e (tdltype attribute)": [[28, "hermespy.channel.fading.tdl.TDLType.E", false]], "ebn0 (class in hermespy.simulation.modem.noise)": [[198, "hermespy.simulation.modem.noise.EBN0", false]], "elements (gridresource attribute)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.elements", false]], "elementtype (class in hermespy.modem.waveforms.orthogonal.waveform)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.ElementType", false]], "emerging_signals (deviceoutput property)": [[41, "hermespy.core.device.DeviceOutput.emerging_signals", false]], "emerging_signals (simulateddeviceoutput property)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.emerging_signals", false]], "empty() (densesignal static method)": [[65, "hermespy.core.signal_model.DenseSignal.Empty", false]], "empty() (signal static method)": [[65, "hermespy.core.signal_model.Signal.Empty", false]], "empty() (sparsesignal static method)": [[65, "hermespy.core.signal_model.SparseSignal.Empty", false]], "enabled (bchcoding attribute)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding.enabled", false]], "enabled (encoder property)": [[71, "hermespy.fec.coding.Encoder.enabled", false]], "enabled (ldpccoding attribute)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding.enabled", false]], "enabled (polarsccoding attribute)": [[75, "hermespy.fec.aff3ct.polar.PolarSCCoding.enabled", false]], "enabled (polarsclcoding attribute)": [[75, "hermespy.fec.aff3ct.polar.PolarSCLCoding.enabled", false]], "enabled (reedsolomoncoding attribute)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding.enabled", false]], "enabled (rsccoding attribute)": [[78, "hermespy.fec.aff3ct.rsc.RSCCoding.enabled", false]], "enabled (turbocoding attribute)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding.enabled", false]], "encode() (bchcoding method)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding.encode", false]], "encode() (blockinterleaver method)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.encode", false]], "encode() (cyclicredundancycheck method)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.encode", false]], "encode() (encoder method)": [[71, "hermespy.fec.coding.Encoder.encode", false]], "encode() (encodermanager method)": [[71, "hermespy.fec.coding.EncoderManager.encode", false]], "encode() (ldpccoding method)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding.encode", false]], "encode() (polarsccoding method)": [[75, "hermespy.fec.aff3ct.polar.PolarSCCoding.encode", false]], "encode() (polarsclcoding method)": [[75, "hermespy.fec.aff3ct.polar.PolarSCLCoding.encode", false]], "encode() (reedsolomoncoding method)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding.encode", false]], "encode() (repetitionencoder method)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder.encode", false]], "encode() (rsccoding method)": [[78, "hermespy.fec.aff3ct.rsc.RSCCoding.encode", false]], "encode() (scrambler3gpp method)": [[79, "hermespy.fec.scrambler.Scrambler3GPP.encode", false]], "encode() (scrambler80211a method)": [[79, "hermespy.fec.scrambler.Scrambler80211a.encode", false]], "encode() (turbocoding method)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding.encode", false]], "encode_rate (transmitsymbolcoding property)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolCoding.encode_rate", false]], "encode_rate (transmitsymbolencoder property)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolEncoder.encode_rate", false]], "encode_streams() (transmitbeamformer method)": [[1, "hermespy.beamforming.beamformer.TransmitBeamformer.encode_streams", false]], "encode_streams() (transmitsignalcoding method)": [[62, "hermespy.core.precoding.TransmitSignalCoding.encode_streams", false]], "encode_streams() (transmitstreamencoder method)": [[62, "hermespy.core.precoding.TransmitStreamEncoder.encode_streams", false]], "encode_symbols() (alamouti method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.encode_symbols", false]], "encode_symbols() (dft method)": [[122, "hermespy.modem.precoding.dft.DFT.encode_symbols", false]], "encode_symbols() (ganesan method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.encode_symbols", false]], "encode_symbols() (transmitsymbolcoding method)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolCoding.encode_symbols", false]], "encode_symbols() (transmitsymbolencoder method)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolEncoder.encode_symbols", false]], "encoded_bits (communicationreception property)": [[113, "hermespy.modem.modem.CommunicationReception.encoded_bits", false]], "encoded_bits (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.encoded_bits", false]], "encoded_bits (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_bits", false]], "encoded_symbols (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_symbols", false]], "encoder (class in hermespy.fec.coding)": [[71, "hermespy.fec.coding.Encoder", false]], "encoder_manager (basemodem property)": [[112, "hermespy.modem.modem.BaseModem.encoder_manager", false]], "encodermanager (class in hermespy.fec.coding)": [[71, "hermespy.fec.coding.EncoderManager", false]], "encoders (encodermanager property)": [[71, "hermespy.fec.coding.EncoderManager.encoders", false]], "end (signalblock property)": [[65, "hermespy.core.signal_model.SignalBlock.end", false]], "energy (densesignal property)": [[65, "hermespy.core.signal_model.DenseSignal.energy", false]], "energy (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.energy", false]], "energy (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.energy", false]], "energy (signal property)": [[65, "hermespy.core.signal_model.Signal.energy", false]], "energy (signalblock property)": [[65, "hermespy.core.signal_model.SignalBlock.energy", false]], "energy (signalreceiver property)": [[60, "hermespy.core.operators.SignalReceiver.energy", false]], "equalize_channel() (channelequalization method)": [[129, "hermespy.modem.waveform.ChannelEqualization.equalize_channel", false]], "equalize_channel() (zeroforcingchannelequalization method)": [[133, "hermespy.modem.waveform.ZeroForcingChannelEqualization.equalize_channel", false]], "equalize_symbols() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.equalize_symbols", false]], "equalized_symbols (communicationreception property)": [[113, "hermespy.modem.modem.CommunicationReception.equalized_symbols", false]], "equalized_symbols (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.equalized_symbols", false]], "error (verbosity attribute)": [[38, "hermespy.core.definitions.Verbosity.ERROR", false]], "errorevaluation (class in hermespy.modem.evaluators)": [[102, "hermespy.modem.evaluators.ErrorEvaluation", false]], "esn0 (class in hermespy.simulation.modem.noise)": [[199, "hermespy.simulation.modem.noise.ESN0", false]], "estimate() (delaycalibration static method)": [[84, "hermespy.hardware_loop.calibration.delay.DelayCalibration.Estimate", false]], "estimate() (fmcw method)": [[167, "hermespy.radar.fmcw.FMCW.estimate", false]], "estimate() (radarwaveform method)": [[172, "hermespy.radar.radar.RadarWaveform.estimate", false]], "estimate() (scalarantennacalibration static method)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration.Estimate", false]], "estimate_channel() (channelestimation method)": [[130, "hermespy.modem.waveform.ChannelEstimation.estimate_channel", false]], "estimate_channel() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.estimate_channel", false]], "estimate_delay() (selectiveleakagecalibration method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.estimate_delay", false]], "estimate_gain() (automaticgaincontrol method)": [[208, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.estimate_gain", false]], "estimate_gain() (gain method)": [[209, "hermespy.simulation.rf_chain.analog_digital_converter.Gain.estimate_gain", false]], "estimate_gain() (gaincontrolbase method)": [[210, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.estimate_gain", false]], "estimate_noise_power() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.estimate_noise_power", false]], "et (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.ET", false]], "ev (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.EV", false]], "evaluate() (biterrorevaluator method)": [[104, "hermespy.modem.evaluators.BitErrorEvaluator.evaluate", false]], "evaluate() (blockerrorevaluator method)": [[105, "hermespy.modem.evaluators.BlockErrorEvaluator.evaluate", false]], "evaluate() (constellationevm method)": [[106, "hermespy.modem.evaluators.ConstellationEVM.evaluate", false]], "evaluate() (detectionprobevaluator method)": [[163, "hermespy.radar.evaluators.DetectionProbEvaluator.evaluate", false]], "evaluate() (evaluator method)": [[59, "hermespy.core.monte_carlo.Evaluator.evaluate", false]], "evaluate() (frameerrorevaluator method)": [[107, "hermespy.modem.evaluators.FrameErrorEvaluator.evaluate", false]], "evaluate() (receivepowerevaluator method)": [[53, "hermespy.core.evaluators.ReceivePowerEvaluator.evaluate", false]], "evaluate() (receiveroperatingcharacteristic method)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.evaluate", false]], "evaluate() (rootmeansquareerror method)": [[166, "hermespy.radar.evaluators.RootMeanSquareError.evaluate", false]], "evaluate() (si method)": [[190, "hermespy.simulation.evaluators.interference.SI.evaluate", false]], "evaluate() (ssinr method)": [[190, "hermespy.simulation.evaluators.interference.SSINR.evaluate", false]], "evaluate() (throughputevaluator method)": [[108, "hermespy.modem.evaluators.ThroughputEvaluator.evaluate", false]], "evaluate() (transmitpowerevaluator method)": [[53, "hermespy.core.evaluators.TransmitPowerEvaluator.evaluate", false]], "evaluateddrop (class in hermespy.core.drop)": [[52, "hermespy.core.drop.EvaluatedDrop", false]], "evaluation (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.Evaluation", false]], "evaluation (evaluationtemplate property)": [[59, "hermespy.core.monte_carlo.EvaluationTemplate.evaluation", false]], "evaluation_results (montecarloresult property)": [[59, "hermespy.core.monte_carlo.MonteCarloResult.evaluation_results", false]], "evaluationplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.EvaluationPlot", false]], "evaluationresult (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.EvaluationResult", false]], "evaluations (hardwareloopsample property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample.evaluations", false]], "evaluationtemplate (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.EvaluationTemplate", false]], "evaluator (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.Evaluator", false]], "evaluator (evaluationresult property)": [[59, "hermespy.core.monte_carlo.EvaluationResult.evaluator", false]], "evaluator (hardwareloopevaluatorplot property)": [[95, "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot.evaluator", false]], "evaluator_index (hardwareloopevaluatorplot property)": [[95, "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot.evaluator_index", false]], "evaluator_index() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.evaluator_index", false]], "evaluators (hardwareloop property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.evaluators", false]], "evaluators (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.evaluators", false]], "evmartifact (class in hermespy.modem.evaluators)": [[106, "hermespy.modem.evaluators.EVMArtifact", false]], "evmevaluation (class in hermespy.modem.evaluators)": [[106, "hermespy.modem.evaluators.EVMEvaluation", false]], "executable (class in hermespy.core.executable)": [[54, "hermespy.core.executable.Executable", false]], "execute() (executable method)": [[54, "hermespy.core.executable.Executable.execute", false]], "expected_energy_scale (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.expected_energy_scale", false]], "expected_energy_scale (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.expected_energy_scale", false]], "expected_energy_scale (delaychannelsample property)": [[18, "hermespy.channel.delay.delay.DelayChannelSample.expected_energy_scale", false]], "expected_energy_scale (idealchannelsample property)": [[29, "hermespy.channel.ideal.IdealChannelSample.expected_energy_scale", false]], "expected_energy_scale (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.expected_energy_scale", false]], "expected_energy_scale (quadrigachannelsample property)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannelSample.expected_energy_scale", false]], "expected_energy_scale (radarchannelsample property)": [[33, "hermespy.channel.radar.radar.RadarChannelSample.expected_energy_scale", false]], "expected_energy_scale (sionnartchannelsample property)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelSample.expected_energy_scale", false]], "expected_state (clusterdelaylinebase property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase.expected_state", false]], "expected_state (clusterdelaylinerealization property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealization.expected_state", false]], "exponential (class in hermespy.channel.fading.exponential)": [[22, "hermespy.channel.fading.exponential.Exponential", false]], "eye (signal property)": [[65, "hermespy.core.signal_model.Signal.eye", false]], "eyeplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.EyePlot", false]], "factory (class in hermespy.core.factory)": [[55, "hermespy.core.factory.Factory", false]], "factory_type (indoorfactory property)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.factory_type", false]], "factorytype (class in hermespy.channel.cdl.indoor_factory)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType", false]], "fat (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.FAT", false]], "fetch_scalars() (consistentsample method)": [[17, "hermespy.channel.consistent.ConsistentSample.fetch_scalars", false]], "fetch_scalars() (dualconsistentsample method)": [[17, "hermespy.channel.consistent.DualConsistentSample.fetch_scalars", false]], "fetch_scalars() (staticconsistentsample method)": [[17, "hermespy.channel.consistent.StaticConsistentSample.fetch_scalars", false]], "figure (visualization property)": [[68, "hermespy.core.visualize.Visualization.figure", false]], "filter_length (rolledoffsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.filter_length", false]], "filter_order (signal attribute)": [[65, "hermespy.core.signal_model.Signal.filter_order", false]], "filteredsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform", false]], "finalize() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.finalize", false]], "finalize() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.finalize", false]], "finalize() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.finalize", false]], "finalize() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.finalize", false]], "first_impact (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.first_impact", false]], "first_impact (registereddimension property)": [[59, "hermespy.core.monte_carlo.RegisteredDimension.first_impact", false]], "fixedcrosssection (class in hermespy.channel.radar.multi)": [[32, "hermespy.channel.radar.multi.FixedCrossSection", false]], "floatingerror (class in hermespy.core.definitions)": [[38, "hermespy.core.definitions.FloatingError", false]], "fmcw (class in hermespy.radar.fmcw)": [[167, "hermespy.radar.fmcw.FMCW", false]], "fmcwwaveform (class in hermespy.modem.waveform_single_carrier)": [[138, "hermespy.modem.waveform_single_carrier.FMCWWaveform", false]], "focused_device (devicefocus property)": [[184, "hermespy.simulation.beamforming.DeviceFocus.focused_device", false]], "forward (dftnorm attribute)": [[122, "hermespy.modem.precoding.dft.DFTNorm.FORWARD", false]], "forwards_transformation (transformable property)": [[67, "hermespy.core.transformation.Transformable.forwards_transformation", false]], "forwards_transformation (transformablebase property)": [[67, "hermespy.core.transformation.TransformableBase.forwards_transformation", false]], "forwards_transformation (transformablelink property)": [[67, "hermespy.core.transformation.TransformableLink.forwards_transformation", false]], "frame_duration (basemodem property)": [[112, "hermespy.modem.modem.BaseModem.frame_duration", false]], "frame_duration (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.frame_duration", false]], "frame_duration (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.frame_duration", false]], "frame_duration (duplexjcasoperator property)": [[97, "hermespy.jcas.jcas.DuplexJCASOperator.frame_duration", false]], "frame_duration (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.frame_duration", false]], "frame_duration (matchedfilterjcas property)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas.frame_duration", false]], "frame_duration (operator property)": [[46, "hermespy.core.device.Operator.frame_duration", false]], "frame_duration (radar property)": [[169, "hermespy.radar.radar.Radar.frame_duration", false]], "frame_duration (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.frame_duration", false]], "frame_duration (staticoperator property)": [[60, "hermespy.core.operators.StaticOperator.frame_duration", false]], "frame_generator (basemodem property)": [[112, "hermespy.modem.modem.BaseModem.frame_generator", false]], "frameerrorartifact (class in hermespy.modem.evaluators)": [[107, "hermespy.modem.evaluators.FrameErrorArtifact", false]], "frameerrorevaluation (class in hermespy.modem.evaluators)": [[107, "hermespy.modem.evaluators.FrameErrorEvaluation", false]], "frameerrorevaluator (class in hermespy.modem.evaluators)": [[107, "hermespy.modem.evaluators.FrameErrorEvaluator", false]], "framegenerator (class in hermespy.modem.frame_generator.frame_generator)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGenerator", false]], "framegeneratorscapy (class in hermespy.modem.frame_generator.scapy)": [[109, "hermespy.modem.frame_generator.scapy.FrameGeneratorScapy", false]], "framegeneratorstub (class in hermespy.modem.frame_generator.frame_generator)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGeneratorStub", false]], "frames (communicationreception attribute)": [[113, "hermespy.modem.modem.CommunicationReception.frames", false]], "frames (communicationtransmission attribute)": [[115, "hermespy.modem.modem.CommunicationTransmission.frames", false]], "freq_difference (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.freq_difference", false]], "frequencies (dualconsistentrealization property)": [[17, "hermespy.channel.consistent.DualConsistentRealization.frequencies", false]], "frequencies (signal property)": [[65, "hermespy.core.signal_model.Signal.frequencies", false]], "frequency_selectivity (channelstateformat attribute)": [[37, "hermespy.core.channel.ChannelStateFormat.FREQUENCY_SELECTIVITY", false]], "from_artifacts() (scalarevaluationresult class method)": [[59, "hermespy.core.monte_carlo.ScalarEvaluationResult.From_Artifacts", false]], "from_cartesian() (direction class method)": [[67, "hermespy.core.transformation.Direction.From_Cartesian", false]], "from_deviceoutput() (simulateddeviceoutput class method)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.From_DeviceOutput", false]], "from_hdf() (factory method)": [[55, "hermespy.core.factory.Factory.from_HDF", false]], "from_interleaved() (signal class method)": [[65, "hermespy.core.signal_model.Signal.from_interleaved", false]], "from_ndarray() (signal method)": [[65, "hermespy.core.signal_model.Signal.from_ndarray", false]], "from_output() (devicetransmission class method)": [[43, "hermespy.core.device.DeviceTransmission.From_Output", false]], "from_parameters() (serializableenum class method)": [[55, "hermespy.core.factory.SerializableEnum.from_parameters", false]], "from_processeddeviceinput() (devicereception class method)": [[42, "hermespy.core.device.DeviceReception.From_ProcessedDeviceInput", false]], "from_processedsimulateddeviceinput() (simulateddevicereception class method)": [[229, "hermespy.simulation.simulated_device.SimulatedDeviceReception.From_ProcessedSimulatedDeviceInput", false]], "from_quaternion() (transformation class method)": [[67, "hermespy.core.transformation.Transformation.From_Quaternion", false]], "from_rpy() (transformation class method)": [[67, "hermespy.core.transformation.Transformation.From_RPY", false]], "from_simulateddeviceoutput() (simulateddevicetransmission class method)": [[230, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission.From_SimulatedDeviceOutput", false]], "from_spherical() (direction class method)": [[67, "hermespy.core.transformation.Direction.From_Spherical", false]], "from_translation() (statictrajectory static method)": [[173, "hermespy.simulation.animation.StaticTrajectory.From_Translation", false]], "from_translation() (transformation class method)": [[67, "hermespy.core.transformation.Transformation.From_Translation", false]], "from_tuple() (logarithmic class method)": [[58, "hermespy.core.logarithmic.Logarithmic.From_Tuple", false]], "fromfile() (receiveroperatingcharacteristic class method)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.FromFile", false]], "fromscenario() (receiveroperatingcharacteristic static method)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.FromScenario", false]], "fromscenarios() (receiveroperatingcharacteristic static method)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.FromScenarios", false]], "fromspherical() (pointdetection class method)": [[159, "hermespy.radar.detection.PointDetection.FromSpherical", false]], "ft (class in hermespy.beamforming.beamformer)": [[1, "hermespy.beamforming.beamformer.FT", false]], "gain (analogdigitalconverter attribute)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.gain", false]], "gain (channel property)": [[13, "hermespy.channel.channel.Channel.gain", false]], "gain (channelrealization property)": [[14, "hermespy.channel.channel.ChannelRealization.gain", false]], "gain (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[209, "hermespy.simulation.rf_chain.analog_digital_converter.Gain", false]], "gain (custompoweramplifier property)": [[215, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.gain", false]], "gain (delaychannelsample property)": [[18, "hermespy.channel.delay.delay.DelayChannelSample.gain", false]], "gain (gain property)": [[209, "hermespy.simulation.rf_chain.analog_digital_converter.Gain.gain", false]], "gain (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.gain", false]], "gain (radarchannelsample property)": [[33, "hermespy.channel.radar.radar.RadarChannelSample.gain", false]], "gaincontrolbase (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[210, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase", false]], "gaincontroltype (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[211, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType", false]], "ganesan (class in hermespy.modem.precoding.space_time_block_coding)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan", false]], "gaussian() (consistentgenerator method)": [[17, "hermespy.channel.consistent.ConsistentGenerator.gaussian", false]], "generate() (pilotsection method)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.generate", false]], "generate() (pseudorandomgenerator method)": [[79, "hermespy.fec.scrambler.PseudoRandomGenerator.generate", false]], "generate_bits() (bitssource method)": [[100, "hermespy.modem.bits_source.BitsSource.generate_bits", false]], "generate_bits() (randombitssource method)": [[100, "hermespy.modem.bits_source.RandomBitsSource.generate_bits", false]], "generate_bits() (streambitssource method)": [[100, "hermespy.modem.bits_source.StreamBitsSource.generate_bits", false]], "generate_output() (device method)": [[39, "hermespy.core.device.Device.generate_output", false]], "generate_output() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.generate_output", false]], "generate_outputs() (scenario method)": [[64, "hermespy.core.scenario.Scenario.generate_outputs", false]], "generate_outputs() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.generate_outputs", false]], "generate_pam_symbol_3gpp() (pskqammapping static method)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.generate_pam_symbol_3gpp", false]], "generate_result() (communicationevaluator method)": [[102, "hermespy.modem.evaluators.CommunicationEvaluator.generate_result", false]], "generate_result() (detectionprobevaluator method)": [[163, "hermespy.radar.evaluators.DetectionProbEvaluator.generate_result", false]], "generate_result() (evaluator method)": [[59, "hermespy.core.monte_carlo.Evaluator.generate_result", false]], "generate_result() (radarevaluator method)": [[164, "hermespy.radar.evaluators.RadarEvaluator.generate_result", false]], "generate_result() (receivepowerevaluator method)": [[53, "hermespy.core.evaluators.ReceivePowerEvaluator.generate_result", false]], "generate_result() (receiveroperatingcharacteristic method)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.generate_result", false]], "generate_result() (rootmeansquareerror method)": [[166, "hermespy.radar.evaluators.RootMeanSquareError.generate_result", false]], "generate_result() (si method)": [[190, "hermespy.simulation.evaluators.interference.SI.generate_result", false]], "generate_result() (transmitpowerevaluator method)": [[53, "hermespy.core.evaluators.TransmitPowerEvaluator.generate_result", false]], "generate_sequence() (pseudorandomgenerator method)": [[79, "hermespy.fec.scrambler.PseudoRandomGenerator.generate_sequence", false]], "generateresult() (receiveroperatingcharacteristic static method)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.GenerateResult", false]], "generator() (randomrealization method)": [[63, "hermespy.core.random_node.RandomRealization.generator", false]], "get_cross_section() (fixedcrosssection method)": [[32, "hermespy.channel.radar.multi.FixedCrossSection.get_cross_section", false]], "get_cross_section() (radarcrosssectionmodel method)": [[32, "hermespy.channel.radar.multi.RadarCrossSectionModel.get_cross_section", false]], "get_llr_3gpp() (pskqammapping static method)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.get_llr_3gpp", false]], "get_mapping() (pskqammapping method)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.get_mapping", false]], "get_monitors() (in module hermespy.tools.tile)": [[243, "hermespy.tools.tile.get_monitors", false]], "get_power() (ebn0 method)": [[198, "hermespy.simulation.modem.noise.EBN0.get_power", false]], "get_power() (esn0 method)": [[199, "hermespy.simulation.modem.noise.ESN0.get_power", false]], "get_power() (n0 method)": [[201, "hermespy.simulation.noise.level.N0.get_power", false]], "get_power() (noiselevel method)": [[200, "hermespy.simulation.noise.level.NoiseLevel.get_power", false]], "get_power() (snr method)": [[202, "hermespy.simulation.noise.level.SNR.get_power", false]], "get_symbols() (pskqammapping method)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.get_symbols", false]], "getitem() (densesignal method)": [[65, "hermespy.core.signal_model.DenseSignal.getitem", false]], "getitem() (signal method)": [[65, "hermespy.core.signal_model.Signal.getitem", false]], "getstreams() (signal method)": [[65, "hermespy.core.signal_model.Signal.getstreams", false]], "getter() (registereddimension method)": [[59, "hermespy.core.monte_carlo.RegisteredDimension.getter", false]], "global_characteristics() (antenna method)": [[36, "hermespy.core.antennas.Antenna.global_characteristics", false]], "global_orientation (transformable property)": [[67, "hermespy.core.transformation.Transformable.global_orientation", false]], "global_position (transformable property)": [[67, "hermespy.core.transformation.Transformable.global_position", false]], "grid (evaluationresult property)": [[59, "hermespy.core.monte_carlo.EvaluationResult.grid", false]], "grid (iterationpriority attribute)": [[86, "hermespy.hardware_loop.hardware_loop.IterationPriority.GRID", false]], "grid_resources (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.grid_resources", false]], "grid_section (montecarlosample property)": [[59, "hermespy.core.monte_carlo.MonteCarloSample.grid_section", false]], "grid_structure (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.grid_structure", false]], "griddimension (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.GridDimension", false]], "gridelement (class in hermespy.modem.waveforms.orthogonal.waveform)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.GridElement", false]], "gridresource (class in hermespy.modem.waveforms.orthogonal.waveform)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource", false]], "gridsection (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.GridSection", false]], "gridsection (class in hermespy.modem.waveforms.orthogonal.waveform)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection", false]], "gridvisualization (class in hermespy.modem.waveforms.orthogonal.waveform)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.GridVisualization", false]], "ground_truth (radarinterferencepath property)": [[33, "hermespy.channel.radar.radar.RadarInterferencePath.ground_truth", false]], "ground_truth (radarpath property)": [[33, "hermespy.channel.radar.radar.RadarPath.ground_truth", false]], "ground_truth (radartargetpath property)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.ground_truth", false]], "guard_interval (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.guard_interval", false]], "guard_interval (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.guard_interval", false]], "guard_ratio (correlationsynchronization property)": [[136, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.guard_ratio", false]], "guardsection (class in hermespy.modem.waveforms.orthogonal.waveform)": [[146, "hermespy.modem.waveforms.orthogonal.waveform.GuardSection", false]], "h0_value (rocartifact property)": [[165, "hermespy.radar.evaluators.RocArtifact.h0_value", false]], "h1_value (rocartifact property)": [[165, "hermespy.radar.evaluators.RocArtifact.h1_value", false]], "hardware_loop (hardwareloopplot property)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.hardware_loop", false]], "hardwareloop (class in hermespy.hardware_loop.hardware_loop)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop", false]], "hardwareloopdeviceplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot", false]], "hardwareloopevaluatorplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot", false]], "hardwareloopplot (class in hermespy.hardware_loop.hardware_loop)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot", false]], "hardwareloopsample (class in hermespy.hardware_loop.hardware_loop)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample", false]], "hdf (serializationbackend attribute)": [[55, "hermespy.core.factory.SerializationBackend.HDF", false]], "hdf_group_name (antennacalibration attribute)": [[83, "hermespy.hardware_loop.physical_device.AntennaCalibration.hdf_group_name", false]], "hdf_group_name (calibration attribute)": [[89, "hermespy.hardware_loop.physical_device.Calibration.hdf_group_name", false]], "hdf_group_name (delaycalibrationbase attribute)": [[84, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.hdf_group_name", false]], "hdf_group_name (leakagecalibrationbase attribute)": [[85, "hermespy.hardware_loop.physical_device.LeakageCalibrationBase.hdf_group_name", false]], "hdfdeserializationprocess (class in hermespy.core.factory)": [[55, "hermespy.core.factory.HDFDeserializationProcess", false]], "hdfserializationprocess (class in hermespy.core.factory)": [[55, "hermespy.core.factory.HDFSerializationProcess", false]], "hermespy.beamforming.beamformer": [[1, "module-hermespy.beamforming.beamformer", false]], "hermespy.beamforming.capon": [[2, "module-hermespy.beamforming.capon", false]], "hermespy.beamforming.conventional": [[3, "module-hermespy.beamforming.conventional", false]], "hermespy.core.monte_carlo": [[59, "module-hermespy.core.monte_carlo", false]], "hermespy.core.random_node": [[63, "module-hermespy.core.random_node", false]], "hermespy.fec.aff3ct.bch": [[69, "module-hermespy.fec.aff3ct.bch", false]], "hermespy.fec.aff3ct.ldpc": [[74, "module-hermespy.fec.aff3ct.ldpc", false]], "hermespy.fec.aff3ct.polar": [[75, "module-hermespy.fec.aff3ct.polar", false]], "hermespy.fec.aff3ct.rs": [[77, "module-hermespy.fec.aff3ct.rs", false]], "hermespy.fec.aff3ct.rsc": [[78, "module-hermespy.fec.aff3ct.rsc", false]], "hermespy.fec.aff3ct.turbo": [[80, "module-hermespy.fec.aff3ct.turbo", false]], "hermespy.fec.block_interleaver": [[70, "module-hermespy.fec.block_interleaver", false]], "hermespy.fec.coding": [[71, "module-hermespy.fec.coding", false]], "hermespy.fec.cyclic_redundancy_check": [[72, "module-hermespy.fec.cyclic_redundancy_check", false]], "hermespy.fec.repetition_encoder": [[76, "module-hermespy.fec.repetition_encoder", false]], "hermespy.fec.scrambler": [[79, "module-hermespy.fec.scrambler", false]], "hermespy.hardware_loop.visualizers": [[95, "module-hermespy.hardware_loop.visualizers", false]], "hermespy.tools.math": [[241, "module-hermespy.tools.math", false]], "hermespy.tools.resampling": [[242, "module-hermespy.tools.resampling", false]], "hermespy.tools.tile": [[243, "module-hermespy.tools.tile", false]], "hh (factorytype attribute)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType.HH", false]], "hilly (cost259type attribute)": [[21, "hermespy.channel.fading.cost259.Cost259Type.HILLY", false]], "hook (class in hermespy.core.hooks)": [[56, "hermespy.core.hooks.Hook", false]], "hookable (class in hermespy.core.hooks)": [[56, "hermespy.core.hooks.Hookable", false]], "horizontal_phase_response() (antennaarraybase method)": [[36, "hermespy.core.antennas.AntennaArrayBase.horizontal_phase_response", false]], "ideal() (channelstateinformation static method)": [[37, "hermespy.core.channel.ChannelStateInformation.Ideal", false]], "idealantenna (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.IdealAntenna", false]], "idealchannel (class in hermespy.channel.ideal)": [[29, "hermespy.channel.ideal.IdealChannel", false]], "idealchannelrealization (class in hermespy.channel.ideal)": [[29, "hermespy.channel.ideal.IdealChannelRealization", false]], "idealchannelsample (class in hermespy.channel.ideal)": [[29, "hermespy.channel.ideal.IdealChannelSample", false]], "image (imagevisualization property)": [[68, "hermespy.core.visualize.ImageVisualization.image", false]], "imagevisualization (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.ImageVisualization", false]], "impedancecoupling (class in hermespy.simulation.coupling.impedance)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling", false]], "impinging_signals (deviceinput property)": [[40, "hermespy.core.device.DeviceInput.impinging_signals", false]], "impulse_response (channelstateformat attribute)": [[37, "hermespy.core.channel.ChannelStateFormat.IMPULSE_RESPONSE", false]], "indoorfactory (class in hermespy.channel.cdl.indoor_factory)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory", false]], "indoorfactoryrealization (class in hermespy.channel.cdl.indoor_factory)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactoryRealization", false]], "indooroffice (class in hermespy.channel.cdl.indoor_office)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOffice", false]], "indoorofficerealization (class in hermespy.channel.cdl.indoor_office)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOfficeRealization", false]], "info (verbosity attribute)": [[38, "hermespy.core.definitions.Verbosity.INFO", false]], "information (channelstatedimension attribute)": [[37, "hermespy.core.channel.ChannelStateDimension.INFORMATION", false]], "input (custompoweramplifier property)": [[215, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.input", false]], "input_callbacks (device property)": [[39, "hermespy.core.device.Device.input_callbacks", false]], "interactive (consolemode attribute)": [[38, "hermespy.core.definitions.ConsoleMode.INTERACTIVE", false]], "interference (multitargetradarchannel attribute)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel.interference", false]], "interleave_blocks (blockinterleaver property)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.interleave_blocks", false]], "interpolationmode (class in hermespy.channel.channel)": [[13, "hermespy.channel.channel.InterpolationMode", false]], "invert() (transformation method)": [[67, "hermespy.core.transformation.Transformation.invert", false]], "investigated_object (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.investigated_object", false]], "ip (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.ip", false]], "is_base (transformable property)": [[67, "hermespy.core.transformation.Transformable.is_base", false]], "is_registered() (registereddimension class method)": [[59, "hermespy.core.monte_carlo.RegisteredDimension.is_registered", false]], "isolation (class in hermespy.simulation.isolation.isolation)": [[193, "hermespy.simulation.isolation.isolation.Isolation", false]], "isolation (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.isolation", false]], "isolation (specificisolation property)": [[196, "hermespy.simulation.isolation.specific.SpecificIsolation.isolation", false]], "iteration_priority (hardwareloop property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.iteration_priority", false]], "iterationpriority (class in hermespy.hardware_loop.hardware_loop)": [[86, "hermespy.hardware_loop.hardware_loop.IterationPriority", false]], "jcasreception (class in hermespy.jcas.jcas)": [[97, "hermespy.jcas.jcas.JCASReception", false]], "jcastransmission (class in hermespy.jcas.jcas)": [[97, "hermespy.jcas.jcas.JCASTransmission", false]], "k0 (oscillatorphasenoise property)": [[221, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K0", false]], "k2 (oscillatorphasenoise property)": [[221, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K2", false]], "k3 (oscillatorphasenoise property)": [[221, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K3", false]], "kwargs (signal property)": [[65, "hermespy.core.signal_model.Signal.kwargs", false]], "large_scale_parameters (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.large_scale_parameters", false]], "largescalestate (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LargeScaleState", false]], "last_impact (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.last_impact", false]], "last_impact (registereddimension property)": [[59, "hermespy.core.monte_carlo.RegisteredDimension.last_impact", false]], "ldpccoding (class in hermespy.fec.aff3ct.ldpc)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding", false]], "leak() (isolation method)": [[193, "hermespy.simulation.isolation.isolation.Isolation.leak", false]], "leak() (perfectisolation method)": [[194, "hermespy.simulation.isolation.perfect.PerfectIsolation.leak", false]], "leakage_calibration (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.leakage_calibration", false]], "leakage_response (selectiveleakage property)": [[195, "hermespy.simulation.isolation.selective.SelectiveLeakage.leakage_response", false]], "leakage_response (selectiveleakagecalibration property)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.leakage_response", false]], "leakagecalibrationbase (class in hermespy.hardware_loop.physical_device)": [[85, "hermespy.hardware_loop.physical_device.LeakageCalibrationBase", false]], "leaking_signal (processedsimulateddeviceinput property)": [[226, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.leaking_signal", false]], "leaking_signals (simulateddeviceoutput property)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.leaking_signals", false]], "leastsquaresestimate() (selectiveleakagecalibration static method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.LeastSquaresEstimate", false]], "level (communicationnoiselevel property)": [[197, "hermespy.simulation.modem.noise.CommunicationNoiseLevel.level", false]], "level (n0 property)": [[201, "hermespy.simulation.noise.level.N0.level", false]], "level (noiselevel property)": [[200, "hermespy.simulation.noise.level.NoiseLevel.level", false]], "level (snr property)": [[202, "hermespy.simulation.noise.level.SNR.level", false]], "lin (valuetype attribute)": [[58, "hermespy.core.ValueType.LIN", false]], "lin2db() (in module hermespy.tools.math)": [[241, "hermespy.tools.math.lin2db", false]], "line_of_sight (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.line_of_sight", false]], "line_of_sight (largescalestate property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LargeScaleState.line_of_sight", false]], "line_of_sight (losstate property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LOSState.line_of_sight", false]], "line_of_sight (o2istate property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.O2IState.line_of_sight", false]], "linear (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.linear", false]], "linear (consolemode attribute)": [[38, "hermespy.core.definitions.ConsoleMode.LINEAR", false]], "linearantenna (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.LinearAntenna", false]], "lineartrajectory (class in hermespy.simulation.animation)": [[173, "hermespy.simulation.animation.LinearTrajectory", false]], "lines (plotvisualization property)": [[68, "hermespy.core.visualize.PlotVisualization.lines", false]], "linked_frames (transformablelink property)": [[67, "hermespy.core.transformation.TransformableLink.linked_frames", false]], "linkstate (class in hermespy.channel.channel)": [[16, "hermespy.channel.channel.LinkState", false]], "load() (calibration class method)": [[89, "hermespy.hardware_loop.physical_device.Calibration.Load", false]], "load_calibration() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.load_calibration", false]], "loading (caponbeamformer property)": [[2, "hermespy.beamforming.capon.CaponBeamformer.loading", false]], "local_characteristics() (antenna method)": [[36, "hermespy.core.antennas.Antenna.local_characteristics", false]], "local_characteristics() (audioantenna method)": [[81, "hermespy.hardware_loop.audio.device.AudioAntenna.local_characteristics", false]], "local_characteristics() (dipole method)": [[36, "hermespy.core.antennas.Dipole.local_characteristics", false]], "local_characteristics() (idealantenna method)": [[36, "hermespy.core.antennas.IdealAntenna.local_characteristics", false]], "local_characteristics() (linearantenna method)": [[36, "hermespy.core.antennas.LinearAntenna.local_characteristics", false]], "local_characteristics() (patchantenna method)": [[36, "hermespy.core.antennas.PatchAntenna.local_characteristics", false]], "logarithmic (class in hermespy.core.logarithmic)": [[58, "hermespy.core.logarithmic.Logarithmic", false]], "logarithmicsequence (class in hermespy.core.logarithmic)": [[58, "hermespy.core.logarithmic.LogarithmicSequence", false]], "lookat() (trajectory method)": [[173, "hermespy.simulation.animation.Trajectory.lookat", false]], "lookat() (transformable method)": [[67, "hermespy.core.transformation.Transformable.lookat", false]], "lookat() (transformation method)": [[67, "hermespy.core.transformation.Transformation.lookat", false]], "lookat_disable() (trajectory method)": [[173, "hermespy.simulation.animation.Trajectory.lookat_disable", false]], "lookat_enable() (trajectory method)": [[173, "hermespy.simulation.animation.Trajectory.lookat_enable", false]], "los (losstate attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LOSState.LOS", false]], "los (o2istate attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.O2IState.LOS", false]], "los_angle (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.los_angle", false]], "los_angles (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.los_angles", false]], "los_doppler (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.los_doppler", false]], "los_doppler_frequency (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.los_doppler_frequency", false]], "los_gains (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.los_gains", false]], "los_phases (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.los_phases", false]], "losstate (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LOSState", false]], "lowpass_bandwidth (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_bandwidth", false]], "lowpass_filter (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_filter", false]], "lsst (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LSST", false]], "make_target() (multitargetradarchannel method)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel.make_target", false]], "manager (encoder property)": [[71, "hermespy.fec.coding.Encoder.manager", false]], "manual_triggering (hardwareloop attribute)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.manual_triggering", false]], "map() (chirpfskwaveform method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.map", false]], "map() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.map", false]], "map() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.map", false]], "map() (orthogonalwaveform method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.map", false]], "mapping (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.mapping", false]], "mapping_available (pskqammapping attribute)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.mapping_available", false]], "mapping_available_pam (pskqammapping attribute)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.mapping_available_pam", false]], "marcum_q() (in module hermespy.tools.math)": [[241, "hermespy.tools.math.marcum_q", false]], "mask (gridresource property)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.mask", false]], "mat (serializationbackend attribute)": [[55, "hermespy.core.factory.SerializationBackend.MAT", false]], "matchedfilterjcas (class in hermespy.jcas.matched_filtering)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas", false]], "matching_impedance (impedancecoupling property)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.matching_impedance", false]], "max_amplitude (gaincontroltype attribute)": [[211, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType.MAX_AMPLITUDE", false]], "max_delay (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.max_delay", false]], "max_delay (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.max_delay", false]], "max_frame_duration (device property)": [[39, "hermespy.core.device.Device.max_frame_duration", false]], "max_num_clusters (clusterdelaylinebase property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase.max_num_clusters", false]], "max_num_clusters (indoorfactory property)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.max_num_clusters", false]], "max_num_clusters (indooroffice property)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOffice.max_num_clusters", false]], "max_num_clusters (ruralmacrocells property)": [[10, "hermespy.channel.cdl.rural_macrocells.RuralMacrocells.max_num_clusters", false]], "max_num_clusters (urbanmacrocells property)": [[11, "hermespy.channel.cdl.urban_macrocells.UrbanMacrocells.max_num_clusters", false]], "max_num_clusters (urbanmicrocells property)": [[12, "hermespy.channel.cdl.urban_microcells.UrbanMicrocells.max_num_clusters", false]], "max_num_rays (clusterdelaylinebase property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase.max_num_rays", false]], "max_num_rays (indoorfactory property)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.max_num_rays", false]], "max_num_rays (indooroffice property)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOffice.max_num_rays", false]], "max_num_rays (ruralmacrocells property)": [[10, "hermespy.channel.cdl.rural_macrocells.RuralMacrocells.max_num_rays", false]], "max_num_rays (urbanmacrocells property)": [[11, "hermespy.channel.cdl.urban_macrocells.UrbanMacrocells.max_num_rays", false]], "max_num_rays (urbanmicrocells property)": [[12, "hermespy.channel.cdl.urban_microcells.UrbanMicrocells.max_num_rays", false]], "max_num_samples (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.max_num_samples", false]], "max_range (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.max_range", false]], "max_range (matchedfilterjcas property)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas.max_range", false]], "max_range (ofdmradar property)": [[99, "hermespy.jcas.ofdm_radar.OFDMRadar.max_range", false]], "max_range (radar property)": [[169, "hermespy.radar.radar.Radar.max_range", false]], "max_range (radarpointcloud property)": [[161, "hermespy.radar.detection.RadarPointCloud.max_range", false]], "max_range (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.max_range", false]], "max_receive_delay (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_receive_delay", false]], "max_relative_doppler (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.max_relative_doppler", false]], "max_relative_doppler (ofdmradar property)": [[99, "hermespy.jcas.ofdm_radar.OFDMRadar.max_relative_doppler", false]], "max_relative_doppler (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.max_relative_doppler", false]], "max_sampling_rate (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.max_sampling_rate", false]], "max_sampling_rate (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_sampling_rate", false]], "max_sampling_rate (physicaldevicedummy property)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.max_sampling_rate", false]], "max_sampling_rate (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.max_sampling_rate", false]], "max_timestamp (lineartrajectory property)": [[173, "hermespy.simulation.animation.LinearTrajectory.max_timestamp", false]], "max_timestamp (statictrajectory property)": [[173, "hermespy.simulation.animation.StaticTrajectory.max_timestamp", false]], "max_timestamp (trajectory property)": [[173, "hermespy.simulation.animation.Trajectory.max_timestamp", false]], "max_trajectory_timestamp (moveable property)": [[173, "hermespy.simulation.animation.Moveable.max_trajectory_timestamp", false]], "maxdetector (class in hermespy.radar.detection)": [[158, "hermespy.radar.detection.MaxDetector", false]], "maximumratiocombining (class in hermespy.modem.precoding.ratio_combining)": [[123, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining", false]], "mesh (quadmeshvisualization property)": [[68, "hermespy.core.visualize.QuadMeshVisualization.mesh", false]], "message (actorrunresult attribute)": [[59, "hermespy.core.monte_carlo.ActorRunResult.message", false]], "mid_riser (quantizertype attribute)": [[212, "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType.MID_RISER", false]], "mid_tread (quantizertype attribute)": [[212, "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType.MID_TREAD", false]], "min_num_samples (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.min_num_samples", false]], "min_power (thresholddetector property)": [[162, "hermespy.radar.detection.ThresholdDetector.min_power", false]], "mixed (officetype attribute)": [[9, "hermespy.channel.cdl.indoor_office.OfficeType.MIXED", false]], "mixed_signal (deviceoutput property)": [[41, "hermespy.core.device.DeviceOutput.mixed_signal", false]], "mixingoperator (class in hermespy.core.device)": [[44, "hermespy.core.device.MixingOperator", false]], "mmseestimate() (selectiveleakagecalibration static method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.MMSEEstimate", false]], "mo (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.MO", false]], "mode (antenna property)": [[36, "hermespy.core.antennas.Antenna.mode", false]], "mode (scenario property)": [[64, "hermespy.core.scenario.Scenario.mode", false]], "model() (clippingpoweramplifier method)": [[214, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.model", false]], "model() (custompoweramplifier method)": [[215, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.model", false]], "model() (poweramplifier method)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.model", false]], "model() (rapppoweramplifier method)": [[217, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.model", false]], "model() (salehpoweramplifier method)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.model", false]], "model_propagation_loss (delaychannelbase property)": [[18, "hermespy.channel.delay.delay.DelayChannelBase.model_propagation_loss", false]], "model_propagation_loss (delaychannelrealization property)": [[18, "hermespy.channel.delay.delay.DelayChannelRealization.model_propagation_loss", false]], "model_propagation_loss (delaychannelsample property)": [[18, "hermespy.channel.delay.delay.DelayChannelSample.model_propagation_loss", false]], "model_type (cdl property)": [[6, "hermespy.channel.cdl.cdl.CDL.model_type", false]], "model_type (cost259 property)": [[21, "hermespy.channel.fading.cost259.Cost259.model_type", false]], "model_type (tdl property)": [[28, "hermespy.channel.fading.tdl.TDL.model_type", false]], "modem (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.modem", false]], "modem (encodermanager property)": [[71, "hermespy.fec.coding.EncoderManager.modem", false]], "modulate() (chirpfskwaveform method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.modulate", false]], "modulate() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.modulate", false]], "modulate() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulate", false]], "modulate() (orthogonalwaveform method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.modulate", false]], "modulation_order (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.modulation_order", false]], "modulation_order (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.modulation_order", false]], "modulation_order (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulation_order", false]], "modulation_order (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.modulation_order", false]], "modulation_order (pskqammapping attribute)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.modulation_order", false]], "module": [[1, "module-hermespy.beamforming.beamformer", false], [2, "module-hermespy.beamforming.capon", false], [3, "module-hermespy.beamforming.conventional", false], [59, "module-hermespy.core.monte_carlo", false], [63, "module-hermespy.core.random_node", false], [69, "module-hermespy.fec.aff3ct.bch", false], [70, "module-hermespy.fec.block_interleaver", false], [71, "module-hermespy.fec.coding", false], [72, "module-hermespy.fec.cyclic_redundancy_check", false], [74, "module-hermespy.fec.aff3ct.ldpc", false], [75, "module-hermespy.fec.aff3ct.polar", false], [76, "module-hermespy.fec.repetition_encoder", false], [77, "module-hermespy.fec.aff3ct.rs", false], [78, "module-hermespy.fec.aff3ct.rsc", false], [79, "module-hermespy.fec.scrambler", false], [80, "module-hermespy.fec.aff3ct.turbo", false], [95, "module-hermespy.hardware_loop.visualizers", false], [241, "module-hermespy.tools.math", false], [242, "module-hermespy.tools.resampling", false], [243, "module-hermespy.tools.tile", false]], "montecarlo (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.MonteCarlo", false]], "montecarloactor (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.MonteCarloActor", false]], "montecarloresult (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.MonteCarloResult", false]], "montecarlosample (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.MonteCarloSample", false]], "moveable (class in hermespy.simulation.animation)": [[173, "hermespy.simulation.animation.Moveable", false]], "moveable (physicalradartarget property)": [[32, "hermespy.channel.radar.multi.PhysicalRadarTarget.moveable", false]], "multipathfadingchannel (class in hermespy.channel.fading.fading)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel", false]], "multipathfadingrealization (class in hermespy.channel.fading.fading)": [[26, "hermespy.channel.fading.fading.MultipathFadingRealization", false]], "multipathfadingsample (class in hermespy.channel.fading.fading)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample", false]], "multitargetradarchannel (class in hermespy.channel.radar.multi)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel", false]], "multitargetradarchannelrealization (class in hermespy.channel.radar.multi)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannelRealization", false]], "n0 (class in hermespy.simulation.noise.level)": [[201, "hermespy.simulation.noise.level.N0", false]], "nearest (interpolationmode attribute)": [[13, "hermespy.channel.channel.InterpolationMode.NEAREST", false]], "new() (hdfdeserializationprocess static method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.New", false]], "new() (hdfserializationprocess static method)": [[55, "hermespy.core.factory.HDFSerializationProcess.New", false]], "new_device() (pipeline method)": [[61, "hermespy.core.pipeline.Pipeline.new_device", false]], "new_device() (scenario method)": [[64, "hermespy.core.scenario.Scenario.new_device", false]], "new_device() (usrpsystem method)": [[93, "hermespy.hardware_loop.uhd.system.UsrpSystem.new_device", false]], "new_dimension() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.new_dimension", false]], "new_dimension() (montecarlo method)": [[59, "hermespy.core.monte_carlo.MonteCarlo.new_dimension", false]], "nlos (losstate attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LOSState.NLOS", false]], "nlos (o2istate attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.O2IState.NLOS", false]], "nlos_angles (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.nlos_angles", false]], "nlos_doppler (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.nlos_doppler", false]], "nlos_gains (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.nlos_gains", false]], "nlos_phases (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.nlos_phases", false]], "no() (transformation class method)": [[67, "hermespy.core.transformation.Transformation.No", false]], "noantennacalibration (class in hermespy.hardware_loop.physical_device)": [[83, "hermespy.hardware_loop.physical_device.NoAntennaCalibration", false]], "nodelaycalibration (class in hermespy.hardware_loop.physical_device)": [[84, "hermespy.hardware_loop.physical_device.NoDelayCalibration", false]], "noise (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.noise", false]], "noise_level (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.noise_level", false]], "noise_level (simulationscenario property)": [[224, "hermespy.simulation.simulation.SimulationScenario.noise_level", false]], "noise_model (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.noise_model", false]], "noise_model (simulationscenario property)": [[224, "hermespy.simulation.simulation.SimulationScenario.noise_model", false]], "noise_power (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.noise_power", false]], "noise_power (signal property)": [[65, "hermespy.core.signal_model.Signal.noise_power", false]], "noise_realization (simulateddevicereceiverealization property)": [[228, "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization.noise_realization", false]], "noiselevel (class in hermespy.simulation.noise.level)": [[200, "hermespy.simulation.noise.level.NoiseLevel", false]], "noisemodel (class in hermespy.simulation.noise.model)": [[200, "hermespy.simulation.noise.model.NoiseModel", false]], "noiserealization (class in hermespy.simulation.noise.model)": [[200, "hermespy.simulation.noise.model.NoiseRealization", false]], "noleakagecalibration (class in hermespy.hardware_loop.physical_device)": [[85, "hermespy.hardware_loop.physical_device.NoLeakageCalibration", false]], "none (gaincontroltype attribute)": [[211, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType.NONE", false]], "none (prefixtype attribute)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.PrefixType.NONE", false]], "none (verbosity attribute)": [[38, "hermespy.core.definitions.Verbosity.NONE", false]], "nophasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[220, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise", false]], "normal() (selectiveleakage class method)": [[195, "hermespy.simulation.isolation.selective.SelectiveLeakage.Normal", false]], "normalize (thresholddetector property)": [[162, "hermespy.radar.detection.ThresholdDetector.normalize", false]], "normalize_power() (radarcube method)": [[157, "hermespy.radar.cube.RadarCube.normalize_power", false]], "notify() (hookable method)": [[56, "hermespy.core.hooks.Hookable.notify", false]], "notify_transmit_callbacks() (transmitter method)": [[51, "hermespy.core.device.Transmitter.notify_transmit_callbacks", false]], "nrt (class in hermespy.simulation.noise.model)": [[200, "hermespy.simulation.noise.model.NRT", false]], "null (elementtype attribute)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.ElementType.NULL", false]], "null_hypothesis() (radarchannelsample method)": [[33, "hermespy.channel.radar.radar.RadarChannelSample.null_hypothesis", false]], "nullsteeringbeamformer (class in hermespy.beamforming.nullsteeringbeamformer)": [[5, "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer", false]], "num_actors (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.num_actors", false]], "num_antennas (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.num_antennas", false]], "num_antennas (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.num_antennas", false]], "num_antennas (audiodeviceantennas property)": [[81, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.num_antennas", false]], "num_antennas (device property)": [[39, "hermespy.core.device.Device.num_antennas", false]], "num_antennas (deviceoutput property)": [[41, "hermespy.core.device.DeviceOutput.num_antennas", false]], "num_antennas (uniformarray property)": [[36, "hermespy.core.antennas.UniformArray.num_antennas", false]], "num_appended_zeros (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_appended_zeros", false]], "num_artifacts (evaluateddrop property)": [[52, "hermespy.core.drop.EvaluatedDrop.num_artifacts", false]], "num_artifacts (montecarlosample property)": [[59, "hermespy.core.monte_carlo.MonteCarloSample.num_artifacts", false]], "num_blocks (symbols property)": [[127, "hermespy.modem.symbols.Symbols.num_blocks", false]], "num_chirps (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.num_chirps", false]], "num_clusters (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.num_clusters", false]], "num_data_chirps (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_data_chirps", false]], "num_data_symbols (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_data_symbols", false]], "num_data_symbols (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.num_data_symbols", false]], "num_data_symbols (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_data_symbols", false]], "num_data_symbols (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.num_data_symbols", false]], "num_decoded_blocks() (receivesymbolcoding method)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolCoding.num_decoded_blocks", false]], "num_delay_taps (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.num_delay_taps", false]], "num_device_receptions (drop property)": [[52, "hermespy.core.drop.Drop.num_device_receptions", false]], "num_device_transmissions (drop property)": [[52, "hermespy.core.drop.Drop.num_device_transmissions", false]], "num_devices (scenario property)": [[64, "hermespy.core.scenario.Scenario.num_devices", false]], "num_devices (triggermodel property)": [[237, "hermespy.simulation.simulated_device.TriggerModel.num_devices", false]], "num_digital_receive_ports (device property)": [[39, "hermespy.core.device.Device.num_digital_receive_ports", false]], "num_digital_receive_ports (devicestate property)": [[66, "hermespy.core.state.DeviceState.num_digital_receive_ports", false]], "num_digital_receive_ports (receivestate property)": [[66, "hermespy.core.state.ReceiveState.num_digital_receive_ports", false]], "num_digital_transmit_ports (device property)": [[39, "hermespy.core.device.Device.num_digital_transmit_ports", false]], "num_digital_transmit_ports (devicestate property)": [[66, "hermespy.core.state.DeviceState.num_digital_transmit_ports", false]], "num_digital_transmit_ports (transmitstate property)": [[66, "hermespy.core.state.TransmitState.num_digital_transmit_ports", false]], "num_drops (pipeline property)": [[61, "hermespy.core.pipeline.Pipeline.num_drops", false]], "num_drops (scenario property)": [[64, "hermespy.core.scenario.Scenario.num_drops", false]], "num_emerging_signals (deviceoutput property)": [[41, "hermespy.core.device.DeviceOutput.num_emerging_signals", false]], "num_encoded_blocks() (transmitsymbolcoding method)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolCoding.num_encoded_blocks", false]], "num_errors (rootmeansquareartifact property)": [[166, "hermespy.radar.evaluators.RootMeanSquareArtifact.num_errors", false]], "num_evaluators (hardwareloop property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.num_evaluators", false]], "num_frames (communicationreception property)": [[113, "hermespy.modem.modem.CommunicationReception.num_frames", false]], "num_frames (communicationtransmission property)": [[115, "hermespy.modem.modem.CommunicationTransmission.num_frames", false]], "num_guard_samples (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_guard_samples", false]], "num_impinging_signals (deviceinput property)": [[40, "hermespy.core.device.DeviceInput.num_impinging_signals", false]], "num_iterations (ldpccoding property)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding.num_iterations", false]], "num_iterations (turbocoding property)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding.num_iterations", false]], "num_leaking_signals (simulateddeviceoutput property)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.num_leaking_signals", false]], "num_offset_samples (sampleoffsettrigger property)": [[234, "hermespy.simulation.simulated_device.SampleOffsetTrigger.num_offset_samples", false]], "num_offset_samples (triggerrealization property)": [[238, "hermespy.simulation.simulated_device.TriggerRealization.num_offset_samples", false]], "num_operator_inputs (processeddeviceinput property)": [[47, "hermespy.core.device.ProcessedDeviceInput.num_operator_inputs", false]], "num_operator_receptions (devicereception property)": [[42, "hermespy.core.device.DeviceReception.num_operator_receptions", false]], "num_operator_transmissions (devicetransmission property)": [[43, "hermespy.core.device.DeviceTransmission.num_operator_transmissions", false]], "num_operators (scenario property)": [[64, "hermespy.core.scenario.Scenario.num_operators", false]], "num_pilot_chirps (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_pilot_chirps", false]], "num_points (radarpointcloud property)": [[161, "hermespy.radar.detection.RadarPointCloud.num_points", false]], "num_ports (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.num_ports", false]], "num_ports (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.num_ports", false]], "num_postamble_symbols (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_postamble_symbols", false]], "num_preamble_symbols (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_preamble_symbols", false]], "num_prepeneded_zeros (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_prepeneded_zeros", false]], "num_quantization_bits (analogdigitalconverter property)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.num_quantization_bits", false]], "num_quantization_levels (analogdigitalconverter property)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.num_quantization_levels", false]], "num_rays (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.num_rays", false]], "num_receive_antenna_ports (device property)": [[39, "hermespy.core.device.Device.num_receive_antenna_ports", false]], "num_receive_antenna_ports (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_receive_antenna_ports", false]], "num_receive_antennas (antennaarray property)": [[36, "hermespy.core.antennas.AntennaArray.num_receive_antennas", false]], "num_receive_antennas (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.num_receive_antennas", false]], "num_receive_antennas (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.num_receive_antennas", false]], "num_receive_antennas (audiodeviceantennas property)": [[81, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.num_receive_antennas", false]], "num_receive_antennas (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.num_receive_antennas", false]], "num_receive_antennas (device property)": [[39, "hermespy.core.device.Device.num_receive_antennas", false]], "num_receive_antennas (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.num_receive_antennas", false]], "num_receive_focus_points (caponbeamformer property)": [[2, "hermespy.beamforming.capon.CaponBeamformer.num_receive_focus_points", false]], "num_receive_focus_points (conventionalbeamformer property)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_focus_points", false]], "num_receive_focus_points (nullsteeringbeamformer property)": [[5, "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer.num_receive_focus_points", false]], "num_receive_focus_points (receivebeamformer property)": [[1, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_focus_points", false]], "num_receive_input_symbols (alamouti property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_receive_input_symbols", false]], "num_receive_input_symbols (dft property)": [[122, "hermespy.modem.precoding.dft.DFT.num_receive_input_symbols", false]], "num_receive_input_symbols (ganesan property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_receive_input_symbols", false]], "num_receive_input_symbols (maximumratiocombining property)": [[123, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.num_receive_input_symbols", false]], "num_receive_input_symbols (receivesymboldecoder property)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolDecoder.num_receive_input_symbols", false]], "num_receive_input_symbols (singlecarrier property)": [[124, "hermespy.modem.precoding.single_carrier.SingleCarrier.num_receive_input_symbols", false]], "num_receive_output_streams() (alamouti method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_receive_output_streams", false]], "num_receive_output_streams() (caponbeamformer method)": [[2, "hermespy.beamforming.capon.CaponBeamformer.num_receive_output_streams", false]], "num_receive_output_streams() (conventionalbeamformer method)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_output_streams", false]], "num_receive_output_streams() (dft method)": [[122, "hermespy.modem.precoding.dft.DFT.num_receive_output_streams", false]], "num_receive_output_streams() (ganesan method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_receive_output_streams", false]], "num_receive_output_streams() (maximumratiocombining method)": [[123, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.num_receive_output_streams", false]], "num_receive_output_streams() (nullsteeringbeamformer method)": [[5, "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer.num_receive_output_streams", false]], "num_receive_output_streams() (receivedecoder method)": [[62, "hermespy.core.precoding.ReceiveDecoder.num_receive_output_streams", false]], "num_receive_output_streams() (receiveprecoding method)": [[62, "hermespy.core.precoding.ReceivePrecoding.num_receive_output_streams", false]], "num_receive_output_streams() (singlecarrier method)": [[124, "hermespy.modem.precoding.single_carrier.SingleCarrier.num_receive_output_streams", false]], "num_receive_output_symbols (alamouti property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_receive_output_symbols", false]], "num_receive_output_symbols (dft property)": [[122, "hermespy.modem.precoding.dft.DFT.num_receive_output_symbols", false]], "num_receive_output_symbols (ganesan property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_receive_output_symbols", false]], "num_receive_output_symbols (maximumratiocombining property)": [[123, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.num_receive_output_symbols", false]], "num_receive_output_symbols (receivesymboldecoder property)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolDecoder.num_receive_output_symbols", false]], "num_receive_output_symbols (singlecarrier property)": [[124, "hermespy.modem.precoding.single_carrier.SingleCarrier.num_receive_output_symbols", false]], "num_receive_ports (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.num_receive_ports", false]], "num_receive_ports (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.num_receive_ports", false]], "num_receive_streams (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.num_receive_streams", false]], "num_receivers (scenario property)": [[64, "hermespy.core.scenario.Scenario.num_receivers", false]], "num_references (gridresource property)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.num_references", false]], "num_references (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.num_references", false]], "num_references (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.num_references", false]], "num_references (symbolsection property)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.num_references", false]], "num_repetitions (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.num_repetitions", false]], "num_repetitions (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.num_repetitions", false]], "num_resolvable_paths (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.num_resolvable_paths", false]], "num_sample_points (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.num_sample_points", false]], "num_samples (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.num_samples", false]], "num_samples (gridsection property)": [[59, "hermespy.core.monte_carlo.GridSection.num_samples", false], [145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.num_samples", false]], "num_samples (guardsection property)": [[146, "hermespy.modem.waveforms.orthogonal.waveform.GuardSection.num_samples", false]], "num_samples (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.num_samples", false]], "num_samples (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.num_samples", false]], "num_samples (signal property)": [[65, "hermespy.core.signal_model.Signal.num_samples", false]], "num_samples (signalblock property)": [[65, "hermespy.core.signal_model.SignalBlock.num_samples", false]], "num_samples (simulation property)": [[231, "hermespy.simulation.simulation.Simulation.num_samples", false]], "num_samples (staticoperator property)": [[60, "hermespy.core.operators.StaticOperator.num_samples", false]], "num_samples (symbolsection property)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.num_samples", false]], "num_sinusoids (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.num_sinusoids", false]], "num_streams (signal property)": [[65, "hermespy.core.signal_model.Signal.num_streams", false]], "num_streams (signalblock property)": [[65, "hermespy.core.signal_model.SignalBlock.num_streams", false]], "num_streams (symbols property)": [[127, "hermespy.modem.symbols.Symbols.num_streams", false]], "num_subcarriers (gridresource property)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.num_subcarriers", false]], "num_subcarriers (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.num_subcarriers", false]], "num_subcarriers (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.num_subcarriers", false]], "num_subcarriers (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.num_subcarriers", false]], "num_subcarriers (symbolsection property)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.num_subcarriers", false]], "num_symbols (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.num_symbols", false]], "num_symbols (gridresource property)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.num_symbols", false]], "num_symbols (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.num_symbols", false]], "num_symbols (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.num_symbols", false]], "num_symbols (symbols property)": [[127, "hermespy.modem.symbols.Symbols.num_symbols", false]], "num_symbols (symbolsection property)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.num_symbols", false]], "num_transmit_antenna_ports (device property)": [[39, "hermespy.core.device.Device.num_transmit_antenna_ports", false]], "num_transmit_antenna_ports (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_transmit_antenna_ports", false]], "num_transmit_antennas (antennaarray property)": [[36, "hermespy.core.antennas.AntennaArray.num_transmit_antennas", false]], "num_transmit_antennas (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.num_transmit_antennas", false]], "num_transmit_antennas (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.num_transmit_antennas", false]], "num_transmit_antennas (audiodeviceantennas property)": [[81, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.num_transmit_antennas", false]], "num_transmit_antennas (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.num_transmit_antennas", false]], "num_transmit_antennas (device property)": [[39, "hermespy.core.device.Device.num_transmit_antennas", false]], "num_transmit_antennas (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.num_transmit_antennas", false]], "num_transmit_focus_points (conventionalbeamformer property)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_focus_points", false]], "num_transmit_focus_points (nullsteeringbeamformer property)": [[5, "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer.num_transmit_focus_points", false]], "num_transmit_focus_points (transmitbeamformer property)": [[1, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_focus_points", false]], "num_transmit_input_streams() (alamouti method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_transmit_input_streams", false]], "num_transmit_input_streams() (conventionalbeamformer method)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_input_streams", false]], "num_transmit_input_streams() (dft method)": [[122, "hermespy.modem.precoding.dft.DFT.num_transmit_input_streams", false]], "num_transmit_input_streams() (ganesan method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_transmit_input_streams", false]], "num_transmit_input_streams() (nullsteeringbeamformer method)": [[5, "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer.num_transmit_input_streams", false]], "num_transmit_input_streams() (transmitencoder method)": [[62, "hermespy.core.precoding.TransmitEncoder.num_transmit_input_streams", false]], "num_transmit_input_streams() (transmitprecoding method)": [[62, "hermespy.core.precoding.TransmitPrecoding.num_transmit_input_streams", false]], "num_transmit_input_symbols (alamouti property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_transmit_input_symbols", false]], "num_transmit_input_symbols (dft property)": [[122, "hermespy.modem.precoding.dft.DFT.num_transmit_input_symbols", false]], "num_transmit_input_symbols (ganesan property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_transmit_input_symbols", false]], "num_transmit_input_symbols (transmitsymbolencoder property)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolEncoder.num_transmit_input_symbols", false]], "num_transmit_output_symbols (alamouti property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_transmit_output_symbols", false]], "num_transmit_output_symbols (dft property)": [[122, "hermespy.modem.precoding.dft.DFT.num_transmit_output_symbols", false]], "num_transmit_output_symbols (ganesan property)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_transmit_output_symbols", false]], "num_transmit_output_symbols (transmitsymbolencoder property)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolEncoder.num_transmit_output_symbols", false]], "num_transmit_ports (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.num_transmit_ports", false]], "num_transmit_ports (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.num_transmit_ports", false]], "num_transmit_streams (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.num_transmit_streams", false]], "num_transmit_streams (statedsymbols property)": [[127, "hermespy.modem.symbols.StatedSymbols.num_transmit_streams", false]], "num_transmitters (scenario property)": [[64, "hermespy.core.scenario.Scenario.num_transmitters", false]], "num_words (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.num_words", false]], "num_words (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.num_words", false]], "num_words (symbolsection property)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.num_words", false]], "o2i (o2istate attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.O2IState.O2I", false]], "o2istate (class in hermespy.channel.cdl.cluster_delay_lines)": [[7, "hermespy.channel.cdl.cluster_delay_lines.O2IState", false]], "ocdmwaveform (class in hermespy.modem.waveforms.orthogonal.ocdm)": [[150, "hermespy.modem.waveforms.orthogonal.ocdm.OCDMWaveform", false]], "ofdmradar (class in hermespy.jcas.ofdm_radar)": [[99, "hermespy.jcas.ofdm_radar.OFDMRadar", false]], "ofdmsynchronization (class in hermespy.modem.waveforms.orthogonal.ofdm)": [[152, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMSynchronization", false]], "ofdmwaveform (class in hermespy.modem.waveforms.orthogonal.ofdm)": [[153, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform", false]], "office_type (indooroffice property)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOffice.office_type", false]], "officetype (class in hermespy.channel.cdl.indoor_office)": [[9, "hermespy.channel.cdl.indoor_office.OfficeType", false]], "offset (consistentvariable property)": [[17, "hermespy.channel.consistent.ConsistentVariable.offset", false]], "offset (signalblock property)": [[65, "hermespy.core.signal_model.SignalBlock.offset", false]], "offset (timeoffsettrigger property)": [[236, "hermespy.simulation.simulated_device.TimeOffsetTrigger.offset", false]], "open (officetype attribute)": [[9, "hermespy.channel.cdl.indoor_office.OfficeType.OPEN", false]], "operationresult (class in hermespy.core.device)": [[45, "hermespy.core.device.OperationResult", false]], "operator (class in hermespy.core.device)": [[46, "hermespy.core.device.Operator", false]], "operator_inputs (drop property)": [[52, "hermespy.core.drop.Drop.operator_inputs", false]], "operator_inputs (processeddeviceinput property)": [[47, "hermespy.core.device.ProcessedDeviceInput.operator_inputs", false]], "operator_receptions (devicereception property)": [[42, "hermespy.core.device.DeviceReception.operator_receptions", false]], "operator_separation (processedsimulateddeviceinput property)": [[226, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.operator_separation", false]], "operator_separation (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.operator_separation", false]], "operator_separation (simulateddeviceoutput property)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.operator_separation", false]], "operator_transmissions (devicetransmission property)": [[43, "hermespy.core.device.DeviceTransmission.operator_transmissions", false]], "operators (scenario property)": [[64, "hermespy.core.scenario.Scenario.operators", false]], "orientation (transformable property)": [[67, "hermespy.core.transformation.Transformable.orientation", false]], "ortho (dftnorm attribute)": [[122, "hermespy.modem.precoding.dft.DFTNorm.ORTHO", false]], "orthogonalwaveform (class in hermespy.modem.waveforms.orthogonal.waveform)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform", false]], "oscillatorphasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[221, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise", false]], "ot (class in hermespy.beamforming.beamformer)": [[1, "hermespy.beamforming.beamformer.OT", false]], "otfswaveform (class in hermespy.modem.waveforms.orthogonal.otfs)": [[156, "hermespy.modem.waveforms.orthogonal.otfs.OTFSWaveform", false]], "output_callbacks (device property)": [[39, "hermespy.core.device.Device.output_callbacks", false]], "oversampling_factor (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.oversampling_factor", false]], "owt (class in hermespy.modem.waveforms.orthogonal.waveform)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OWT", false]], "oxygen_absorption (clusterdelaylinebase property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase.oxygen_absorption", false]], "oxygen_absorption (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.oxygen_absorption", false]], "pack_frame() (framegenerator method)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGenerator.pack_frame", false]], "pack_frame() (framegeneratorscapy method)": [[109, "hermespy.modem.frame_generator.scapy.FrameGeneratorScapy.pack_frame", false]], "pack_frame() (framegeneratorstub method)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGeneratorStub.pack_frame", false]], "packet (framegeneratorscapy attribute)": [[109, "hermespy.modem.frame_generator.scapy.FrameGeneratorScapy.packet", false]], "packet_type (framegeneratorscapy attribute)": [[109, "hermespy.modem.frame_generator.scapy.FrameGeneratorScapy.packet_type", false]], "patchantenna (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.PatchAntenna", false]], "path_delays (quadrigachannelsample property)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannelSample.path_delays", false]], "path_gains (quadrigachannelsample property)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannelSample.path_gains", false]], "paths (radarchannelsample property)": [[33, "hermespy.channel.radar.radar.RadarChannelSample.paths", false]], "paths (scattervisualization property)": [[68, "hermespy.core.visualize.ScatterVisualization.paths", false]], "paths (sionnartchannelsample attribute)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelSample.paths", false]], "pattern (symbolsection attribute)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.pattern", false]], "pdst (class in hermespy.hardware_loop.physical_device)": [[89, "hermespy.hardware_loop.physical_device.PDST", false]], "pdt (class in hermespy.hardware_loop.physical_device)": [[89, "hermespy.hardware_loop.physical_device.PDT", false]], "peak_detection (thresholddetector property)": [[162, "hermespy.radar.detection.ThresholdDetector.peak_detection", false]], "perfectcoupling (class in hermespy.simulation.coupling.perfect)": [[188, "hermespy.simulation.coupling.perfect.PerfectCoupling", false]], "perfectisolation (class in hermespy.simulation.isolation.perfect)": [[194, "hermespy.simulation.isolation.perfect.PerfectIsolation", false]], "performance_time (montecarloresult property)": [[59, "hermespy.core.monte_carlo.MonteCarloResult.performance_time", false]], "pgt (class in hermespy.modem.waveform_correlation_synchronization)": [[136, "hermespy.modem.waveform_correlation_synchronization.PGT", false]], "phase (custompoweramplifier property)": [[215, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.phase", false]], "phase_alpha (salehpoweramplifier attribute)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_alpha", false]], "phase_beta (salehpoweramplifier attribute)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_beta", false]], "phase_noise (rfchain property)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_noise", false]], "phase_offset (rfchain property)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_offset", false]], "phasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[219, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise", false]], "phases (dualconsistentrealization property)": [[17, "hermespy.channel.consistent.DualConsistentRealization.phases", false]], "physicaldevice (class in hermespy.hardware_loop.physical_device)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice", false]], "physicaldevicedummy (class in hermespy.hardware_loop.physical_device_dummy)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy", false]], "physicaldevicedummystate (class in hermespy.hardware_loop.physical_device_dummy)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummyState", false]], "physicaldevicestate (class in hermespy.hardware_loop.physical_device)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDeviceState", false]], "physicalradartarget (class in hermespy.channel.radar.multi)": [[32, "hermespy.channel.radar.multi.PhysicalRadarTarget", false]], "physicalscenario (class in hermespy.hardware_loop.scenario)": [[92, "hermespy.hardware_loop.scenario.PhysicalScenario", false]], "physicalscenariodummy (class in hermespy.hardware_loop.physical_device_dummy)": [[91, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy", false]], "physicalscenariotype (class in hermespy.hardware_loop.scenario)": [[92, "hermespy.hardware_loop.scenario.PhysicalScenarioType", false]], "pick() (chirpfskwaveform method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.pick", false]], "pick() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.pick", false]], "pick() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pick", false]], "pick() (orthogonalwaveform method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.pick", false]], "pick_samples() (gridsection method)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.pick_samples", false]], "pick_samples() (guardsection method)": [[146, "hermespy.modem.waveforms.orthogonal.waveform.GuardSection.pick_samples", false]], "pick_samples() (pilotsection method)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.pick_samples", false]], "pick_samples() (symbolsection method)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.pick_samples", false]], "pick_symbols() (gridsection method)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.pick_symbols", false]], "pickle (serializationbackend attribute)": [[55, "hermespy.core.factory.SerializationBackend.PICKLE", false]], "pilot_elements (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.pilot_elements", false]], "pilot_rate (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_rate", false]], "pilot_section (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.pilot_section", false]], "pilot_signal (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.pilot_signal", false]], "pilot_signal (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_signal", false]], "pilot_signal (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.pilot_signal", false]], "pilot_signal (pilotcommunicationwaveform property)": [[128, "hermespy.modem.waveform.PilotCommunicationWaveform.pilot_signal", false]], "pilot_symbol_sequence (configurablepilotwaveform attribute)": [[128, "hermespy.modem.waveform.ConfigurablePilotWaveform.pilot_symbol_sequence", false]], "pilot_symbols() (configurablepilotwaveform method)": [[128, "hermespy.modem.waveform.ConfigurablePilotWaveform.pilot_symbols", false]], "pilotcommunicationwaveform (class in hermespy.modem.waveform)": [[128, "hermespy.modem.waveform.PilotCommunicationWaveform", false]], "pilotsection (class in hermespy.modem.waveforms.orthogonal.waveform)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection", false]], "pilotsymbolsequence (class in hermespy.modem.waveform)": [[131, "hermespy.modem.waveform.PilotSymbolSequence", false]], "ping() (fmcw method)": [[167, "hermespy.radar.fmcw.FMCW.ping", false]], "ping() (radarwaveform method)": [[172, "hermespy.radar.radar.RadarWaveform.ping", false]], "pipeline (class in hermespy.core.pipeline)": [[61, "hermespy.core.pipeline.Pipeline", false]], "place() (chirpfskwaveform method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.place", false]], "place() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.place", false]], "place() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.place", false]], "place() (orthogonalwaveform method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.place", false]], "place_samples() (gridsection method)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.place_samples", false]], "place_samples() (guardsection method)": [[146, "hermespy.modem.waveforms.orthogonal.waveform.GuardSection.place_samples", false]], "place_samples() (pilotsection method)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.place_samples", false]], "place_samples() (symbolsection method)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.place_samples", false]], "place_symbols() (gridsection method)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.place_symbols", false]], "place_symbols() (pilotsection method)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.place_symbols", false]], "playback_channels (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.playback_channels", false]], "playback_device (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.playback_device", false]], "plot (signal property)": [[65, "hermespy.core.signal_model.Signal.plot", false]], "plot() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.plot", false]], "plot() (montecarloresult method)": [[59, "hermespy.core.monte_carlo.MonteCarloResult.plot", false]], "plot() (selectiveleakagecalibration method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.plot", false]], "plot_angles (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.plot_angles", false]], "plot_angles (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.plot_angles", false]], "plot_characteristics() (poweramplifier method)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.plot_characteristics", false]], "plot_constellation (symbols property)": [[127, "hermespy.modem.symbols.Symbols.plot_constellation", false]], "plot_filter() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter", false]], "plot_filter_correlation() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter_correlation", false]], "plot_gain() (antenna method)": [[36, "hermespy.core.antennas.Antenna.plot_gain", false]], "plot_grid (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.plot_grid", false]], "plot_information (hardwareloop attribute)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.plot_information", false]], "plot_pattern() (simulatedantennaarray method)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray.plot_pattern", false]], "plot_polarization() (antenna method)": [[36, "hermespy.core.antennas.Antenna.plot_polarization", false]], "plot_power_delay (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.plot_power_delay", false]], "plot_power_delay() (multipathfadingsample method)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.plot_power_delay", false]], "plot_quantizer() (analogdigitalconverter method)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.plot_quantizer", false]], "plot_range (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.plot_range", false]], "plot_range_velocity (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.plot_range_velocity", false]], "plot_rays() (clusterdelaylinesample method)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.plot_rays", false]], "plot_results (simulation attribute)": [[231, "hermespy.simulation.simulation.Simulation.plot_results", false]], "plot_scale (evaluator property)": [[59, "hermespy.core.monte_carlo.Evaluator.plot_scale", false]], "plot_scale (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.plot_scale", false]], "plot_surface (scalarevaluationresult attribute)": [[59, "hermespy.core.monte_carlo.ScalarEvaluationResult.plot_surface", false]], "plot_topology() (antennaarraybase method)": [[36, "hermespy.core.antennas.AntennaArrayBase.plot_topology", false]], "plotvisualization (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.PlotVisualization", false]], "pointdetection (class in hermespy.radar.detection)": [[159, "hermespy.radar.detection.PointDetection", false]], "points (radarpointcloud property)": [[161, "hermespy.radar.detection.RadarPointCloud.points", false]], "polarization_transformations (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.polarization_transformations", false]], "polarsccoding (class in hermespy.fec.aff3ct.polar)": [[75, "hermespy.fec.aff3ct.polar.PolarSCCoding", false]], "polarsclcoding (class in hermespy.fec.aff3ct.polar)": [[75, "hermespy.fec.aff3ct.polar.PolarSCLCoding", false]], "pop_precoder() (precoding method)": [[62, "hermespy.core.precoding.Precoding.pop_precoder", false]], "port (antenna property)": [[36, "hermespy.core.antennas.Antenna.port", false]], "port (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.port", false]], "ports (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.ports", false]], "ports (antennaarraystate property)": [[36, "hermespy.core.antennas.AntennaArrayState.ports", false]], "ports (audiodeviceantennas property)": [[81, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.ports", false]], "ports (customantennaarray property)": [[36, "hermespy.core.antennas.CustomAntennaArray.ports", false]], "ports (uniformarray property)": [[36, "hermespy.core.antennas.UniformArray.ports", false]], "ports (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.ports", false]], "pose (state property)": [[66, "hermespy.core.state.State.pose", false]], "pose (statictrajectory property)": [[173, "hermespy.simulation.animation.StaticTrajectory.pose", false]], "pose (trajectorysample property)": [[173, "hermespy.simulation.animation.TrajectorySample.pose", false]], "pose (transformable property)": [[67, "hermespy.core.transformation.Transformable.pose", false]], "position (devicestate property)": [[66, "hermespy.core.state.DeviceState.position", false]], "position (pointdetection property)": [[159, "hermespy.radar.detection.PointDetection.position", false]], "position (radartargetpath property)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.position", false]], "position (state property)": [[66, "hermespy.core.state.State.position", false]], "position (transformable property)": [[67, "hermespy.core.transformation.Transformable.position", false]], "post_drop_hooks (hardwareloop property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.post_drop_hooks", false]], "power (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.power", false]], "power (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.power", false]], "power (dbconversiontype attribute)": [[241, "hermespy.tools.math.DbConversionType.POWER", false]], "power (densesignal property)": [[65, "hermespy.core.signal_model.DenseSignal.power", false]], "power (device property)": [[39, "hermespy.core.device.Device.power", false]], "power (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.power", false]], "power (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.power", false]], "power (matchedfilterjcas property)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas.power", false]], "power (n0 property)": [[201, "hermespy.simulation.noise.level.N0.power", false]], "power (noiserealization property)": [[200, "hermespy.simulation.noise.model.NoiseRealization.power", false]], "power (ofdmradar property)": [[99, "hermespy.jcas.ofdm_radar.OFDMRadar.power", false]], "power (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.power", false]], "power (pointdetection property)": [[159, "hermespy.radar.detection.PointDetection.power", false]], "power (powerartifact property)": [[53, "hermespy.core.evaluators.PowerArtifact.power", false]], "power (powerevaluation property)": [[53, "hermespy.core.evaluators.PowerEvaluation.power", false]], "power (radar property)": [[169, "hermespy.radar.radar.Radar.power", false]], "power (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.power", false]], "power (receiver property)": [[48, "hermespy.core.device.Receiver.power", false]], "power (receivingmodem property)": [[118, "hermespy.modem.modem.ReceivingModem.power", false]], "power (signal property)": [[65, "hermespy.core.signal_model.Signal.power", false]], "power (signalblock property)": [[65, "hermespy.core.signal_model.SignalBlock.power", false]], "power (signalreceiver property)": [[60, "hermespy.core.operators.SignalReceiver.power", false]], "power (signaltransmitter property)": [[60, "hermespy.core.operators.SignalTransmitter.power", false]], "power (silenttransmitter property)": [[60, "hermespy.core.operators.SilentTransmitter.power", false]], "power (transmitter property)": [[51, "hermespy.core.device.Transmitter.power", false]], "power (transmittingmodem property)": [[120, "hermespy.modem.modem.TransmittingModem.power", false]], "power_amplifier (rfchain property)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.power_amplifier", false]], "power_profile (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.power_profile", false]], "power_profile (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.power_profile", false]], "poweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier", false]], "powerartifact (class in hermespy.core.evaluators)": [[53, "hermespy.core.evaluators.PowerArtifact", false]], "powerevaluation (class in hermespy.core.evaluators)": [[53, "hermespy.core.evaluators.PowerEvaluation", false]], "powerresult (class in hermespy.core.evaluators)": [[53, "hermespy.core.evaluators.PowerResult", false]], "pre_drop_hooks (hardwareloop property)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.pre_drop_hooks", false]], "precoder (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.Precoder", false]], "precodertype (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.PrecoderType", false]], "precoding (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.Precoding", false]], "precoding (precoder property)": [[62, "hermespy.core.precoding.Precoder.precoding", false]], "precodingtype (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.PrecodingType", false]], "predict_leakage() (leakagecalibrationbase method)": [[85, "hermespy.hardware_loop.physical_device.LeakageCalibrationBase.predict_leakage", false]], "predict_leakage() (noleakagecalibration method)": [[85, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.predict_leakage", false]], "predict_leakage() (selectiveleakagecalibration method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.predict_leakage", false]], "prefix_ratio (gridresource property)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.prefix_ratio", false]], "prefix_type (gridresource attribute)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.prefix_type", false]], "prefixtype (class in hermespy.modem.waveforms.orthogonal.waveform)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.PrefixType", false]], "prepare_plot() (hardwareloopplot method)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.prepare_plot", false]], "print() (evaluationresult method)": [[59, "hermespy.core.monte_carlo.EvaluationResult.print", false]], "print() (montecarloresult method)": [[59, "hermespy.core.monte_carlo.MonteCarloResult.print", false]], "probe() (receivebeamformer method)": [[1, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe", false]], "probe_focus_points (receivebeamformer property)": [[1, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe_focus_points", false]], "process_from_realization() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.process_from_realization", false]], "process_input() (device method)": [[39, "hermespy.core.device.Device.process_input", false]], "process_input() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.process_input", false]], "process_input() (physicaldevicedummy method)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.process_input", false]], "process_input() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.process_input", false]], "process_inputs() (scenario method)": [[64, "hermespy.core.scenario.Scenario.process_inputs", false]], "process_inputs() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.process_inputs", false]], "processbase (class in hermespy.core.factory)": [[55, "hermespy.core.factory.ProcessBase", false]], "processeddeviceinput (class in hermespy.core.device)": [[47, "hermespy.core.device.ProcessedDeviceInput", false]], "processedsimulateddeviceinput (class in hermespy.simulation.simulated_device)": [[226, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput", false]], "propagate() (channel method)": [[13, "hermespy.channel.channel.Channel.propagate", false]], "propagate() (channelsample method)": [[15, "hermespy.channel.channel.ChannelSample.propagate", false]], "propagate() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.propagate", false]], "propagate() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.propagate", false]], "propagation_delay() (radarinterferencepath method)": [[33, "hermespy.channel.radar.radar.RadarInterferencePath.propagation_delay", false]], "propagation_delay() (radarpath method)": [[33, "hermespy.channel.radar.radar.RadarPath.propagation_delay", false]], "propagation_delay() (radartargetpath method)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.propagation_delay", false]], "propagation_response() (radarinterferencepath method)": [[33, "hermespy.channel.radar.radar.RadarInterferencePath.propagation_response", false]], "propagation_response() (radarpath method)": [[33, "hermespy.channel.radar.radar.RadarPath.propagation_response", false]], "propagation_response() (radartargetpath method)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.propagation_response", false]], "property_blacklist (beamfocus attribute)": [[1, "hermespy.beamforming.beamformer.BeamFocus.property_blacklist", false]], "property_blacklist (simulation attribute)": [[231, "hermespy.simulation.simulation.Simulation.property_blacklist", false]], "property_blacklist (transformable attribute)": [[67, "hermespy.core.transformation.Transformable.property_blacklist", false]], "property_blacklist (uniformarray attribute)": [[36, "hermespy.core.antennas.UniformArray.property_blacklist", false]], "pseudorandomgenerator (class in hermespy.fec.scrambler)": [[79, "hermespy.fec.scrambler.PseudoRandomGenerator", false]], "pskqammapping (class in hermespy.modem.tools.psk_qam_mapping)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping", false]], "pulse_rep_interval (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.pulse_rep_interval", false]], "quadmeshvisualization (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.QuadMeshVisualization", false]], "quadrigachannel (class in hermespy.channel.quadriga.quadriga)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannel", false]], "quadrigachannelrealization (class in hermespy.channel.quadriga.quadriga)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannelRealization", false]], "quadrigachannelsample (class in hermespy.channel.quadriga.quadriga)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannelSample", false]], "quantizer_type (analogdigitalconverter property)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.quantizer_type", false]], "quantizertype (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[212, "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType", false]], "radar (class in hermespy.radar.radar)": [[169, "hermespy.radar.radar.Radar", false]], "radar (detectionprobevaluator property)": [[163, "hermespy.radar.evaluators.DetectionProbEvaluator.radar", false]], "radar (radarrangeplot property)": [[95, "hermespy.hardware_loop.visualizers.RadarRangePlot.radar", false]], "radar_channel (radarevaluator property)": [[164, "hermespy.radar.evaluators.RadarEvaluator.radar_channel", false]], "radar_cross_section (singletargetradarchannel property)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.radar_cross_section", false]], "radarbase (class in hermespy.radar.radar)": [[169, "hermespy.radar.radar.RadarBase", false]], "radarchannelbase (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RadarChannelBase", false]], "radarchannelrealization (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RadarChannelRealization", false]], "radarchannelsample (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RadarChannelSample", false]], "radarcrosssectionmodel (class in hermespy.channel.radar.multi)": [[32, "hermespy.channel.radar.multi.RadarCrossSectionModel", false]], "radarcube (class in hermespy.radar.cube)": [[157, "hermespy.radar.cube.RadarCube", false]], "radardetector (class in hermespy.radar.detection)": [[160, "hermespy.radar.detection.RadarDetector", false]], "radarevaluator (class in hermespy.radar.evaluators)": [[164, "hermespy.radar.evaluators.RadarEvaluator", false]], "radarinterferencepath (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RadarInterferencePath", false]], "radarpath (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RadarPath", false]], "radarpointcloud (class in hermespy.radar.detection)": [[161, "hermespy.radar.detection.RadarPointCloud", false]], "radarrangeplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.RadarRangePlot", false]], "radarreception (class in hermespy.radar.radar)": [[170, "hermespy.radar.radar.RadarReception", false]], "radartarget (class in hermespy.channel.radar.multi)": [[32, "hermespy.channel.radar.multi.RadarTarget", false]], "radartargetpath (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RadarTargetPath", false]], "radartransmission (class in hermespy.radar.radar)": [[171, "hermespy.radar.radar.RadarTransmission", false]], "radarwaveform (class in hermespy.radar.radar)": [[172, "hermespy.radar.radar.RadarWaveform", false]], "raisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[139, "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform", false]], "randombitssource (class in hermespy.modem.bits_source)": [[100, "hermespy.modem.bits_source.RandomBitsSource", false]], "randomdelaychannel (class in hermespy.channel.delay.random)": [[19, "hermespy.channel.delay.random.RandomDelayChannel", false]], "randomdelaychannelrealization (class in hermespy.channel.delay.random)": [[19, "hermespy.channel.delay.random.RandomDelayChannelRealization", false]], "randomnode (class in hermespy.core.random_node)": [[63, "hermespy.core.random_node.RandomNode", false]], "randomrealization (class in hermespy.core.random_node)": [[63, "hermespy.core.random_node.RandomRealization", false]], "randomtrigger (class in hermespy.simulation.simulated_device)": [[233, "hermespy.simulation.simulated_device.RandomTrigger", false]], "range_bins (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.range_bins", false]], "range_bins (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.range_bins", false]], "range_resolution (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.range_resolution", false]], "range_resolution (matchedfilterjcas property)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas.range_resolution", false]], "range_resolution (ofdmradar property)": [[99, "hermespy.jcas.ofdm_radar.OFDMRadar.range_resolution", false]], "range_resolution (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.range_resolution", false]], "rapppoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[217, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier", false]], "rate (bchcoding property)": [[69, "hermespy.fec.aff3ct.bch.BCHCoding.rate", false]], "rate (blockinterleaver property)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.rate", false]], "rate (encoder property)": [[71, "hermespy.fec.coding.Encoder.rate", false]], "rate (encodermanager property)": [[71, "hermespy.fec.coding.EncoderManager.rate", false]], "rate (ldpccoding property)": [[74, "hermespy.fec.aff3ct.ldpc.LDPCCoding.rate", false]], "rate (polarsccoding property)": [[75, "hermespy.fec.aff3ct.polar.PolarSCCoding.rate", false]], "rate (polarsclcoding property)": [[75, "hermespy.fec.aff3ct.polar.PolarSCLCoding.rate", false]], "rate (reedsolomoncoding property)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding.rate", false]], "rate (rsccoding property)": [[78, "hermespy.fec.aff3ct.rsc.RSCCoding.rate", false]], "rate (turbocoding property)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding.rate", false]], "raw (symbols property)": [[127, "hermespy.modem.symbols.Symbols.raw", false]], "rayleigh_factor (cdl property)": [[6, "hermespy.channel.cdl.cdl.CDL.rayleigh_factor", false]], "rcrt (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RCRT", false]], "rcst (class in hermespy.channel.radar.radar)": [[33, "hermespy.channel.radar.radar.RCST", false]], "realization (channel property)": [[13, "hermespy.channel.channel.Channel.realization", false]], "realize() (awgn method)": [[203, "hermespy.simulation.noise.model.AWGN.realize", false]], "realize() (channel method)": [[13, "hermespy.channel.channel.Channel.realize", false]], "realize() (consistentgenerator method)": [[17, "hermespy.channel.consistent.ConsistentGenerator.realize", false]], "realize() (noisemodel method)": [[200, "hermespy.simulation.noise.model.NoiseModel.realize", false]], "realize() (randomtrigger method)": [[233, "hermespy.simulation.simulated_device.RandomTrigger.realize", false]], "realize() (sampleoffsettrigger method)": [[234, "hermespy.simulation.simulated_device.SampleOffsetTrigger.realize", false]], "realize() (statictrigger method)": [[235, "hermespy.simulation.simulated_device.StaticTrigger.realize", false]], "realize() (timeoffsettrigger method)": [[236, "hermespy.simulation.simulated_device.TimeOffsetTrigger.realize", false]], "realize() (triggermodel method)": [[237, "hermespy.simulation.simulated_device.TriggerModel.realize", false]], "realize_channels() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.realize_channels", false]], "realize_reception() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.realize_reception", false]], "realize_triggers() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.realize_triggers", false]], "receive() (coupling method)": [[186, "hermespy.simulation.coupling.coupling.Coupling.receive", false]], "receive() (device method)": [[39, "hermespy.core.device.Device.receive", false]], "receive() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.receive", false]], "receive() (physicaldevicedummy method)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.receive", false]], "receive() (receiver method)": [[48, "hermespy.core.device.Receiver.receive", false]], "receive() (rfchain method)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.receive", false]], "receive() (simulatedantenna method)": [[175, "hermespy.simulation.antennas.SimulatedAntenna.receive", false]], "receive() (simulatedantennaarray method)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray.receive", false]], "receive() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.receive", false]], "receive_antennas (antennaarray property)": [[36, "hermespy.core.antennas.AntennaArray.receive_antennas", false]], "receive_antennas (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.receive_antennas", false]], "receive_antennas (antennaarraystate property)": [[36, "hermespy.core.antennas.AntennaArrayState.receive_antennas", false]], "receive_antennas (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.receive_antennas", false]], "receive_beamformer (radarbase property)": [[169, "hermespy.radar.radar.RadarBase.receive_beamformer", false]], "receive_coding (device property)": [[39, "hermespy.core.device.Device.receive_coding", false]], "receive_correction_weights (scalarantennacalibration property)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration.receive_correction_weights", false]], "receive_correlation (impedancecoupling property)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_correlation", false]], "receive_devices() (physicalscenario method)": [[92, "hermespy.hardware_loop.scenario.PhysicalScenario.receive_devices", false]], "receive_devices() (physicalscenariodummy method)": [[91, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.receive_devices", false]], "receive_devices() (scenario method)": [[64, "hermespy.core.scenario.Scenario.receive_devices", false]], "receive_devices() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.receive_devices", false]], "receive_focus (receivebeamformer property)": [[1, "hermespy.beamforming.beamformer.ReceiveBeamformer.receive_focus", false]], "receive_impedance (impedancecoupling property)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_impedance", false]], "receive_operators() (device method)": [[39, "hermespy.core.device.Device.receive_operators", false]], "receive_operators() (scenario method)": [[64, "hermespy.core.scenario.Scenario.receive_operators", false]], "receive_ports (antennaarray property)": [[36, "hermespy.core.antennas.AntennaArray.receive_ports", false]], "receive_ports (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.receive_ports", false]], "receive_ports (audiodeviceantennas property)": [[81, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.receive_ports", false]], "receive_ports (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.receive_ports", false]], "receive_signal_coding (receivingmodembase property)": [[118, "hermespy.modem.modem.ReceivingModemBase.receive_signal_coding", false]], "receive_state() (devicestate method)": [[66, "hermespy.core.state.DeviceState.receive_state", false]], "receive_streams (channelstatedimension attribute)": [[37, "hermespy.core.channel.ChannelStateDimension.RECEIVE_STREAMS", false]], "receive_symbol_coding (receivingmodembase property)": [[118, "hermespy.modem.modem.ReceivingModemBase.receive_symbol_coding", false]], "receive_topology (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.receive_topology", false]], "receive_transmission (physicaldevicedummy property)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.receive_transmission", false]], "receivebeamformer (class in hermespy.beamforming.beamformer)": [[1, "hermespy.beamforming.beamformer.ReceiveBeamformer", false]], "received_streams() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.received_streams", false]], "receivedconstellationplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.ReceivedConstellationPlot", false]], "receivedecoder (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.ReceiveDecoder", false]], "receivedecodertype (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.ReceiveDecoderType", false]], "receivepowerevaluator (class in hermespy.core.evaluators)": [[53, "hermespy.core.evaluators.ReceivePowerEvaluator", false]], "receiveprecoding (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.ReceivePrecoding", false]], "receiveprecodingtype (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.ReceivePrecodingType", false]], "receiver (class in hermespy.core.device)": [[48, "hermespy.core.device.Receiver", false]], "receiver (linkstate property)": [[16, "hermespy.channel.channel.LinkState.receiver", false]], "receiver_antennas (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.receiver_antennas", false]], "receiver_pose (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.receiver_pose", false]], "receiver_state (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.receiver_state", false]], "receiver_velocity (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.receiver_velocity", false]], "receiveroperatingcharacteristic (class in hermespy.radar.evaluators)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic", false]], "receivers (device attribute)": [[39, "hermespy.core.device.Device.receivers", false]], "receivers (scenario property)": [[64, "hermespy.core.scenario.Scenario.receivers", false]], "receivesignalcoding (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.ReceiveSignalCoding", false]], "receivestate (class in hermespy.core.state)": [[66, "hermespy.core.state.ReceiveState", false]], "receivestreamdecoder (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.ReceiveStreamDecoder", false]], "receivesymbolcoding (class in hermespy.modem.precoding.symbol_precoding)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolCoding", false]], "receivesymboldecoder (class in hermespy.modem.precoding.symbol_precoding)": [[126, "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolDecoder", false]], "receiving (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.receiving", false]], "receiving_device (radarevaluator property)": [[164, "hermespy.radar.evaluators.RadarEvaluator.receiving_device", false]], "receiving_modem (communicationevaluator property)": [[102, "hermespy.modem.evaluators.CommunicationEvaluator.receiving_modem", false]], "receiving_radar (radarevaluator property)": [[164, "hermespy.radar.evaluators.RadarEvaluator.receiving_radar", false]], "receivingmodem (class in hermespy.modem.modem)": [[118, "hermespy.modem.modem.ReceivingModem", false]], "receivingmodembase (class in hermespy.modem.modem)": [[118, "hermespy.modem.modem.ReceivingModemBase", false]], "reception (class in hermespy.core.device)": [[49, "hermespy.core.device.Reception", false]], "receptiontype (class in hermespy.core.device)": [[49, "hermespy.core.device.ReceptionType", false]], "reciprocal() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.reciprocal", false]], "reciprocal() (clusterdelaylinesample method)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.reciprocal", false]], "reciprocal_sample() (channelrealization method)": [[14, "hermespy.channel.channel.ChannelRealization.reciprocal_sample", false]], "record (scenariomode attribute)": [[64, "hermespy.core.scenario.ScenarioMode.RECORD", false]], "record() (scenario method)": [[64, "hermespy.core.scenario.Scenario.record", false]], "record_channels (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.record_channels", false]], "record_device (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.record_device", false]], "record_drops (hardwareloop attribute)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.record_drops", false]], "rectangularwaveform (class in hermespy.modem.waveform_single_carrier)": [[140, "hermespy.modem.waveform_single_carrier.RectangularWaveform", false]], "reedsolomoncoding (class in hermespy.fec.aff3ct.rs)": [[77, "hermespy.fec.aff3ct.rs.ReedSolomonCoding", false]], "reference (communicationnoiselevel property)": [[197, "hermespy.simulation.modem.noise.CommunicationNoiseLevel.reference", false]], "reference (coordinatefocus property)": [[1, "hermespy.beamforming.beamformer.CoordinateFocus.reference", false]], "reference (elementtype attribute)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.ElementType.REFERENCE", false]], "reference (snr property)": [[202, "hermespy.simulation.noise.level.SNR.reference", false]], "references_per_frame (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.references_per_frame", false]], "reflection_phase (radartargetpath property)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.reflection_phase", false]], "register() (in module hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.register", false]], "registered_classes (factory property)": [[55, "hermespy.core.factory.Factory.registered_classes", false]], "registered_tags (factory property)": [[55, "hermespy.core.factory.Factory.registered_tags", false]], "registereddimension (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.RegisteredDimension", false]], "relative_bandwidth (rectangularwaveform property)": [[140, "hermespy.modem.waveform_single_carrier.RectangularWaveform.relative_bandwidth", false]], "relative_bandwidth (rolledoffsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.relative_bandwidth", false]], "relative_doppler_bins (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.relative_doppler_bins", false]], "relative_doppler_bins (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.relative_doppler_bins", false]], "relative_doppler_resolution (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.relative_doppler_resolution", false]], "relative_doppler_resolution (ofdmradar property)": [[99, "hermespy.jcas.ofdm_radar.OFDMRadar.relative_doppler_resolution", false]], "relative_doppler_resolution (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.relative_doppler_resolution", false]], "relative_velocity() (radarinterferencepath method)": [[33, "hermespy.channel.radar.radar.RadarInterferencePath.relative_velocity", false]], "relative_velocity() (radarpath method)": [[33, "hermespy.channel.radar.radar.RadarPath.relative_velocity", false]], "relative_velocity() (radartargetpath method)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.relative_velocity", false]], "remove() (hook method)": [[56, "hermespy.core.hooks.Hook.remove", false]], "remove_antenna() (antennaport method)": [[36, "hermespy.core.antennas.AntennaPort.remove_antenna", false]], "remove_device() (triggermodel method)": [[237, "hermespy.simulation.simulated_device.TriggerModel.remove_device", false]], "remove_dimension() (montecarlo method)": [[59, "hermespy.core.monte_carlo.MonteCarlo.remove_dimension", false]], "remove_hook() (hookable method)": [[56, "hermespy.core.hooks.Hookable.remove_hook", false]], "remove_leakage() (leakagecalibrationbase method)": [[85, "hermespy.hardware_loop.physical_device.LeakageCalibrationBase.remove_leakage", false]], "remove_leakage() (noleakagecalibration method)": [[85, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.remove_leakage", false]], "remove_leakage() (selectiveleakagecalibration method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.remove_leakage", false]], "remove_link() (transformablelink method)": [[67, "hermespy.core.transformation.TransformableLink.remove_link", false]], "remove_port() (customantennaarray method)": [[36, "hermespy.core.antennas.CustomAntennaArray.remove_port", false]], "remove_port() (simulatedcustomarray method)": [[178, "hermespy.simulation.antennas.SimulatedCustomArray.remove_port", false]], "remove_sample_hook() (channel method)": [[13, "hermespy.channel.channel.Channel.remove_sample_hook", false]], "repeat_pilot_symbol_sequence (configurablepilotwaveform attribute)": [[128, "hermespy.modem.waveform.ConfigurablePilotWaveform.repeat_pilot_symbol_sequence", false]], "repetitionencoder (class in hermespy.fec.repetition_encoder)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder", false]], "repetitions (gridelement attribute)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.GridElement.repetitions", false]], "repetitions (gridresource property)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.repetitions", false]], "repetitions (repetitionencoder property)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder.repetitions", false]], "replay (scenariomode attribute)": [[64, "hermespy.core.scenario.ScenarioMode.REPLAY", false]], "replay() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.replay", false]], "replay() (scenario class method)": [[64, "hermespy.core.scenario.Scenario.Replay", false]], "replay() (scenario method)": [[64, "hermespy.core.scenario.Scenario.replay", false]], "replayscenario (class in hermespy.core.scenario)": [[64, "hermespy.core.scenario.ReplayScenario", false]], "required_num_data_bits() (encodermanager method)": [[71, "hermespy.fec.coding.EncoderManager.required_num_data_bits", false]], "resample() (signal method)": [[65, "hermespy.core.signal_model.Signal.resample", false]], "resample() (signalblock method)": [[65, "hermespy.core.signal_model.SignalBlock.resample", false]], "rescale_quantization (gaincontrolbase property)": [[210, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.rescale_quantization", false]], "reset() (pseudorandomgenerator method)": [[79, "hermespy.fec.scrambler.PseudoRandomGenerator.reset", false]], "resource_mask (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.resource_mask", false]], "resource_mask (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.resource_mask", false]], "resource_mask (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.resource_mask", false]], "resource_mask (symbolsection property)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.resource_mask", false]], "results_dir (executable property)": [[54, "hermespy.core.executable.Executable.results_dir", false]], "rf_chain (simulatedantennaport property)": [[177, "hermespy.simulation.antennas.SimulatedAntennaPort.rf_chain", false]], "rf_chain (simulateddevice attribute)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.rf_chain", false]], "rf_chain_modified() (simulatedantennaarray method)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray.rf_chain_modified", false]], "rfchain (class in hermespy.simulation.rf_chain.rf_chain)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain", false]], "rice_factor (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.rice_factor", false]], "rice_factors (multipathfadingchannel property)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.rice_factors", false]], "rms_amplitude (gaincontroltype attribute)": [[211, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType.RMS_AMPLITUDE", false]], "rms_delay (cdl property)": [[6, "hermespy.channel.cdl.cdl.CDL.rms_delay", false]], "rms_delay (exponential property)": [[22, "hermespy.channel.fading.exponential.Exponential.rms_delay", false]], "rms_delay (tdl property)": [[28, "hermespy.channel.fading.tdl.TDL.rms_delay", false]], "rms_value() (in module hermespy.tools.math)": [[241, "hermespy.tools.math.rms_value", false]], "rocartifact (class in hermespy.radar.evaluators)": [[165, "hermespy.radar.evaluators.RocArtifact", false]], "rocevaluation (class in hermespy.radar.evaluators)": [[165, "hermespy.radar.evaluators.RocEvaluation", false]], "rocevaluationresult (class in hermespy.radar.evaluators)": [[165, "hermespy.radar.evaluators.RocEvaluationResult", false]], "roll_off (rolledoffsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.roll_off", false]], "rolledoffsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[137, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform", false]], "rootmeansquareartifact (class in hermespy.radar.evaluators)": [[166, "hermespy.radar.evaluators.RootMeanSquareArtifact", false]], "rootmeansquareerror (class in hermespy.radar.evaluators)": [[166, "hermespy.radar.evaluators.RootMeanSquareError", false]], "rootmeansquareerrorresult (class in hermespy.radar.evaluators)": [[166, "hermespy.radar.evaluators.RootMeanSquareErrorResult", false]], "rootmeansquareevaluation (class in hermespy.radar.evaluators)": [[166, "hermespy.radar.evaluators.RootMeanSquareEvaluation", false]], "rootraisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[141, "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform", false]], "rotate_direction() (transformation method)": [[67, "hermespy.core.transformation.Transformation.rotate_direction", false]], "rotation_quaternion (transformation property)": [[67, "hermespy.core.transformation.Transformation.rotation_quaternion", false]], "rotation_rpy (transformation property)": [[67, "hermespy.core.transformation.Transformation.rotation_rpy", false]], "rrt (class in hermespy.radar.radar)": [[170, "hermespy.radar.radar.RRT", false]], "rsccoding (class in hermespy.fec.aff3ct.rsc)": [[78, "hermespy.fec.aff3ct.rsc.RSCCoding", false]], "rtt (class in hermespy.radar.radar)": [[171, "hermespy.radar.radar.RTT", false]], "run() (executable method)": [[54, "hermespy.core.executable.Executable.run", false]], "run() (hardwareloop method)": [[86, "hermespy.hardware_loop.hardware_loop.HardwareLoop.run", false]], "run() (montecarloactor method)": [[59, "hermespy.core.monte_carlo.MonteCarloActor.run", false]], "run() (simulation method)": [[231, "hermespy.simulation.simulation.Simulation.run", false]], "runtime_env (montecarlo attribute)": [[59, "hermespy.core.monte_carlo.MonteCarlo.runtime_env", false]], "rural (cost259type attribute)": [[21, "hermespy.channel.fading.cost259.Cost259Type.RURAL", false]], "ruralmacrocells (class in hermespy.channel.cdl.rural_macrocells)": [[10, "hermespy.channel.cdl.rural_macrocells.RuralMacrocells", false]], "ruralmacrocellsrealization (class in hermespy.channel.cdl.rural_macrocells)": [[10, "hermespy.channel.cdl.rural_macrocells.RuralMacrocellsRealization", false]], "rx (antennamode attribute)": [[36, "hermespy.core.antennas.AntennaMode.RX", false]], "rx_gain (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.rx_gain", false]], "salehpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier", false]], "sample() (channelrealization method)": [[14, "hermespy.channel.channel.ChannelRealization.sample", false]], "sample() (consistentboolean method)": [[17, "hermespy.channel.consistent.ConsistentBoolean.sample", false]], "sample() (consistentgaussian method)": [[17, "hermespy.channel.consistent.ConsistentGaussian.sample", false]], "sample() (consistentrealization method)": [[17, "hermespy.channel.consistent.ConsistentRealization.sample", false]], "sample() (consistentuniform method)": [[17, "hermespy.channel.consistent.ConsistentUniform.sample", false]], "sample() (consistentvariable method)": [[17, "hermespy.channel.consistent.ConsistentVariable.sample", false]], "sample() (dualconsistentrealization method)": [[17, "hermespy.channel.consistent.DualConsistentRealization.sample", false]], "sample() (staticconsistentrealization method)": [[17, "hermespy.channel.consistent.StaticConsistentRealization.sample", false]], "sample() (statictrajectory method)": [[173, "hermespy.simulation.animation.StaticTrajectory.sample", false]], "sample() (trajectory method)": [[173, "hermespy.simulation.animation.Trajectory.sample", false]], "sample_covariance() (antennacorrelation method)": [[24, "hermespy.channel.fading.fading.AntennaCorrelation.sample_covariance", false]], "sample_covariance() (customantennacorrelation method)": [[24, "hermespy.channel.fading.fading.CustomAntennaCorrelation.sample_covariance", false]], "sample_cross_section() (physicalradartarget method)": [[32, "hermespy.channel.radar.multi.PhysicalRadarTarget.sample_cross_section", false]], "sample_cross_section() (radartarget method)": [[32, "hermespy.channel.radar.multi.RadarTarget.sample_cross_section", false]], "sample_cross_section() (virtualradartarget method)": [[32, "hermespy.channel.radar.multi.VirtualRadarTarget.sample_cross_section", false]], "sample_hooks (channel property)": [[13, "hermespy.channel.channel.Channel.sample_hooks", false]], "sample_hooks (channelrealization property)": [[14, "hermespy.channel.channel.ChannelRealization.sample_hooks", false]], "sample_index (montecarlosample property)": [[59, "hermespy.core.monte_carlo.MonteCarloSample.sample_index", false]], "sample_offset (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.sample_offset", false]], "sample_offset (pilotsection property)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.sample_offset", false]], "sample_orientation() (lineartrajectory method)": [[173, "hermespy.simulation.animation.LinearTrajectory.sample_orientation", false]], "sample_orientation() (statictrajectory method)": [[173, "hermespy.simulation.animation.StaticTrajectory.sample_orientation", false]], "sample_orientation() (trajectory method)": [[173, "hermespy.simulation.animation.Trajectory.sample_orientation", false]], "sample_points (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.sample_points", false]], "sample_trajectory() (physicalradartarget method)": [[32, "hermespy.channel.radar.multi.PhysicalRadarTarget.sample_trajectory", false]], "sample_trajectory() (radartarget method)": [[32, "hermespy.channel.radar.multi.RadarTarget.sample_trajectory", false]], "sample_trajectory() (virtualradartarget method)": [[32, "hermespy.channel.radar.multi.VirtualRadarTarget.sample_trajectory", false]], "sample_translation() (lineartrajectory method)": [[173, "hermespy.simulation.animation.LinearTrajectory.sample_translation", false]], "sample_translation() (statictrajectory method)": [[173, "hermespy.simulation.animation.StaticTrajectory.sample_translation", false]], "sample_translation() (trajectory method)": [[173, "hermespy.simulation.animation.Trajectory.sample_translation", false]], "sample_velocity() (lineartrajectory method)": [[173, "hermespy.simulation.animation.LinearTrajectory.sample_velocity", false]], "sample_velocity() (statictrajectory method)": [[173, "hermespy.simulation.animation.StaticTrajectory.sample_velocity", false]], "sample_velocity() (trajectory method)": [[173, "hermespy.simulation.animation.Trajectory.sample_velocity", false]], "samplegrid (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.SampleGrid", false]], "sampleoffsettrigger (class in hermespy.simulation.simulated_device)": [[234, "hermespy.simulation.simulated_device.SampleOffsetTrigger", false]], "samplepoint (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.SamplePoint", false]], "samples (actorrunresult attribute)": [[59, "hermespy.core.monte_carlo.ActorRunResult.samples", false]], "samples (channelstatedimension attribute)": [[37, "hermespy.core.channel.ChannelStateDimension.SAMPLES", false]], "samples (gridsection property)": [[59, "hermespy.core.monte_carlo.GridSection.samples", false]], "samples() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.samples", false]], "samples_in_chirp (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.samples_in_chirp", false]], "samples_per_frame (basemodem property)": [[112, "hermespy.modem.modem.BaseModem.samples_per_frame", false]], "samples_per_frame (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.samples_per_frame", false]], "samples_per_frame (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.samples_per_frame", false]], "samples_per_frame (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.samples_per_frame", false]], "samples_per_frame (ofdmwaveform property)": [[153, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform.samples_per_frame", false]], "samples_per_frame (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.samples_per_frame", false]], "sampling_rate (audiodevice property)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.sampling_rate", false]], "sampling_rate (basemodem property)": [[112, "hermespy.modem.modem.BaseModem.sampling_rate", false]], "sampling_rate (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.sampling_rate", false]], "sampling_rate (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.sampling_rate", false]], "sampling_rate (device property)": [[39, "hermespy.core.device.Device.sampling_rate", false]], "sampling_rate (deviceoutput property)": [[41, "hermespy.core.device.DeviceOutput.sampling_rate", false]], "sampling_rate (duplexjcasoperator property)": [[97, "hermespy.jcas.jcas.DuplexJCASOperator.sampling_rate", false]], "sampling_rate (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.sampling_rate", false]], "sampling_rate (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.sampling_rate", false]], "sampling_rate (matchedfilterjcas property)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas.sampling_rate", false]], "sampling_rate (ocdmwaveform property)": [[150, "hermespy.modem.waveforms.orthogonal.ocdm.OCDMWaveform.sampling_rate", false]], "sampling_rate (ofdmwaveform property)": [[153, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform.sampling_rate", false]], "sampling_rate (operator property)": [[46, "hermespy.core.device.Operator.sampling_rate", false]], "sampling_rate (radar property)": [[169, "hermespy.radar.radar.Radar.sampling_rate", false]], "sampling_rate (radarwaveform property)": [[172, "hermespy.radar.radar.RadarWaveform.sampling_rate", false]], "sampling_rate (selectiveleakagecalibration property)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.sampling_rate", false]], "sampling_rate (signal property)": [[65, "hermespy.core.signal_model.Signal.sampling_rate", false]], "sampling_rate (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.sampling_rate", false]], "sampling_rate (state property)": [[66, "hermespy.core.state.State.sampling_rate", false]], "sampling_rate (staticoperator property)": [[60, "hermespy.core.operators.StaticOperator.sampling_rate", false]], "sampling_rate (triggerrealization property)": [[238, "hermespy.simulation.simulated_device.TriggerRealization.sampling_rate", false]], "sampling_rate (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.sampling_rate", false]], "saturation_amplitude (poweramplifier property)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.saturation_amplitude", false]], "save() (calibration method)": [[89, "hermespy.hardware_loop.physical_device.Calibration.save", false]], "save_calibration() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.save_calibration", false]], "save_to_matlab() (montecarloresult method)": [[59, "hermespy.core.monte_carlo.MonteCarloResult.save_to_matlab", false]], "scalarantennacalibration (class in hermespy.hardware_loop.calibration.antennas)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration", false]], "scalardimension (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.ScalarDimension", false]], "scalarevaluationresult (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.ScalarEvaluationResult", false]], "scale_quantized_signal() (gaincontrolbase method)": [[210, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.scale_quantized_signal", false]], "scale_transmission (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.scale_transmission", false]], "scattervisualization (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.ScatterVisualization", false]], "scenario (channel property)": [[13, "hermespy.channel.channel.Channel.scenario", false]], "scenario (class in hermespy.core.scenario)": [[64, "hermespy.core.scenario.Scenario", false]], "scenario (pipeline property)": [[61, "hermespy.core.pipeline.Pipeline.scenario", false]], "scenario (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.scenario", false]], "scenariomode (class in hermespy.core.scenario)": [[64, "hermespy.core.scenario.ScenarioMode", false]], "scenariotype (class in hermespy.core.scenario)": [[64, "hermespy.core.scenario.ScenarioType", false]], "scenariovisualization (class in hermespy.simulation.scenario)": [[222, "hermespy.simulation.scenario.ScenarioVisualization", false]], "scene (sionnartchannel property)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannel.scene", false]], "scene (sionnartchannelrealization property)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelRealization.scene", false]], "schmidlcoxpilotsection (class in hermespy.modem.waveforms.orthogonal.ofdm)": [[154, "hermespy.modem.waveforms.orthogonal.ofdm.SchmidlCoxPilotSection", false]], "schmidlcoxsynchronization (class in hermespy.modem.waveforms.orthogonal.ofdm)": [[155, "hermespy.modem.waveforms.orthogonal.ofdm.SchmidlCoxSynchronization", false]], "scrambler3gpp (class in hermespy.fec.scrambler)": [[79, "hermespy.fec.scrambler.Scrambler3GPP", false]], "scrambler80211a (class in hermespy.fec.scrambler)": [[79, "hermespy.fec.scrambler.Scrambler80211a", false]], "screen_geometry() (in module hermespy.tools.tile)": [[243, "hermespy.tools.tile.screen_geometry", false]], "section_block_size (montecarlo property)": [[59, "hermespy.core.monte_carlo.MonteCarlo.section_block_size", false]], "seed (randomrealization property)": [[63, "hermespy.core.random_node.RandomRealization.seed", false]], "seed (scrambler80211a property)": [[79, "hermespy.fec.scrambler.Scrambler80211a.seed", false]], "select_subarray() (antennaarraystate method)": [[36, "hermespy.core.antennas.AntennaArrayState.select_subarray", false]], "selected_receive_ports (receiver property)": [[48, "hermespy.core.device.Receiver.selected_receive_ports", false]], "selected_receive_ports (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.selected_receive_ports", false]], "selected_transmit_ports (transmitter property)": [[51, "hermespy.core.device.Transmitter.selected_transmit_ports", false]], "selected_transmit_ports (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.selected_transmit_ports", false]], "selectiveleakage (class in hermespy.simulation.isolation.selective)": [[195, "hermespy.simulation.isolation.selective.SelectiveLeakage", false]], "selectiveleakagecalibration (class in hermespy.hardware_loop.calibration.leakage)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration", false]], "send() (poweramplifier method)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.send", false]], "sequence (pilotsymbolsequence property)": [[131, "hermespy.modem.waveform.PilotSymbolSequence.sequence", false]], "sequence_length() (deserializationprocess method)": [[55, "hermespy.core.factory.DeserializationProcess.sequence_length", false]], "sequence_length() (hdfdeserializationprocess method)": [[55, "hermespy.core.factory.HDFDeserializationProcess.sequence_length", false]], "serializable (class in hermespy.core.factory)": [[55, "hermespy.core.factory.Serializable", false]], "serializableenum (class in hermespy.core.factory)": [[55, "hermespy.core.factory.SerializableEnum", false]], "serializabletype (class in hermespy.core.factory)": [[55, "hermespy.core.factory.SerializableType", false]], "serialization_tag() (serializable class method)": [[55, "hermespy.core.factory.Serializable.serialization_tag", false]], "serializationbackend (class in hermespy.core.factory)": [[55, "hermespy.core.factory.SerializationBackend", false]], "serializationprocess (class in hermespy.core.factory)": [[55, "hermespy.core.factory.SerializationProcess", false]], "serialize() (alamouti method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Alamouti.serialize", false]], "serialize() (analogdigitalconverter method)": [[207, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.serialize", false]], "serialize() (antenna method)": [[36, "hermespy.core.antennas.Antenna.serialize", false]], "serialize() (antennaport method)": [[36, "hermespy.core.antennas.AntennaPort.serialize", false]], "serialize() (audiodevice method)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.serialize", false]], "serialize() (automaticgaincontrol method)": [[208, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.serialize", false]], "serialize() (awgn method)": [[203, "hermespy.simulation.noise.model.AWGN.serialize", false]], "serialize() (basemodem method)": [[112, "hermespy.modem.modem.BaseModem.serialize", false]], "serialize() (blockinterleaver method)": [[70, "hermespy.fec.block_interleaver.BlockInterleaver.serialize", false]], "serialize() (caponbeamformer method)": [[2, "hermespy.beamforming.capon.CaponBeamformer.serialize", false]], "serialize() (cdl method)": [[6, "hermespy.channel.cdl.cdl.CDL.serialize", false]], "serialize() (cdlrealization method)": [[6, "hermespy.channel.cdl.cdl.CDLRealization.serialize", false]], "serialize() (channel method)": [[13, "hermespy.channel.channel.Channel.serialize", false]], "serialize() (channelequalization method)": [[129, "hermespy.modem.waveform.ChannelEqualization.serialize", false]], "serialize() (channelestimation method)": [[130, "hermespy.modem.waveform.ChannelEstimation.serialize", false]], "serialize() (channelrealization method)": [[14, "hermespy.channel.channel.ChannelRealization.serialize", false]], "serialize() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.serialize", false]], "serialize() (chirpfskwaveform method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.serialize", false]], "serialize() (clusterdelaylinebase method)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase.serialize", false]], "serialize() (clusterdelaylinerealization method)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealization.serialize", false]], "serialize() (clusterdelaylinerealizationparameters method)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.serialize", false]], "serialize() (communicationevaluator method)": [[102, "hermespy.modem.evaluators.CommunicationEvaluator.serialize", false]], "serialize() (communicationreception method)": [[113, "hermespy.modem.modem.CommunicationReception.serialize", false]], "serialize() (communicationreceptionframe method)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.serialize", false]], "serialize() (communicationtransmission method)": [[115, "hermespy.modem.modem.CommunicationTransmission.serialize", false]], "serialize() (communicationtransmissionframe method)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.serialize", false]], "serialize() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.serialize", false]], "serialize() (consistentvariable method)": [[17, "hermespy.channel.consistent.ConsistentVariable.serialize", false]], "serialize() (conventionalbeamformer method)": [[3, "hermespy.beamforming.conventional.ConventionalBeamformer.serialize", false]], "serialize() (coordinatefocus method)": [[1, "hermespy.beamforming.beamformer.CoordinateFocus.serialize", false]], "serialize() (correlationsynchronization method)": [[136, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.serialize", false]], "serialize() (cost259 method)": [[21, "hermespy.channel.fading.cost259.Cost259.serialize", false]], "serialize() (customantennaarray method)": [[36, "hermespy.core.antennas.CustomAntennaArray.serialize", false]], "serialize() (customantennacorrelation method)": [[24, "hermespy.channel.fading.fading.CustomAntennaCorrelation.serialize", false]], "serialize() (custompoweramplifier method)": [[215, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.serialize", false]], "serialize() (cyclicredundancycheck method)": [[72, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.serialize", false]], "serialize() (delaycalibration method)": [[84, "hermespy.hardware_loop.calibration.delay.DelayCalibration.serialize", false]], "serialize() (delaychannelbase method)": [[18, "hermespy.channel.delay.delay.DelayChannelBase.serialize", false]], "serialize() (delaychannelrealization method)": [[18, "hermespy.channel.delay.delay.DelayChannelRealization.serialize", false]], "serialize() (device method)": [[39, "hermespy.core.device.Device.serialize", false]], "serialize() (devicefocus method)": [[184, "hermespy.simulation.beamforming.DeviceFocus.serialize", false]], "serialize() (deviceinput method)": [[40, "hermespy.core.device.DeviceInput.serialize", false]], "serialize() (deviceoutput method)": [[41, "hermespy.core.device.DeviceOutput.serialize", false]], "serialize() (devicereception method)": [[42, "hermespy.core.device.DeviceReception.serialize", false]], "serialize() (devicetransmission method)": [[43, "hermespy.core.device.DeviceTransmission.serialize", false]], "serialize() (dft method)": [[122, "hermespy.modem.precoding.dft.DFT.serialize", false]], "serialize() (dipole method)": [[36, "hermespy.core.antennas.Dipole.serialize", false]], "serialize() (drop method)": [[52, "hermespy.core.drop.Drop.serialize", false]], "serialize() (dualconsistentrealization method)": [[17, "hermespy.channel.consistent.DualConsistentRealization.serialize", false]], "serialize() (duplexjcasoperator method)": [[97, "hermespy.jcas.jcas.DuplexJCASOperator.serialize", false]], "serialize() (duplexmodem method)": [[117, "hermespy.modem.modem.DuplexModem.serialize", false]], "serialize() (encodermanager method)": [[71, "hermespy.fec.coding.EncoderManager.serialize", false]], "serialize() (exponential method)": [[22, "hermespy.channel.fading.exponential.Exponential.serialize", false]], "serialize() (factory method)": [[55, "hermespy.core.factory.Factory.serialize", false]], "serialize() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.serialize", false]], "serialize() (fixedcrosssection method)": [[32, "hermespy.channel.radar.multi.FixedCrossSection.serialize", false]], "serialize() (fmcw method)": [[167, "hermespy.radar.fmcw.FMCW.serialize", false]], "serialize() (fmcwwaveform method)": [[138, "hermespy.modem.waveform_single_carrier.FMCWWaveform.serialize", false]], "serialize() (framegeneratorstub method)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGeneratorStub.serialize", false]], "serialize() (gain method)": [[209, "hermespy.simulation.rf_chain.analog_digital_converter.Gain.serialize", false]], "serialize() (ganesan method)": [[125, "hermespy.modem.precoding.space_time_block_coding.Ganesan.serialize", false]], "serialize() (gridelement method)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.GridElement.serialize", false]], "serialize() (gridresource method)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.GridResource.serialize", false]], "serialize() (gridsection method)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.serialize", false]], "serialize() (guardsection method)": [[146, "hermespy.modem.waveforms.orthogonal.waveform.GuardSection.serialize", false]], "serialize() (idealantenna method)": [[36, "hermespy.core.antennas.IdealAntenna.serialize", false]], "serialize() (idealchannel method)": [[29, "hermespy.channel.ideal.IdealChannel.serialize", false]], "serialize() (idealchannelrealization method)": [[29, "hermespy.channel.ideal.IdealChannelRealization.serialize", false]], "serialize() (impedancecoupling method)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.serialize", false]], "serialize() (indoorfactory method)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.serialize", false]], "serialize() (indoorfactoryrealization method)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactoryRealization.serialize", false]], "serialize() (indooroffice method)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOffice.serialize", false]], "serialize() (indoorofficerealization method)": [[9, "hermespy.channel.cdl.indoor_office.IndoorOfficeRealization.serialize", false]], "serialize() (jcasreception method)": [[97, "hermespy.jcas.jcas.JCASReception.serialize", false]], "serialize() (jcastransmission method)": [[97, "hermespy.jcas.jcas.JCASTransmission.serialize", false]], "serialize() (linearantenna method)": [[36, "hermespy.core.antennas.LinearAntenna.serialize", false]], "serialize() (lineartrajectory method)": [[173, "hermespy.simulation.animation.LinearTrajectory.serialize", false]], "serialize() (matchedfilterjcas method)": [[98, "hermespy.jcas.matched_filtering.MatchedFilterJcas.serialize", false]], "serialize() (maxdetector method)": [[158, "hermespy.radar.detection.MaxDetector.serialize", false]], "serialize() (maximumratiocombining method)": [[123, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.serialize", false]], "serialize() (mixingoperator method)": [[44, "hermespy.core.device.MixingOperator.serialize", false]], "serialize() (moveable method)": [[173, "hermespy.simulation.animation.Moveable.serialize", false]], "serialize() (multipathfadingchannel method)": [[25, "hermespy.channel.fading.fading.MultipathFadingChannel.serialize", false]], "serialize() (multipathfadingrealization method)": [[26, "hermespy.channel.fading.fading.MultipathFadingRealization.serialize", false]], "serialize() (multitargetradarchannel method)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel.serialize", false]], "serialize() (multitargetradarchannelrealization method)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannelRealization.serialize", false]], "serialize() (n0 method)": [[201, "hermespy.simulation.noise.level.N0.serialize", false]], "serialize() (noantennacalibration method)": [[83, "hermespy.hardware_loop.physical_device.NoAntennaCalibration.serialize", false]], "serialize() (nodelaycalibration method)": [[84, "hermespy.hardware_loop.physical_device.NoDelayCalibration.serialize", false]], "serialize() (noiserealization method)": [[200, "hermespy.simulation.noise.model.NoiseRealization.serialize", false]], "serialize() (noleakagecalibration method)": [[85, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.serialize", false]], "serialize() (nophasenoise method)": [[220, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.serialize", false]], "serialize() (ofdmwaveform method)": [[153, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform.serialize", false]], "serialize() (operationresult method)": [[45, "hermespy.core.device.OperationResult.serialize", false]], "serialize() (orthogonalwaveform method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.serialize", false]], "serialize() (oscillatorphasenoise method)": [[221, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.serialize", false]], "serialize() (patchantenna method)": [[36, "hermespy.core.antennas.PatchAntenna.serialize", false]], "serialize() (perfectcoupling method)": [[188, "hermespy.simulation.coupling.perfect.PerfectCoupling.serialize", false]], "serialize() (perfectisolation method)": [[194, "hermespy.simulation.isolation.perfect.PerfectIsolation.serialize", false]], "serialize() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.serialize", false]], "serialize() (physicalradartarget method)": [[32, "hermespy.channel.radar.multi.PhysicalRadarTarget.serialize", false]], "serialize() (pilotsection method)": [[148, "hermespy.modem.waveforms.orthogonal.waveform.PilotSection.serialize", false]], "serialize() (pointdetection method)": [[159, "hermespy.radar.detection.PointDetection.serialize", false]], "serialize() (poweramplifier method)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.serialize", false]], "serialize() (precoding method)": [[62, "hermespy.core.precoding.Precoding.serialize", false]], "serialize() (processeddeviceinput method)": [[47, "hermespy.core.device.ProcessedDeviceInput.serialize", false]], "serialize() (processedsimulateddeviceinput method)": [[226, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.serialize", false]], "serialize() (pskqammapping method)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.serialize", false]], "serialize() (quadrigachannel method)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannel.serialize", false]], "serialize() (radar method)": [[169, "hermespy.radar.radar.Radar.serialize", false]], "serialize() (radarbase method)": [[169, "hermespy.radar.radar.RadarBase.serialize", false]], "serialize() (radarchannelbase method)": [[33, "hermespy.channel.radar.radar.RadarChannelBase.serialize", false]], "serialize() (radarchannelrealization method)": [[33, "hermespy.channel.radar.radar.RadarChannelRealization.serialize", false]], "serialize() (radarcube method)": [[157, "hermespy.radar.cube.RadarCube.serialize", false]], "serialize() (radarpath method)": [[33, "hermespy.channel.radar.radar.RadarPath.serialize", false]], "serialize() (radarpointcloud method)": [[161, "hermespy.radar.detection.RadarPointCloud.serialize", false]], "serialize() (radarreception method)": [[170, "hermespy.radar.radar.RadarReception.serialize", false]], "serialize() (radartarget method)": [[32, "hermespy.channel.radar.multi.RadarTarget.serialize", false]], "serialize() (radartargetpath method)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.serialize", false]], "serialize() (randombitssource method)": [[100, "hermespy.modem.bits_source.RandomBitsSource.serialize", false]], "serialize() (randomdelaychannel method)": [[19, "hermespy.channel.delay.random.RandomDelayChannel.serialize", false]], "serialize() (randomdelaychannelrealization method)": [[19, "hermespy.channel.delay.random.RandomDelayChannelRealization.serialize", false]], "serialize() (randomrealization method)": [[63, "hermespy.core.random_node.RandomRealization.serialize", false]], "serialize() (randomtrigger method)": [[233, "hermespy.simulation.simulated_device.RandomTrigger.serialize", false]], "serialize() (rapppoweramplifier method)": [[217, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.serialize", false]], "serialize() (receiver method)": [[48, "hermespy.core.device.Receiver.serialize", false]], "serialize() (receivingmodem method)": [[118, "hermespy.modem.modem.ReceivingModem.serialize", false]], "serialize() (receivingmodembase method)": [[118, "hermespy.modem.modem.ReceivingModemBase.serialize", false]], "serialize() (rectangularwaveform method)": [[140, "hermespy.modem.waveform_single_carrier.RectangularWaveform.serialize", false]], "serialize() (repetitionencoder method)": [[76, "hermespy.fec.repetition_encoder.RepetitionEncoder.serialize", false]], "serialize() (rfchain method)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.serialize", false]], "serialize() (rolledoffsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.serialize", false]], "serialize() (ruralmacrocellsrealization method)": [[10, "hermespy.channel.cdl.rural_macrocells.RuralMacrocellsRealization.serialize", false]], "serialize() (salehpoweramplifier method)": [[218, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.serialize", false]], "serialize() (sampleoffsettrigger method)": [[234, "hermespy.simulation.simulated_device.SampleOffsetTrigger.serialize", false]], "serialize() (scalarantennacalibration method)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration.serialize", false]], "serialize() (scenario method)": [[64, "hermespy.core.scenario.Scenario.serialize", false]], "serialize() (scrambler3gpp method)": [[79, "hermespy.fec.scrambler.Scrambler3GPP.serialize", false]], "serialize() (scrambler80211a method)": [[79, "hermespy.fec.scrambler.Scrambler80211a.serialize", false]], "serialize() (selectiveleakage method)": [[195, "hermespy.simulation.isolation.selective.SelectiveLeakage.serialize", false]], "serialize() (selectiveleakagecalibration method)": [[85, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.serialize", false]], "serialize() (serializable method)": [[55, "hermespy.core.factory.Serializable.serialize", false]], "serialize() (serializableenum method)": [[55, "hermespy.core.factory.SerializableEnum.serialize", false]], "serialize() (si method)": [[190, "hermespy.simulation.evaluators.interference.SI.serialize", false]], "serialize() (signal method)": [[65, "hermespy.core.signal_model.Signal.serialize", false]], "serialize() (signalblock method)": [[65, "hermespy.core.signal_model.SignalBlock.serialize", false]], "serialize() (signalreceiver method)": [[60, "hermespy.core.operators.SignalReceiver.serialize", false]], "serialize() (signaltransmitter method)": [[60, "hermespy.core.operators.SignalTransmitter.serialize", false]], "serialize() (simplexlink method)": [[119, "hermespy.modem.modem.SimplexLink.serialize", false]], "serialize() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.serialize", false]], "serialize() (simulateddeviceoutput method)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.serialize", false]], "serialize() (simulateddevicereceiverealization method)": [[228, "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization.serialize", false]], "serialize() (simulateddevicereception method)": [[229, "hermespy.simulation.simulated_device.SimulatedDeviceReception.serialize", false]], "serialize() (simulateddevicetransmission method)": [[230, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission.serialize", false]], "serialize() (simulateddrop method)": [[189, "hermespy.simulation.drop.SimulatedDrop.serialize", false]], "serialize() (singlecarrier method)": [[124, "hermespy.modem.precoding.single_carrier.SingleCarrier.serialize", false]], "serialize() (singletargetradarchannel method)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.serialize", false]], "serialize() (singletargetradarchannelrealization method)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannelRealization.serialize", false]], "serialize() (sionnartchannel method)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannel.serialize", false]], "serialize() (sionnartchannelrealization method)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelRealization.serialize", false]], "serialize() (snr method)": [[202, "hermespy.simulation.noise.level.SNR.serialize", false]], "serialize() (specificisolation method)": [[196, "hermespy.simulation.isolation.specific.SpecificIsolation.serialize", false]], "serialize() (sphericalfocus method)": [[1, "hermespy.beamforming.beamformer.SphericalFocus.serialize", false]], "serialize() (statedsymbols method)": [[127, "hermespy.modem.symbols.StatedSymbols.serialize", false]], "serialize() (staticconsistentrealization method)": [[17, "hermespy.channel.consistent.StaticConsistentRealization.serialize", false]], "serialize() (staticoperator method)": [[60, "hermespy.core.operators.StaticOperator.serialize", false]], "serialize() (statictrajectory method)": [[173, "hermespy.simulation.animation.StaticTrajectory.serialize", false]], "serialize() (statictrigger method)": [[235, "hermespy.simulation.simulated_device.StaticTrigger.serialize", false]], "serialize() (streambitssource method)": [[100, "hermespy.modem.bits_source.StreamBitsSource.serialize", false]], "serialize() (symbols method)": [[127, "hermespy.modem.symbols.Symbols.serialize", false]], "serialize() (symbolsection method)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection.serialize", false]], "serialize() (synchronization method)": [[132, "hermespy.modem.waveform.Synchronization.serialize", false]], "serialize() (tdl method)": [[28, "hermespy.channel.fading.tdl.TDL.serialize", false]], "serialize() (thresholddetector method)": [[162, "hermespy.radar.detection.ThresholdDetector.serialize", false]], "serialize() (timeoffsettrigger method)": [[236, "hermespy.simulation.simulated_device.TimeOffsetTrigger.serialize", false]], "serialize() (transformable method)": [[67, "hermespy.core.transformation.Transformable.serialize", false]], "serialize() (transformation method)": [[67, "hermespy.core.transformation.Transformation.serialize", false]], "serialize() (transmitter method)": [[51, "hermespy.core.device.Transmitter.serialize", false]], "serialize() (transmittingmodem method)": [[120, "hermespy.modem.modem.TransmittingModem.serialize", false]], "serialize() (transmittingmodembase method)": [[120, "hermespy.modem.modem.TransmittingModemBase.serialize", false]], "serialize() (triggerrealization method)": [[238, "hermespy.simulation.simulated_device.TriggerRealization.serialize", false]], "serialize() (uniformarray method)": [[36, "hermespy.core.antennas.UniformArray.serialize", false]], "serialize() (urbanmacrocellsrealization method)": [[11, "hermespy.channel.cdl.urban_macrocells.UrbanMacrocellsRealization.serialize", false]], "serialize() (urbanmicrocellsrealization method)": [[12, "hermespy.channel.cdl.urban_microcells.UrbanMicrocellsRealization.serialize", false]], "serialize() (usrpdevice method)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.serialize", false]], "serialize() (virtualradartarget method)": [[32, "hermespy.channel.radar.multi.VirtualRadarTarget.serialize", false]], "serialize_array() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.serialize_array", false]], "serialize_array() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_array", false]], "serialize_complex() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.serialize_complex", false]], "serialize_complex() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_complex", false]], "serialize_custom() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.serialize_custom", false]], "serialize_custom() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_custom", false]], "serialize_floating() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.serialize_floating", false]], "serialize_floating() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_floating", false]], "serialize_integer() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.serialize_integer", false]], "serialize_integer() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_integer", false]], "serialize_object() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_object", false]], "serialize_object_mapping() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_object_mapping", false]], "serialize_object_sequence() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.serialize_object_sequence", false]], "serialize_object_sequence() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_object_sequence", false]], "serialize_range() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_range", false]], "serialize_string() (hdfserializationprocess method)": [[55, "hermespy.core.factory.HDFSerializationProcess.serialize_string", false]], "serialize_string() (serializationprocess method)": [[55, "hermespy.core.factory.SerializationProcess.serialize_string", false]], "serialized_attributes (silenttransmitter attribute)": [[60, "hermespy.core.operators.SilentTransmitter.serialized_attributes", false]], "sert (class in hermespy.core.monte_carlo)": [[59, "hermespy.core.monte_carlo.SERT", false]], "set (class in hermespy.core.factory)": [[55, "hermespy.core.factory.SET", false]], "set_base() (transformable method)": [[67, "hermespy.core.transformation.Transformable.set_base", false]], "set_base() (transformablebase method)": [[67, "hermespy.core.transformation.TransformableBase.set_base", false]], "set_base() (transformablelink method)": [[67, "hermespy.core.transformation.TransformableLink.set_base", false]], "set_channel() (simulation method)": [[231, "hermespy.simulation.simulation.Simulation.set_channel", false]], "set_channel() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.set_channel", false]], "set_figure_geometry() (in module hermespy.tools.tile)": [[243, "hermespy.tools.tile.set_figure_geometry", false]], "set_samples() (densesignal method)": [[65, "hermespy.core.signal_model.DenseSignal.set_samples", false]], "set_samples() (signal method)": [[65, "hermespy.core.signal_model.Signal.set_samples", false]], "set_samples() (sparsesignal method)": [[65, "hermespy.core.signal_model.SparseSignal.set_samples", false]], "set_state() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.set_state", false]], "setter() (registereddimension method)": [[59, "hermespy.core.monte_carlo.RegisteredDimension.setter", false]], "sh (factorytype attribute)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType.SH", false]], "shape (consistentvariable property)": [[17, "hermespy.channel.consistent.ConsistentVariable.shape", false]], "shape (signal property)": [[65, "hermespy.core.signal_model.Signal.shape", false]], "show() (visualization method)": [[68, "hermespy.core.visualize.Visualization.show", false]], "si (class in hermespy.simulation.evaluators.interference)": [[190, "hermespy.simulation.evaluators.interference.SI", false]], "signal (_signalvisualization property)": [[65, "hermespy.core.signal_model._SignalVisualization.signal", false]], "signal (class in hermespy.core.signal_model)": [[65, "hermespy.core.signal_model.Signal", false]], "signal (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.signal", false]], "signal (operationresult attribute)": [[45, "hermespy.core.device.OperationResult.signal", false]], "signal (signaltransmitter property)": [[60, "hermespy.core.operators.SignalTransmitter.signal", false]], "signalblock (class in hermespy.core.signal_model)": [[65, "hermespy.core.signal_model.SignalBlock", false]], "signalplot (class in hermespy.hardware_loop.visualizers)": [[95, "hermespy.hardware_loop.visualizers.SignalPlot", false]], "signalreceiver (class in hermespy.core.operators)": [[60, "hermespy.core.operators.SignalReceiver", false]], "signaltransmitter (class in hermespy.core.operators)": [[60, "hermespy.core.operators.SignalTransmitter", false]], "silent (consolemode attribute)": [[38, "hermespy.core.definitions.ConsoleMode.SILENT", false]], "silenttransmitter (class in hermespy.core.operators)": [[60, "hermespy.core.operators.SilentTransmitter", false]], "simplexlink (class in hermespy.modem.modem)": [[119, "hermespy.modem.modem.SimplexLink", false]], "simulate() (montecarlo method)": [[59, "hermespy.core.monte_carlo.MonteCarlo.simulate", false]], "simulated_input_callbacks (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.simulated_input_callbacks", false]], "simulated_output_callbacks (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.simulated_output_callbacks", false]], "simulatedantenna (class in hermespy.simulation.antennas)": [[175, "hermespy.simulation.antennas.SimulatedAntenna", false]], "simulatedantennaarray (class in hermespy.simulation.antennas)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray", false]], "simulatedantennaport (class in hermespy.simulation.antennas)": [[177, "hermespy.simulation.antennas.SimulatedAntennaPort", false]], "simulatedcustomarray (class in hermespy.simulation.antennas)": [[178, "hermespy.simulation.antennas.SimulatedCustomArray", false]], "simulateddevice (class in hermespy.simulation.simulated_device)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice", false]], "simulateddeviceoutput (class in hermespy.simulation.simulated_device)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput", false]], "simulateddevicereceiverealization (class in hermespy.simulation.simulated_device)": [[228, "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization", false]], "simulateddevicereception (class in hermespy.simulation.simulated_device)": [[229, "hermespy.simulation.simulated_device.SimulatedDeviceReception", false]], "simulateddevicestate (class in hermespy.simulation.simulated_device)": [[225, "hermespy.simulation.simulated_device.SimulatedDeviceState", false]], "simulateddevicetransmission (class in hermespy.simulation.simulated_device)": [[230, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission", false]], "simulateddipole (class in hermespy.simulation.antennas)": [[179, "hermespy.simulation.antennas.SimulatedDipole", false]], "simulateddrop (class in hermespy.simulation.drop)": [[189, "hermespy.simulation.drop.SimulatedDrop", false]], "simulatedidealantenna (class in hermespy.simulation.antennas)": [[180, "hermespy.simulation.antennas.SimulatedIdealAntenna", false]], "simulatedlinearantenna (class in hermespy.simulation.antennas)": [[181, "hermespy.simulation.antennas.SimulatedLinearAntenna", false]], "simulatedpatchantenna (class in hermespy.simulation.antennas)": [[182, "hermespy.simulation.antennas.SimulatedPatchAntenna", false]], "simulateduniformarray (class in hermespy.simulation.antennas)": [[183, "hermespy.simulation.antennas.SimulatedUniformArray", false]], "simulation (class in hermespy.simulation.simulation)": [[231, "hermespy.simulation.simulation.Simulation", false]], "simulationscenario (class in hermespy.simulation.simulation)": [[224, "hermespy.simulation.simulation.SimulationScenario", false]], "sinc (interpolationmode attribute)": [[13, "hermespy.channel.channel.InterpolationMode.SINC", false]], "singlecarrier (class in hermespy.modem.precoding.single_carrier)": [[124, "hermespy.modem.precoding.single_carrier.SingleCarrier", false]], "singletargetradarchannel (class in hermespy.channel.radar.single)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel", false]], "singletargetradarchannelrealization (class in hermespy.channel.radar.single)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannelRealization", false]], "sionnartchannel (class in hermespy.channel.sionna_rt_channel)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannel", false]], "sionnartchannelrealization (class in hermespy.channel.sionna_rt_channel)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelRealization", false]], "sionnartchannelsample (class in hermespy.channel.sionna_rt_channel)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelSample", false]], "size (consistentvariable property)": [[17, "hermespy.channel.consistent.ConsistentVariable.size", false]], "sl (factorytype attribute)": [[8, "hermespy.channel.cdl.indoor_factory.FactoryType.SL", false]], "slant (linearantenna property)": [[36, "hermespy.core.antennas.LinearAntenna.slant", false]], "slope (fmcw property)": [[167, "hermespy.radar.fmcw.FMCW.slope", false]], "smoothness_factor (rapppoweramplifier property)": [[217, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.smoothness_factor", false]], "snr (class in hermespy.simulation.noise.level)": [[202, "hermespy.simulation.noise.level.SNR", false]], "snr (device property)": [[39, "hermespy.core.device.Device.snr", false]], "snr (snr property)": [[202, "hermespy.simulation.noise.level.SNR.snr", false]], "soft_output (pskqammapping attribute)": [[111, "hermespy.modem.tools.psk_qam_mapping.PskQamMapping.soft_output", false]], "space (signalplot property)": [[95, "hermespy.hardware_loop.visualizers.SignalPlot.space", false]], "spacing (uniformarray property)": [[36, "hermespy.core.antennas.UniformArray.spacing", false]], "sparsesignal (class in hermespy.core.signal_model)": [[65, "hermespy.core.signal_model.SparseSignal", false]], "spatial_response (multipathfadingsample property)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.spatial_response", false]], "spatialdelaychannel (class in hermespy.channel.delay.spatial)": [[20, "hermespy.channel.delay.spatial.SpatialDelayChannel", false]], "spatialdelaychannelrealization (class in hermespy.channel.delay.spatial)": [[20, "hermespy.channel.delay.spatial.SpatialDelayChannelRealization", false]], "specificisolation (class in hermespy.simulation.isolation.specific)": [[196, "hermespy.simulation.isolation.specific.SpecificIsolation", false]], "spherical_angles() (beamfocus method)": [[1, "hermespy.beamforming.beamformer.BeamFocus.spherical_angles", false]], "spherical_angles() (coordinatefocus method)": [[1, "hermespy.beamforming.beamformer.CoordinateFocus.spherical_angles", false]], "spherical_angles() (devicefocus method)": [[184, "hermespy.simulation.beamforming.DeviceFocus.spherical_angles", false]], "spherical_angles() (sphericalfocus method)": [[1, "hermespy.beamforming.beamformer.SphericalFocus.spherical_angles", false]], "spherical_phase_response() (antennaarraybase method)": [[36, "hermespy.core.antennas.AntennaArrayBase.spherical_phase_response", false]], "sphericalfocus (class in hermespy.beamforming.beamformer)": [[1, "hermespy.beamforming.beamformer.SphericalFocus", false]], "ssinr (class in hermespy.simulation.evaluators.interference)": [[190, "hermespy.simulation.evaluators.interference.SSINR", false]], "stage_executors() (montecarloactor method)": [[59, "hermespy.core.monte_carlo.MonteCarloActor.stage_executors", false]], "stage_identifiers() (montecarloactor static method)": [[59, "hermespy.core.monte_carlo.MonteCarloActor.stage_identifiers", false]], "state (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.state", false]], "state (class in hermespy.core.state)": [[66, "hermespy.core.state.State", false]], "state() (antennaarray method)": [[36, "hermespy.core.antennas.AntennaArray.state", false]], "state() (audiodevice method)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.state", false]], "state() (channelsample method)": [[15, "hermespy.channel.channel.ChannelSample.state", false]], "state() (clusterdelaylinesample method)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.state", false]], "state() (delaychannelsample method)": [[18, "hermespy.channel.delay.delay.DelayChannelSample.state", false]], "state() (device method)": [[39, "hermespy.core.device.Device.state", false]], "state() (idealchannelsample method)": [[29, "hermespy.channel.ideal.IdealChannelSample.state", false]], "state() (multipathfadingsample method)": [[27, "hermespy.channel.fading.fading.MultipathFadingSample.state", false]], "state() (physicaldevicedummy method)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.state", false]], "state() (quadrigachannelsample method)": [[31, "hermespy.channel.quadriga.quadriga.QuadrigaChannelSample.state", false]], "state() (radarchannelsample method)": [[33, "hermespy.channel.radar.radar.RadarChannelSample.state", false]], "state() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.state", false]], "state() (sionnartchannelsample method)": [[35, "hermespy.channel.sionna_rt_channel.SionnaRTChannelSample.state", false]], "state() (usrpdevice method)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.state", false]], "state_format (channelstateinformation property)": [[37, "hermespy.core.channel.ChannelStateInformation.state_format", false]], "state_variable (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.state_variable", false]], "statedsymbols (class in hermespy.modem.symbols)": [[127, "hermespy.modem.symbols.StatedSymbols", false]], "states (statedsymbols property)": [[127, "hermespy.modem.symbols.StatedSymbols.states", false]], "static (radarpath property)": [[33, "hermespy.channel.radar.radar.RadarPath.static", false]], "static (radartarget property)": [[32, "hermespy.channel.radar.multi.RadarTarget.static", false]], "staticconsistentrealization (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.StaticConsistentRealization", false]], "staticconsistentsample (class in hermespy.channel.consistent)": [[17, "hermespy.channel.consistent.StaticConsistentSample", false]], "staticoperator (class in hermespy.core.operators)": [[60, "hermespy.core.operators.StaticOperator", false]], "statictrajectory (class in hermespy.simulation.animation)": [[173, "hermespy.simulation.animation.StaticTrajectory", false]], "statictrigger (class in hermespy.simulation.simulated_device)": [[235, "hermespy.simulation.simulated_device.StaticTrigger", false]], "stemvisualization (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.StemVisualization", false]], "stop() (scenario method)": [[64, "hermespy.core.scenario.Scenario.stop", false]], "streambitssource (class in hermespy.modem.bits_source)": [[100, "hermespy.modem.bits_source.StreamBitsSource", false]], "style (executable property)": [[54, "hermespy.core.executable.Executable.style", false]], "style_context() (executable static method)": [[54, "hermespy.core.executable.Executable.style_context", false]], "subcarrier_spacing (ofdmwaveform property)": [[153, "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform.subcarrier_spacing", false]], "subcluster_indices (clusterdelaylinesample attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.subcluster_indices", false]], "superimpose() (signal method)": [[65, "hermespy.core.signal_model.Signal.superimpose", false]], "surface (indoorfactory property)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.surface", false]], "symbol_duration (basemodem property)": [[112, "hermespy.modem.modem.BaseModem.symbol_duration", false]], "symbol_duration (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_duration", false]], "symbol_duration (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.symbol_duration", false]], "symbol_duration (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_duration", false]], "symbol_duration (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.symbol_duration", false]], "symbol_energy (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_energy", false]], "symbol_energy (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.symbol_energy", false]], "symbol_energy (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_energy", false]], "symbol_energy (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.symbol_energy", false]], "symbol_precoding_support (chirpfskwaveform property)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_precoding_support", false]], "symbol_precoding_support (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.symbol_precoding_support", false]], "symbol_rate (filteredsinglecarrierwaveform property)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_rate", false]], "symbol_type (chirpfskwaveform attribute)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_type", false]], "symbol_type (communicationwaveform attribute)": [[128, "hermespy.modem.waveform.CommunicationWaveform.symbol_type", false]], "symbols (class in hermespy.modem.symbols)": [[127, "hermespy.modem.symbols.Symbols", false]], "symbols (communicationreception property)": [[113, "hermespy.modem.modem.CommunicationReception.symbols", false]], "symbols (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.symbols", false]], "symbols (communicationtransmission property)": [[115, "hermespy.modem.modem.CommunicationTransmission.symbols", false]], "symbols (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.symbols", false]], "symbols_per_frame (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.symbols_per_frame", false]], "symbolsection (class in hermespy.modem.waveforms.orthogonal.waveform)": [[149, "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection", false]], "synchronization (class in hermespy.modem.waveform)": [[132, "hermespy.modem.waveform.Synchronization", false]], "synchronization (communicationwaveform property)": [[128, "hermespy.modem.waveform.CommunicationWaveform.synchronization", false]], "synchronize() (correlationsynchronization method)": [[136, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.synchronize", false]], "synchronize() (schmidlcoxsynchronization method)": [[155, "hermespy.modem.waveforms.orthogonal.ofdm.SchmidlCoxSynchronization.synchronize", false]], "synchronize() (synchronization method)": [[132, "hermespy.modem.waveform.Synchronization.synchronize", false]], "tag_registry (factory property)": [[55, "hermespy.core.factory.Factory.tag_registry", false]], "tap_interval (exponential property)": [[22, "hermespy.channel.fading.exponential.Exponential.tap_interval", false]], "target_azimuth (singletargetradarchannel property)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.target_azimuth", false]], "target_exists (singletargetradarchannel property)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.target_exists", false]], "target_range (singletargetradarchannel property)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.target_range", false]], "target_velocity (singletargetradarchannel property)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.target_velocity", false]], "target_zenith (singletargetradarchannel property)": [[34, "hermespy.channel.radar.single.SingleTargetRadarChannel.target_zenith", false]], "targets (multitargetradarchannel property)": [[32, "hermespy.channel.radar.multi.MultiTargetRadarChannel.targets", false]], "tdl (class in hermespy.channel.fading.tdl)": [[28, "hermespy.channel.fading.tdl.TDL", false]], "tdltype (class in hermespy.channel.fading.tdl)": [[28, "hermespy.channel.fading.tdl.TDLType", false]], "threshold (correlationsynchronization property)": [[136, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.threshold", false]], "thresholddetector (class in hermespy.radar.detection)": [[162, "hermespy.radar.detection.ThresholdDetector", false]], "throughputartifact (class in hermespy.modem.evaluators)": [[108, "hermespy.modem.evaluators.ThroughputArtifact", false]], "throughputevaluation (class in hermespy.modem.evaluators)": [[108, "hermespy.modem.evaluators.ThroughputEvaluation", false]], "throughputevaluator (class in hermespy.modem.evaluators)": [[108, "hermespy.modem.evaluators.ThroughputEvaluator", false]], "tick_format (evaluator attribute)": [[59, "hermespy.core.monte_carlo.Evaluator.tick_format", false]], "tick_format (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.tick_format", false]], "tile_figures() (in module hermespy.tools.tile)": [[243, "hermespy.tools.tile.tile_figures", false]], "time (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.time", false]], "time (linkstate property)": [[16, "hermespy.channel.channel.LinkState.time", false]], "timeoffsettrigger (class in hermespy.simulation.simulated_device)": [[236, "hermespy.simulation.simulated_device.TimeOffsetTrigger", false]], "timestamp (communicationreceptionframe attribute)": [[114, "hermespy.modem.modem.CommunicationReceptionFrame.timestamp", false]], "timestamp (communicationtransmissionframe attribute)": [[116, "hermespy.modem.modem.CommunicationTransmissionFrame.timestamp", false]], "timestamp (drop property)": [[52, "hermespy.core.drop.Drop.timestamp", false]], "timestamp (state property)": [[66, "hermespy.core.state.State.timestamp", false]], "timestamp (trajectorysample property)": [[173, "hermespy.simulation.animation.TrajectorySample.timestamp", false]], "timestamps (signal property)": [[65, "hermespy.core.signal_model.Signal.timestamps", false]], "title (_angleplot property)": [[157, "hermespy.radar.cube._AnglePlot.title", false]], "title (_anglevisualization property)": [[7, "hermespy.channel.cdl.cluster_delay_lines._AngleVisualization.title", false]], "title (_constellationplot property)": [[127, "hermespy.modem.symbols._ConstellationPlot.title", false]], "title (_eyevisualization property)": [[65, "hermespy.core.signal_model._EyeVisualization.title", false]], "title (_powerdelayvisualization property)": [[7, "hermespy.channel.cdl.cluster_delay_lines._PowerDelayVisualization.title", false]], "title (_rangeplot property)": [[157, "hermespy.radar.cube._RangePlot.title", false]], "title (_rangevelocityplot property)": [[157, "hermespy.radar.cube._RangeVelocityPlot.title", false]], "title (_samplesvisualization property)": [[65, "hermespy.core.signal_model._SamplesVisualization.title", false]], "title (_scenariovisualizer property)": [[223, "hermespy.simulation.scenario._ScenarioVisualizer.title", false]], "title (biterrorevaluation property)": [[104, "hermespy.modem.evaluators.BitErrorEvaluation.title", false]], "title (biterrorevaluator property)": [[104, "hermespy.modem.evaluators.BitErrorEvaluator.title", false]], "title (blockerrorevaluation property)": [[105, "hermespy.modem.evaluators.BlockErrorEvaluation.title", false]], "title (blockerrorevaluator property)": [[105, "hermespy.modem.evaluators.BlockErrorEvaluator.title", false]], "title (constellationevm property)": [[106, "hermespy.modem.evaluators.ConstellationEVM.title", false]], "title (densesignal property)": [[65, "hermespy.core.signal_model.DenseSignal.title", false]], "title (detectionprobevaluator property)": [[163, "hermespy.radar.evaluators.DetectionProbEvaluator.title", false]], "title (ebn0 property)": [[198, "hermespy.simulation.modem.noise.EBN0.title", false]], "title (esn0 property)": [[199, "hermespy.simulation.modem.noise.ESN0.title", false]], "title (evaluator property)": [[59, "hermespy.core.monte_carlo.Evaluator.title", false]], "title (evmevaluation property)": [[106, "hermespy.modem.evaluators.EVMEvaluation.title", false]], "title (frameerrorevaluation property)": [[107, "hermespy.modem.evaluators.FrameErrorEvaluation.title", false]], "title (frameerrorevaluator property)": [[107, "hermespy.modem.evaluators.FrameErrorEvaluator.title", false]], "title (griddimension property)": [[59, "hermespy.core.monte_carlo.GridDimension.title", false]], "title (gridvisualization property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.GridVisualization.title", false]], "title (hardwareloopplot property)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.title", false]], "title (n0 property)": [[201, "hermespy.simulation.noise.level.N0.title", false]], "title (poweramplifier property)": [[216, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.title", false]], "title (powerevaluation property)": [[53, "hermespy.core.evaluators.PowerEvaluation.title", false]], "title (radarpointcloud property)": [[161, "hermespy.radar.detection.RadarPointCloud.title", false]], "title (receivepowerevaluator property)": [[53, "hermespy.core.evaluators.ReceivePowerEvaluator.title", false]], "title (receiveroperatingcharacteristic property)": [[165, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.title", false]], "title (registereddimension property)": [[59, "hermespy.core.monte_carlo.RegisteredDimension.title", false]], "title (rootmeansquareerror property)": [[166, "hermespy.radar.evaluators.RootMeanSquareError.title", false]], "title (samplepoint property)": [[59, "hermespy.core.monte_carlo.SamplePoint.title", false]], "title (scalardimension property)": [[59, "hermespy.core.monte_carlo.ScalarDimension.title", false]], "title (scalarevaluationresult property)": [[59, "hermespy.core.monte_carlo.ScalarEvaluationResult.title", false]], "title (si property)": [[190, "hermespy.simulation.evaluators.interference.SI.title", false]], "title (signal property)": [[65, "hermespy.core.signal_model.Signal.title", false]], "title (snr property)": [[202, "hermespy.simulation.noise.level.SNR.title", false]], "title (sparsesignal property)": [[65, "hermespy.core.signal_model.SparseSignal.title", false]], "title (specificisolation property)": [[196, "hermespy.simulation.isolation.specific.SpecificIsolation.title", false]], "title (ssinr property)": [[190, "hermespy.simulation.evaluators.interference.SSINR.title", false]], "title (throughputevaluation property)": [[108, "hermespy.modem.evaluators.ThroughputEvaluation.title", false]], "title (throughputevaluator property)": [[108, "hermespy.modem.evaluators.ThroughputEvaluator.title", false]], "title (transmitpowerevaluator property)": [[53, "hermespy.core.evaluators.TransmitPowerEvaluator.title", false]], "title (visualizable property)": [[68, "hermespy.core.visualize.Visualizable.title", false]], "to_array() (evaluationresult method)": [[59, "hermespy.core.monte_carlo.EvaluationResult.to_array", false]], "to_array() (powerresult method)": [[53, "hermespy.core.evaluators.PowerResult.to_array", false]], "to_array() (rocevaluationresult method)": [[165, "hermespy.radar.evaluators.RocEvaluationResult.to_array", false]], "to_array() (scalarevaluationresult method)": [[59, "hermespy.core.monte_carlo.ScalarEvaluationResult.to_array", false]], "to_dense() (densesignal method)": [[65, "hermespy.core.signal_model.DenseSignal.to_dense", false]], "to_dense() (signal method)": [[65, "hermespy.core.signal_model.Signal.to_dense", false]], "to_frequency_selectivity() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.to_frequency_selectivity", false]], "to_hdf() (factory method)": [[55, "hermespy.core.factory.Factory.to_HDF", false]], "to_impulse_response() (channelstateinformation method)": [[37, "hermespy.core.channel.ChannelStateInformation.to_impulse_response", false]], "to_interleaved() (signal method)": [[65, "hermespy.core.signal_model.Signal.to_interleaved", false]], "to_local_coordinates() (transformable method)": [[67, "hermespy.core.transformation.Transformable.to_local_coordinates", false]], "to_scalar() (artifact method)": [[59, "hermespy.core.monte_carlo.Artifact.to_scalar", false]], "to_scalar() (artifacttemplate method)": [[59, "hermespy.core.monte_carlo.ArtifactTemplate.to_scalar", false]], "to_scalar() (powerartifact method)": [[53, "hermespy.core.evaluators.PowerArtifact.to_scalar", false]], "to_scalar() (rocartifact method)": [[165, "hermespy.radar.evaluators.RocArtifact.to_scalar", false]], "to_scalar() (rootmeansquareartifact method)": [[166, "hermespy.radar.evaluators.RootMeanSquareArtifact.to_scalar", false]], "to_spherical() (direction method)": [[67, "hermespy.core.transformation.Direction.to_spherical", false]], "tof (delaynormalization attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.DelayNormalization.TOF", false]], "tolerance (evaluator property)": [[59, "hermespy.core.monte_carlo.Evaluator.tolerance", false]], "tolist() (logarithmicsequence method)": [[58, "hermespy.core.logarithmic.LogarithmicSequence.tolist", false]], "topology (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.topology", false]], "trajectory (class in hermespy.simulation.animation)": [[173, "hermespy.simulation.animation.Trajectory", false]], "trajectory (moveable property)": [[173, "hermespy.simulation.animation.Moveable.trajectory", false]], "trajectorysample (class in hermespy.simulation.animation)": [[173, "hermespy.simulation.animation.TrajectorySample", false]], "transform_direction() (transformation method)": [[67, "hermespy.core.transformation.Transformation.transform_direction", false]], "transform_position() (transformation method)": [[67, "hermespy.core.transformation.Transformation.transform_position", false]], "transformable (class in hermespy.core.transformation)": [[67, "hermespy.core.transformation.Transformable", false]], "transformablebase (class in hermespy.core.transformation)": [[67, "hermespy.core.transformation.TransformableBase", false]], "transformablelink (class in hermespy.core.transformation)": [[67, "hermespy.core.transformation.TransformableLink", false]], "transformation (class in hermespy.core.transformation)": [[67, "hermespy.core.transformation.Transformation", false]], "translation (transformation property)": [[67, "hermespy.core.transformation.Transformation.translation", false]], "transmission (class in hermespy.core.device)": [[50, "hermespy.core.device.Transmission", false]], "transmissiontype (class in hermespy.core.device)": [[50, "hermespy.core.device.TransmissionType", false]], "transmit() (coupling method)": [[186, "hermespy.simulation.coupling.coupling.Coupling.transmit", false]], "transmit() (device method)": [[39, "hermespy.core.device.Device.transmit", false]], "transmit() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.transmit", false]], "transmit() (physicaldevicedummy method)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.transmit", false]], "transmit() (rfchain method)": [[205, "hermespy.simulation.rf_chain.rf_chain.RfChain.transmit", false]], "transmit() (simulatedantenna method)": [[175, "hermespy.simulation.antennas.SimulatedAntenna.transmit", false]], "transmit() (simulatedantennaarray method)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray.transmit", false]], "transmit() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.transmit", false]], "transmit() (transmitter method)": [[51, "hermespy.core.device.Transmitter.transmit", false]], "transmit_antennas (antennaarray property)": [[36, "hermespy.core.antennas.AntennaArray.transmit_antennas", false]], "transmit_antennas (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.transmit_antennas", false]], "transmit_antennas (antennaarraystate property)": [[36, "hermespy.core.antennas.AntennaArrayState.transmit_antennas", false]], "transmit_antennas (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.transmit_antennas", false]], "transmit_coding (device property)": [[39, "hermespy.core.device.Device.transmit_coding", false]], "transmit_correction_weights (scalarantennacalibration property)": [[83, "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration.transmit_correction_weights", false]], "transmit_correlation (impedancecoupling property)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_correlation", false]], "transmit_devices() (scenario method)": [[64, "hermespy.core.scenario.Scenario.transmit_devices", false]], "transmit_devices() (simulationscenario method)": [[224, "hermespy.simulation.simulation.SimulationScenario.transmit_devices", false]], "transmit_focus (transmitbeamformer property)": [[1, "hermespy.beamforming.beamformer.TransmitBeamformer.transmit_focus", false]], "transmit_impedance (impedancecoupling property)": [[187, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_impedance", false]], "transmit_operators() (device method)": [[39, "hermespy.core.device.Device.transmit_operators", false]], "transmit_operators() (scenario method)": [[64, "hermespy.core.scenario.Scenario.transmit_operators", false]], "transmit_ports (antennaarray property)": [[36, "hermespy.core.antennas.AntennaArray.transmit_ports", false]], "transmit_ports (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.transmit_ports", false]], "transmit_ports (audiodeviceantennas property)": [[81, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.transmit_ports", false]], "transmit_ports (usrpantennas property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas.transmit_ports", false]], "transmit_signal_coding (transmittingmodembase property)": [[120, "hermespy.modem.modem.TransmittingModemBase.transmit_signal_coding", false]], "transmit_state() (devicestate method)": [[66, "hermespy.core.state.DeviceState.transmit_state", false]], "transmit_streams (channelstatedimension attribute)": [[37, "hermespy.core.channel.ChannelStateDimension.TRANSMIT_STREAMS", false]], "transmit_symbol_coding (transmittingmodembase property)": [[120, "hermespy.modem.modem.TransmittingModemBase.transmit_symbol_coding", false]], "transmit_topology (antennaarraybase property)": [[36, "hermespy.core.antennas.AntennaArrayBase.transmit_topology", false]], "transmitbeamformer (class in hermespy.beamforming.beamformer)": [[1, "hermespy.beamforming.beamformer.TransmitBeamformer", false]], "transmitencoder (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.TransmitEncoder", false]], "transmitencodertype (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.TransmitEncoderType", false]], "transmitpowerevaluator (class in hermespy.core.evaluators)": [[53, "hermespy.core.evaluators.TransmitPowerEvaluator", false]], "transmitprecoding (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.TransmitPrecoding", false]], "transmitprecodingtype (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.TransmitPrecodingType", false]], "transmitsignalcoding (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.TransmitSignalCoding", false]], "transmitstate (class in hermespy.core.state)": [[66, "hermespy.core.state.TransmitState", false]], "transmitstreamencoder (class in hermespy.core.precoding)": [[62, "hermespy.core.precoding.TransmitStreamEncoder", false]], "transmitsymbolcoding (class in hermespy.modem.precoding.symbol_precoding)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolCoding", false]], "transmitsymbolencoder (class in hermespy.modem.precoding.symbol_precoding)": [[126, "hermespy.modem.precoding.symbol_precoding.TransmitSymbolEncoder", false]], "transmitter (class in hermespy.core.device)": [[51, "hermespy.core.device.Transmitter", false]], "transmitter (linkstate property)": [[16, "hermespy.channel.channel.LinkState.transmitter", false]], "transmitter_antennas (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.transmitter_antennas", false]], "transmitter_pose (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.transmitter_pose", false]], "transmitter_state (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.transmitter_state", false]], "transmitter_velocity (channelsample property)": [[15, "hermespy.channel.channel.ChannelSample.transmitter_velocity", false]], "transmitters (device attribute)": [[39, "hermespy.core.device.Device.transmitters", false]], "transmitters (scenario property)": [[64, "hermespy.core.scenario.Scenario.transmitters", false]], "transmitting (antennaport property)": [[36, "hermespy.core.antennas.AntennaPort.transmitting", false]], "transmitting_device (radarevaluator property)": [[164, "hermespy.radar.evaluators.RadarEvaluator.transmitting_device", false]], "transmitting_modem (communicationevaluator property)": [[102, "hermespy.modem.evaluators.CommunicationEvaluator.transmitting_modem", false]], "transmittingmodem (class in hermespy.modem.modem)": [[120, "hermespy.modem.modem.TransmittingModem", false]], "transmittingmodembase (class in hermespy.modem.modem)": [[120, "hermespy.modem.modem.TransmittingModemBase", false]], "trigger() (audiodevice method)": [[81, "hermespy.hardware_loop.audio.device.AudioDevice.trigger", false]], "trigger() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.trigger", false]], "trigger() (physicaldevicedummy method)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.trigger", false]], "trigger() (usrpdevice method)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.trigger", false]], "trigger_delay (triggerrealization property)": [[238, "hermespy.simulation.simulated_device.TriggerRealization.trigger_delay", false]], "trigger_direct() (physicaldevice method)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.trigger_direct", false]], "trigger_direct() (physicaldevicedummy method)": [[90, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.trigger_direct", false]], "trigger_direct() (physicalscenario method)": [[92, "hermespy.hardware_loop.scenario.PhysicalScenario.trigger_direct", false]], "trigger_model (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.trigger_model", false]], "trigger_realization (processedsimulateddeviceinput property)": [[226, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.trigger_realization", false]], "trigger_realization (simulateddeviceoutput property)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.trigger_realization", false]], "triggermodel (class in hermespy.simulation.simulated_device)": [[237, "hermespy.simulation.simulated_device.TriggerModel", false]], "triggerrealization (class in hermespy.simulation.simulated_device)": [[238, "hermespy.simulation.simulated_device.TriggerRealization", false]], "turbocoding (class in hermespy.fec.aff3ct.turbo)": [[80, "hermespy.fec.aff3ct.turbo.TurboCoding", false]], "tx (antennamode attribute)": [[36, "hermespy.core.antennas.AntennaMode.TX", false]], "tx_gain (usrpdevice property)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.tx_gain", false]], "type (gridelement attribute)": [[143, "hermespy.modem.waveforms.orthogonal.waveform.GridElement.type", false]], "undef (in module hermespy.core.factory)": [[55, "hermespy.core.factory.UNDEF", false]], "undef_type (in module hermespy.core.factory)": [[55, "hermespy.core.factory.UNDEF_TYPE", false]], "uniform() (consistentgenerator method)": [[17, "hermespy.channel.consistent.ConsistentGenerator.uniform", false]], "uniformarray (class in hermespy.core.antennas)": [[36, "hermespy.core.antennas.UniformArray", false]], "unmap() (chirpfskwaveform method)": [[135, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.unmap", false]], "unmap() (communicationwaveform method)": [[128, "hermespy.modem.waveform.CommunicationWaveform.unmap", false]], "unmap() (filteredsinglecarrierwaveform method)": [[137, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.unmap", false]], "unmap() (orthogonalwaveform method)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.unmap", false]], "unmatchableexception": [[59, "hermespy.core.monte_carlo.UnmatchableException", false]], "unpack_frame() (framegenerator method)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGenerator.unpack_frame", false]], "unpack_frame() (framegeneratorscapy method)": [[109, "hermespy.modem.frame_generator.scapy.FrameGeneratorScapy.unpack_frame", false]], "unpack_frame() (framegeneratorstub method)": [[109, "hermespy.modem.frame_generator.frame_generator.FrameGeneratorStub.unpack_frame", false]], "update_plot() (hardwareloopplot method)": [[87, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.update_plot", false]], "update_visualization() (visualizable method)": [[68, "hermespy.core.visualize.Visualizable.update_visualization", false]], "urban (cost259type attribute)": [[21, "hermespy.channel.fading.cost259.Cost259Type.URBAN", false]], "urbanmacrocells (class in hermespy.channel.cdl.urban_macrocells)": [[11, "hermespy.channel.cdl.urban_macrocells.UrbanMacrocells", false]], "urbanmacrocellsrealization (class in hermespy.channel.cdl.urban_macrocells)": [[11, "hermespy.channel.cdl.urban_macrocells.UrbanMacrocellsRealization", false]], "urbanmicrocells (class in hermespy.channel.cdl.urban_microcells)": [[12, "hermespy.channel.cdl.urban_microcells.UrbanMicrocells", false]], "urbanmicrocellsrealization (class in hermespy.channel.cdl.urban_microcells)": [[12, "hermespy.channel.cdl.urban_microcells.UrbanMicrocellsRealization", false]], "usrpantennas (class in hermespy.hardware_loop.uhd.usrp)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpAntennas", false]], "usrpdevice (class in hermespy.hardware_loop.uhd.usrp)": [[94, "hermespy.hardware_loop.uhd.usrp.UsrpDevice", false]], "usrpsystem (class in hermespy.hardware_loop.uhd.system)": [[93, "hermespy.hardware_loop.uhd.system.UsrpSystem", false]], "value (largescalestate property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LargeScaleState.value", false]], "value (losstate property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.LOSState.value", false]], "value (o2istate property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.O2IState.value", false]], "value (samplepoint property)": [[59, "hermespy.core.monte_carlo.SamplePoint.value", false]], "value_db (logarithmic property)": [[58, "hermespy.core.logarithmic.Logarithmic.value_db", false]], "valuetype (class in hermespy.core)": [[58, "hermespy.core.ValueType", false]], "vat (in module hermespy.core.visualize)": [[68, "hermespy.core.visualize.VAT", false]], "velocity (physicaldevice property)": [[89, "hermespy.hardware_loop.physical_device.PhysicalDevice.velocity", false]], "velocity (pointdetection property)": [[159, "hermespy.radar.detection.PointDetection.velocity", false]], "velocity (radartargetpath property)": [[33, "hermespy.channel.radar.radar.RadarTargetPath.velocity", false]], "velocity (state property)": [[66, "hermespy.core.state.State.velocity", false]], "velocity (statictrajectory property)": [[173, "hermespy.simulation.animation.StaticTrajectory.velocity", false]], "velocity (trajectorysample property)": [[173, "hermespy.simulation.animation.TrajectorySample.velocity", false]], "velocity_bins (radarcube property)": [[157, "hermespy.radar.cube.RadarCube.velocity_bins", false]], "velocity_resolution() (radar method)": [[169, "hermespy.radar.radar.Radar.velocity_resolution", false]], "verbosity (class in hermespy.core.definitions)": [[38, "hermespy.core.definitions.Verbosity", false]], "verbosity (executable property)": [[54, "hermespy.core.executable.Executable.verbosity", false]], "virtualradartarget (class in hermespy.channel.radar.multi)": [[32, "hermespy.channel.radar.multi.VirtualRadarTarget", false]], "visualizable (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.Visualizable", false]], "visualizableattribute (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.VisualizableAttribute", false]], "visualization (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.Visualization", false]], "visualization (visualizable property)": [[68, "hermespy.core.visualize.Visualizable.visualization", false]], "visualize (simulationscenario property)": [[224, "hermespy.simulation.simulation.SimulationScenario.visualize", false]], "visualize() (visualizable method)": [[68, "hermespy.core.visualize.Visualizable.visualize", false]], "visualize_far_field_pattern() (simulatedantennaarray method)": [[176, "hermespy.simulation.antennas.SimulatedAntennaArray.visualize_far_field_pattern", false]], "vlt (in module hermespy.core.visualize)": [[68, "hermespy.core.visualize.VLT", false]], "volume (indoorfactory property)": [[8, "hermespy.channel.cdl.indoor_factory.IndoorFactory.volume", false]], "vt (class in hermespy.core.visualize)": [[68, "hermespy.core.visualize.VT", false]], "warning (verbosity attribute)": [[38, "hermespy.core.definitions.Verbosity.WARNING", false]], "wave (gridsection property)": [[145, "hermespy.modem.waveforms.orthogonal.waveform.GridSection.wave", false]], "waveform (basemodem property)": [[112, "hermespy.modem.modem.BaseModem.waveform", false]], "waveform (channelequalization property)": [[129, "hermespy.modem.waveform.ChannelEqualization.waveform", false]], "waveform (channelestimation property)": [[130, "hermespy.modem.waveform.ChannelEstimation.waveform", false]], "waveform (radar property)": [[169, "hermespy.radar.radar.Radar.waveform", false]], "waveform (synchronization property)": [[132, "hermespy.modem.waveform.Synchronization.waveform", false]], "wavelength (device property)": [[39, "hermespy.core.device.Device.wavelength", false]], "weight (simulatedantenna property)": [[175, "hermespy.simulation.antennas.SimulatedAntenna.weight", false]], "words_per_frame (orthogonalwaveform property)": [[147, "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform.words_per_frame", false]], "zenith_angle_variation_variable (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.zenith_angle_variation_variable", false]], "zenith_arrival_spread (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.zenith_arrival_spread", false]], "zenith_departure_spread (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.zenith_departure_spread", false]], "zenith_of_arrival (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.zenith_of_arrival", false]], "zenith_of_departure (clusterdelaylinesample property)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample.zenith_of_departure", false]], "zenith_spread_sign (clusterdelaylinerealizationparameters attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters.zenith_spread_sign", false]], "zero (delaynormalization attribute)": [[7, "hermespy.channel.cdl.cluster_delay_lines.DelayNormalization.ZERO", false]], "zeroforcingchannelequalization (class in hermespy.modem.waveform)": [[133, "hermespy.modem.waveform.ZeroForcingChannelEqualization", false]], "zeropad (prefixtype attribute)": [[144, "hermespy.modem.waveforms.orthogonal.waveform.PrefixType.ZEROPAD", false]]}, "objects": {"hermespy.beamforming": [[1, 0, 0, "-", "beamformer"], [2, 0, 0, "-", "capon"], [3, 0, 0, "-", "conventional"]], "hermespy.beamforming.beamformer": [[1, 1, 1, "", "BeamFocus"], [1, 1, 1, "", "CoordinateFocus"], [1, 1, 1, "", "FT"], [1, 1, 1, "", "OT"], [1, 1, 1, "", "ReceiveBeamformer"], [1, 1, 1, "", "SphericalFocus"], [1, 1, 1, "", "TransmitBeamformer"]], "hermespy.beamforming.beamformer.BeamFocus": [[1, 2, 1, "", "copy"], [1, 3, 1, "", "property_blacklist"], [1, 2, 1, "", "spherical_angles"]], "hermespy.beamforming.beamformer.CoordinateFocus": [[1, 2, 1, "", "Deserialize"], [1, 4, 1, "", "coordinates"], [1, 2, 1, "", "copy"], [1, 4, 1, "", "reference"], [1, 2, 1, "", "serialize"], [1, 2, 1, "", "spherical_angles"]], "hermespy.beamforming.beamformer.ReceiveBeamformer": [[1, 2, 1, "", "_decode"], [1, 2, 1, "", "decode_streams"], [1, 4, 1, "", "num_receive_focus_points"], [1, 2, 1, "", "probe"], [1, 4, 1, "", "probe_focus_points"], [1, 4, 1, "", "receive_focus"]], "hermespy.beamforming.beamformer.SphericalFocus": [[1, 2, 1, "", "Deserialize"], [1, 4, 1, "", "angles"], [1, 2, 1, "", "copy"], [1, 2, 1, "", "serialize"], [1, 2, 1, "", "spherical_angles"]], "hermespy.beamforming.beamformer.TransmitBeamformer": [[1, 2, 1, "", "_encode"], [1, 2, 1, "", "encode_streams"], [1, 4, 1, "", "num_transmit_focus_points"], [1, 4, 1, "", "transmit_focus"]], "hermespy.beamforming.capon": [[2, 1, 1, "", "CaponBeamformer"]], "hermespy.beamforming.capon.CaponBeamformer": [[2, 2, 1, "", "Deserialize"], [2, 2, 1, "", "_decode"], [2, 4, 1, "", "loading"], [2, 4, 1, "", "num_receive_focus_points"], [2, 2, 1, "", "num_receive_output_streams"], [2, 2, 1, "", "serialize"]], "hermespy.beamforming.conventional": [[3, 1, 1, "", "ConventionalBeamformer"]], "hermespy.beamforming.conventional.ConventionalBeamformer": [[3, 2, 1, "", "Deserialize"], [3, 2, 1, "", "_decode"], [3, 2, 1, "", "_encode"], [3, 4, 1, "", "num_receive_focus_points"], [3, 2, 1, "", "num_receive_output_streams"], [3, 4, 1, "", "num_transmit_focus_points"], [3, 2, 1, "", "num_transmit_input_streams"], [3, 2, 1, "", "serialize"]], "hermespy.beamforming.nullsteeringbeamformer": [[5, 1, 1, "", "NullSteeringBeamformer"]], "hermespy.beamforming.nullsteeringbeamformer.NullSteeringBeamformer": [[5, 2, 1, "", "_decode"], [5, 2, 1, "", "_encode"], [5, 4, 1, "", "num_receive_focus_points"], [5, 2, 1, "", "num_receive_output_streams"], [5, 4, 1, "", "num_transmit_focus_points"], [5, 2, 1, "", "num_transmit_input_streams"]], "hermespy.channel.cdl": [[6, 1, 1, "", "CDLType"]], "hermespy.channel.cdl.CDLType": [[6, 3, 1, "", "A"], [6, 3, 1, "", "B"], [6, 3, 1, "", "C"], [6, 3, 1, "", "D"], [6, 3, 1, "", "E"]], "hermespy.channel.cdl.cdl": [[6, 1, 1, "", "CDL"], [6, 1, 1, "", "CDLRealization"]], "hermespy.channel.cdl.cdl.CDL": [[6, 2, 1, "", "Deserialize"], [6, 2, 1, "", "_realize"], [6, 4, 1, "", "decorrelation_distance"], [6, 4, 1, "", "model_type"], [6, 4, 1, "", "rayleigh_factor"], [6, 4, 1, "", "rms_delay"], [6, 2, 1, "", "serialize"]], "hermespy.channel.cdl.cdl.CDLRealization": [[6, 2, 1, "", "Deserialize"], [6, 2, 1, "", "_sample"], [6, 2, 1, "", "serialize"]], "hermespy.channel.cdl.cluster_delay_lines": [[7, 1, 1, "", "CDLRT"], [7, 1, 1, "", "ClusterDelayLineBase"], [7, 1, 1, "", "ClusterDelayLineRealization"], [7, 1, 1, "", "ClusterDelayLineRealizationParameters"], [7, 1, 1, "", "ClusterDelayLineSample"], [7, 1, 1, "", "DelayNormalization"], [7, 1, 1, "", "LOSState"], [7, 1, 1, "", "LSST"], [7, 1, 1, "", "LargeScaleState"], [7, 1, 1, "", "O2IState"], [7, 1, 1, "", "_AngleVisualization"], [7, 1, 1, "", "_PowerDelayVisualization"]], "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineBase": [[7, 4, 1, "", "delay_normalization"], [7, 4, 1, "", "expected_state"], [7, 4, 1, "", "max_num_clusters"], [7, 4, 1, "", "max_num_rays"], [7, 4, 1, "", "oxygen_absorption"], [7, 2, 1, "", "serialize"]], "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealization": [[7, 4, 1, "", "expected_state"], [7, 2, 1, "", "serialize"]], "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineRealizationParameters": [[7, 2, 1, "", "Deserialize"], [7, 3, 1, "", "angle_coupling_indices"], [7, 3, 1, "", "azimuth_angle_variation_variable"], [7, 3, 1, "", "azimuth_spread_sign"], [7, 3, 1, "", "cluster_delays_variable"], [7, 3, 1, "", "cluster_shadowing_log_variable"], [7, 3, 1, "", "cross_polarization_phase_variable"], [7, 3, 1, "", "cross_polarization_power_variable"], [7, 3, 1, "", "delay_normalization"], [7, 3, 1, "", "large_scale_parameters"], [7, 3, 1, "", "oxygen_absorption"], [7, 2, 1, "", "serialize"], [7, 3, 1, "", "state_variable"], [7, 3, 1, "", "zenith_angle_variation_variable"], [7, 3, 1, "", "zenith_spread_sign"]], "hermespy.channel.cdl.cluster_delay_lines.ClusterDelayLineSample": [[7, 4, 1, "", "azimuth_arrival_spread"], [7, 4, 1, "", "azimuth_departure_spread"], [7, 4, 1, "", "azimuth_of_arrival"], [7, 4, 1, "", "azimuth_of_departure"], [7, 4, 1, "", "cluster_delay_spread"], [7, 4, 1, "", "cluster_delays"], [7, 4, 1, "", "cluster_powers"], [7, 4, 1, "", "delay_offset"], [7, 4, 1, "", "expected_energy_scale"], [7, 4, 1, "", "line_of_sight"], [7, 4, 1, "", "max_delay"], [7, 4, 1, "", "num_clusters"], [7, 4, 1, "", "num_rays"], [7, 4, 1, "", "plot_angles"], [7, 4, 1, "", "plot_power_delay"], [7, 2, 1, "", "plot_rays"], [7, 4, 1, "", "polarization_transformations"], [7, 2, 1, "", "reciprocal"], [7, 4, 1, "", "rice_factor"], [7, 2, 1, "", "state"], [7, 3, 1, "", "subcluster_indices"], [7, 4, 1, "", "zenith_arrival_spread"], [7, 4, 1, "", "zenith_departure_spread"], [7, 4, 1, "", "zenith_of_arrival"], [7, 4, 1, "", "zenith_of_departure"]], "hermespy.channel.cdl.cluster_delay_lines.DelayNormalization": [[7, 3, 1, "", "TOF"], [7, 3, 1, "", "ZERO"]], "hermespy.channel.cdl.cluster_delay_lines.LOSState": [[7, 3, 1, "", "LOS"], [7, 3, 1, "", "NLOS"], [7, 4, 1, "", "line_of_sight"], [7, 4, 1, "", "value"]], "hermespy.channel.cdl.cluster_delay_lines.LargeScaleState": [[7, 4, 1, "", "line_of_sight"], [7, 4, 1, "", "value"]], "hermespy.channel.cdl.cluster_delay_lines.O2IState": [[7, 3, 1, "", "LOS"], [7, 3, 1, "", "NLOS"], [7, 3, 1, "", "O2I"], [7, 4, 1, "", "line_of_sight"], [7, 4, 1, "", "value"]], "hermespy.channel.cdl.cluster_delay_lines._AngleVisualization": [[7, 2, 1, "", "create_figure"], [7, 4, 1, "", "title"]], "hermespy.channel.cdl.cluster_delay_lines._PowerDelayVisualization": [[7, 4, 1, "", "title"]], "hermespy.channel.cdl.indoor_factory": [[8, 1, 1, "", "FactoryType"], [8, 1, 1, "", "IndoorFactory"], [8, 1, 1, "", "IndoorFactoryRealization"]], "hermespy.channel.cdl.indoor_factory.FactoryType": [[8, 3, 1, "", "DH"], [8, 3, 1, "", "DL"], [8, 3, 1, "", "HH"], [8, 3, 1, "", "SH"], [8, 3, 1, "", "SL"], [8, 4, 1, "", "clutter_density"], [8, 4, 1, "", "clutter_size"]], "hermespy.channel.cdl.indoor_factory.IndoorFactory": [[8, 2, 1, "", "Deserialize"], [8, 4, 1, "", "clutter_height"], [8, 4, 1, "", "factory_type"], [8, 4, 1, "", "max_num_clusters"], [8, 4, 1, "", "max_num_rays"], [8, 2, 1, "", "serialize"], [8, 4, 1, "", "surface"], [8, 4, 1, "", "volume"]], "hermespy.channel.cdl.indoor_factory.IndoorFactoryRealization": [[8, 2, 1, "", "Deserialize"], [8, 2, 1, "", "serialize"]], "hermespy.channel.cdl.indoor_office": [[9, 1, 1, "", "IndoorOffice"], [9, 1, 1, "", "IndoorOfficeRealization"], [9, 1, 1, "", "OfficeType"]], "hermespy.channel.cdl.indoor_office.IndoorOffice": [[9, 2, 1, "", "Deserialize"], [9, 4, 1, "", "max_num_clusters"], [9, 4, 1, "", "max_num_rays"], [9, 4, 1, "", "office_type"], [9, 2, 1, "", "serialize"]], "hermespy.channel.cdl.indoor_office.IndoorOfficeRealization": [[9, 2, 1, "", "Deserialize"], [9, 2, 1, "", "serialize"]], "hermespy.channel.cdl.indoor_office.OfficeType": [[9, 3, 1, "", "MIXED"], [9, 3, 1, "", "OPEN"]], "hermespy.channel.cdl.rural_macrocells": [[10, 1, 1, "", "RuralMacrocells"], [10, 1, 1, "", "RuralMacrocellsRealization"]], "hermespy.channel.cdl.rural_macrocells.RuralMacrocells": [[10, 2, 1, "", "Deserialize"], [10, 4, 1, "", "max_num_clusters"], [10, 4, 1, "", "max_num_rays"]], "hermespy.channel.cdl.rural_macrocells.RuralMacrocellsRealization": [[10, 2, 1, "", "Deserialize"], [10, 2, 1, "", "serialize"]], "hermespy.channel.cdl.urban_macrocells": [[11, 1, 1, "", "UrbanMacrocells"], [11, 1, 1, "", "UrbanMacrocellsRealization"]], "hermespy.channel.cdl.urban_macrocells.UrbanMacrocells": [[11, 2, 1, "", "Deserialize"], [11, 4, 1, "", "max_num_clusters"], [11, 4, 1, "", "max_num_rays"]], "hermespy.channel.cdl.urban_macrocells.UrbanMacrocellsRealization": [[11, 2, 1, "", "Deserialize"], [11, 2, 1, "", "serialize"]], "hermespy.channel.cdl.urban_microcells": [[12, 1, 1, "", "UrbanMicrocells"], [12, 1, 1, "", "UrbanMicrocellsRealization"]], "hermespy.channel.cdl.urban_microcells.UrbanMicrocells": [[12, 2, 1, "", "Deserialize"], [12, 4, 1, "", "max_num_clusters"], [12, 4, 1, "", "max_num_rays"]], "hermespy.channel.cdl.urban_microcells.UrbanMicrocellsRealization": [[12, 2, 1, "", "Deserialize"], [12, 2, 1, "", "serialize"]], "hermespy.channel.channel": [[14, 1, 1, "", "CRT"], [15, 1, 1, "", "CST"], [13, 1, 1, "", "Channel"], [14, 1, 1, "", "ChannelRealization"], [15, 1, 1, "", "ChannelSample"], [13, 1, 1, "", "ChannelSampleHook"], [13, 1, 1, "", "InterpolationMode"], [16, 1, 1, "", "LinkState"]], "hermespy.channel.channel.Channel": [[13, 2, 1, "", "_realize"], [13, 2, 1, "", "add_sample_hook"], [13, 4, 1, "", "gain"], [13, 2, 1, "", "propagate"], [13, 4, 1, "", "realization"], [13, 2, 1, "", "realize"], [13, 2, 1, "", "remove_sample_hook"], [13, 4, 1, "", "sample_hooks"], [13, 4, 1, "", "scenario"], [13, 2, 1, "", "serialize"]], "hermespy.channel.channel.ChannelRealization": [[14, 4, 1, "", "gain"], [14, 2, 1, "", "reciprocal_sample"], [14, 2, 1, "", "sample"], [14, 4, 1, "", "sample_hooks"], [14, 2, 1, "", "serialize"]], "hermespy.channel.channel.ChannelSample": [[15, 2, 1, "", "_propagate"], [15, 4, 1, "", "bandwidth"], [15, 4, 1, "", "carrier_frequency"], [15, 4, 1, "", "expected_energy_scale"], [15, 4, 1, "", "num_receive_antennas"], [15, 4, 1, "", "num_transmit_antennas"], [15, 2, 1, "", "propagate"], [15, 4, 1, "", "receiver_antennas"], [15, 4, 1, "", "receiver_pose"], [15, 4, 1, "", "receiver_state"], [15, 4, 1, "", "receiver_velocity"], [15, 2, 1, "", "state"], [15, 4, 1, "", "time"], [15, 4, 1, "", "transmitter_antennas"], [15, 4, 1, "", "transmitter_pose"], [15, 4, 1, "", "transmitter_state"], [15, 4, 1, "", "transmitter_velocity"]], "hermespy.channel.channel.InterpolationMode": [[13, 3, 1, "", "NEAREST"], [13, 3, 1, "", "SINC"]], "hermespy.channel.channel.LinkState": [[16, 4, 1, "", "bandwidth"], [16, 4, 1, "", "carrier_frequency"], [16, 4, 1, "", "receiver"], [16, 4, 1, "", "time"], [16, 4, 1, "", "transmitter"]], "hermespy.channel.consistent": [[17, 1, 1, "", "ConsistentBoolean"], [17, 1, 1, "", "ConsistentGaussian"], [17, 1, 1, "", "ConsistentGenerator"], [17, 1, 1, "", "ConsistentRealization"], [17, 1, 1, "", "ConsistentSample"], [17, 1, 1, "", "ConsistentUniform"], [17, 1, 1, "", "ConsistentVariable"], [17, 1, 1, "", "DualConsistentRealization"], [17, 1, 1, "", "DualConsistentSample"], [17, 1, 1, "", "StaticConsistentRealization"], [17, 1, 1, "", "StaticConsistentSample"]], "hermespy.channel.consistent.ConsistentBoolean": [[17, 2, 1, "", "sample"]], "hermespy.channel.consistent.ConsistentGaussian": [[17, 2, 1, "", "sample"]], "hermespy.channel.consistent.ConsistentGenerator": [[17, 2, 1, "", "add_variable"], [17, 2, 1, "", "boolean"], [17, 2, 1, "", "gaussian"], [17, 2, 1, "", "realize"], [17, 2, 1, "", "uniform"]], "hermespy.channel.consistent.ConsistentRealization": [[17, 2, 1, "", "sample"]], "hermespy.channel.consistent.ConsistentSample": [[17, 2, 1, "", "fetch_scalars"]], "hermespy.channel.consistent.ConsistentUniform": [[17, 2, 1, "", "sample"]], "hermespy.channel.consistent.ConsistentVariable": [[17, 2, 1, "", "Deserialize"], [17, 4, 1, "", "offset"], [17, 2, 1, "", "sample"], [17, 2, 1, "", "serialize"], [17, 4, 1, "", "shape"], [17, 4, 1, "", "size"]], "hermespy.channel.consistent.DualConsistentRealization": [[17, 2, 1, "", "Deserialize"], [17, 4, 1, "", "frequencies"], [17, 4, 1, "", "phases"], [17, 2, 1, "", "sample"], [17, 2, 1, "", "serialize"]], "hermespy.channel.consistent.DualConsistentSample": [[17, 2, 1, "", "fetch_scalars"]], "hermespy.channel.consistent.StaticConsistentRealization": [[17, 2, 1, "", "Deserialize"], [17, 2, 1, "", "sample"], [17, 2, 1, "", "serialize"]], "hermespy.channel.consistent.StaticConsistentSample": [[17, 2, 1, "", "fetch_scalars"]], "hermespy.channel.delay.delay": [[18, 1, 1, "", "DCRT"], [18, 1, 1, "", "DelayChannelBase"], [18, 1, 1, "", "DelayChannelRealization"], [18, 1, 1, "", "DelayChannelSample"]], "hermespy.channel.delay.delay.DelayChannelBase": [[18, 4, 1, "", "model_propagation_loss"], [18, 2, 1, "", "serialize"]], "hermespy.channel.delay.delay.DelayChannelRealization": [[18, 4, 1, "", "model_propagation_loss"], [18, 2, 1, "", "serialize"]], "hermespy.channel.delay.delay.DelayChannelSample": [[18, 4, 1, "", "delay"], [18, 4, 1, "", "expected_energy_scale"], [18, 4, 1, "", "gain"], [18, 4, 1, "", "model_propagation_loss"], [18, 2, 1, "", "state"]], "hermespy.channel.delay.random": [[19, 1, 1, "", "RandomDelayChannel"], [19, 1, 1, "", "RandomDelayChannelRealization"]], "hermespy.channel.delay.random.RandomDelayChannel": [[19, 2, 1, "", "Deserialize"], [19, 2, 1, "", "_realize"], [19, 4, 1, "", "decorrelation_distance"], [19, 4, 1, "", "delay"], [19, 2, 1, "", "serialize"]], "hermespy.channel.delay.random.RandomDelayChannelRealization": [[19, 2, 1, "", "Deserialize"], [19, 4, 1, "", "delay"], [19, 2, 1, "", "serialize"]], "hermespy.channel.delay.spatial": [[20, 1, 1, "", "SpatialDelayChannel"], [20, 1, 1, "", "SpatialDelayChannelRealization"]], "hermespy.channel.delay.spatial.SpatialDelayChannel": [[20, 2, 1, "", "Deserialize"], [20, 2, 1, "", "_realize"]], "hermespy.channel.delay.spatial.SpatialDelayChannelRealization": [[20, 2, 1, "", "Deserialize"]], "hermespy.channel.fading.cost259": [[21, 1, 1, "", "Cost259"], [21, 1, 1, "", "Cost259Type"]], "hermespy.channel.fading.cost259.Cost259": [[21, 2, 1, "", "Deserialize"], [21, 4, 1, "", "model_type"], [21, 2, 1, "", "serialize"]], "hermespy.channel.fading.cost259.Cost259Type": [[21, 3, 1, "", "HILLY"], [21, 3, 1, "", "RURAL"], [21, 3, 1, "", "URBAN"]], "hermespy.channel.fading.exponential": [[22, 1, 1, "", "Exponential"]], "hermespy.channel.fading.exponential.Exponential": [[22, 2, 1, "", "Deserialize"], [22, 4, 1, "", "rms_delay"], [22, 2, 1, "", "serialize"], [22, 4, 1, "", "tap_interval"]], "hermespy.channel.fading.fading": [[24, 1, 1, "", "AntennaCorrelation"], [24, 1, 1, "", "CustomAntennaCorrelation"], [25, 1, 1, "", "MultipathFadingChannel"], [26, 1, 1, "", "MultipathFadingRealization"], [27, 1, 1, "", "MultipathFadingSample"]], "hermespy.channel.fading.fading.AntennaCorrelation": [[24, 4, 1, "", "channel"], [24, 2, 1, "", "sample_covariance"]], "hermespy.channel.fading.fading.CustomAntennaCorrelation": [[24, 2, 1, "", "Deserialize"], [24, 4, 1, "", "covariance"], [24, 2, 1, "", "sample_covariance"], [24, 2, 1, "", "serialize"]], "hermespy.channel.fading.fading.MultipathFadingChannel": [[25, 2, 1, "", "Deserialize"], [25, 2, 1, "", "_realize"], [25, 4, 1, "", "antenna_correlation"], [25, 4, 1, "", "correlation_distance"], [25, 4, 1, "", "delays"], [25, 4, 1, "", "doppler_frequency"], [25, 4, 1, "", "los_angle"], [25, 4, 1, "", "los_doppler_frequency"], [25, 4, 1, "", "max_delay"], [25, 4, 1, "", "num_resolvable_paths"], [25, 4, 1, "", "num_sinusoids"], [25, 4, 1, "", "power_profile"], [25, 4, 1, "", "rice_factors"], [25, 2, 1, "", "serialize"]], "hermespy.channel.fading.fading.MultipathFadingRealization": [[26, 2, 1, "", "Deserialize"], [26, 2, 1, "", "serialize"]], "hermespy.channel.fading.fading.MultipathFadingSample": [[27, 4, 1, "", "delay_profile"], [27, 4, 1, "", "expected_energy_scale"], [27, 4, 1, "", "gain"], [27, 4, 1, "", "los_angles"], [27, 4, 1, "", "los_doppler"], [27, 4, 1, "", "los_gains"], [27, 4, 1, "", "los_phases"], [27, 4, 1, "", "nlos_angles"], [27, 4, 1, "", "nlos_doppler"], [27, 4, 1, "", "nlos_gains"], [27, 4, 1, "", "nlos_phases"], [27, 2, 1, "", "plot_power_delay"], [27, 4, 1, "", "power_profile"], [27, 4, 1, "", "spatial_response"], [27, 2, 1, "", "state"]], "hermespy.channel.fading.tdl": [[28, 1, 1, "", "TDL"], [28, 1, 1, "", "TDLType"]], "hermespy.channel.fading.tdl.TDL": [[28, 2, 1, "", "Deserialize"], [28, 4, 1, "", "model_type"], [28, 4, 1, "", "rms_delay"], [28, 2, 1, "", "serialize"]], "hermespy.channel.fading.tdl.TDLType": [[28, 3, 1, "", "A"], [28, 3, 1, "", "B"], [28, 3, 1, "", "C"], [28, 3, 1, "", "D"], [28, 3, 1, "", "E"]], "hermespy.channel.ideal": [[29, 1, 1, "", "IdealChannel"], [29, 1, 1, "", "IdealChannelRealization"], [29, 1, 1, "", "IdealChannelSample"]], "hermespy.channel.ideal.IdealChannel": [[29, 2, 1, "", "Deserialize"], [29, 2, 1, "", "_realize"], [29, 2, 1, "", "serialize"]], "hermespy.channel.ideal.IdealChannelRealization": [[29, 2, 1, "", "Deserialize"], [29, 2, 1, "", "_sample"], [29, 2, 1, "", "serialize"]], "hermespy.channel.ideal.IdealChannelSample": [[29, 2, 1, "", "_propagate"], [29, 4, 1, "", "expected_energy_scale"], [29, 2, 1, "", "state"]], "hermespy.channel.quadriga.quadriga": [[31, 1, 1, "", "QuadrigaChannel"], [31, 1, 1, "", "QuadrigaChannelRealization"], [31, 1, 1, "", "QuadrigaChannelSample"]], "hermespy.channel.quadriga.quadriga.QuadrigaChannel": [[31, 2, 1, "", "Deserialize"], [31, 2, 1, "", "serialize"]], "hermespy.channel.quadriga.quadriga.QuadrigaChannelRealization": [[31, 2, 1, "", "Deserialize"]], "hermespy.channel.quadriga.quadriga.QuadrigaChannelSample": [[31, 4, 1, "", "expected_energy_scale"], [31, 4, 1, "", "path_delays"], [31, 4, 1, "", "path_gains"], [31, 2, 1, "", "state"]], "hermespy.channel.radar.multi": [[32, 1, 1, "", "FixedCrossSection"], [32, 1, 1, "", "MultiTargetRadarChannel"], [32, 1, 1, "", "MultiTargetRadarChannelRealization"], [32, 1, 1, "", "PhysicalRadarTarget"], [32, 1, 1, "", "RadarCrossSectionModel"], [32, 1, 1, "", "RadarTarget"], [32, 1, 1, "", "VirtualRadarTarget"]], "hermespy.channel.radar.multi.FixedCrossSection": [[32, 2, 1, "", "Deserialize"], [32, 4, 1, "", "cross_section"], [32, 2, 1, "", "get_cross_section"], [32, 2, 1, "", "serialize"]], "hermespy.channel.radar.multi.MultiTargetRadarChannel": [[32, 2, 1, "", "Deserialize"], [32, 2, 1, "", "_realize"], [32, 2, 1, "", "add_target"], [32, 4, 1, "", "decorrelation_distance"], [32, 3, 1, "", "interference"], [32, 2, 1, "", "make_target"], [32, 2, 1, "", "serialize"], [32, 4, 1, "", "targets"]], "hermespy.channel.radar.multi.MultiTargetRadarChannelRealization": [[32, 2, 1, "", "Deserialize"], [32, 2, 1, "", "serialize"]], "hermespy.channel.radar.multi.PhysicalRadarTarget": [[32, 2, 1, "", "Deserialize"], [32, 4, 1, "", "cross_section"], [32, 4, 1, "", "moveable"], [32, 2, 1, "", "sample_cross_section"], [32, 2, 1, "", "sample_trajectory"], [32, 2, 1, "", "serialize"]], "hermespy.channel.radar.multi.RadarCrossSectionModel": [[32, 2, 1, "", "get_cross_section"]], "hermespy.channel.radar.multi.RadarTarget": [[32, 2, 1, "", "sample_cross_section"], [32, 2, 1, "", "sample_trajectory"], [32, 2, 1, "", "serialize"], [32, 4, 1, "", "static"]], "hermespy.channel.radar.multi.VirtualRadarTarget": [[32, 2, 1, "", "Deserialize"], [32, 4, 1, "", "cross_section"], [32, 2, 1, "", "sample_cross_section"], [32, 2, 1, "", "sample_trajectory"], [32, 2, 1, "", "serialize"]], "hermespy.channel.radar.radar": [[33, 1, 1, "", "RCRT"], [33, 1, 1, "", "RCST"], [33, 1, 1, "", "RadarChannelBase"], [33, 1, 1, "", "RadarChannelRealization"], [33, 1, 1, "", "RadarChannelSample"], [33, 1, 1, "", "RadarInterferencePath"], [33, 1, 1, "", "RadarPath"], [33, 1, 1, "", "RadarTargetPath"]], "hermespy.channel.radar.radar.RadarChannelBase": [[33, 4, 1, "", "attenuate"], [33, 2, 1, "", "serialize"]], "hermespy.channel.radar.radar.RadarChannelRealization": [[33, 2, 1, "", "serialize"]], "hermespy.channel.radar.radar.RadarChannelSample": [[33, 4, 1, "", "expected_energy_scale"], [33, 4, 1, "", "gain"], [33, 2, 1, "", "null_hypothesis"], [33, 4, 1, "", "paths"], [33, 2, 1, "", "state"]], "hermespy.channel.radar.radar.RadarInterferencePath": [[33, 2, 1, "", "Deserialize"], [33, 4, 1, "", "ground_truth"], [33, 2, 1, "", "propagation_delay"], [33, 2, 1, "", "propagation_response"], [33, 2, 1, "", "relative_velocity"]], "hermespy.channel.radar.radar.RadarPath": [[33, 2, 1, "", "add_propagation"], [33, 2, 1, "", "add_state"], [33, 4, 1, "", "attenuate"], [33, 4, 1, "", "ground_truth"], [33, 2, 1, "", "propagation_delay"], [33, 2, 1, "", "propagation_response"], [33, 2, 1, "", "relative_velocity"], [33, 2, 1, "", "serialize"], [33, 4, 1, "", "static"]], "hermespy.channel.radar.radar.RadarTargetPath": [[33, 2, 1, "", "Deserialize"], [33, 4, 1, "", "cross_section"], [33, 4, 1, "", "ground_truth"], [33, 4, 1, "", "position"], [33, 2, 1, "", "propagation_delay"], [33, 2, 1, "", "propagation_response"], [33, 4, 1, "", "reflection_phase"], [33, 2, 1, "", "relative_velocity"], [33, 2, 1, "", "serialize"], [33, 4, 1, "", "velocity"]], "hermespy.channel.radar.single": [[34, 1, 1, "", "SingleTargetRadarChannel"], [34, 1, 1, "", "SingleTargetRadarChannelRealization"]], "hermespy.channel.radar.single.SingleTargetRadarChannel": [[34, 2, 1, "", "Deserialize"], [34, 2, 1, "", "_realize"], [34, 4, 1, "", "decorrelation_distance"], [34, 4, 1, "", "radar_cross_section"], [34, 2, 1, "", "serialize"], [34, 4, 1, "", "target_azimuth"], [34, 4, 1, "", "target_exists"], [34, 4, 1, "", "target_range"], [34, 4, 1, "", "target_velocity"], [34, 4, 1, "", "target_zenith"]], "hermespy.channel.radar.single.SingleTargetRadarChannelRealization": [[34, 2, 1, "", "Deserialize"], [34, 2, 1, "", "serialize"]], "hermespy.channel.sionna_rt_channel": [[35, 1, 1, "", "SionnaRTChannel"], [35, 1, 1, "", "SionnaRTChannelRealization"], [35, 1, 1, "", "SionnaRTChannelSample"]], "hermespy.channel.sionna_rt_channel.SionnaRTChannel": [[35, 2, 1, "", "Deserialize"], [35, 2, 1, "", "_realize"], [35, 4, 1, "", "scene"], [35, 2, 1, "", "serialize"]], "hermespy.channel.sionna_rt_channel.SionnaRTChannelRealization": [[35, 2, 1, "", "Deserialize"], [35, 2, 1, "", "_sample"], [35, 4, 1, "", "scene"], [35, 2, 1, "", "serialize"]], "hermespy.channel.sionna_rt_channel.SionnaRTChannelSample": [[35, 4, 1, "", "expected_energy_scale"], [35, 3, 1, "", "paths"], [35, 2, 1, "", "state"]], "hermespy.core": [[58, 1, 1, "", "ValueType"], [59, 0, 0, "-", "monte_carlo"], [63, 0, 0, "-", "random_node"]], "hermespy.core.ValueType": [[58, 3, 1, "", "DB"], [58, 3, 1, "", "LIN"]], "hermespy.core.antennas": [[36, 1, 1, "", "AAT"], [36, 1, 1, "", "APT"], [36, 1, 1, "", "AT"], [36, 1, 1, "", "Antenna"], [36, 1, 1, "", "AntennaArray"], [36, 1, 1, "", "AntennaArrayBase"], [36, 1, 1, "", "AntennaArrayState"], [36, 1, 1, "", "AntennaMode"], [36, 1, 1, "", "AntennaPort"], [36, 1, 1, "", "CustomAntennaArray"], [36, 1, 1, "", "Dipole"], [36, 1, 1, "", "IdealAntenna"], [36, 1, 1, "", "LinearAntenna"], [36, 1, 1, "", "PatchAntenna"], [36, 1, 1, "", "UniformArray"]], "hermespy.core.antennas.Antenna": [[36, 2, 1, "", "Deserialize_Antenna"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "global_characteristics"], [36, 2, 1, "", "local_characteristics"], [36, 4, 1, "", "mode"], [36, 2, 1, "", "plot_gain"], [36, 2, 1, "", "plot_polarization"], [36, 4, 1, "", "port"], [36, 2, 1, "", "serialize"]], "hermespy.core.antennas.AntennaArray": [[36, 4, 1, "", "antennas"], [36, 2, 1, "", "count_antennas"], [36, 2, 1, "", "count_receive_antennas"], [36, 2, 1, "", "count_transmit_antennas"], [36, 4, 1, "", "num_receive_antennas"], [36, 4, 1, "", "num_transmit_antennas"], [36, 4, 1, "", "receive_antennas"], [36, 4, 1, "", "receive_ports"], [36, 2, 1, "", "state"], [36, 4, 1, "", "transmit_antennas"], [36, 4, 1, "", "transmit_ports"]], "hermespy.core.antennas.AntennaArrayBase": [[36, 4, 1, "", "antennas"], [36, 2, 1, "", "cartesian_array_response"], [36, 2, 1, "", "cartesian_phase_response"], [36, 2, 1, "", "characteristics"], [36, 2, 1, "", "horizontal_phase_response"], [36, 4, 1, "", "num_antennas"], [36, 4, 1, "", "num_ports"], [36, 4, 1, "", "num_receive_antennas"], [36, 4, 1, "", "num_receive_ports"], [36, 4, 1, "", "num_transmit_antennas"], [36, 4, 1, "", "num_transmit_ports"], [36, 2, 1, "", "plot_topology"], [36, 4, 1, "", "ports"], [36, 4, 1, "", "receive_antennas"], [36, 4, 1, "", "receive_ports"], [36, 4, 1, "", "receive_topology"], [36, 2, 1, "", "spherical_phase_response"], [36, 4, 1, "", "topology"], [36, 4, 1, "", "transmit_antennas"], [36, 4, 1, "", "transmit_ports"], [36, 4, 1, "", "transmit_topology"]], "hermespy.core.antennas.AntennaArrayState": [[36, 4, 1, "", "antennas"], [36, 4, 1, "", "ports"], [36, 4, 1, "", "receive_antennas"], [36, 2, 1, "", "select_subarray"], [36, 4, 1, "", "transmit_antennas"]], "hermespy.core.antennas.AntennaMode": [[36, 3, 1, "", "DUPLEX"], [36, 3, 1, "", "RX"], [36, 3, 1, "", "TX"]], "hermespy.core.antennas.AntennaPort": [[36, 2, 1, "", "Deserialize"], [36, 2, 1, "", "add_antenna"], [36, 4, 1, "", "antennas"], [36, 2, 1, "", "antennas_updated"], [36, 4, 1, "", "array"], [36, 2, 1, "", "copy"], [36, 4, 1, "", "num_antennas"], [36, 4, 1, "", "num_receive_antennas"], [36, 4, 1, "", "num_transmit_antennas"], [36, 4, 1, "", "receive_antennas"], [36, 4, 1, "", "receiving"], [36, 2, 1, "", "remove_antenna"], [36, 2, 1, "", "serialize"], [36, 4, 1, "", "transmit_antennas"], [36, 4, 1, "", "transmitting"]], "hermespy.core.antennas.CustomAntennaArray": [[36, 2, 1, "", "Deserialize"], [36, 2, 1, "", "add_antenna"], [36, 2, 1, "", "add_port"], [36, 4, 1, "", "ports"], [36, 2, 1, "", "remove_port"], [36, 2, 1, "", "serialize"]], "hermespy.core.antennas.Dipole": [[36, 2, 1, "", "Deserialize"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "local_characteristics"], [36, 2, 1, "", "serialize"]], "hermespy.core.antennas.IdealAntenna": [[36, 2, 1, "", "Deserialize"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "local_characteristics"], [36, 2, 1, "", "serialize"]], "hermespy.core.antennas.LinearAntenna": [[36, 2, 1, "", "Deserialize"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "local_characteristics"], [36, 2, 1, "", "serialize"], [36, 4, 1, "", "slant"]], "hermespy.core.antennas.PatchAntenna": [[36, 2, 1, "", "Deserialize"], [36, 2, 1, "", "copy"], [36, 2, 1, "", "local_characteristics"], [36, 2, 1, "", "serialize"]], "hermespy.core.antennas.UniformArray": [[36, 2, 1, "", "Deserialize"], [36, 4, 1, "", "antennas"], [36, 4, 1, "", "base_port"], [36, 4, 1, "", "dimensions"], [36, 4, 1, "", "num_antennas"], [36, 4, 1, "", "ports"], [36, 3, 1, "", "property_blacklist"], [36, 2, 1, "", "serialize"], [36, 4, 1, "", "spacing"]], "hermespy.core.channel": [[37, 1, 1, "", "ChannelStateDimension"], [37, 1, 1, "", "ChannelStateFormat"], [37, 1, 1, "", "ChannelStateInformation"]], "hermespy.core.channel.ChannelStateDimension": [[37, 3, 1, "", "INFORMATION"], [37, 3, 1, "", "RECEIVE_STREAMS"], [37, 3, 1, "", "SAMPLES"], [37, 3, 1, "", "TRANSMIT_STREAMS"]], "hermespy.core.channel.ChannelStateFormat": [[37, 3, 1, "", "FREQUENCY_SELECTIVITY"], [37, 3, 1, "", "IMPULSE_RESPONSE"]], "hermespy.core.channel.ChannelStateInformation": [[37, 2, 1, "", "Deserialize"], [37, 2, 1, "", "Ideal"], [37, 3, 1, "", "__num_delay_taps"], [37, 3, 1, "", "__num_frequency_bins"], [37, 3, 1, "", "__state"], [37, 3, 1, "", "__state_format"], [37, 2, 1, "", "concatenate"], [37, 2, 1, "", "dense_state"], [37, 4, 1, "", "linear"], [37, 4, 1, "", "num_delay_taps"], [37, 4, 1, "", "num_receive_streams"], [37, 4, 1, "", "num_samples"], [37, 4, 1, "", "num_symbols"], [37, 4, 1, "", "num_transmit_streams"], [37, 2, 1, "", "plot"], [37, 2, 1, "", "propagate"], [37, 2, 1, "", "received_streams"], [37, 2, 1, "", "reciprocal"], [37, 2, 1, "", "samples"], [37, 2, 1, "", "serialize"], [37, 2, 1, "", "set_state"], [37, 4, 1, "", "state"], [37, 4, 1, "", "state_format"], [37, 2, 1, "", "to_frequency_selectivity"], [37, 2, 1, "", "to_impulse_response"]], "hermespy.core.definitions": [[38, 1, 1, "", "ConsoleMode"], [38, 1, 1, "", "FloatingError"], [38, 1, 1, "", "Verbosity"]], "hermespy.core.definitions.ConsoleMode": [[38, 3, 1, "", "INTERACTIVE"], [38, 3, 1, "", "LINEAR"], [38, 3, 1, "", "SILENT"]], "hermespy.core.definitions.Verbosity": [[38, 3, 1, "", "ALL"], [38, 3, 1, "", "ERROR"], [38, 3, 1, "", "INFO"], [38, 3, 1, "", "NONE"], [38, 3, 1, "", "WARNING"]], "hermespy.core.device": [[42, 1, 1, "", "DRT"], [43, 1, 1, "", "DTT"], [39, 1, 1, "", "Device"], [40, 1, 1, "", "DeviceInput"], [41, 1, 1, "", "DeviceOutput"], [42, 1, 1, "", "DeviceReception"], [43, 1, 1, "", "DeviceTransmission"], [39, 1, 1, "", "DeviceType"], [44, 1, 1, "", "MixingOperator"], [45, 1, 1, "", "OperationResult"], [46, 1, 1, "", "Operator"], [47, 1, 1, "", "ProcessedDeviceInput"], [48, 1, 1, "", "Receiver"], [49, 1, 1, "", "Reception"], [49, 1, 1, "", "ReceptionType"], [50, 1, 1, "", "Transmission"], [50, 1, 1, "", "TransmissionType"], [51, 1, 1, "", "Transmitter"]], "hermespy.core.device.Device": [[39, 2, 1, "", "Deserialize"], [39, 2, 1, "", "add_dsp"], [39, 4, 1, "", "antennas"], [39, 4, 1, "", "carrier_frequency"], [39, 2, 1, "", "generate_output"], [39, 4, 1, "", "input_callbacks"], [39, 4, 1, "", "max_frame_duration"], [39, 4, 1, "", "num_antennas"], [39, 4, 1, "", "num_digital_receive_ports"], [39, 4, 1, "", "num_digital_transmit_ports"], [39, 4, 1, "", "num_receive_antenna_ports"], [39, 4, 1, "", "num_receive_antennas"], [39, 4, 1, "", "num_transmit_antenna_ports"], [39, 4, 1, "", "num_transmit_antennas"], [39, 4, 1, "", "output_callbacks"], [39, 4, 1, "", "power"], [39, 2, 1, "", "process_input"], [39, 2, 1, "", "receive"], [39, 4, 1, "", "receive_coding"], [39, 2, 1, "", "receive_operators"], [39, 3, 1, "", "receivers"], [39, 4, 1, "", "sampling_rate"], [39, 2, 1, "", "serialize"], [39, 4, 1, "", "snr"], [39, 2, 1, "", "state"], [39, 2, 1, "", "transmit"], [39, 4, 1, "", "transmit_coding"], [39, 2, 1, "", "transmit_operators"], [39, 3, 1, "", "transmitters"], [39, 4, 1, "", "wavelength"]], "hermespy.core.device.DeviceInput": [[40, 2, 1, "", "Deserialize"], [40, 4, 1, "", "impinging_signals"], [40, 4, 1, "", "num_impinging_signals"], [40, 2, 1, "", "serialize"]], "hermespy.core.device.DeviceOutput": [[41, 2, 1, "", "Deserialize"], [41, 4, 1, "", "carrier_frequency"], [41, 4, 1, "", "emerging_signals"], [41, 4, 1, "", "mixed_signal"], [41, 4, 1, "", "num_antennas"], [41, 4, 1, "", "num_emerging_signals"], [41, 4, 1, "", "sampling_rate"], [41, 2, 1, "", "serialize"]], "hermespy.core.device.DeviceReception": [[42, 2, 1, "", "Deserialize"], [42, 2, 1, "", "From_ProcessedDeviceInput"], [42, 4, 1, "", "num_operator_receptions"], [42, 4, 1, "", "operator_receptions"], [42, 2, 1, "", "serialize"]], "hermespy.core.device.DeviceTransmission": [[43, 2, 1, "", "Deserialize"], [43, 2, 1, "", "From_Output"], [43, 4, 1, "", "num_operator_transmissions"], [43, 4, 1, "", "operator_transmissions"], [43, 2, 1, "", "serialize"]], "hermespy.core.device.MixingOperator": [[44, 2, 1, "", "Deserialize"], [44, 4, 1, "", "carrier_frequency"], [44, 2, 1, "", "serialize"]], "hermespy.core.device.OperationResult": [[45, 2, 1, "", "Deserialize"], [45, 2, 1, "", "serialize"], [45, 3, 1, "", "signal"]], "hermespy.core.device.Operator": [[46, 4, 1, "", "frame_duration"], [46, 4, 1, "", "sampling_rate"]], "hermespy.core.device.ProcessedDeviceInput": [[47, 2, 1, "", "Deserialize"], [47, 4, 1, "", "num_operator_inputs"], [47, 4, 1, "", "operator_inputs"], [47, 2, 1, "", "serialize"]], "hermespy.core.device.Receiver": [[48, 2, 1, "", "_receive"], [48, 2, 1, "", "add_receive_callback"], [48, 4, 1, "", "power"], [48, 2, 1, "", "receive"], [48, 4, 1, "", "selected_receive_ports"], [48, 2, 1, "", "serialize"]], "hermespy.core.device.Transmitter": [[51, 2, 1, "", "_transmit"], [51, 2, 1, "", "add_transmit_callback"], [51, 2, 1, "", "notify_transmit_callbacks"], [51, 4, 1, "", "power"], [51, 4, 1, "", "selected_transmit_ports"], [51, 2, 1, "", "serialize"], [51, 2, 1, "", "transmit"]], "hermespy.core.drop": [[52, 1, 1, "", "Drop"], [52, 1, 1, "", "DropType"], [52, 1, 1, "", "EvaluatedDrop"]], "hermespy.core.drop.Drop": [[52, 2, 1, "", "Deserialize"], [52, 4, 1, "", "device_receptions"], [52, 4, 1, "", "device_transmissions"], [52, 4, 1, "", "num_device_receptions"], [52, 4, 1, "", "num_device_transmissions"], [52, 4, 1, "", "operator_inputs"], [52, 2, 1, "", "serialize"], [52, 4, 1, "", "timestamp"]], "hermespy.core.drop.EvaluatedDrop": [[52, 4, 1, "", "artifacts"], [52, 4, 1, "", "num_artifacts"]], "hermespy.core.evaluators": [[53, 1, 1, "", "PowerArtifact"], [53, 1, 1, "", "PowerEvaluation"], [53, 1, 1, "", "PowerResult"], [53, 1, 1, "", "ReceivePowerEvaluator"], [53, 1, 1, "", "TransmitPowerEvaluator"]], "hermespy.core.evaluators.PowerArtifact": [[53, 4, 1, "", "power"], [53, 2, 1, "", "to_scalar"]], "hermespy.core.evaluators.PowerEvaluation": [[53, 2, 1, "", "artifact"], [53, 4, 1, "", "power"], [53, 4, 1, "", "title"]], "hermespy.core.evaluators.PowerResult": [[53, 4, 1, "", "average_powers"], [53, 2, 1, "", "to_array"]], "hermespy.core.evaluators.ReceivePowerEvaluator": [[53, 4, 1, "", "abbreviation"], [53, 2, 1, "", "evaluate"], [53, 2, 1, "", "generate_result"], [53, 4, 1, "", "title"]], "hermespy.core.evaluators.TransmitPowerEvaluator": [[53, 4, 1, "", "abbreviation"], [53, 2, 1, "", "evaluate"], [53, 2, 1, "", "generate_result"], [53, 4, 1, "", "title"]], "hermespy.core.executable": [[54, 1, 1, "", "Executable"]], "hermespy.core.executable.Executable": [[54, 4, 1, "", "console"], [54, 4, 1, "", "console_mode"], [54, 4, 1, "", "debug"], [54, 2, 1, "", "default_results_dir"], [54, 2, 1, "", "execute"], [54, 4, 1, "", "results_dir"], [54, 2, 1, "", "run"], [54, 4, 1, "", "style"], [54, 2, 1, "", "style_context"], [54, 4, 1, "", "verbosity"]], "hermespy.core.factory": [[55, 1, 1, "", "DeserializationProcess"], [55, 1, 1, "", "Factory"], [55, 1, 1, "", "HDFDeserializationProcess"], [55, 1, 1, "", "HDFSerializationProcess"], [55, 1, 1, "", "ProcessBase"], [55, 1, 1, "", "SET"], [55, 1, 1, "", "Serializable"], [55, 1, 1, "", "SerializableEnum"], [55, 1, 1, "", "SerializableType"], [55, 1, 1, "", "SerializationBackend"], [55, 1, 1, "", "SerializationProcess"], [55, 3, 1, "", "UNDEF"], [55, 3, 1, "", "UNDEF_TYPE"], [55, 1, 1, "", "_OT"], [55, 1, 1, "", "_RT"]], "hermespy.core.factory.DeserializationProcess": [[55, 2, 1, "", "deserialize_array"], [55, 2, 1, "", "deserialize_complex"], [55, 2, 1, "", "deserialize_custom"], [55, 2, 1, "", "deserialize_floating"], [55, 2, 1, "", "deserialize_integer"], [55, 2, 1, "", "deserialize_object"], [55, 2, 1, "", "deserialize_object_sequence"], [55, 2, 1, "", "deserialize_range"], [55, 2, 1, "", "deserialize_string"], [55, 2, 1, "", "finalize"], [55, 2, 1, "", "sequence_length"]], "hermespy.core.factory.Factory": [[55, 2, 1, "", "deserialize"], [55, 2, 1, "", "from_HDF"], [55, 4, 1, "", "registered_classes"], [55, 4, 1, "", "registered_tags"], [55, 2, 1, "", "serialize"], [55, 4, 1, "", "tag_registry"], [55, 2, 1, "", "to_HDF"]], "hermespy.core.factory.HDFDeserializationProcess": [[55, 2, 1, "", "New"], [55, 2, 1, "", "deserialize_array"], [55, 2, 1, "", "deserialize_complex"], [55, 2, 1, "", "deserialize_custom"], [55, 2, 1, "", "deserialize_floating"], [55, 2, 1, "", "deserialize_integer"], [55, 2, 1, "", "deserialize_object_sequence"], [55, 2, 1, "", "deserialize_string"], [55, 2, 1, "", "finalize"], [55, 2, 1, "", "sequence_length"]], "hermespy.core.factory.HDFSerializationProcess": [[55, 2, 1, "", "New"], [55, 2, 1, "", "finalize"], [55, 2, 1, "", "serialize_array"], [55, 2, 1, "", "serialize_complex"], [55, 2, 1, "", "serialize_custom"], [55, 2, 1, "", "serialize_floating"], [55, 2, 1, "", "serialize_integer"], [55, 2, 1, "", "serialize_object_sequence"], [55, 2, 1, "", "serialize_string"]], "hermespy.core.factory.Serializable": [[55, 2, 1, "", "Deserialize"], [55, 2, 1, "", "serialization_tag"], [55, 2, 1, "", "serialize"]], "hermespy.core.factory.SerializableEnum": [[55, 2, 1, "", "Deserialize"], [55, 2, 1, "", "from_parameters"], [55, 2, 1, "", "serialize"]], "hermespy.core.factory.SerializationBackend": [[55, 3, 1, "", "HDF"], [55, 3, 1, "", "MAT"], [55, 3, 1, "", "PICKLE"]], "hermespy.core.factory.SerializationProcess": [[55, 2, 1, "", "finalize"], [55, 2, 1, "", "serialize_array"], [55, 2, 1, "", "serialize_complex"], [55, 2, 1, "", "serialize_custom"], [55, 2, 1, "", "serialize_floating"], [55, 2, 1, "", "serialize_integer"], [55, 2, 1, "", "serialize_object"], [55, 2, 1, "", "serialize_object_mapping"], [55, 2, 1, "", "serialize_object_sequence"], [55, 2, 1, "", "serialize_range"], [55, 2, 1, "", "serialize_string"]], "hermespy.core.hooks": [[56, 1, 1, "", "Hook"], [56, 1, 1, "", "Hookable"], [56, 1, 1, "", "_RT"]], "hermespy.core.hooks.Hook": [[56, 2, 1, "", "remove"]], "hermespy.core.hooks.Hookable": [[56, 2, 1, "", "add_callback"], [56, 2, 1, "", "add_hook"], [56, 2, 1, "", "notify"], [56, 2, 1, "", "remove_hook"]], "hermespy.core.logarithmic": [[58, 1, 1, "", "Logarithmic"], [58, 1, 1, "", "LogarithmicSequence"], [58, 1, 1, "", "dB"]], "hermespy.core.logarithmic.Logarithmic": [[58, 2, 1, "", "From_Tuple"], [58, 4, 1, "", "conversion"], [58, 4, 1, "", "value_db"]], "hermespy.core.logarithmic.LogarithmicSequence": [[58, 4, 1, "", "conversion"], [58, 2, 1, "", "tolist"]], "hermespy.core.monte_carlo": [[59, 1, 1, "", "AT"], [59, 1, 1, "", "ActorRunResult"], [59, 1, 1, "", "Artifact"], [59, 1, 1, "", "ArtifactTemplate"], [59, 1, 1, "", "ET"], [59, 1, 1, "", "EV"], [59, 1, 1, "", "Evaluation"], [59, 1, 1, "", "EvaluationResult"], [59, 1, 1, "", "EvaluationTemplate"], [59, 1, 1, "", "Evaluator"], [59, 1, 1, "", "FAT"], [59, 1, 1, "", "GridDimension"], [59, 1, 1, "", "GridSection"], [59, 1, 1, "", "MO"], [59, 1, 1, "", "MonteCarlo"], [59, 1, 1, "", "MonteCarloActor"], [59, 1, 1, "", "MonteCarloResult"], [59, 1, 1, "", "MonteCarloSample"], [59, 1, 1, "", "RegisteredDimension"], [59, 1, 1, "", "SERT"], [59, 1, 1, "", "SampleGrid"], [59, 1, 1, "", "SamplePoint"], [59, 1, 1, "", "ScalarDimension"], [59, 1, 1, "", "ScalarEvaluationResult"], [59, 5, 1, "", "UnmatchableException"], [59, 6, 1, "", "register"]], "hermespy.core.monte_carlo.ActorRunResult": [[59, 3, 1, "", "message"], [59, 3, 1, "", "samples"]], "hermespy.core.monte_carlo.Artifact": [[59, 2, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.ArtifactTemplate": [[59, 4, 1, "", "artifact"], [59, 2, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.Evaluation": [[59, 2, 1, "", "artifact"]], "hermespy.core.monte_carlo.EvaluationResult": [[59, 4, 1, "", "evaluator"], [59, 4, 1, "", "grid"], [59, 2, 1, "", "print"], [59, 2, 1, "", "to_array"]], "hermespy.core.monte_carlo.EvaluationTemplate": [[59, 4, 1, "", "evaluation"]], "hermespy.core.monte_carlo.Evaluator": [[59, 4, 1, "", "abbreviation"], [59, 4, 1, "", "confidence"], [59, 2, 1, "", "evaluate"], [59, 2, 1, "", "generate_result"], [59, 4, 1, "", "plot_scale"], [59, 3, 1, "", "tick_format"], [59, 4, 1, "", "title"], [59, 4, 1, "", "tolerance"]], "hermespy.core.monte_carlo.GridDimension": [[59, 2, 1, "", "configure_point"], [59, 4, 1, "", "considered_objects"], [59, 4, 1, "", "dimension"], [59, 4, 1, "", "first_impact"], [59, 4, 1, "", "last_impact"], [59, 4, 1, "", "num_sample_points"], [59, 4, 1, "", "plot_scale"], [59, 4, 1, "", "sample_points"], [59, 4, 1, "", "tick_format"], [59, 4, 1, "", "title"]], "hermespy.core.monte_carlo.GridSection": [[59, 2, 1, "", "add_samples"], [59, 2, 1, "", "confidence_status"], [59, 4, 1, "", "confidences"], [59, 4, 1, "", "coordinates"], [59, 4, 1, "", "num_samples"], [59, 4, 1, "", "samples"]], "hermespy.core.monte_carlo.MonteCarlo": [[59, 2, 1, "", "add_dimension"], [59, 2, 1, "", "add_evaluator"], [59, 3, 1, "", "catch_exceptions"], [59, 4, 1, "", "console"], [59, 4, 1, "", "console_mode"], [59, 4, 1, "", "cpus_per_actor"], [59, 4, 1, "", "dimensions"], [59, 4, 1, "", "evaluators"], [59, 4, 1, "", "investigated_object"], [59, 4, 1, "", "max_num_samples"], [59, 4, 1, "", "min_num_samples"], [59, 2, 1, "", "new_dimension"], [59, 4, 1, "", "num_actors"], [59, 4, 1, "", "num_samples"], [59, 2, 1, "", "remove_dimension"], [59, 3, 1, "", "runtime_env"], [59, 4, 1, "", "section_block_size"], [59, 2, 1, "", "simulate"]], "hermespy.core.monte_carlo.MonteCarloActor": [[59, 3, 1, "", "catch_exceptions"], [59, 2, 1, "", "run"], [59, 2, 1, "", "stage_executors"], [59, 2, 1, "", "stage_identifiers"]], "hermespy.core.monte_carlo.MonteCarloResult": [[59, 4, 1, "", "evaluation_results"], [59, 4, 1, "", "performance_time"], [59, 2, 1, "", "plot"], [59, 2, 1, "", "print"], [59, 2, 1, "", "save_to_matlab"]], "hermespy.core.monte_carlo.MonteCarloSample": [[59, 4, 1, "", "artifact_scalars"], [59, 4, 1, "", "artifacts"], [59, 4, 1, "", "grid_section"], [59, 4, 1, "", "num_artifacts"], [59, 4, 1, "", "sample_index"]], "hermespy.core.monte_carlo.RegisteredDimension": [[59, 2, 1, "", "deleter"], [59, 4, 1, "", "first_impact"], [59, 2, 1, "", "getter"], [59, 2, 1, "", "is_registered"], [59, 4, 1, "", "last_impact"], [59, 2, 1, "", "setter"], [59, 4, 1, "", "title"]], "hermespy.core.monte_carlo.SamplePoint": [[59, 4, 1, "", "title"], [59, 4, 1, "", "value"]], "hermespy.core.monte_carlo.ScalarDimension": [[59, 4, 1, "", "title"]], "hermespy.core.monte_carlo.ScalarEvaluationResult": [[59, 2, 1, "", "From_Artifacts"], [59, 2, 1, "", "create_figure"], [59, 3, 1, "", "plot_surface"], [59, 4, 1, "", "title"], [59, 2, 1, "", "to_array"]], "hermespy.core.operators": [[60, 1, 1, "", "SignalReceiver"], [60, 1, 1, "", "SignalTransmitter"], [60, 1, 1, "", "SilentTransmitter"], [60, 1, 1, "", "StaticOperator"]], "hermespy.core.operators.SignalReceiver": [[60, 2, 1, "", "Deserialize"], [60, 4, 1, "", "energy"], [60, 4, 1, "", "power"], [60, 2, 1, "", "serialize"]], "hermespy.core.operators.SignalTransmitter": [[60, 2, 1, "", "Deserialize"], [60, 4, 1, "", "power"], [60, 2, 1, "", "serialize"], [60, 4, 1, "", "signal"]], "hermespy.core.operators.SilentTransmitter": [[60, 2, 1, "", "Deserialize"], [60, 4, 1, "", "power"], [60, 3, 1, "", "serialized_attributes"]], "hermespy.core.operators.StaticOperator": [[60, 4, 1, "", "frame_duration"], [60, 4, 1, "", "num_samples"], [60, 4, 1, "", "sampling_rate"], [60, 2, 1, "", "serialize"]], "hermespy.core.pipeline": [[61, 1, 1, "", "Pipeline"]], "hermespy.core.pipeline.Pipeline": [[61, 2, 1, "", "add_device"], [61, 2, 1, "", "device_index"], [61, 2, 1, "", "new_device"], [61, 4, 1, "", "num_drops"], [61, 4, 1, "", "scenario"]], "hermespy.core.precoding": [[62, 1, 1, "", "Precoder"], [62, 1, 1, "", "PrecoderType"], [62, 1, 1, "", "Precoding"], [62, 1, 1, "", "PrecodingType"], [62, 1, 1, "", "ReceiveDecoder"], [62, 1, 1, "", "ReceiveDecoderType"], [62, 1, 1, "", "ReceivePrecoding"], [62, 1, 1, "", "ReceivePrecodingType"], [62, 1, 1, "", "ReceiveSignalCoding"], [62, 1, 1, "", "ReceiveStreamDecoder"], [62, 1, 1, "", "TransmitEncoder"], [62, 1, 1, "", "TransmitEncoderType"], [62, 1, 1, "", "TransmitPrecoding"], [62, 1, 1, "", "TransmitPrecodingType"], [62, 1, 1, "", "TransmitSignalCoding"], [62, 1, 1, "", "TransmitStreamEncoder"]], "hermespy.core.precoding.Precoder": [[62, 4, 1, "", "precoding"]], "hermespy.core.precoding.Precoding": [[62, 2, 1, "", "Deserialize"], [62, 2, 1, "", "pop_precoder"], [62, 2, 1, "", "serialize"]], "hermespy.core.precoding.ReceiveDecoder": [[62, 2, 1, "", "num_receive_output_streams"]], "hermespy.core.precoding.ReceivePrecoding": [[62, 2, 1, "", "num_receive_output_streams"]], "hermespy.core.precoding.ReceiveSignalCoding": [[62, 2, 1, "", "decode_streams"]], "hermespy.core.precoding.ReceiveStreamDecoder": [[62, 2, 1, "", "decode_streams"]], "hermespy.core.precoding.TransmitEncoder": [[62, 2, 1, "", "num_transmit_input_streams"]], "hermespy.core.precoding.TransmitPrecoding": [[62, 2, 1, "", "num_transmit_input_streams"]], "hermespy.core.precoding.TransmitSignalCoding": [[62, 2, 1, "", "encode_streams"]], "hermespy.core.precoding.TransmitStreamEncoder": [[62, 2, 1, "", "encode_streams"]], "hermespy.core.random_node": [[63, 1, 1, "", "RandomNode"], [63, 1, 1, "", "RandomRealization"]], "hermespy.core.random_node.RandomRealization": [[63, 2, 1, "", "Deserialize"], [63, 2, 1, "", "generator"], [63, 4, 1, "", "seed"], [63, 2, 1, "", "serialize"]], "hermespy.core.scenario": [[64, 1, 1, "", "ReplayScenario"], [64, 1, 1, "", "Scenario"], [64, 1, 1, "", "ScenarioMode"], [64, 1, 1, "", "ScenarioType"]], "hermespy.core.scenario.Scenario": [[64, 2, 1, "", "Deserialize"], [64, 2, 1, "", "Replay"], [64, 2, 1, "", "add_device"], [64, 4, 1, "", "campaign"], [64, 2, 1, "", "device_index"], [64, 2, 1, "", "device_registered"], [64, 4, 1, "", "devices"], [64, 2, 1, "", "drop"], [64, 4, 1, "", "drop_duration"], [64, 2, 1, "", "generate_outputs"], [64, 4, 1, "", "mode"], [64, 2, 1, "", "new_device"], [64, 4, 1, "", "num_devices"], [64, 4, 1, "", "num_drops"], [64, 4, 1, "", "num_operators"], [64, 4, 1, "", "num_receivers"], [64, 4, 1, "", "num_transmitters"], [64, 4, 1, "", "operators"], [64, 2, 1, "", "process_inputs"], [64, 2, 1, "", "receive_devices"], [64, 2, 1, "", "receive_operators"], [64, 4, 1, "", "receivers"], [64, 2, 1, "", "record"], [64, 2, 1, "", "replay"], [64, 2, 1, "", "serialize"], [64, 2, 1, "", "stop"], [64, 2, 1, "", "transmit_devices"], [64, 2, 1, "", "transmit_operators"], [64, 4, 1, "", "transmitters"]], "hermespy.core.scenario.ScenarioMode": [[64, 3, 1, "", "DEFAULT"], [64, 3, 1, "", "RECORD"], [64, 3, 1, "", "REPLAY"]], "hermespy.core.signal_model": [[65, 1, 1, "", "DenseSignal"], [65, 1, 1, "", "Signal"], [65, 1, 1, "", "SignalBlock"], [65, 1, 1, "", "SparseSignal"], [65, 1, 1, "", "_EyeVisualization"], [65, 1, 1, "", "_SamplesVisualization"], [65, 1, 1, "", "_SignalVisualization"]], "hermespy.core.signal_model.DenseSignal": [[65, 2, 1, "", "Create"], [65, 2, 1, "", "Empty"], [65, 2, 1, "", "append_samples"], [65, 2, 1, "", "append_streams"], [65, 4, 1, "", "energy"], [65, 2, 1, "", "getitem"], [65, 4, 1, "", "power"], [65, 2, 1, "", "set_samples"], [65, 4, 1, "", "title"], [65, 2, 1, "", "to_dense"]], "hermespy.core.signal_model.Signal": [[65, 2, 1, "", "Create"], [65, 2, 1, "", "Deserialize"], [65, 2, 1, "", "Empty"], [65, 2, 1, "", "append_samples"], [65, 2, 1, "", "append_streams"], [65, 4, 1, "", "carrier_frequency"], [65, 2, 1, "", "copy"], [65, 3, 1, "", "delay"], [65, 4, 1, "", "duration"], [65, 4, 1, "", "energy"], [65, 4, 1, "", "eye"], [65, 3, 1, "", "filter_order"], [65, 4, 1, "", "frequencies"], [65, 2, 1, "", "from_interleaved"], [65, 2, 1, "", "from_ndarray"], [65, 2, 1, "", "getitem"], [65, 2, 1, "", "getstreams"], [65, 4, 1, "", "kwargs"], [65, 4, 1, "", "noise_power"], [65, 4, 1, "", "num_samples"], [65, 4, 1, "", "num_streams"], [65, 4, 1, "", "plot"], [65, 4, 1, "", "power"], [65, 2, 1, "", "resample"], [65, 4, 1, "", "sampling_rate"], [65, 2, 1, "", "serialize"], [65, 2, 1, "", "set_samples"], [65, 4, 1, "", "shape"], [65, 2, 1, "", "superimpose"], [65, 4, 1, "", "timestamps"], [65, 4, 1, "", "title"], [65, 2, 1, "", "to_dense"], [65, 2, 1, "", "to_interleaved"]], "hermespy.core.signal_model.SignalBlock": [[65, 2, 1, "", "Deserialize"], [65, 2, 1, "", "append_samples"], [65, 2, 1, "", "copy"], [65, 4, 1, "", "end"], [65, 4, 1, "", "energy"], [65, 4, 1, "", "num_samples"], [65, 4, 1, "", "num_streams"], [65, 4, 1, "", "offset"], [65, 4, 1, "", "power"], [65, 2, 1, "", "resample"], [65, 2, 1, "", "serialize"]], "hermespy.core.signal_model.SparseSignal": [[65, 2, 1, "", "Create"], [65, 2, 1, "", "Empty"], [65, 2, 1, "", "append_samples"], [65, 2, 1, "", "append_streams"], [65, 2, 1, "", "set_samples"], [65, 4, 1, "", "title"]], "hermespy.core.signal_model._EyeVisualization": [[65, 4, 1, "", "title"]], "hermespy.core.signal_model._SamplesVisualization": [[65, 2, 1, "", "create_figure"], [65, 4, 1, "", "title"]], "hermespy.core.signal_model._SignalVisualization": [[65, 4, 1, "", "signal"]], "hermespy.core.state": [[66, 1, 1, "", "DST"], [66, 1, 1, "", "DeviceState"], [66, 1, 1, "", "ReceiveState"], [66, 1, 1, "", "State"], [66, 1, 1, "", "TransmitState"]], "hermespy.core.state.DeviceState": [[66, 2, 1, "", "Basic"], [66, 4, 1, "", "device_id"], [66, 4, 1, "", "num_digital_receive_ports"], [66, 4, 1, "", "num_digital_transmit_ports"], [66, 4, 1, "", "position"], [66, 2, 1, "", "receive_state"], [66, 2, 1, "", "transmit_state"]], "hermespy.core.state.ReceiveState": [[66, 4, 1, "", "num_digital_receive_ports"]], "hermespy.core.state.State": [[66, 4, 1, "", "antennas"], [66, 4, 1, "", "carrier_frequency"], [66, 4, 1, "", "pose"], [66, 4, 1, "", "position"], [66, 4, 1, "", "sampling_rate"], [66, 4, 1, "", "timestamp"], [66, 4, 1, "", "velocity"]], "hermespy.core.state.TransmitState": [[66, 4, 1, "", "num_digital_transmit_ports"]], "hermespy.core.transformation": [[67, 1, 1, "", "Direction"], [67, 1, 1, "", "Transformable"], [67, 1, 1, "", "TransformableBase"], [67, 1, 1, "", "TransformableLink"], [67, 1, 1, "", "Transformation"]], "hermespy.core.transformation.Direction": [[67, 2, 1, "", "From_Cartesian"], [67, 2, 1, "", "From_Spherical"], [67, 2, 1, "", "to_spherical"]], "hermespy.core.transformation.Transformable": [[67, 2, 1, "", "Deserialize"], [67, 4, 1, "", "backwards_transformation"], [67, 4, 1, "", "forwards_transformation"], [67, 4, 1, "", "global_orientation"], [67, 4, 1, "", "global_position"], [67, 4, 1, "", "is_base"], [67, 2, 1, "", "lookat"], [67, 4, 1, "", "orientation"], [67, 4, 1, "", "pose"], [67, 4, 1, "", "position"], [67, 3, 1, "", "property_blacklist"], [67, 2, 1, "", "serialize"], [67, 2, 1, "", "set_base"], [67, 2, 1, "", "to_local_coordinates"]], "hermespy.core.transformation.TransformableBase": [[67, 4, 1, "", "forwards_transformation"], [67, 2, 1, "", "set_base"]], "hermespy.core.transformation.TransformableLink": [[67, 2, 1, "", "add_link"], [67, 4, 1, "", "forwards_transformation"], [67, 4, 1, "", "linked_frames"], [67, 2, 1, "", "remove_link"], [67, 2, 1, "", "set_base"]], "hermespy.core.transformation.Transformation": [[67, 2, 1, "", "Deserialize"], [67, 2, 1, "", "From_Quaternion"], [67, 2, 1, "", "From_RPY"], [67, 2, 1, "", "From_Translation"], [67, 2, 1, "", "No"], [67, 2, 1, "", "invert"], [67, 2, 1, "", "lookat"], [67, 2, 1, "", "rotate_direction"], [67, 4, 1, "", "rotation_quaternion"], [67, 4, 1, "", "rotation_rpy"], [67, 2, 1, "", "serialize"], [67, 2, 1, "", "transform_direction"], [67, 2, 1, "", "transform_position"], [67, 4, 1, "", "translation"]], "hermespy.core.visualize": [[68, 1, 1, "", "ImageVisualization"], [68, 1, 1, "", "PlotVisualization"], [68, 1, 1, "", "QuadMeshVisualization"], [68, 1, 1, "", "ScatterVisualization"], [68, 1, 1, "", "StemVisualization"], [68, 3, 1, "", "VAT"], [68, 3, 1, "", "VLT"], [68, 1, 1, "", "VT"], [68, 1, 1, "", "Visualizable"], [68, 1, 1, "", "VisualizableAttribute"], [68, 1, 1, "", "Visualization"]], "hermespy.core.visualize.ImageVisualization": [[68, 4, 1, "", "image"]], "hermespy.core.visualize.PlotVisualization": [[68, 4, 1, "", "lines"]], "hermespy.core.visualize.QuadMeshVisualization": [[68, 4, 1, "", "mesh"]], "hermespy.core.visualize.ScatterVisualization": [[68, 4, 1, "", "paths"]], "hermespy.core.visualize.StemVisualization": [[68, 4, 1, "", "container"]], "hermespy.core.visualize.Visualizable": [[68, 2, 1, "", "create_figure"], [68, 4, 1, "", "title"], [68, 2, 1, "", "update_visualization"], [68, 4, 1, "", "visualization"], [68, 2, 1, "", "visualize"]], "hermespy.core.visualize.Visualization": [[68, 4, 1, "", "axes"], [68, 4, 1, "", "figure"], [68, 2, 1, "", "show"]], "hermespy.fec": [[70, 0, 0, "-", "block_interleaver"], [71, 0, 0, "-", "coding"], [72, 0, 0, "-", "cyclic_redundancy_check"], [76, 0, 0, "-", "repetition_encoder"], [79, 0, 0, "-", "scrambler"]], "hermespy.fec.aff3ct": [[69, 0, 0, "-", "bch"], [74, 0, 0, "-", "ldpc"], [75, 0, 0, "-", "polar"], [77, 0, 0, "-", "rs"], [78, 0, 0, "-", "rsc"], [80, 0, 0, "-", "turbo"]], "hermespy.fec.aff3ct.bch": [[69, 1, 1, "", "BCHCoding"]], "hermespy.fec.aff3ct.bch.BCHCoding": [[69, 4, 1, "", "bit_block_size"], [69, 4, 1, "", "code_block_size"], [69, 4, 1, "", "correction_power"], [69, 2, 1, "", "decode"], [69, 3, 1, "", "enabled"], [69, 2, 1, "", "encode"], [69, 4, 1, "", "rate"]], "hermespy.fec.aff3ct.ldpc": [[74, 1, 1, "", "LDPCCoding"]], "hermespy.fec.aff3ct.ldpc.LDPCCoding": [[74, 4, 1, "", "bit_block_size"], [74, 4, 1, "", "code_block_size"], [74, 2, 1, "", "decode"], [74, 3, 1, "", "enabled"], [74, 2, 1, "", "encode"], [74, 4, 1, "", "num_iterations"], [74, 4, 1, "", "rate"]], "hermespy.fec.aff3ct.polar": [[75, 1, 1, "", "PolarSCCoding"], [75, 1, 1, "", "PolarSCLCoding"]], "hermespy.fec.aff3ct.polar.PolarSCCoding": [[75, 4, 1, "", "bit_block_size"], [75, 4, 1, "", "code_block_size"], [75, 2, 1, "", "decode"], [75, 3, 1, "", "enabled"], [75, 2, 1, "", "encode"], [75, 4, 1, "", "rate"]], "hermespy.fec.aff3ct.polar.PolarSCLCoding": [[75, 4, 1, "", "bit_block_size"], [75, 4, 1, "", "code_block_size"], [75, 2, 1, "", "decode"], [75, 3, 1, "", "enabled"], [75, 2, 1, "", "encode"], [75, 4, 1, "", "rate"]], "hermespy.fec.aff3ct.rs": [[77, 1, 1, "", "ReedSolomonCoding"]], "hermespy.fec.aff3ct.rs.ReedSolomonCoding": [[77, 4, 1, "", "bit_block_size"], [77, 4, 1, "", "code_block_size"], [77, 4, 1, "", "correction_power"], [77, 2, 1, "", "decode"], [77, 3, 1, "", "enabled"], [77, 2, 1, "", "encode"], [77, 4, 1, "", "rate"]], "hermespy.fec.aff3ct.rsc": [[78, 1, 1, "", "RSCCoding"]], "hermespy.fec.aff3ct.rsc.RSCCoding": [[78, 4, 1, "", "bit_block_size"], [78, 4, 1, "", "code_block_size"], [78, 2, 1, "", "decode"], [78, 3, 1, "", "enabled"], [78, 2, 1, "", "encode"], [78, 4, 1, "", "rate"]], "hermespy.fec.aff3ct.turbo": [[80, 1, 1, "", "TurboCoding"]], "hermespy.fec.aff3ct.turbo.TurboCoding": [[80, 4, 1, "", "bit_block_size"], [80, 4, 1, "", "code_block_size"], [80, 2, 1, "", "decode"], [80, 3, 1, "", "enabled"], [80, 2, 1, "", "encode"], [80, 4, 1, "", "num_iterations"], [80, 4, 1, "", "rate"]], "hermespy.fec.block_interleaver": [[70, 1, 1, "", "BlockInterleaver"]], "hermespy.fec.block_interleaver.BlockInterleaver": [[70, 2, 1, "", "Deserialize"], [70, 4, 1, "", "bit_block_size"], [70, 4, 1, "", "block_size"], [70, 4, 1, "", "code_block_size"], [70, 2, 1, "", "decode"], [70, 2, 1, "", "encode"], [70, 4, 1, "", "interleave_blocks"], [70, 4, 1, "", "rate"], [70, 2, 1, "", "serialize"]], "hermespy.fec.coding": [[71, 1, 1, "", "Encoder"], [71, 1, 1, "", "EncoderManager"]], "hermespy.fec.coding.Encoder": [[71, 4, 1, "", "bit_block_size"], [71, 4, 1, "", "code_block_size"], [71, 2, 1, "", "decode"], [71, 4, 1, "", "enabled"], [71, 2, 1, "", "encode"], [71, 4, 1, "", "manager"], [71, 4, 1, "", "rate"]], "hermespy.fec.coding.EncoderManager": [[71, 2, 1, "", "Deserialize"], [71, 2, 1, "", "add_encoder"], [71, 3, 1, "", "allow_padding"], [71, 3, 1, "", "allow_truncating"], [71, 4, 1, "", "bit_block_size"], [71, 4, 1, "", "code_block_size"], [71, 2, 1, "", "decode"], [71, 2, 1, "", "encode"], [71, 4, 1, "", "encoders"], [71, 4, 1, "", "modem"], [71, 4, 1, "", "rate"], [71, 2, 1, "", "required_num_data_bits"], [71, 2, 1, "", "serialize"]], "hermespy.fec.cyclic_redundancy_check": [[72, 1, 1, "", "CyclicRedundancyCheck"]], "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck": [[72, 2, 1, "", "Deserialize"], [72, 4, 1, "", "bit_block_size"], [72, 4, 1, "", "check_block_size"], [72, 4, 1, "", "code_block_size"], [72, 2, 1, "", "decode"], [72, 2, 1, "", "encode"], [72, 2, 1, "", "serialize"]], "hermespy.fec.repetition_encoder": [[76, 1, 1, "", "RepetitionEncoder"]], "hermespy.fec.repetition_encoder.RepetitionEncoder": [[76, 2, 1, "", "Deserialize"], [76, 4, 1, "", "bit_block_size"], [76, 4, 1, "", "code_block_size"], [76, 2, 1, "", "decode"], [76, 2, 1, "", "encode"], [76, 4, 1, "", "repetitions"], [76, 2, 1, "", "serialize"]], "hermespy.fec.scrambler": [[79, 1, 1, "", "PseudoRandomGenerator"], [79, 1, 1, "", "Scrambler3GPP"], [79, 1, 1, "", "Scrambler80211a"]], "hermespy.fec.scrambler.PseudoRandomGenerator": [[79, 2, 1, "", "generate"], [79, 2, 1, "", "generate_sequence"], [79, 2, 1, "", "reset"]], "hermespy.fec.scrambler.Scrambler3GPP": [[79, 2, 1, "", "Deserialize"], [79, 4, 1, "", "bit_block_size"], [79, 4, 1, "", "code_block_size"], [79, 2, 1, "", "decode"], [79, 2, 1, "", "encode"], [79, 2, 1, "", "serialize"]], "hermespy.fec.scrambler.Scrambler80211a": [[79, 2, 1, "", "Deserialize"], [79, 4, 1, "", "bit_block_size"], [79, 4, 1, "", "code_block_size"], [79, 2, 1, "", "decode"], [79, 2, 1, "", "encode"], [79, 4, 1, "", "seed"], [79, 2, 1, "", "serialize"]], "hermespy.hardware_loop": [[95, 0, 0, "-", "visualizers"]], "hermespy.hardware_loop.audio.device": [[81, 1, 1, "", "AudioAntenna"], [81, 1, 1, "", "AudioDevice"], [81, 1, 1, "", "AudioDeviceAntennas"], [81, 1, 1, "", "AudioPlaybackPort"], [81, 1, 1, "", "AudioPort"], [81, 1, 1, "", "AudioRecordPort"]], "hermespy.hardware_loop.audio.device.AudioAntenna": [[81, 2, 1, "", "copy"], [81, 2, 1, "", "local_characteristics"]], "hermespy.hardware_loop.audio.device.AudioDevice": [[81, 2, 1, "", "Deserialize"], [81, 4, 1, "", "antennas"], [81, 4, 1, "", "carrier_frequency"], [81, 4, 1, "", "max_sampling_rate"], [81, 4, 1, "", "playback_channels"], [81, 4, 1, "", "playback_device"], [81, 4, 1, "", "record_channels"], [81, 4, 1, "", "record_device"], [81, 4, 1, "", "sampling_rate"], [81, 2, 1, "", "serialize"], [81, 2, 1, "", "state"], [81, 2, 1, "", "trigger"]], "hermespy.hardware_loop.audio.device.AudioDeviceAntennas": [[81, 4, 1, "", "num_antennas"], [81, 4, 1, "", "num_receive_antennas"], [81, 4, 1, "", "num_transmit_antennas"], [81, 4, 1, "", "ports"], [81, 4, 1, "", "receive_ports"], [81, 4, 1, "", "transmit_ports"]], "hermespy.hardware_loop.audio.device.AudioPlaybackPort": [[81, 4, 1, "", "channel"]], "hermespy.hardware_loop.audio.device.AudioPort": [[81, 4, 1, "", "channel"]], "hermespy.hardware_loop.audio.device.AudioRecordPort": [[81, 4, 1, "", "channel"]], "hermespy.hardware_loop.audio.scenario": [[82, 1, 1, "", "AudioScenario"]], "hermespy.hardware_loop.calibration.antennas": [[83, 1, 1, "", "ScalarAntennaCalibration"]], "hermespy.hardware_loop.calibration.antennas.ScalarAntennaCalibration": [[83, 2, 1, "", "Deserialize"], [83, 2, 1, "", "Estimate"], [83, 2, 1, "", "correct_reception"], [83, 2, 1, "", "correct_transmission"], [83, 4, 1, "", "receive_correction_weights"], [83, 2, 1, "", "serialize"], [83, 4, 1, "", "transmit_correction_weights"]], "hermespy.hardware_loop.calibration.delay": [[84, 1, 1, "", "DelayCalibration"]], "hermespy.hardware_loop.calibration.delay.DelayCalibration": [[84, 2, 1, "", "Deserialize"], [84, 2, 1, "", "Estimate"], [84, 4, 1, "", "delay"], [84, 2, 1, "", "serialize"]], "hermespy.hardware_loop.calibration.leakage": [[85, 1, 1, "", "SelectiveLeakageCalibration"]], "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration": [[85, 2, 1, "", "Deserialize"], [85, 2, 1, "", "LeastSquaresEstimate"], [85, 2, 1, "", "MMSEEstimate"], [85, 4, 1, "", "delay"], [85, 2, 1, "", "estimate_delay"], [85, 4, 1, "", "leakage_response"], [85, 2, 1, "", "plot"], [85, 2, 1, "", "predict_leakage"], [85, 2, 1, "", "remove_leakage"], [85, 4, 1, "", "sampling_rate"], [85, 2, 1, "", "serialize"]], "hermespy.hardware_loop.hardware_loop": [[86, 1, 1, "", "HardwareLoop"], [87, 1, 1, "", "HardwareLoopPlot"], [86, 1, 1, "", "HardwareLoopSample"], [86, 1, 1, "", "IterationPriority"]], "hermespy.hardware_loop.hardware_loop.HardwareLoop": [[86, 2, 1, "", "add_dimension"], [86, 2, 1, "", "add_evaluator"], [86, 2, 1, "", "add_plot"], [86, 2, 1, "", "add_post_drop_hook"], [86, 2, 1, "", "add_pre_drop_hook"], [86, 2, 1, "", "evaluator_index"], [86, 4, 1, "", "evaluators"], [86, 4, 1, "", "iteration_priority"], [86, 3, 1, "", "manual_triggering"], [86, 2, 1, "", "new_dimension"], [86, 4, 1, "", "num_evaluators"], [86, 3, 1, "", "plot_information"], [86, 4, 1, "", "post_drop_hooks"], [86, 4, 1, "", "pre_drop_hooks"], [86, 3, 1, "", "record_drops"], [86, 2, 1, "", "replay"], [86, 2, 1, "", "run"]], "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot": [[87, 4, 1, "", "_default_title"], [87, 2, 1, "", "_initial_plot"], [87, 2, 1, "", "_prepare_plot"], [87, 2, 1, "", "_update_plot"], [87, 4, 1, "", "hardware_loop"], [87, 2, 1, "", "prepare_plot"], [87, 4, 1, "", "title"], [87, 2, 1, "", "update_plot"]], "hermespy.hardware_loop.hardware_loop.HardwareLoopSample": [[86, 4, 1, "", "artifacts"], [86, 4, 1, "", "drop"], [86, 4, 1, "", "evaluations"]], "hermespy.hardware_loop.hardware_loop.IterationPriority": [[86, 3, 1, "", "DROPS"], [86, 3, 1, "", "GRID"]], "hermespy.hardware_loop.physical_device": [[83, 1, 1, "", "AntennaCalibration"], [89, 1, 1, "", "CT"], [89, 1, 1, "", "Calibration"], [84, 1, 1, "", "DelayCalibrationBase"], [85, 1, 1, "", "LeakageCalibrationBase"], [83, 1, 1, "", "NoAntennaCalibration"], [84, 1, 1, "", "NoDelayCalibration"], [85, 1, 1, "", "NoLeakageCalibration"], [89, 1, 1, "", "PDST"], [89, 1, 1, "", "PDT"], [89, 1, 1, "", "PhysicalDevice"], [89, 1, 1, "", "PhysicalDeviceState"]], "hermespy.hardware_loop.physical_device.AntennaCalibration": [[83, 2, 1, "", "correct_reception"], [83, 2, 1, "", "correct_transmission"], [83, 3, 1, "", "hdf_group_name"]], "hermespy.hardware_loop.physical_device.Calibration": [[89, 2, 1, "", "Load"], [89, 4, 1, "", "device"], [89, 3, 1, "", "hdf_group_name"], [89, 2, 1, "", "save"]], "hermespy.hardware_loop.physical_device.DelayCalibrationBase": [[84, 2, 1, "", "correct_receive_delay"], [84, 2, 1, "", "correct_transmit_delay"], [84, 4, 1, "", "delay"], [84, 3, 1, "", "hdf_group_name"]], "hermespy.hardware_loop.physical_device.LeakageCalibrationBase": [[85, 3, 1, "", "hdf_group_name"], [85, 2, 1, "", "predict_leakage"], [85, 2, 1, "", "remove_leakage"]], "hermespy.hardware_loop.physical_device.NoAntennaCalibration": [[83, 2, 1, "", "Deserialize"], [83, 2, 1, "", "correct_reception"], [83, 2, 1, "", "correct_transmission"], [83, 2, 1, "", "serialize"]], "hermespy.hardware_loop.physical_device.NoDelayCalibration": [[84, 2, 1, "", "Deserialize"], [84, 2, 1, "", "correct_receive_delay"], [84, 2, 1, "", "correct_transmit_delay"], [84, 4, 1, "", "delay"], [84, 2, 1, "", "serialize"]], "hermespy.hardware_loop.physical_device.NoLeakageCalibration": [[85, 2, 1, "", "Deserialize"], [85, 2, 1, "", "predict_leakage"], [85, 2, 1, "", "remove_leakage"], [85, 2, 1, "", "serialize"]], "hermespy.hardware_loop.physical_device.PhysicalDevice": [[89, 4, 1, "", "adaptive_sampling"], [89, 4, 1, "", "antenna_calibration"], [89, 4, 1, "", "delay_calibration"], [89, 2, 1, "", "estimate_noise_power"], [89, 4, 1, "", "leakage_calibration"], [89, 2, 1, "", "load_calibration"], [89, 4, 1, "", "lowpass_bandwidth"], [89, 4, 1, "", "lowpass_filter"], [89, 4, 1, "", "max_receive_delay"], [89, 4, 1, "", "max_sampling_rate"], [89, 4, 1, "", "noise_power"], [89, 2, 1, "", "process_input"], [89, 2, 1, "", "receive"], [89, 2, 1, "", "save_calibration"], [89, 2, 1, "", "serialize"], [89, 2, 1, "", "transmit"], [89, 2, 1, "", "trigger"], [89, 2, 1, "", "trigger_direct"], [89, 4, 1, "", "velocity"]], "hermespy.hardware_loop.physical_device_dummy": [[90, 1, 1, "", "PhysicalDeviceDummy"], [90, 1, 1, "", "PhysicalDeviceDummyState"], [91, 1, 1, "", "PhysicalScenarioDummy"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy": [[90, 2, 1, "", "Deserialize"], [90, 4, 1, "", "max_sampling_rate"], [90, 2, 1, "", "process_input"], [90, 2, 1, "", "receive"], [90, 4, 1, "", "receive_transmission"], [90, 2, 1, "", "state"], [90, 2, 1, "", "transmit"], [90, 2, 1, "", "trigger"], [90, 2, 1, "", "trigger_direct"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy": [[91, 2, 1, "", "add_device"], [91, 2, 1, "", "receive_devices"]], "hermespy.hardware_loop.scenario": [[92, 1, 1, "", "PhysicalScenario"], [92, 1, 1, "", "PhysicalScenarioType"]], "hermespy.hardware_loop.scenario.PhysicalScenario": [[92, 2, 1, "", "add_device"], [92, 2, 1, "", "receive_devices"], [92, 2, 1, "", "trigger_direct"]], "hermespy.hardware_loop.uhd.system": [[93, 1, 1, "", "UsrpSystem"]], "hermespy.hardware_loop.uhd.system.UsrpSystem": [[93, 2, 1, "", "add_device"], [93, 2, 1, "", "new_device"]], "hermespy.hardware_loop.uhd.usrp": [[94, 1, 1, "", "UsrpAntennas"], [94, 1, 1, "", "UsrpDevice"]], "hermespy.hardware_loop.uhd.usrp.UsrpAntennas": [[94, 4, 1, "", "device"], [94, 4, 1, "", "num_ports"], [94, 4, 1, "", "num_receive_antennas"], [94, 4, 1, "", "num_receive_ports"], [94, 4, 1, "", "num_transmit_antennas"], [94, 4, 1, "", "num_transmit_ports"], [94, 4, 1, "", "ports"], [94, 4, 1, "", "receive_ports"], [94, 4, 1, "", "transmit_ports"]], "hermespy.hardware_loop.uhd.usrp.UsrpDevice": [[94, 2, 1, "", "Deserialize"], [94, 4, 1, "", "antennas"], [94, 4, 1, "", "carrier_frequency"], [94, 4, 1, "", "ip"], [94, 4, 1, "", "max_sampling_rate"], [94, 4, 1, "", "num_appended_zeros"], [94, 4, 1, "", "num_prepeneded_zeros"], [94, 4, 1, "", "num_receive_antenna_ports"], [94, 4, 1, "", "num_transmit_antenna_ports"], [94, 4, 1, "", "port"], [94, 4, 1, "", "rx_gain"], [94, 4, 1, "", "sampling_rate"], [94, 4, 1, "", "scale_transmission"], [94, 4, 1, "", "selected_receive_ports"], [94, 4, 1, "", "selected_transmit_ports"], [94, 2, 1, "", "serialize"], [94, 2, 1, "", "state"], [94, 2, 1, "", "trigger"], [94, 4, 1, "", "tx_gain"]], "hermespy.hardware_loop.visualizers": [[95, 1, 1, "", "ArtifactPlot"], [95, 1, 1, "", "DeviceReceptionPlot"], [95, 1, 1, "", "DeviceTransmissionPlot"], [95, 1, 1, "", "EvaluationPlot"], [95, 1, 1, "", "EyePlot"], [95, 1, 1, "", "HardwareLoopDevicePlot"], [95, 1, 1, "", "HardwareLoopEvaluatorPlot"], [95, 1, 1, "", "RadarRangePlot"], [95, 1, 1, "", "ReceivedConstellationPlot"], [95, 1, 1, "", "SignalPlot"]], "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot": [[95, 4, 1, "", "device"]], "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot": [[95, 4, 1, "", "evaluator"], [95, 4, 1, "", "evaluator_index"]], "hermespy.hardware_loop.visualizers.RadarRangePlot": [[95, 4, 1, "", "radar"]], "hermespy.hardware_loop.visualizers.SignalPlot": [[95, 4, 1, "", "space"]], "hermespy.jcas.jcas": [[97, 1, 1, "", "DuplexJCASOperator"], [97, 1, 1, "", "JCASReception"], [97, 1, 1, "", "JCASTransmission"]], "hermespy.jcas.jcas.DuplexJCASOperator": [[97, 2, 1, "", "Deserialize"], [97, 4, 1, "", "frame_duration"], [97, 4, 1, "", "sampling_rate"], [97, 2, 1, "", "serialize"]], "hermespy.jcas.jcas.JCASReception": [[97, 2, 1, "", "Deserialize"], [97, 2, 1, "", "serialize"]], "hermespy.jcas.jcas.JCASTransmission": [[97, 2, 1, "", "Deserialize"], [97, 2, 1, "", "serialize"]], "hermespy.jcas.matched_filtering": [[98, 1, 1, "", "MatchedFilterJcas"]], "hermespy.jcas.matched_filtering.MatchedFilterJcas": [[98, 2, 1, "", "Deserialize"], [98, 4, 1, "", "frame_duration"], [98, 4, 1, "", "max_range"], [98, 4, 1, "", "power"], [98, 4, 1, "", "range_resolution"], [98, 4, 1, "", "sampling_rate"], [98, 2, 1, "", "serialize"]], "hermespy.jcas.ofdm_radar": [[99, 1, 1, "", "OFDMRadar"]], "hermespy.jcas.ofdm_radar.OFDMRadar": [[99, 2, 1, "", "Deserialize"], [99, 4, 1, "", "max_range"], [99, 4, 1, "", "max_relative_doppler"], [99, 4, 1, "", "power"], [99, 4, 1, "", "range_resolution"], [99, 4, 1, "", "relative_doppler_resolution"]], "hermespy.modem.bits_source": [[100, 1, 1, "", "BitsSource"], [100, 1, 1, "", "RandomBitsSource"], [100, 1, 1, "", "StreamBitsSource"]], "hermespy.modem.bits_source.BitsSource": [[100, 2, 1, "", "generate_bits"]], "hermespy.modem.bits_source.RandomBitsSource": [[100, 2, 1, "", "Deserialize"], [100, 2, 1, "", "generate_bits"], [100, 2, 1, "", "serialize"]], "hermespy.modem.bits_source.StreamBitsSource": [[100, 2, 1, "", "Deserialize"], [100, 2, 1, "", "generate_bits"], [100, 2, 1, "", "serialize"]], "hermespy.modem.evaluators": [[104, 1, 1, "", "BitErrorArtifact"], [104, 1, 1, "", "BitErrorEvaluation"], [104, 1, 1, "", "BitErrorEvaluator"], [105, 1, 1, "", "BlockErrorArtifact"], [105, 1, 1, "", "BlockErrorEvaluation"], [105, 1, 1, "", "BlockErrorEvaluator"], [102, 1, 1, "", "CommunicationEvaluator"], [106, 1, 1, "", "ConstellationEVM"], [106, 1, 1, "", "EVMArtifact"], [106, 1, 1, "", "EVMEvaluation"], [102, 1, 1, "", "ErrorEvaluation"], [107, 1, 1, "", "FrameErrorArtifact"], [107, 1, 1, "", "FrameErrorEvaluation"], [107, 1, 1, "", "FrameErrorEvaluator"], [108, 1, 1, "", "ThroughputArtifact"], [108, 1, 1, "", "ThroughputEvaluation"], [108, 1, 1, "", "ThroughputEvaluator"]], "hermespy.modem.evaluators.BitErrorEvaluation": [[104, 2, 1, "", "artifact"], [104, 4, 1, "", "title"]], "hermespy.modem.evaluators.BitErrorEvaluator": [[104, 4, 1, "", "abbreviation"], [104, 2, 1, "", "evaluate"], [104, 4, 1, "", "title"]], "hermespy.modem.evaluators.BlockErrorEvaluation": [[105, 2, 1, "", "artifact"], [105, 4, 1, "", "title"]], "hermespy.modem.evaluators.BlockErrorEvaluator": [[105, 4, 1, "", "abbreviation"], [105, 2, 1, "", "evaluate"], [105, 4, 1, "", "title"]], "hermespy.modem.evaluators.CommunicationEvaluator": [[102, 2, 1, "", "Deserialize"], [102, 2, 1, "", "generate_result"], [102, 4, 1, "", "receiving_modem"], [102, 2, 1, "", "serialize"], [102, 4, 1, "", "transmitting_modem"]], "hermespy.modem.evaluators.ConstellationEVM": [[106, 4, 1, "", "abbreviation"], [106, 2, 1, "", "evaluate"], [106, 4, 1, "", "title"]], "hermespy.modem.evaluators.EVMEvaluation": [[106, 4, 1, "", "abbreviation"], [106, 2, 1, "", "artifact"], [106, 4, 1, "", "title"]], "hermespy.modem.evaluators.FrameErrorEvaluation": [[107, 2, 1, "", "artifact"], [107, 4, 1, "", "title"]], "hermespy.modem.evaluators.FrameErrorEvaluator": [[107, 4, 1, "", "abbreviation"], [107, 2, 1, "", "evaluate"], [107, 4, 1, "", "title"]], "hermespy.modem.evaluators.ThroughputEvaluation": [[108, 2, 1, "", "artifact"], [108, 4, 1, "", "title"]], "hermespy.modem.evaluators.ThroughputEvaluator": [[108, 4, 1, "", "abbreviation"], [108, 2, 1, "", "evaluate"], [108, 4, 1, "", "title"]], "hermespy.modem.frame_generator.frame_generator": [[109, 1, 1, "", "FrameGenerator"], [109, 1, 1, "", "FrameGeneratorStub"]], "hermespy.modem.frame_generator.frame_generator.FrameGenerator": [[109, 2, 1, "", "pack_frame"], [109, 2, 1, "", "unpack_frame"]], "hermespy.modem.frame_generator.frame_generator.FrameGeneratorStub": [[109, 2, 1, "", "Deserialize"], [109, 2, 1, "", "pack_frame"], [109, 2, 1, "", "serialize"], [109, 2, 1, "", "unpack_frame"]], "hermespy.modem.frame_generator.scapy": [[109, 1, 1, "", "FrameGeneratorScapy"]], "hermespy.modem.frame_generator.scapy.FrameGeneratorScapy": [[109, 2, 1, "", "pack_frame"], [109, 3, 1, "", "packet"], [109, 3, 1, "", "packet_type"], [109, 2, 1, "", "unpack_frame"]], "hermespy.modem.modem": [[112, 1, 1, "", "BaseModem"], [113, 1, 1, "", "CommunicationReception"], [114, 1, 1, "", "CommunicationReceptionFrame"], [115, 1, 1, "", "CommunicationTransmission"], [116, 1, 1, "", "CommunicationTransmissionFrame"], [117, 1, 1, "", "DuplexModem"], [118, 1, 1, "", "ReceivingModem"], [118, 1, 1, "", "ReceivingModemBase"], [119, 1, 1, "", "SimplexLink"], [120, 1, 1, "", "TransmittingModem"], [120, 1, 1, "", "TransmittingModemBase"]], "hermespy.modem.modem.BaseModem": [[112, 2, 1, "", "Deserialize"], [112, 4, 1, "", "encoder_manager"], [112, 4, 1, "", "frame_duration"], [112, 4, 1, "", "frame_generator"], [112, 4, 1, "", "samples_per_frame"], [112, 4, 1, "", "sampling_rate"], [112, 2, 1, "", "serialize"], [112, 4, 1, "", "symbol_duration"], [112, 4, 1, "", "waveform"]], "hermespy.modem.modem.CommunicationReception": [[113, 2, 1, "", "Deserialize"], [113, 4, 1, "", "bits"], [113, 4, 1, "", "encoded_bits"], [113, 4, 1, "", "equalized_symbols"], [113, 3, 1, "", "frames"], [113, 4, 1, "", "num_frames"], [113, 2, 1, "", "serialize"], [113, 4, 1, "", "symbols"]], "hermespy.modem.modem.CommunicationReceptionFrame": [[114, 2, 1, "", "Deserialize"], [114, 3, 1, "", "bit_block_size"], [114, 3, 1, "", "code_block_size"], [114, 3, 1, "", "decoded_bits"], [114, 3, 1, "", "decoded_signal"], [114, 3, 1, "", "decoded_symbols"], [114, 3, 1, "", "encoded_bits"], [114, 3, 1, "", "equalized_symbols"], [114, 2, 1, "", "serialize"], [114, 3, 1, "", "symbols"], [114, 3, 1, "", "timestamp"]], "hermespy.modem.modem.CommunicationTransmission": [[115, 2, 1, "", "Deserialize"], [115, 4, 1, "", "bits"], [115, 3, 1, "", "frames"], [115, 4, 1, "", "num_frames"], [115, 2, 1, "", "serialize"], [115, 4, 1, "", "symbols"]], "hermespy.modem.modem.CommunicationTransmissionFrame": [[116, 2, 1, "", "Deserialize"], [116, 3, 1, "", "bit_block_size"], [116, 3, 1, "", "bits"], [116, 3, 1, "", "code_block_size"], [116, 3, 1, "", "encoded_bits"], [116, 3, 1, "", "encoded_symbols"], [116, 2, 1, "", "serialize"], [116, 3, 1, "", "signal"], [116, 3, 1, "", "symbols"], [116, 3, 1, "", "timestamp"]], "hermespy.modem.modem.DuplexModem": [[117, 2, 1, "", "Deserialize"], [117, 2, 1, "", "serialize"]], "hermespy.modem.modem.ReceivingModem": [[118, 2, 1, "", "Deserialize"], [118, 4, 1, "", "power"], [118, 2, 1, "", "serialize"]], "hermespy.modem.modem.ReceivingModemBase": [[118, 2, 1, "", "_receive"], [118, 4, 1, "", "receive_signal_coding"], [118, 4, 1, "", "receive_symbol_coding"], [118, 2, 1, "", "serialize"]], "hermespy.modem.modem.SimplexLink": [[119, 2, 1, "", "Deserialize"], [119, 2, 1, "", "connect"], [119, 2, 1, "", "serialize"]], "hermespy.modem.modem.TransmittingModem": [[120, 2, 1, "", "Deserialize"], [120, 4, 1, "", "power"], [120, 2, 1, "", "serialize"]], "hermespy.modem.modem.TransmittingModemBase": [[120, 2, 1, "", "_transmit"], [120, 4, 1, "", "bits_source"], [120, 2, 1, "", "serialize"], [120, 4, 1, "", "transmit_signal_coding"], [120, 4, 1, "", "transmit_symbol_coding"]], "hermespy.modem.precoding.dft": [[122, 1, 1, "", "DFT"], [122, 1, 1, "", "DFTNorm"]], "hermespy.modem.precoding.dft.DFT": [[122, 2, 1, "", "Deserialize"], [122, 2, 1, "", "decode_symbols"], [122, 2, 1, "", "encode_symbols"], [122, 4, 1, "", "num_receive_input_symbols"], [122, 2, 1, "", "num_receive_output_streams"], [122, 4, 1, "", "num_receive_output_symbols"], [122, 2, 1, "", "num_transmit_input_streams"], [122, 4, 1, "", "num_transmit_input_symbols"], [122, 4, 1, "", "num_transmit_output_symbols"], [122, 2, 1, "", "serialize"]], "hermespy.modem.precoding.dft.DFTNorm": [[122, 3, 1, "", "BACKWARD"], [122, 3, 1, "", "FORWARD"], [122, 3, 1, "", "ORTHO"]], "hermespy.modem.precoding.ratio_combining": [[123, 1, 1, "", "MaximumRatioCombining"]], "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining": [[123, 2, 1, "", "Deserialize"], [123, 2, 1, "", "decode_symbols"], [123, 4, 1, "", "num_receive_input_symbols"], [123, 2, 1, "", "num_receive_output_streams"], [123, 4, 1, "", "num_receive_output_symbols"], [123, 2, 1, "", "serialize"]], "hermespy.modem.precoding.single_carrier": [[124, 1, 1, "", "SingleCarrier"]], "hermespy.modem.precoding.single_carrier.SingleCarrier": [[124, 2, 1, "", "Deserialize"], [124, 2, 1, "", "decode_symbols"], [124, 4, 1, "", "num_receive_input_symbols"], [124, 2, 1, "", "num_receive_output_streams"], [124, 4, 1, "", "num_receive_output_symbols"], [124, 2, 1, "", "serialize"]], "hermespy.modem.precoding.space_time_block_coding": [[125, 1, 1, "", "Alamouti"], [125, 1, 1, "", "Ganesan"]], "hermespy.modem.precoding.space_time_block_coding.Alamouti": [[125, 2, 1, "", "Deserialize"], [125, 2, 1, "", "decode_symbols"], [125, 2, 1, "", "encode_symbols"], [125, 4, 1, "", "num_receive_input_symbols"], [125, 2, 1, "", "num_receive_output_streams"], [125, 4, 1, "", "num_receive_output_symbols"], [125, 2, 1, "", "num_transmit_input_streams"], [125, 4, 1, "", "num_transmit_input_symbols"], [125, 4, 1, "", "num_transmit_output_symbols"], [125, 2, 1, "", "serialize"]], "hermespy.modem.precoding.space_time_block_coding.Ganesan": [[125, 2, 1, "", "Deserialize"], [125, 2, 1, "", "decode_symbols"], [125, 2, 1, "", "encode_symbols"], [125, 4, 1, "", "num_receive_input_symbols"], [125, 2, 1, "", "num_receive_output_streams"], [125, 4, 1, "", "num_receive_output_symbols"], [125, 2, 1, "", "num_transmit_input_streams"], [125, 4, 1, "", "num_transmit_input_symbols"], [125, 4, 1, "", "num_transmit_output_symbols"], [125, 2, 1, "", "serialize"]], "hermespy.modem.precoding.symbol_precoding": [[126, 1, 1, "", "ReceiveSymbolCoding"], [126, 1, 1, "", "ReceiveSymbolDecoder"], [126, 1, 1, "", "TransmitSymbolCoding"], [126, 1, 1, "", "TransmitSymbolEncoder"]], "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolCoding": [[126, 4, 1, "", "decode_rate"], [126, 2, 1, "", "decode_symbols"], [126, 2, 1, "", "num_decoded_blocks"]], "hermespy.modem.precoding.symbol_precoding.ReceiveSymbolDecoder": [[126, 4, 1, "", "decode_rate"], [126, 2, 1, "", "decode_symbols"], [126, 4, 1, "", "num_receive_input_symbols"], [126, 4, 1, "", "num_receive_output_symbols"]], "hermespy.modem.precoding.symbol_precoding.TransmitSymbolCoding": [[126, 4, 1, "", "encode_rate"], [126, 2, 1, "", "encode_symbols"], [126, 2, 1, "", "num_encoded_blocks"]], "hermespy.modem.precoding.symbol_precoding.TransmitSymbolEncoder": [[126, 4, 1, "", "encode_rate"], [126, 2, 1, "", "encode_symbols"], [126, 4, 1, "", "num_transmit_input_symbols"], [126, 4, 1, "", "num_transmit_output_symbols"]], "hermespy.modem.symbols": [[127, 1, 1, "", "StatedSymbols"], [127, 1, 1, "", "Symbols"], [127, 1, 1, "", "_ConstellationPlot"]], "hermespy.modem.symbols.StatedSymbols": [[127, 2, 1, "", "Deserialize"], [127, 2, 1, "", "copy"], [127, 2, 1, "", "dense_states"], [127, 4, 1, "", "num_transmit_streams"], [127, 2, 1, "", "serialize"], [127, 4, 1, "", "states"]], "hermespy.modem.symbols.Symbols": [[127, 2, 1, "", "Deserialize"], [127, 2, 1, "", "append_stream"], [127, 2, 1, "", "append_symbols"], [127, 2, 1, "", "copy"], [127, 4, 1, "", "num_blocks"], [127, 4, 1, "", "num_streams"], [127, 4, 1, "", "num_symbols"], [127, 4, 1, "", "plot_constellation"], [127, 4, 1, "", "raw"], [127, 2, 1, "", "serialize"]], "hermespy.modem.symbols._ConstellationPlot": [[127, 4, 1, "", "title"]], "hermespy.modem.tools.psk_qam_mapping": [[111, 1, 1, "", "PskQamMapping"]], "hermespy.modem.tools.psk_qam_mapping.PskQamMapping": [[111, 2, 1, "", "Deserialize"], [111, 3, 1, "", "bits_per_symbol"], [111, 2, 1, "", "detect_bits"], [111, 2, 1, "", "generate_pam_symbol_3gpp"], [111, 2, 1, "", "get_llr_3gpp"], [111, 2, 1, "", "get_mapping"], [111, 2, 1, "", "get_symbols"], [111, 3, 1, "", "mapping_available"], [111, 3, 1, "", "mapping_available_pam"], [111, 3, 1, "", "modulation_order"], [111, 2, 1, "", "serialize"], [111, 3, 1, "", "soft_output"]], "hermespy.modem.waveform": [[128, 1, 1, "", "CWT"], [129, 1, 1, "", "ChannelEqualization"], [130, 1, 1, "", "ChannelEstimation"], [128, 1, 1, "", "CommunicationWaveform"], [128, 1, 1, "", "ConfigurablePilotWaveform"], [128, 1, 1, "", "PilotCommunicationWaveform"], [131, 1, 1, "", "PilotSymbolSequence"], [132, 1, 1, "", "Synchronization"], [133, 1, 1, "", "ZeroForcingChannelEqualization"]], "hermespy.modem.waveform.ChannelEqualization": [[129, 2, 1, "", "Deserialize"], [129, 2, 1, "", "equalize_channel"], [129, 2, 1, "", "serialize"], [129, 4, 1, "", "waveform"]], "hermespy.modem.waveform.ChannelEstimation": [[130, 2, 1, "", "Deserialize"], [130, 2, 1, "", "estimate_channel"], [130, 2, 1, "", "serialize"], [130, 4, 1, "", "waveform"]], "hermespy.modem.waveform.CommunicationWaveform": [[128, 4, 1, "", "bandwidth"], [128, 4, 1, "", "bit_energy"], [128, 2, 1, "", "bits_per_frame"], [128, 4, 1, "", "bits_per_symbol"], [128, 4, 1, "", "channel_equalization"], [128, 4, 1, "", "channel_estimation"], [128, 2, 1, "", "data_rate"], [128, 2, 1, "", "demodulate"], [128, 2, 1, "", "equalize_symbols"], [128, 2, 1, "", "estimate_channel"], [128, 4, 1, "", "frame_duration"], [128, 2, 1, "", "map"], [128, 4, 1, "", "modem"], [128, 2, 1, "", "modulate"], [128, 4, 1, "", "modulation_order"], [128, 4, 1, "", "num_data_symbols"], [128, 4, 1, "", "oversampling_factor"], [128, 2, 1, "", "pick"], [128, 2, 1, "", "place"], [128, 4, 1, "", "power"], [128, 4, 1, "", "samples_per_frame"], [128, 4, 1, "", "sampling_rate"], [128, 2, 1, "", "serialize"], [128, 4, 1, "", "symbol_duration"], [128, 4, 1, "", "symbol_energy"], [128, 4, 1, "", "symbol_precoding_support"], [128, 3, 1, "", "symbol_type"], [128, 4, 1, "", "synchronization"], [128, 2, 1, "", "unmap"]], "hermespy.modem.waveform.ConfigurablePilotWaveform": [[128, 3, 1, "", "pilot_symbol_sequence"], [128, 2, 1, "", "pilot_symbols"], [128, 3, 1, "", "repeat_pilot_symbol_sequence"]], "hermespy.modem.waveform.PilotCommunicationWaveform": [[128, 4, 1, "", "pilot_signal"]], "hermespy.modem.waveform.PilotSymbolSequence": [[131, 4, 1, "", "sequence"]], "hermespy.modem.waveform.Synchronization": [[132, 2, 1, "", "Deserialize"], [132, 2, 1, "", "serialize"], [132, 2, 1, "", "synchronize"], [132, 4, 1, "", "waveform"]], "hermespy.modem.waveform.ZeroForcingChannelEqualization": [[133, 2, 1, "", "equalize_channel"]], "hermespy.modem.waveform_chirp_fsk": [[135, 1, 1, "", "ChirpFSKCorrelationSynchronization"], [135, 1, 1, "", "ChirpFSKSynchronization"], [135, 1, 1, "", "ChirpFSKWaveform"]], "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform": [[135, 2, 1, "", "Deserialize"], [135, 4, 1, "", "bandwidth"], [135, 4, 1, "", "bit_energy"], [135, 4, 1, "", "bits_per_symbol"], [135, 4, 1, "", "chirp_bandwidth"], [135, 4, 1, "", "chirp_duration"], [135, 4, 1, "", "chirps_in_frame"], [135, 2, 1, "", "demodulate"], [135, 4, 1, "", "frame_duration"], [135, 4, 1, "", "freq_difference"], [135, 4, 1, "", "guard_interval"], [135, 2, 1, "", "map"], [135, 2, 1, "", "modulate"], [135, 4, 1, "", "modulation_order"], [135, 4, 1, "", "num_data_chirps"], [135, 4, 1, "", "num_data_symbols"], [135, 4, 1, "", "num_pilot_chirps"], [135, 2, 1, "", "pick"], [135, 4, 1, "", "pilot_signal"], [135, 2, 1, "", "place"], [135, 4, 1, "", "power"], [135, 4, 1, "", "samples_in_chirp"], [135, 4, 1, "", "samples_per_frame"], [135, 4, 1, "", "sampling_rate"], [135, 2, 1, "", "serialize"], [135, 4, 1, "", "symbol_duration"], [135, 4, 1, "", "symbol_energy"], [135, 4, 1, "", "symbol_precoding_support"], [135, 3, 1, "", "symbol_type"], [135, 2, 1, "", "unmap"]], "hermespy.modem.waveform_correlation_synchronization": [[136, 1, 1, "", "CorrelationSynchronization"], [136, 1, 1, "", "PGT"]], "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization": [[136, 2, 1, "", "Deserialize"], [136, 4, 1, "", "guard_ratio"], [136, 2, 1, "", "serialize"], [136, 2, 1, "", "synchronize"], [136, 4, 1, "", "threshold"]], "hermespy.modem.waveform_single_carrier": [[138, 1, 1, "", "FMCWWaveform"], [137, 1, 1, "", "FilteredSingleCarrierWaveform"], [139, 1, 1, "", "RaisedCosineWaveform"], [140, 1, 1, "", "RectangularWaveform"], [137, 1, 1, "", "RolledOffSingleCarrierWaveform"], [141, 1, 1, "", "RootRaisedCosineWaveform"]], "hermespy.modem.waveform_single_carrier.FMCWWaveform": [[138, 2, 1, "", "Deserialize"], [138, 4, 1, "", "bandwidth"], [138, 4, 1, "", "chirp_duration"], [138, 4, 1, "", "chirp_slope"], [138, 2, 1, "", "serialize"]], "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform": [[137, 2, 1, "", "Deserialize"], [137, 4, 1, "", "bit_energy"], [137, 2, 1, "", "demodulate"], [137, 4, 1, "", "guard_interval"], [137, 2, 1, "", "map"], [137, 2, 1, "", "modulate"], [137, 4, 1, "", "modulation_order"], [137, 4, 1, "", "num_data_symbols"], [137, 4, 1, "", "num_guard_samples"], [137, 4, 1, "", "num_postamble_symbols"], [137, 4, 1, "", "num_preamble_symbols"], [137, 2, 1, "", "pick"], [137, 4, 1, "", "pilot_rate"], [137, 4, 1, "", "pilot_signal"], [137, 2, 1, "", "place"], [137, 2, 1, "", "plot_filter"], [137, 2, 1, "", "plot_filter_correlation"], [137, 4, 1, "", "power"], [137, 4, 1, "", "samples_per_frame"], [137, 4, 1, "", "sampling_rate"], [137, 2, 1, "", "serialize"], [137, 4, 1, "", "symbol_duration"], [137, 4, 1, "", "symbol_energy"], [137, 4, 1, "", "symbol_rate"], [137, 2, 1, "", "unmap"]], "hermespy.modem.waveform_single_carrier.RectangularWaveform": [[140, 4, 1, "", "bandwidth"], [140, 4, 1, "", "relative_bandwidth"], [140, 2, 1, "", "serialize"]], "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform": [[137, 4, 1, "", "bandwidth"], [137, 4, 1, "", "filter_length"], [137, 4, 1, "", "relative_bandwidth"], [137, 4, 1, "", "roll_off"], [137, 2, 1, "", "serialize"]], "hermespy.modem.waveforms.orthogonal.ocdm": [[150, 1, 1, "", "OCDMWaveform"]], "hermespy.modem.waveforms.orthogonal.ocdm.OCDMWaveform": [[150, 4, 1, "", "bandwidth"], [150, 4, 1, "", "sampling_rate"]], "hermespy.modem.waveforms.orthogonal.ofdm": [[152, 1, 1, "", "OFDMSynchronization"], [153, 1, 1, "", "OFDMWaveform"], [154, 1, 1, "", "SchmidlCoxPilotSection"], [155, 1, 1, "", "SchmidlCoxSynchronization"]], "hermespy.modem.waveforms.orthogonal.ofdm.OFDMWaveform": [[153, 4, 1, "", "bandwidth"], [153, 3, 1, "", "dc_suppression"], [153, 4, 1, "", "samples_per_frame"], [153, 4, 1, "", "sampling_rate"], [153, 2, 1, "", "serialize"], [153, 4, 1, "", "subcarrier_spacing"]], "hermespy.modem.waveforms.orthogonal.ofdm.SchmidlCoxSynchronization": [[155, 2, 1, "", "synchronize"]], "hermespy.modem.waveforms.orthogonal.otfs": [[156, 1, 1, "", "OTFSWaveform"]], "hermespy.modem.waveforms.orthogonal.waveform": [[143, 1, 1, "", "ElementType"], [143, 1, 1, "", "GridElement"], [144, 1, 1, "", "GridResource"], [145, 1, 1, "", "GridSection"], [147, 1, 1, "", "GridVisualization"], [146, 1, 1, "", "GuardSection"], [147, 1, 1, "", "OWT"], [147, 1, 1, "", "OrthogonalWaveform"], [148, 1, 1, "", "PilotSection"], [144, 1, 1, "", "PrefixType"], [149, 1, 1, "", "SymbolSection"]], "hermespy.modem.waveforms.orthogonal.waveform.ElementType": [[143, 3, 1, "", "DATA"], [143, 3, 1, "", "NULL"], [143, 3, 1, "", "REFERENCE"]], "hermespy.modem.waveforms.orthogonal.waveform.GridElement": [[143, 2, 1, "", "Deserialize"], [143, 3, 1, "", "repetitions"], [143, 2, 1, "", "serialize"], [143, 3, 1, "", "type"]], "hermespy.modem.waveforms.orthogonal.waveform.GridResource": [[144, 2, 1, "", "Deserialize"], [144, 3, 1, "", "elements"], [144, 4, 1, "", "mask"], [144, 4, 1, "", "num_references"], [144, 4, 1, "", "num_subcarriers"], [144, 4, 1, "", "num_symbols"], [144, 4, 1, "", "prefix_ratio"], [144, 3, 1, "", "prefix_type"], [144, 4, 1, "", "repetitions"], [144, 2, 1, "", "serialize"]], "hermespy.modem.waveforms.orthogonal.waveform.GridSection": [[145, 4, 1, "", "num_references"], [145, 4, 1, "", "num_repetitions"], [145, 4, 1, "", "num_samples"], [145, 4, 1, "", "num_subcarriers"], [145, 4, 1, "", "num_symbols"], [145, 4, 1, "", "num_words"], [145, 2, 1, "", "pick_samples"], [145, 2, 1, "", "pick_symbols"], [145, 2, 1, "", "place_samples"], [145, 2, 1, "", "place_symbols"], [145, 4, 1, "", "resource_mask"], [145, 4, 1, "", "sample_offset"], [145, 2, 1, "", "serialize"], [145, 4, 1, "", "wave"]], "hermespy.modem.waveforms.orthogonal.waveform.GridVisualization": [[147, 4, 1, "", "title"]], "hermespy.modem.waveforms.orthogonal.waveform.GuardSection": [[146, 2, 1, "", "Deserialize"], [146, 4, 1, "", "duration"], [146, 4, 1, "", "num_samples"], [146, 2, 1, "", "pick_samples"], [146, 2, 1, "", "place_samples"], [146, 2, 1, "", "serialize"]], "hermespy.modem.waveforms.orthogonal.waveform.OrthogonalWaveform": [[147, 2, 1, "", "Deserialize"], [147, 4, 1, "", "bit_energy"], [147, 2, 1, "", "demodulate"], [147, 4, 1, "", "grid_resources"], [147, 4, 1, "", "grid_structure"], [147, 2, 1, "", "map"], [147, 4, 1, "", "mapping"], [147, 2, 1, "", "modulate"], [147, 4, 1, "", "modulation_order"], [147, 4, 1, "", "num_data_symbols"], [147, 4, 1, "", "num_subcarriers"], [147, 2, 1, "", "pick"], [147, 4, 1, "", "pilot_section"], [147, 4, 1, "", "pilot_signal"], [147, 2, 1, "", "place"], [147, 4, 1, "", "plot_grid"], [147, 4, 1, "", "power"], [147, 4, 1, "", "references_per_frame"], [147, 4, 1, "", "resource_mask"], [147, 4, 1, "", "samples_per_frame"], [147, 2, 1, "", "serialize"], [147, 4, 1, "", "symbol_duration"], [147, 4, 1, "", "symbol_energy"], [147, 4, 1, "", "symbols_per_frame"], [147, 2, 1, "", "unmap"], [147, 4, 1, "", "words_per_frame"]], "hermespy.modem.waveforms.orthogonal.waveform.PilotSection": [[148, 2, 1, "", "Deserialize"], [148, 2, 1, "", "generate"], [148, 4, 1, "", "num_references"], [148, 4, 1, "", "num_repetitions"], [148, 4, 1, "", "num_samples"], [148, 4, 1, "", "num_subcarriers"], [148, 4, 1, "", "num_symbols"], [148, 4, 1, "", "num_words"], [148, 2, 1, "", "pick_samples"], [148, 4, 1, "", "pilot_elements"], [148, 2, 1, "", "place_samples"], [148, 2, 1, "", "place_symbols"], [148, 4, 1, "", "resource_mask"], [148, 4, 1, "", "sample_offset"], [148, 2, 1, "", "serialize"]], "hermespy.modem.waveforms.orthogonal.waveform.PrefixType": [[144, 3, 1, "", "CYCLIC"], [144, 3, 1, "", "NONE"], [144, 3, 1, "", "ZEROPAD"]], "hermespy.modem.waveforms.orthogonal.waveform.SymbolSection": [[149, 2, 1, "", "Deserialize"], [149, 4, 1, "", "num_references"], [149, 4, 1, "", "num_samples"], [149, 4, 1, "", "num_subcarriers"], [149, 4, 1, "", "num_symbols"], [149, 4, 1, "", "num_words"], [149, 3, 1, "", "pattern"], [149, 2, 1, "", "pick_samples"], [149, 2, 1, "", "place_samples"], [149, 4, 1, "", "resource_mask"], [149, 2, 1, "", "serialize"]], "hermespy.radar.cube": [[157, 1, 1, "", "RadarCube"], [157, 1, 1, "", "_AnglePlot"], [157, 1, 1, "", "_RangePlot"], [157, 1, 1, "", "_RangeVelocityPlot"]], "hermespy.radar.cube.RadarCube": [[157, 2, 1, "", "Deserialize"], [157, 4, 1, "", "angle_bins"], [157, 4, 1, "", "carrier_frequency"], [157, 4, 1, "", "data"], [157, 4, 1, "", "doppler_bins"], [157, 2, 1, "", "normalize_power"], [157, 4, 1, "", "plot_angles"], [157, 4, 1, "", "plot_range"], [157, 4, 1, "", "plot_range_velocity"], [157, 4, 1, "", "range_bins"], [157, 2, 1, "", "serialize"], [157, 4, 1, "", "velocity_bins"]], "hermespy.radar.cube._AnglePlot": [[157, 4, 1, "", "title"]], "hermespy.radar.cube._RangePlot": [[157, 4, 1, "", "title"]], "hermespy.radar.cube._RangeVelocityPlot": [[157, 4, 1, "", "title"]], "hermespy.radar.detection": [[158, 1, 1, "", "MaxDetector"], [159, 1, 1, "", "PointDetection"], [160, 1, 1, "", "RadarDetector"], [161, 1, 1, "", "RadarPointCloud"], [162, 1, 1, "", "ThresholdDetector"]], "hermespy.radar.detection.MaxDetector": [[158, 2, 1, "", "Deserialize"], [158, 2, 1, "", "detect"], [158, 2, 1, "", "serialize"]], "hermespy.radar.detection.PointDetection": [[159, 2, 1, "", "Deserialize"], [159, 2, 1, "", "FromSpherical"], [159, 4, 1, "", "position"], [159, 4, 1, "", "power"], [159, 2, 1, "", "serialize"], [159, 4, 1, "", "velocity"]], "hermespy.radar.detection.RadarDetector": [[160, 2, 1, "", "detect"]], "hermespy.radar.detection.RadarPointCloud": [[161, 2, 1, "", "Deserialize"], [161, 2, 1, "", "add_point"], [161, 2, 1, "", "create_figure"], [161, 4, 1, "", "max_range"], [161, 4, 1, "", "num_points"], [161, 4, 1, "", "points"], [161, 2, 1, "", "serialize"], [161, 4, 1, "", "title"]], "hermespy.radar.detection.ThresholdDetector": [[162, 2, 1, "", "Deserialize"], [162, 2, 1, "", "detect"], [162, 4, 1, "", "min_power"], [162, 4, 1, "", "normalize"], [162, 4, 1, "", "peak_detection"], [162, 2, 1, "", "serialize"]], "hermespy.radar.evaluators": [[163, 1, 1, "", "DetectionProbArtifact"], [163, 1, 1, "", "DetectionProbEvaluator"], [163, 1, 1, "", "DetectionProbabilityEvaluation"], [164, 1, 1, "", "RadarEvaluator"], [165, 1, 1, "", "ReceiverOperatingCharacteristic"], [165, 1, 1, "", "RocArtifact"], [165, 1, 1, "", "RocEvaluation"], [165, 1, 1, "", "RocEvaluationResult"], [166, 1, 1, "", "RootMeanSquareArtifact"], [166, 1, 1, "", "RootMeanSquareError"], [166, 1, 1, "", "RootMeanSquareErrorResult"], [166, 1, 1, "", "RootMeanSquareEvaluation"]], "hermespy.radar.evaluators.DetectionProbEvaluator": [[163, 4, 1, "", "abbreviation"], [163, 2, 1, "", "evaluate"], [163, 2, 1, "", "generate_result"], [163, 4, 1, "", "radar"], [163, 4, 1, "", "title"]], "hermespy.radar.evaluators.DetectionProbabilityEvaluation": [[163, 2, 1, "", "artifact"]], "hermespy.radar.evaluators.RadarEvaluator": [[164, 2, 1, "", "generate_result"], [164, 4, 1, "", "radar_channel"], [164, 4, 1, "", "receiving_device"], [164, 4, 1, "", "receiving_radar"], [164, 4, 1, "", "transmitting_device"]], "hermespy.radar.evaluators.ReceiverOperatingCharacteristic": [[165, 2, 1, "", "FromFile"], [165, 2, 1, "", "FromScenario"], [165, 2, 1, "", "FromScenarios"], [165, 2, 1, "", "GenerateResult"], [165, 4, 1, "", "abbreviation"], [165, 2, 1, "", "evaluate"], [165, 2, 1, "", "generate_result"], [165, 4, 1, "", "title"]], "hermespy.radar.evaluators.RocArtifact": [[165, 4, 1, "", "h0_value"], [165, 4, 1, "", "h1_value"], [165, 2, 1, "", "to_scalar"]], "hermespy.radar.evaluators.RocEvaluation": [[165, 2, 1, "", "artifact"], [165, 4, 1, "", "cube_h0"], [165, 4, 1, "", "cube_h1"]], "hermespy.radar.evaluators.RocEvaluationResult": [[165, 2, 1, "", "to_array"]], "hermespy.radar.evaluators.RootMeanSquareArtifact": [[166, 4, 1, "", "cummulation"], [166, 4, 1, "", "num_errors"], [166, 2, 1, "", "to_scalar"]], "hermespy.radar.evaluators.RootMeanSquareError": [[166, 4, 1, "", "abbreviation"], [166, 2, 1, "", "evaluate"], [166, 2, 1, "", "generate_result"], [166, 4, 1, "", "title"]], "hermespy.radar.evaluators.RootMeanSquareEvaluation": [[166, 2, 1, "", "artifact"]], "hermespy.radar.fmcw": [[167, 1, 1, "", "FMCW"]], "hermespy.radar.fmcw.FMCW": [[167, 2, 1, "", "Deserialize"], [167, 4, 1, "", "adc_sampling_rate"], [167, 4, 1, "", "bandwidth"], [167, 4, 1, "", "chirp_duration"], [167, 4, 1, "", "energy"], [167, 2, 1, "", "estimate"], [167, 4, 1, "", "frame_duration"], [167, 4, 1, "", "max_range"], [167, 4, 1, "", "max_relative_doppler"], [167, 4, 1, "", "num_chirps"], [167, 2, 1, "", "ping"], [167, 4, 1, "", "power"], [167, 4, 1, "", "pulse_rep_interval"], [167, 4, 1, "", "range_resolution"], [167, 4, 1, "", "relative_doppler_bins"], [167, 4, 1, "", "relative_doppler_resolution"], [167, 4, 1, "", "sampling_rate"], [167, 2, 1, "", "serialize"], [167, 4, 1, "", "slope"]], "hermespy.radar.radar": [[170, 1, 1, "", "RRT"], [171, 1, 1, "", "RTT"], [169, 1, 1, "", "Radar"], [169, 1, 1, "", "RadarBase"], [170, 1, 1, "", "RadarReception"], [171, 1, 1, "", "RadarTransmission"], [172, 1, 1, "", "RadarWaveform"]], "hermespy.radar.radar.Radar": [[169, 2, 1, "", "_receive"], [169, 2, 1, "", "_transmit"], [169, 4, 1, "", "frame_duration"], [169, 4, 1, "", "max_range"], [169, 4, 1, "", "power"], [169, 4, 1, "", "sampling_rate"], [169, 2, 1, "", "serialize"], [169, 2, 1, "", "velocity_resolution"], [169, 4, 1, "", "waveform"]], "hermespy.radar.radar.RadarBase": [[169, 4, 1, "", "detector"], [169, 4, 1, "", "receive_beamformer"], [169, 2, 1, "", "serialize"]], "hermespy.radar.radar.RadarReception": [[170, 2, 1, "", "Deserialize"], [170, 4, 1, "", "cloud"], [170, 4, 1, "", "cube"], [170, 2, 1, "", "serialize"]], "hermespy.radar.radar.RadarWaveform": [[172, 4, 1, "", "energy"], [172, 2, 1, "", "estimate"], [172, 4, 1, "", "frame_duration"], [172, 4, 1, "", "max_range"], [172, 4, 1, "", "max_relative_doppler"], [172, 2, 1, "", "ping"], [172, 4, 1, "", "power"], [172, 4, 1, "", "range_bins"], [172, 4, 1, "", "range_resolution"], [172, 4, 1, "", "relative_doppler_bins"], [172, 4, 1, "", "relative_doppler_resolution"], [172, 4, 1, "", "sampling_rate"]], "hermespy.simulation.animation": [[173, 1, 1, "", "LinearTrajectory"], [173, 1, 1, "", "Moveable"], [173, 1, 1, "", "StaticTrajectory"], [173, 1, 1, "", "Trajectory"], [173, 1, 1, "", "TrajectorySample"]], "hermespy.simulation.animation.LinearTrajectory": [[173, 2, 1, "", "Deserialize"], [173, 4, 1, "", "max_timestamp"], [173, 2, 1, "", "sample_orientation"], [173, 2, 1, "", "sample_translation"], [173, 2, 1, "", "sample_velocity"], [173, 2, 1, "", "serialize"]], "hermespy.simulation.animation.Moveable": [[173, 2, 1, "", "Deserialize"], [173, 4, 1, "", "max_trajectory_timestamp"], [173, 2, 1, "", "serialize"], [173, 4, 1, "", "trajectory"]], "hermespy.simulation.animation.StaticTrajectory": [[173, 2, 1, "", "Deserialize"], [173, 2, 1, "", "From_Translation"], [173, 4, 1, "", "max_timestamp"], [173, 4, 1, "", "pose"], [173, 2, 1, "", "sample"], [173, 2, 1, "", "sample_orientation"], [173, 2, 1, "", "sample_translation"], [173, 2, 1, "", "sample_velocity"], [173, 2, 1, "", "serialize"], [173, 4, 1, "", "velocity"]], "hermespy.simulation.animation.Trajectory": [[173, 2, 1, "", "lookat"], [173, 2, 1, "", "lookat_disable"], [173, 2, 1, "", "lookat_enable"], [173, 4, 1, "", "max_timestamp"], [173, 2, 1, "", "sample"], [173, 2, 1, "", "sample_orientation"], [173, 2, 1, "", "sample_translation"], [173, 2, 1, "", "sample_velocity"]], "hermespy.simulation.animation.TrajectorySample": [[173, 4, 1, "", "pose"], [173, 4, 1, "", "timestamp"], [173, 4, 1, "", "velocity"]], "hermespy.simulation.antennas": [[175, 1, 1, "", "SimulatedAntenna"], [176, 1, 1, "", "SimulatedAntennaArray"], [177, 1, 1, "", "SimulatedAntennaPort"], [178, 1, 1, "", "SimulatedCustomArray"], [179, 1, 1, "", "SimulatedDipole"], [180, 1, 1, "", "SimulatedIdealAntenna"], [181, 1, 1, "", "SimulatedLinearAntenna"], [182, 1, 1, "", "SimulatedPatchAntenna"], [183, 1, 1, "", "SimulatedUniformArray"]], "hermespy.simulation.antennas.SimulatedAntenna": [[175, 2, 1, "", "receive"], [175, 2, 1, "", "transmit"], [175, 4, 1, "", "weight"]], "hermespy.simulation.antennas.SimulatedAntennaArray": [[176, 2, 1, "", "analog_digital_conversion"], [176, 2, 1, "", "antenna_state"], [176, 2, 1, "", "plot_pattern"], [176, 2, 1, "", "receive"], [176, 2, 1, "", "rf_chain_modified"], [176, 2, 1, "", "transmit"], [176, 2, 1, "", "visualize_far_field_pattern"]], "hermespy.simulation.antennas.SimulatedAntennaPort": [[177, 4, 1, "", "rf_chain"]], "hermespy.simulation.antennas.SimulatedCustomArray": [[178, 2, 1, "", "add_antenna"], [178, 2, 1, "", "add_port"], [178, 2, 1, "", "remove_port"]], "hermespy.simulation.beamforming": [[184, 1, 1, "", "DeviceFocus"]], "hermespy.simulation.beamforming.DeviceFocus": [[184, 2, 1, "", "Deserialize"], [184, 2, 1, "", "copy"], [184, 4, 1, "", "focused_device"], [184, 2, 1, "", "serialize"], [184, 2, 1, "", "spherical_angles"]], "hermespy.simulation.coupling.coupling": [[186, 1, 1, "", "Coupling"]], "hermespy.simulation.coupling.coupling.Coupling": [[186, 4, 1, "", "device"], [186, 2, 1, "", "receive"], [186, 2, 1, "", "transmit"]], "hermespy.simulation.coupling.impedance": [[187, 1, 1, "", "ImpedanceCoupling"]], "hermespy.simulation.coupling.impedance.ImpedanceCoupling": [[187, 2, 1, "", "Deserialize"], [187, 4, 1, "", "matching_impedance"], [187, 4, 1, "", "receive_correlation"], [187, 4, 1, "", "receive_impedance"], [187, 2, 1, "", "serialize"], [187, 4, 1, "", "transmit_correlation"], [187, 4, 1, "", "transmit_impedance"]], "hermespy.simulation.coupling.perfect": [[188, 1, 1, "", "PerfectCoupling"]], "hermespy.simulation.coupling.perfect.PerfectCoupling": [[188, 2, 1, "", "Deserialize"], [188, 2, 1, "", "serialize"]], "hermespy.simulation.drop": [[189, 1, 1, "", "SimulatedDrop"]], "hermespy.simulation.drop.SimulatedDrop": [[189, 2, 1, "", "Deserialize"], [189, 4, 1, "", "channel_realizations"], [189, 2, 1, "", "serialize"]], "hermespy.simulation.evaluators.interference": [[190, 1, 1, "", "SI"], [190, 1, 1, "", "SSINR"]], "hermespy.simulation.evaluators.interference.SI": [[190, 2, 1, "", "Deserialize"], [190, 4, 1, "", "abbreviation"], [190, 2, 1, "", "evaluate"], [190, 2, 1, "", "generate_result"], [190, 2, 1, "", "serialize"], [190, 4, 1, "", "title"]], "hermespy.simulation.evaluators.interference.SSINR": [[190, 4, 1, "", "abbreviation"], [190, 2, 1, "", "evaluate"], [190, 4, 1, "", "title"]], "hermespy.simulation.isolation.isolation": [[193, 1, 1, "", "Isolation"]], "hermespy.simulation.isolation.isolation.Isolation": [[193, 4, 1, "", "device"], [193, 2, 1, "", "leak"]], "hermespy.simulation.isolation.perfect": [[194, 1, 1, "", "PerfectIsolation"]], "hermespy.simulation.isolation.perfect.PerfectIsolation": [[194, 2, 1, "", "Deserialize"], [194, 2, 1, "", "leak"], [194, 2, 1, "", "serialize"]], "hermespy.simulation.isolation.selective": [[195, 1, 1, "", "SelectiveLeakage"]], "hermespy.simulation.isolation.selective.SelectiveLeakage": [[195, 2, 1, "", "Deserialize"], [195, 2, 1, "", "Normal"], [195, 4, 1, "", "leakage_response"], [195, 2, 1, "", "serialize"]], "hermespy.simulation.isolation.specific": [[196, 1, 1, "", "SpecificIsolation"]], "hermespy.simulation.isolation.specific.SpecificIsolation": [[196, 2, 1, "", "Deserialize"], [196, 4, 1, "", "isolation"], [196, 2, 1, "", "serialize"], [196, 4, 1, "", "title"]], "hermespy.simulation.modem.noise": [[197, 1, 1, "", "CommunicationNoiseLevel"], [198, 1, 1, "", "EBN0"], [199, 1, 1, "", "ESN0"]], "hermespy.simulation.modem.noise.CommunicationNoiseLevel": [[197, 4, 1, "", "level"], [197, 4, 1, "", "reference"]], "hermespy.simulation.modem.noise.EBN0": [[198, 2, 1, "", "get_power"], [198, 4, 1, "", "title"]], "hermespy.simulation.modem.noise.ESN0": [[199, 2, 1, "", "get_power"], [199, 4, 1, "", "title"]], "hermespy.simulation.noise.level": [[201, 1, 1, "", "N0"], [200, 1, 1, "", "NoiseLevel"], [202, 1, 1, "", "SNR"]], "hermespy.simulation.noise.level.N0": [[201, 2, 1, "", "Deserialize"], [201, 2, 1, "", "get_power"], [201, 4, 1, "", "level"], [201, 4, 1, "", "power"], [201, 2, 1, "", "serialize"], [201, 4, 1, "", "title"]], "hermespy.simulation.noise.level.NoiseLevel": [[200, 2, 1, "", "get_power"], [200, 4, 1, "", "level"]], "hermespy.simulation.noise.level.SNR": [[202, 2, 1, "", "Deserialize"], [202, 2, 1, "", "get_power"], [202, 4, 1, "", "level"], [202, 4, 1, "", "reference"], [202, 2, 1, "", "serialize"], [202, 4, 1, "", "snr"], [202, 4, 1, "", "title"]], "hermespy.simulation.noise.model": [[203, 1, 1, "", "AWGN"], [204, 1, 1, "", "AWGNRealization"], [200, 1, 1, "", "NRT"], [200, 1, 1, "", "NoiseModel"], [200, 1, 1, "", "NoiseRealization"]], "hermespy.simulation.noise.model.AWGN": [[203, 2, 1, "", "Deserialize"], [203, 2, 1, "", "realize"], [203, 2, 1, "", "serialize"]], "hermespy.simulation.noise.model.AWGNRealization": [[204, 2, 1, "", "add_to"]], "hermespy.simulation.noise.model.NoiseModel": [[200, 2, 1, "", "add_noise"], [200, 2, 1, "", "realize"]], "hermespy.simulation.noise.model.NoiseRealization": [[200, 2, 1, "", "Deserialize"], [200, 2, 1, "", "add_to"], [200, 4, 1, "", "power"], [200, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.analog_digital_converter": [[207, 1, 1, "", "AnalogDigitalConverter"], [208, 1, 1, "", "AutomaticGainControl"], [209, 1, 1, "", "Gain"], [210, 1, 1, "", "GainControlBase"], [211, 1, 1, "", "GainControlType"], [212, 1, 1, "", "QuantizerType"]], "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter": [[207, 2, 1, "", "Deserialize"], [207, 2, 1, "", "convert"], [207, 3, 1, "", "gain"], [207, 4, 1, "", "num_quantization_bits"], [207, 4, 1, "", "num_quantization_levels"], [207, 2, 1, "", "plot_quantizer"], [207, 4, 1, "", "quantizer_type"], [207, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl": [[208, 2, 1, "", "Deserialize"], [208, 4, 1, "", "agc_type"], [208, 4, 1, "", "backoff"], [208, 2, 1, "", "estimate_gain"], [208, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.analog_digital_converter.Gain": [[209, 2, 1, "", "Deserialize"], [209, 2, 1, "", "estimate_gain"], [209, 4, 1, "", "gain"], [209, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase": [[210, 2, 1, "", "adjust_signal"], [210, 2, 1, "", "estimate_gain"], [210, 4, 1, "", "rescale_quantization"], [210, 2, 1, "", "scale_quantized_signal"]], "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType": [[211, 3, 1, "", "MAX_AMPLITUDE"], [211, 3, 1, "", "NONE"], [211, 3, 1, "", "RMS_AMPLITUDE"]], "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType": [[212, 3, 1, "", "MID_RISER"], [212, 3, 1, "", "MID_TREAD"]], "hermespy.simulation.rf_chain.phase_noise": [[220, 1, 1, "", "NoPhaseNoise"], [221, 1, 1, "", "OscillatorPhaseNoise"], [219, 1, 1, "", "PhaseNoise"]], "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise": [[220, 2, 1, "", "Deserialize"], [220, 2, 1, "", "add_noise"], [220, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise": [[221, 2, 1, "", "Deserialize"], [221, 4, 1, "", "K0"], [221, 4, 1, "", "K2"], [221, 4, 1, "", "K3"], [221, 2, 1, "", "add_noise"], [221, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.phase_noise.PhaseNoise": [[219, 2, 1, "", "add_noise"]], "hermespy.simulation.rf_chain.power_amplifier": [[214, 1, 1, "", "ClippingPowerAmplifier"], [215, 1, 1, "", "CustomPowerAmplifier"], [216, 1, 1, "", "PowerAmplifier"], [217, 1, 1, "", "RappPowerAmplifier"], [218, 1, 1, "", "SalehPowerAmplifier"]], "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier": [[214, 2, 1, "", "model"]], "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier": [[215, 2, 1, "", "Deserialize"], [215, 4, 1, "", "gain"], [215, 4, 1, "", "input"], [215, 2, 1, "", "model"], [215, 4, 1, "", "phase"], [215, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier": [[216, 2, 1, "", "Deserialize"], [216, 3, 1, "", "adjust_power"], [216, 2, 1, "", "model"], [216, 2, 1, "", "plot_characteristics"], [216, 4, 1, "", "saturation_amplitude"], [216, 2, 1, "", "send"], [216, 2, 1, "", "serialize"], [216, 4, 1, "", "title"]], "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier": [[217, 2, 1, "", "Deserialize"], [217, 2, 1, "", "model"], [217, 2, 1, "", "serialize"], [217, 4, 1, "", "smoothness_factor"]], "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier": [[218, 2, 1, "", "Deserialize"], [218, 4, 1, "", "amplitude_alpha"], [218, 4, 1, "", "amplitude_beta"], [218, 2, 1, "", "model"], [218, 3, 1, "", "phase_alpha"], [218, 3, 1, "", "phase_beta"], [218, 2, 1, "", "serialize"]], "hermespy.simulation.rf_chain.rf_chain": [[205, 1, 1, "", "RfChain"]], "hermespy.simulation.rf_chain.rf_chain.RfChain": [[205, 2, 1, "", "Deserialize"], [205, 4, 1, "", "adc"], [205, 2, 1, "", "add_iq_imbalance"], [205, 4, 1, "", "amplitude_imbalance"], [205, 4, 1, "", "phase_noise"], [205, 4, 1, "", "phase_offset"], [205, 4, 1, "", "power_amplifier"], [205, 2, 1, "", "receive"], [205, 2, 1, "", "serialize"], [205, 2, 1, "", "transmit"]], "hermespy.simulation.scenario": [[222, 1, 1, "", "ScenarioVisualization"], [223, 1, 1, "", "_ScenarioVisualizer"]], "hermespy.simulation.scenario._ScenarioVisualizer": [[223, 2, 1, "", "create_figure"], [223, 4, 1, "", "title"]], "hermespy.simulation.simulated_device": [[226, 1, 1, "", "ProcessedSimulatedDeviceInput"], [233, 1, 1, "", "RandomTrigger"], [234, 1, 1, "", "SampleOffsetTrigger"], [225, 1, 1, "", "SimulatedDevice"], [227, 1, 1, "", "SimulatedDeviceOutput"], [228, 1, 1, "", "SimulatedDeviceReceiveRealization"], [229, 1, 1, "", "SimulatedDeviceReception"], [225, 1, 1, "", "SimulatedDeviceState"], [230, 1, 1, "", "SimulatedDeviceTransmission"], [235, 1, 1, "", "StaticTrigger"], [236, 1, 1, "", "TimeOffsetTrigger"], [237, 1, 1, "", "TriggerModel"], [238, 1, 1, "", "TriggerRealization"]], "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput": [[226, 2, 1, "", "Deserialize"], [226, 4, 1, "", "baseband_signal"], [226, 4, 1, "", "leaking_signal"], [226, 4, 1, "", "operator_separation"], [226, 2, 1, "", "serialize"], [226, 4, 1, "", "trigger_realization"]], "hermespy.simulation.simulated_device.RandomTrigger": [[233, 2, 1, "", "Deserialize"], [233, 2, 1, "", "realize"], [233, 2, 1, "", "serialize"]], "hermespy.simulation.simulated_device.SampleOffsetTrigger": [[234, 2, 1, "", "Deserialize"], [234, 4, 1, "", "num_offset_samples"], [234, 2, 1, "", "realize"], [234, 2, 1, "", "serialize"]], "hermespy.simulation.simulated_device.SimulatedDevice": [[225, 2, 1, "", "Deserialize"], [225, 4, 1, "", "antennas"], [225, 4, 1, "", "attached"], [225, 4, 1, "", "carrier_frequency"], [225, 4, 1, "", "coupling"], [225, 2, 1, "", "generate_output"], [225, 4, 1, "", "isolation"], [225, 4, 1, "", "noise"], [225, 4, 1, "", "noise_level"], [225, 4, 1, "", "noise_model"], [225, 4, 1, "", "operator_separation"], [225, 2, 1, "", "process_from_realization"], [225, 2, 1, "", "process_input"], [225, 2, 1, "", "realize_reception"], [225, 2, 1, "", "receive"], [225, 3, 1, "", "rf_chain"], [225, 4, 1, "", "sampling_rate"], [225, 4, 1, "", "scenario"], [225, 2, 1, "", "serialize"], [225, 4, 1, "", "simulated_input_callbacks"], [225, 4, 1, "", "simulated_output_callbacks"], [225, 2, 1, "", "state"], [225, 2, 1, "", "transmit"], [225, 4, 1, "", "trigger_model"]], "hermespy.simulation.simulated_device.SimulatedDeviceOutput": [[227, 2, 1, "", "Deserialize"], [227, 2, 1, "", "From_DeviceOutput"], [227, 4, 1, "", "emerging_signals"], [227, 4, 1, "", "leaking_signals"], [227, 4, 1, "", "num_leaking_signals"], [227, 4, 1, "", "operator_separation"], [227, 2, 1, "", "serialize"], [227, 4, 1, "", "trigger_realization"]], "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization": [[228, 2, 1, "", "Deserialize"], [228, 4, 1, "", "noise_realization"], [228, 2, 1, "", "serialize"]], "hermespy.simulation.simulated_device.SimulatedDeviceReception": [[229, 2, 1, "", "Deserialize"], [229, 2, 1, "", "From_ProcessedSimulatedDeviceInput"], [229, 2, 1, "", "serialize"]], "hermespy.simulation.simulated_device.SimulatedDeviceTransmission": [[230, 2, 1, "", "Deserialize"], [230, 2, 1, "", "From_SimulatedDeviceOutput"], [230, 2, 1, "", "serialize"]], "hermespy.simulation.simulated_device.StaticTrigger": [[235, 2, 1, "", "Deserialize"], [235, 2, 1, "", "realize"], [235, 2, 1, "", "serialize"]], "hermespy.simulation.simulated_device.TimeOffsetTrigger": [[236, 2, 1, "", "Deserialize"], [236, 4, 1, "", "offset"], [236, 2, 1, "", "realize"], [236, 2, 1, "", "serialize"]], "hermespy.simulation.simulated_device.TriggerModel": [[237, 2, 1, "", "add_device"], [237, 4, 1, "", "devices"], [237, 4, 1, "", "num_devices"], [237, 2, 1, "", "realize"], [237, 2, 1, "", "remove_device"]], "hermespy.simulation.simulated_device.TriggerRealization": [[238, 2, 1, "", "Deserialize"], [238, 2, 1, "", "compute_num_offset_samples"], [238, 4, 1, "", "num_offset_samples"], [238, 4, 1, "", "sampling_rate"], [238, 2, 1, "", "serialize"], [238, 4, 1, "", "trigger_delay"]], "hermespy.simulation.simulation": [[231, 1, 1, "", "Simulation"], [224, 1, 1, "", "SimulationScenario"]], "hermespy.simulation.simulation.Simulation": [[231, 4, 1, "", "console"], [231, 4, 1, "", "console_mode"], [231, 4, 1, "", "devices"], [231, 2, 1, "", "drop"], [231, 4, 1, "", "drop_interval"], [231, 3, 1, "", "dump_results"], [231, 4, 1, "", "num_samples"], [231, 3, 1, "", "plot_results"], [231, 3, 1, "", "property_blacklist"], [231, 2, 1, "", "run"], [231, 2, 1, "", "set_channel"]], "hermespy.simulation.simulation.SimulationScenario": [[224, 2, 1, "", "add_device"], [224, 2, 1, "", "channel"], [224, 4, 1, "", "channels"], [224, 2, 1, "", "device_channels"], [224, 2, 1, "", "drop"], [224, 2, 1, "", "generate_outputs"], [224, 4, 1, "", "noise_level"], [224, 4, 1, "", "noise_model"], [224, 2, 1, "", "process_inputs"], [224, 2, 1, "", "propagate"], [224, 2, 1, "", "realize_channels"], [224, 2, 1, "", "realize_triggers"], [224, 2, 1, "", "receive_devices"], [224, 2, 1, "", "set_channel"], [224, 2, 1, "", "transmit_devices"], [224, 4, 1, "", "visualize"]], "hermespy.tools": [[241, 0, 0, "-", "math"], [242, 0, 0, "-", "resampling"], [243, 0, 0, "-", "tile"]], "hermespy.tools.math": [[241, 1, 1, "", "DbConversionType"], [241, 6, 1, "", "amplitude_path_loss"], [241, 6, 1, "", "db2lin"], [241, 6, 1, "", "lin2db"], [241, 6, 1, "", "marcum_q"], [241, 6, 1, "", "rms_value"]], "hermespy.tools.math.DbConversionType": [[241, 3, 1, "", "AMPLITUDE"], [241, 3, 1, "", "POWER"]], "hermespy.tools.resampling": [[242, 6, 1, "", "delay_resampling_matrix"]], "hermespy.tools.tile": [[243, 6, 1, "", "get_monitors"], [243, 6, 1, "", "screen_geometry"], [243, 6, 1, "", "set_figure_geometry"], [243, 6, 1, "", "tile_figures"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "property", "Python property"], "5": ["py", "exception", "Python exception"], "6": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:attribute", "4": "py:property", "5": "py:exception", "6": "py:function"}, "terms": {"": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 70, 71, 72, 76, 77, 79, 81, 83, 84, 85, 89, 90, 92, 94, 95, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 243, 244, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "0": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 51, 55, 58, 59, 60, 64, 65, 66, 67, 70, 76, 79, 81, 84, 85, 86, 89, 90, 94, 99, 104, 105, 106, 107, 108, 109, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 130, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 149, 150, 151, 153, 156, 157, 161, 163, 166, 167, 169, 173, 174, 176, 181, 191, 195, 196, 207, 208, 209, 211, 212, 217, 225, 231, 233, 234, 236, 241, 243, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "00": [7, 8, 9, 10, 11, 12, 21, 28, 263], "0066": 25, "00_60": [7, 8, 9, 10, 11, 12, 21, 28, 79, 263], "0108018": [77, 263], "01101": 111, "016": [132, 263], "02": [79, 163, 262, 263], "02ch37367": [23, 263], "0582": 25, "06": [3, 167, 263], "0670": [132, 263], "0684": 122, "07": [79, 263], "072": 261, "072e9": 261, "08": 135, "0810": 25, "0j": [175, 179, 180, 181, 182], "1": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 44, 46, 55, 58, 59, 61, 64, 65, 66, 67, 69, 70, 71, 74, 75, 76, 77, 78, 79, 80, 81, 86, 89, 90, 94, 97, 98, 99, 104, 105, 106, 107, 108, 111, 121, 122, 123, 124, 125, 128, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 163, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176, 179, 180, 181, 182, 191, 195, 196, 205, 207, 208, 209, 211, 212, 213, 217, 218, 221, 225, 241, 242, 248, 249, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263], "10": [2, 5, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 25, 28, 30, 31, 32, 34, 35, 36, 58, 59, 65, 69, 74, 75, 77, 78, 79, 80, 84, 99, 104, 105, 106, 107, 108, 123, 125, 132, 142, 150, 151, 154, 155, 156, 166, 167, 174, 191, 205, 213, 217, 218, 221, 225, 244, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "100": [2, 3, 5, 7, 8, 9, 10, 11, 12, 28, 32, 34, 65, 104, 105, 106, 107, 108, 122, 173, 191, 195, 225, 231, 244, 248, 255, 257, 263], "1000": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 32, 34, 35, 89, 104, 105, 106, 107, 108, 153, 156, 166, 254, 256, 259, 261, 262], "10000": [8, 221], "1000000": 137, "100000000": 167, "1000000000": 135, "1002729": [23, 263], "100345": [69, 74, 75, 77, 78, 80, 263], "1005": 263, "1008": 263, "100e6": 225, "100e9": 248, "101": [165, 195, 196], "1016": [69, 74, 75, 77, 78, 80, 263], "1024": [99, 122, 153, 156, 256, 258, 260], "1054010": 263, "1055186": [78, 263], "1064": [80, 263], "1070": [80, 263], "1094911": [213, 218, 263], "10e": 19, "10e6": 138, "10e9": [248, 254, 259, 261], "10ghz": [254, 259], "10m": [8, 32, 34], "11": [7, 25, 79, 123, 213, 218, 221, 250, 251, 255, 257, 263], "110": 221, "1109": [2, 5, 13, 21, 23, 31, 36, 75, 78, 79, 80, 99, 123, 125, 154, 155, 205, 213, 218, 221, 249, 263], "1137": [59, 77, 263], "1162830": 263, "1186": [132, 263], "11a": [79, 263], "12": [7, 8, 9, 10, 11, 12, 21, 22, 23, 25, 28, 30, 36, 99, 104, 105, 106, 107, 108, 154, 155, 248, 251, 255, 259, 260, 263], "120": 255, "120256": [249, 263], "120273": [249, 263], "125": 225, "125900_125999": [21, 263], "125943": [21, 263], "127": 85, "1274": [31, 263], "1278": [31, 263], "128": [2, 3, 5, 99, 138, 142, 150, 151, 156, 253], "128e3": 150, "13": [7, 21, 25, 99, 111, 251, 255, 263], "130911433": [59, 263], "1361130": 263, "138": 8, "138200_138299": [79, 263], "138211": [79, 263], "138900_138999": [7, 8, 9, 10, 11, 12, 28, 263], "138901": [7, 8, 9, 10, 11, 12, 28, 263], "14": [7, 8, 9, 10, 11, 12, 21, 22, 25, 28, 104, 105, 106, 107, 108, 135, 251, 255, 263], "1408": [2, 263], "1418": [2, 263], "1451": [125, 263], "1458": [125, 263], "15": [7, 25, 79, 251, 255, 261, 263], "1553": [221, 263], "1565": [221, 263], "16": [3, 7, 8, 9, 10, 11, 12, 21, 22, 25, 28, 30, 99, 104, 105, 106, 107, 108, 111, 117, 118, 119, 120, 123, 124, 125, 128, 135, 137, 138, 139, 140, 141, 206, 248, 251, 255, 256, 259, 260, 262, 263], "1600": 79, "1613": [154, 155, 263], "1621": [154, 155, 263], "16384": [142, 150, 151, 156], "1650": [125, 263], "1656": [125, 263], "1698": [123, 263], "17": [7, 8, 9, 10, 11, 12, 28, 79, 251, 255, 263], "1704": [123, 263], "1715": [213, 218, 263], "1717": 25, "1720": [213, 218, 263], "179": [213, 217, 263], "18": [7, 8, 9, 10, 11, 12, 21, 22, 25, 28, 104, 105, 106, 107, 108, 125, 259, 263], "180": [36, 132, 263], "184": [213, 217, 263], "1889": [5, 263], "19": [7, 25, 251, 263], "1903": [5, 263], "192": [117, 118, 120], "1950": [3, 263], "1954": [123, 263], "1960": [69, 77, 263], "1963": [74, 263], "1967": 263, "1969": [2, 263], "1974": [78, 263], "1976": 263, "1981": [213, 218, 263], "1983": 263, "1989": 263, "1991": [213, 217, 263], "1993": [80, 263], "1996": 251, "1997": [154, 155, 263], "1998": [125, 263], "1999": [79, 263], "1d": [111, 167, 172], "1e": [19, 22, 25, 28, 135, 142, 150, 151, 156, 167, 176, 221, 225], "1e10": [117, 118, 119, 120, 191], "1e11": 191, "1e3": [151, 156], "1e4": 253, "1e6": [117, 118, 119, 120, 123, 124, 125, 138, 139, 140, 141, 248, 259], "1e7": 21, "1e8": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 104, 105, 106, 107, 108, 176, 191], "1e9": [135, 167, 191, 248, 255], "1j": [225, 256], "1x2": [123, 124], "2": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 19, 20, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 53, 55, 59, 64, 65, 69, 74, 75, 77, 78, 79, 80, 81, 99, 104, 105, 106, 107, 108, 111, 122, 123, 124, 125, 128, 135, 136, 137, 138, 139, 140, 141, 143, 144, 147, 157, 163, 167, 168, 176, 207, 211, 213, 218, 221, 243, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "20": [8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 58, 78, 95, 104, 105, 106, 107, 108, 166, 173, 191, 200, 225, 248, 251, 259, 260, 261, 263], "200": [2, 5, 94, 255], "2001": [125, 263], "2002": [13, 23, 111, 263], "2004": 263, "2006": [21, 23, 263], "2007": [251, 263], "2009": [5, 75, 99, 263], "2010": [5, 263], "2012": [36, 263], "2013": [221, 263], "2014": [31, 59, 221, 263], "2015": [75, 263], "2016": [21, 132, 263], "2017": [205, 263], "2018": [79, 205, 263], "2019": [69, 74, 75, 77, 78, 80, 263], "2020": [7, 8, 9, 10, 11, 12, 28, 263], "2021379": [75, 263], "2022": [3, 249, 263], "2036476": [5, 263], "2048": [234, 253], "20db": 58, "21": [35, 200], "211": 111, "22": [19, 32, 34, 213, 217, 263], "2213": [75, 263], "2214017": [36, 263], "2226": [75, 263], "223": 263, "2242": 25, "226": 263, "2285698": [221, 263], "2299": [205, 263], "2310220": [31, 263], "2312": [205, 263], "2332141": [3, 263], "23rd": 263, "24": [19, 213, 217, 256, 258, 263], "2410251": [75, 263], "24e9": [35, 99], "25": [5, 255, 261, 263], "256": [111, 137], "256966": [21, 263], "256967": [21, 263], "256990": [23, 263], "259": 263, "25j": [138, 139, 140, 141], "26": [19, 154, 155, 255, 263], "260": 263, "269": 263, "27": 35, "274666": [123, 263], "2786729": [205, 263], "28": [3, 19, 251, 263], "284": [78, 263], "287": [78, 263], "29": [25, 213, 218, 263], "2d": [65, 111, 167, 172], "2e": 261, "2f": 258, "2j": [191, 255], "2nd": 221, "2p_": 217, "2x2": 125, "3": [5, 6, 7, 8, 13, 21, 25, 31, 33, 36, 37, 38, 69, 75, 76, 79, 111, 117, 118, 119, 120, 122, 125, 138, 139, 140, 141, 142, 150, 151, 156, 167, 173, 191, 221, 225, 232, 233, 234, 235, 236, 237, 243, 244, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "30": [6, 17, 19, 58, 166, 251, 254, 261], "300": [77, 263], "30000": 8, "304": [77, 263], "3043": 25, "3051": [75, 263], "3073": [75, 263], "309350": 263, "30db": 58, "31": 79, "319": [13, 263], "32": [2, 3, 5, 19, 76, 111, 117, 118, 119, 120, 123, 124, 125, 138, 139, 140, 141], "320": 263, "3222063": [249, 263], "3242": [31, 263], "3256": [31, 263], "327": 263, "3333333333333333": 259, "33776": [213, 217, 263], "34": 19, "342": [13, 263], "3421": [21, 263], "3433": [21, 263], "3434": [21, 263], "3450": [21, 263], "36": [19, 59, 111, 263], "3667": [23, 263], "366852": 263, "3679": [23, 263], "37": [3, 263], "370": [23, 263], "374": [23, 263], "38": [19, 28], "3819": 25, "39": 259, "397441": [80, 263], "3d": [34, 67], "3gpp": [8, 9, 10, 11, 12, 21, 28, 30, 79, 111, 142, 150, 151, 156, 263], "3gpptran04": 263, "3k": 259, "3pi": 255, "3rd": 221, "4": [3, 6, 7, 8, 9, 10, 11, 12, 18, 19, 20, 21, 22, 25, 28, 30, 33, 38, 79, 99, 104, 105, 106, 107, 108, 111, 117, 118, 119, 120, 123, 124, 125, 137, 139, 140, 141, 163, 213, 217, 221, 225, 243, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "40": [8, 9, 10, 11, 12, 19, 254], "400": 5, "4025": 25, "41392685158225": 58, "42": [2, 3, 5, 8, 9, 34, 35, 117, 119, 120, 123, 248, 253, 255, 257, 262, 263], "43": 255, "44": 81, "45": [35, 154, 155, 263], "4579": 25, "4610": 25, "4673": 85, "47": [125, 263], "48": 81, "48000": 81, "49": [125, 263], "4942": 25, "4th": 37, "4x4": 125, "5": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 21, 23, 25, 28, 32, 34, 35, 75, 79, 99, 111, 132, 166, 167, 168, 173, 174, 205, 221, 225, 236, 251, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "50": [32, 65, 135, 174, 195, 196, 254, 255, 257], "5073387": [99, 263], "50m": 32, "51": [195, 196], "5119": 25, "53": 263, "5375": 25, "55": [75, 263], "5555": [93, 94], "55th": [23, 263], "5695": 25, "57": [2, 263], "5750": 25, "58": [5, 263], "5868": 25, "5966": [36, 263], "5977": [36, 263], "5e": 167, "5e8": 254, "5e9": [32, 34], "5g": [142, 150, 151, 156, 248], "6": [7, 8, 9, 10, 11, 12, 21, 22, 25, 28, 31, 163, 167, 251, 253, 254, 255, 257, 258, 259, 261, 262, 263], "60": [36, 168, 173, 251, 255, 263], "608": 263, "60e9": [163, 165, 166, 167, 168], "61": [75, 221, 263], "61503168": 243, "62": [31, 263], "621": 263, "64": [99, 111, 118, 119, 120, 123, 124, 125, 135, 138, 139, 140, 141, 142, 150, 151, 156, 253], "650240": [154, 155, 263], "6586": 25, "66": [205, 263], "6708": 25, "68": [69, 263], "6902008": [31, 263], "69th": [99, 263], "6b": 251, "6d": 251, "6g": [249, 263], "7": [7, 8, 22, 25, 75, 79, 85, 99, 111, 142, 150, 151, 156, 251, 253, 255, 261, 263], "70": 255, "700": 94, "700000000": 94, "70e9": 255, "7278": [2, 263], "72e9": 254, "730453": [125, 263], "75": [65, 99, 255, 261], "75pi": 255, "7618": 25, "78": [32, 34], "79": [69, 263], "7966": 25, "7e9": [142, 150, 151, 156, 225, 232, 233, 234, 235, 236, 237], "8": [2, 5, 7, 8, 9, 10, 11, 12, 19, 21, 22, 23, 25, 28, 30, 35, 77, 104, 105, 106, 107, 108, 111, 125, 135, 136, 142, 150, 151, 156, 163, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263], "80": 255, "800": 257, "800e6": 257, "802": [79, 263], "8647704": 263, "881182": 263, "8978": 25, "8th": [31, 263], "8x8": 254, "9": [2, 3, 5, 7, 25, 28, 122, 123, 124, 125, 132, 135, 136, 139, 141, 248, 251, 252, 255, 263], "90": [13, 32, 34, 35, 99, 255, 263], "900": 28, "901": 8, "90606": [79, 263], "909e3": 99, "91": [213, 217, 263], "923754": [125, 263], "93": [80, 263], "943": 263, "99": 65, "993400": [13, 263], "9e9": [232, 233, 234, 235, 236, 237], "A": [1, 2, 3, 5, 6, 7, 13, 18, 19, 20, 23, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 55, 58, 59, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 93, 98, 99, 100, 109, 114, 116, 120, 122, 125, 127, 128, 132, 137, 138, 142, 148, 150, 151, 156, 157, 159, 161, 163, 165, 166, 167, 168, 169, 172, 173, 178, 183, 184, 190, 205, 207, 213, 218, 221, 222, 224, 225, 232, 238, 242, 243, 244, 248, 251, 255, 263, 264], "AND": 251, "AS": 251, "AT": [36, 59, 81], "And": 254, "As": [5, 55, 132, 250, 251, 252, 253, 254, 255, 257, 259, 260], "At": [111, 260], "BE": 251, "BEING": 251, "BUT": 251, "BY": 251, "Be": 84, "But": [251, 259], "By": [4, 19, 21, 22, 25, 28, 32, 36, 37, 55, 59, 63, 64, 67, 71, 81, 90, 95, 127, 128, 138, 148, 154, 165, 175, 179, 180, 181, 182, 207, 219, 220, 225, 232, 237, 251], "FOR": 251, "For": [2, 3, 5, 7, 8, 13, 23, 25, 29, 30, 32, 59, 61, 64, 81, 89, 94, 111, 117, 118, 119, 131, 135, 137, 138, 139, 140, 141, 161, 167, 168, 169, 173, 191, 197, 202, 213, 225, 231, 238, 243, 248, 249, 250, 251, 253, 254, 255, 256, 257, 262], "IF": 251, "IN": 251, "If": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 21, 25, 27, 28, 29, 31, 33, 34, 35, 36, 37, 39, 44, 48, 51, 54, 55, 58, 59, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 76, 79, 81, 85, 86, 87, 89, 90, 91, 92, 94, 95, 97, 98, 99, 109, 111, 112, 117, 118, 119, 120, 125, 127, 128, 132, 135, 136, 137, 138, 144, 147, 148, 153, 155, 156, 157, 159, 164, 165, 166, 167, 169, 173, 175, 176, 177, 178, 186, 193, 194, 195, 200, 201, 202, 205, 207, 208, 209, 210, 215, 216, 217, 218, 221, 224, 225, 226, 227, 230, 231, 233, 234, 235, 236, 237, 241, 243, 250, 251, 253], "In": [3, 5, 18, 23, 30, 31, 46, 54, 59, 65, 66, 70, 71, 72, 76, 79, 80, 99, 104, 105, 106, 107, 108, 120, 128, 135, 137, 138, 139, 140, 141, 147, 167, 174, 176, 191, 213, 214, 216, 217, 224, 244, 248, 250, 251, 255, 256, 258, 263, 264], "It": [15, 29, 31, 35, 39, 52, 57, 64, 73, 88, 110, 111, 123, 131, 156, 166, 168, 191, 193, 198, 199, 202, 203, 207, 231, 233, 234, 235, 236, 244, 249, 251, 255, 262], "Its": [19, 20], "NO": 251, "NOT": 251, "Near": [80, 263], "No": [23, 38, 67, 83, 84, 85, 110, 128, 134, 144, 219, 251, 263], "Not": [55, 251], "OF": 251, "OR": 251, "Of": [169, 185, 192, 200, 213, 219, 232, 237, 255, 262], "On": [1, 22, 39, 59, 69, 81, 94, 137, 140, 162, 174, 191, 225, 255, 256, 263], "One": [59, 61, 137, 139, 141, 195], "SUCH": 251, "Such": [251, 258], "THE": 251, "THERE": 251, "TO": 251, "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "Then": [2, 3, 254], "There": [33, 100, 164, 225, 248, 250, 251], "These": [7, 251, 255], "To": [2, 3, 5, 30, 249, 251, 255, 256, 257, 260], "WILL": 251, "WITH": 251, "Will": [21, 65, 125, 243], "_": [2, 3, 5, 7, 8, 25, 30, 32, 33, 36, 59, 104, 105, 106, 107, 108, 216, 218, 232, 253, 254, 255, 257, 258, 259, 260, 261, 262], "_0": 5, "_2": [20, 33, 105, 107, 108], "__": 32, "__decorrelation_dist": 256, "__del__": 258, "__future__": [256, 258], "__gain": 256, "__getitem__": 65, "__init__": [35, 111, 254, 256, 258], "__num_delay_tap": 37, "__num_frequency_bin": 37, "__phase_shift": 256, "__phase_shift_vari": 256, "__receive_callback": 258, "__receive_hook": 258, "__recept": 258, "__rng": 256, "__state": 37, "__state_format": 37, "__str__": 258, "_angleplot": 157, "_anglevisu": 7, "_block": 65, "_bmt": 112, "_constellationplot": 127, "_decod": [1, 2, 3, 5, 254], "_default_titl": 87, "_deserializeparamet": 256, "_djot": 97, "_dtypedict": 55, "_encod": [1, 3, 5], "_eyevisu": 65, "_initial_plot": 87, "_m": [36, 59], "_ot": 55, "_powerdelayvisu": 7, "_prepare_multidim_visu": 258, "_prepare_plot": 87, "_prepare_visu": 258, "_propag": [15, 29, 256], "_properti": 59, "_rangeplot": 157, "_rangevelocityplot": 157, "_ray_trace_ctx": 59, "_realiz": [6, 13, 19, 20, 25, 29, 32, 34, 35, 256], "_receiv": [48, 117, 118, 119, 169, 170, 172], "_reciprocal_sampl": 256, "_rt": [55, 56], "_sampl": [6, 29, 35, 256], "_samplesvisu": 65, "_scenariovisu": [223, 224], "_signalvisu": 65, "_supportsdtyp": 55, "_transmit": [51, 117, 119, 120, 169, 172], "_update_multidim_visu": 258, "_update_plot": 87, "_update_visu": 258, "a869": [59, 263], "a885": [59, 263], "a_": 36, "a_0": 5, "a_1": 36, "a_2": 36, "aat": [36, 81], "ab": 262, "abbrevi": [53, 59, 104, 105, 106, 107, 108, 163, 164, 165, 166, 190, 258], "abc": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 25, 28, 29, 31, 32, 34, 35, 36, 39, 53, 54, 55, 59, 61, 62, 64, 65, 68, 71, 81, 83, 84, 85, 86, 87, 89, 90, 92, 94, 95, 102, 104, 105, 106, 107, 108, 109, 122, 123, 124, 125, 126, 128, 129, 133, 147, 150, 153, 156, 164, 184, 190, 196, 197, 198, 199, 200, 201, 202, 222, 224, 231], "abdelaziz": [205, 263], "abil": 251, "abl": [250, 257], "abort": 59, "about": [39, 51, 59, 64, 89, 90, 92, 224, 225, 238, 251, 255], "abov": [5, 8, 65, 185, 191, 192, 200, 213, 214, 219, 225, 232, 237, 248, 251, 255], "absenc": 251, "absolut": [34, 37, 38, 241, 251, 261], "absorpt": [7, 9, 10, 11, 12], "abstract": [1, 6, 7, 13, 15, 17, 19, 20, 25, 29, 30, 32, 33, 34, 35, 36, 39, 46, 48, 51, 54, 55, 59, 62, 65, 67, 71, 81, 83, 84, 85, 87, 89, 90, 100, 109, 112, 126, 128, 129, 131, 132, 142, 145, 160, 164, 168, 172, 173, 185, 186, 192, 193, 200, 210, 213, 219, 232, 237, 248, 254, 256, 259, 260, 262], "accept": [59, 86, 251], "acces": 59, "access": [21, 28, 33, 34, 36, 37, 59, 62, 79, 127, 128, 130, 135, 137, 147, 205, 224, 225, 231, 248, 249, 251, 255, 256, 263, 264], "accompani": 251, "accomplish": 251, "accord": [18, 65, 205, 217, 218, 221, 251], "accordingli": [131, 202], "account": 65, "accur": [13, 23, 191], "accuraci": 23, "accustom": [248, 249, 258, 260], "acess": 224, "achiev": [70, 71, 72, 75, 76, 99, 128, 174, 198, 244, 251, 252, 259, 263], "achiv": [185, 192, 194, 195, 196], "acknowledg": 251, "acoust": 263, "acquir": [2, 3, 251, 254], "across": [36, 251], "act": [30, 39, 58, 67, 248], "action": [21, 65, 86, 250, 251], "activ": [191, 224, 250, 251, 252], "active_onli": 224, "actor": [59, 191, 231], "actorrunresult": 59, "actual": [59, 66, 89, 175, 176, 200, 248, 251, 254, 256, 262], "ad": [2, 3, 5, 17, 30, 32, 36, 39, 56, 59, 61, 64, 71, 82, 86, 91, 92, 93, 117, 118, 119, 120, 121, 122, 123, 124, 125, 135, 138, 139, 140, 141, 161, 174, 178, 200, 203, 204, 219, 220, 221, 224, 248, 251, 252, 255, 256, 262], "adapt": [35, 89, 205, 248, 251, 263], "adaptive_sampl": [89, 90], "adc": [167, 191, 205, 206, 207, 208, 209, 210, 261], "adc_sampling_r": 167, "add": [8, 9, 10, 11, 12, 13, 17, 19, 20, 21, 22, 25, 28, 30, 32, 33, 35, 36, 39, 48, 51, 56, 59, 61, 64, 86, 91, 92, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 161, 178, 191, 200, 205, 219, 220, 221, 224, 225, 232, 237, 248, 251, 255, 256, 258, 260, 261], "add_antenna": [36, 174, 176, 178], "add_callback": 56, "add_devic": [30, 61, 64, 91, 92, 93, 224, 237], "add_dimens": [59, 86], "add_dsp": [2, 3, 5, 32, 34, 39, 99, 117, 122, 163, 165, 166, 167, 253, 254, 256, 259, 260, 261, 262], "add_encod": [71, 117, 118, 119, 120, 259], "add_evalu": [2, 3, 5, 8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 32, 34, 59, 86, 104, 105, 106, 107, 108, 163, 165, 166, 167, 191, 248, 254, 255, 256, 258, 259, 260, 261, 262], "add_hook": 56, "add_iq_imbal": 205, "add_link": 67, "add_nois": [200, 219, 220, 221], "add_plot": [86, 248], "add_point": 161, "add_port": [36, 174, 178], "add_post_drop_hook": 86, "add_pre_drop_hook": 86, "add_propag": 33, "add_receive_callback": [48, 258], "add_sampl": 59, "add_sample_hook": 13, "add_stat": 33, "add_target": 32, "add_to": [200, 204], "add_transmit_callback": 51, "add_vari": 17, "added_sign": 65, "addit": [6, 29, 30, 32, 55, 56, 59, 61, 64, 65, 86, 89, 90, 91, 94, 110, 117, 118, 119, 120, 128, 135, 138, 139, 140, 141, 175, 200, 203, 204, 205, 224, 225, 244, 250, 251, 260, 262], "addition": [90, 128, 135, 137, 142, 147, 150, 151, 156, 206, 225, 250, 261, 262], "additional_dimens": 59, "address": [55, 59, 66, 93, 94, 231, 251, 256], "addtion": 221, "adequ": [59, 128, 135, 137, 138, 140, 150, 153], "adjac": 135, "adjust": [200, 206, 207, 208, 209, 210, 214, 216, 243], "adjust_pow": [214, 216], "adjust_sign": 210, "adler": [249, 263], "admiss": 5, "adnan": [205, 263], "adopt": 251, "adpat": [3, 5], "adress": [94, 237], "advantag": 248, "advers": 251, "advis": 251, "ae": 263, "aerospac": 263, "aff": [5, 263], "aff3ct": [69, 74, 75, 77, 78, 80, 263], "affect": 251, "affero": 251, "affirm": 251, "afford": 81, "aforement": 176, "after": [1, 3, 5, 6, 7, 13, 14, 15, 18, 26, 27, 29, 31, 32, 33, 35, 36, 37, 39, 48, 51, 53, 55, 56, 59, 62, 64, 65, 69, 71, 72, 74, 75, 77, 78, 80, 86, 113, 114, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 132, 136, 157, 165, 176, 191, 205, 214, 215, 216, 217, 218, 231, 248, 251, 252, 254, 257, 259, 261], "afterward": [118, 135, 138, 139, 140, 141, 168, 250], "again": [55, 191], "against": [145, 148, 251], "agc": 208, "agc_typ": 208, "aggreg": 251, "agm": 263, "agpl": [249, 251], "agplv3": 251, "agre": 251, "agreement": 251, "aim": [5, 248, 249], "air": [176, 205, 248], "akb22": 263, "al": [21, 23, 36, 59, 132, 205, 221, 249], "ala98": 263, "alamouti": [125, 263], "alarm": [165, 249], "alayon": [21, 263], "alexand": [75, 263], "algorithm": [1, 4, 39, 42, 47, 48, 51, 59, 62, 64, 66, 72, 89, 90, 118, 120, 128, 136, 154, 155, 160, 162, 164, 166, 224, 225, 226, 229, 248, 249, 254, 259, 263], "ali": [132, 263], "alia": [1, 7, 14, 15, 18, 33, 36, 39, 42, 43, 49, 50, 52, 55, 56, 59, 62, 64, 66, 68, 89, 92, 128, 135, 136, 147, 170, 171, 191, 200], "alias": 65, "aliasing_filt": 65, "align": 65, "all": [0, 1, 2, 3, 5, 7, 13, 14, 23, 30, 33, 35, 36, 37, 38, 39, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 71, 76, 81, 84, 85, 87, 88, 89, 90, 91, 92, 94, 97, 98, 99, 101, 102, 111, 113, 117, 118, 119, 120, 128, 142, 168, 169, 175, 185, 186, 189, 191, 192, 193, 197, 200, 210, 224, 225, 231, 232, 233, 234, 235, 236, 237, 244, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263], "alleg": 251, "allow": [4, 25, 33, 61, 64, 65, 86, 89, 94, 128, 137, 140, 151, 191, 195, 248, 251, 259], "allow_pad": 71, "allow_trunc": 71, "allowd": 65, "almost": [252, 255, 261], "alon": [59, 225], "along": [67, 144, 169, 174, 251, 255], "alpha": [7, 18, 19, 20, 29, 33, 78, 80, 104, 105, 106, 107, 108, 218, 231], "alpha_": 218, "alpha_alpha_channel": 191, "alpha_beta_channel": 191, "alpha_devic": [8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 25, 27, 28, 30, 35, 224], "alpha_propag": 30, "alpha_receiv": 191, "alpha_recept": 30, "alpha_transmiss": 30, "alpha_transmitt": 191, "alreadi": [30, 36, 55, 59, 61, 64, 86, 91, 92, 178, 200, 224, 248, 250, 251, 260, 262], "also": [2, 3, 13, 30, 33, 36, 65, 90, 122, 217, 225, 237, 248, 250, 251, 254, 255, 261], "alter": [250, 255], "altern": [142, 150, 151, 156, 165, 200, 251], "alwai": [19, 32, 58, 65, 90, 125, 235, 254, 255, 262], "among": [65, 76, 251], "amount": [1, 2, 3, 5, 29, 36, 65], "amplif": [90, 191, 205, 214, 215, 216, 217, 218, 225], "amplifc": 213, "amplifi": [191, 205, 213, 244, 263], "amplitud": [7, 8, 9, 10, 11, 12, 29, 111, 137, 175, 179, 180, 181, 182, 191, 205, 206, 207, 208, 214, 216, 218, 241, 262], "amplitude_alpha": 218, "amplitude_beta": 218, "amplitude_imbal": 205, "amplitude_path_loss": 241, "amplitudeshiftkei": 262, "an": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 55, 59, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 241, 242, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "analog": [39, 81, 94, 117, 118, 119, 120, 167, 174, 176, 185, 191, 205, 206, 208, 225, 248, 255, 261], "analog_digital_convers": 176, "analog_digital_convert": [207, 208, 209, 210, 211, 212], "analogdigitalconvert": [205, 206, 207], "analys": [2, 3, 5], "analysi": [2, 3, 263], "analyz": [5, 30], "ancient": [13, 263], "ancillari": 251, "andr": [21, 263], "andrea": [21, 263], "andr\u00e9": [249, 263], "angl": [1, 2, 3, 4, 5, 7, 21, 22, 23, 25, 27, 28, 34, 36, 67, 81, 157, 159, 181, 184, 214, 254, 255], "angle_bin": 157, "angle_coupling_indic": [6, 7], "angle_resolut": 36, "angular": 7, "ani": [7, 13, 18, 27, 30, 35, 36, 54, 55, 58, 59, 65, 68, 85, 86, 87, 89, 109, 135, 136, 137, 153, 156, 161, 163, 165, 184, 191, 200, 215, 216, 217, 218, 220, 222, 223, 225, 248, 249, 250, 251, 252, 255, 260], "anim": [90, 225], "annot": [53, 59, 104, 105, 106, 107, 108, 163, 165, 166, 190, 244, 256, 258], "anntena": [36, 178, 183], "anntenna": 183, "anoth": [17, 36, 132, 136, 178, 185], "answer": 258, "ant": 191, "anteannaarrai": 176, "antenna": [1, 2, 3, 4, 5, 7, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 41, 48, 51, 53, 57, 66, 67, 81, 85, 88, 89, 90, 94, 97, 98, 99, 117, 118, 119, 120, 123, 124, 125, 169, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 191, 193, 194, 195, 206, 216, 225, 227, 230, 248, 249, 254, 255, 256, 258, 260, 261, 263], "antenna_calibr": [83, 89, 90], "antenna_correl": [21, 22, 25, 26, 28], "antenna_correlation_vari": 26, "antenna_st": 176, "antennaarrai": [36, 39, 81, 94, 176, 178, 183, 254], "antennaarraybas": [36, 81, 94], "antennaarrayst": [1, 2, 3, 5, 15, 24, 36, 66, 89, 90, 176, 225], "antennacalibr": [83, 89], "antennacorrel": [21, 22, 24, 25, 28], "antennamod": [24, 36, 81, 123, 124, 125, 175, 179, 180, 181, 182, 254, 255], "antennaport": [36, 81, 94, 118, 177, 255], "antennas_upd": 36, "antennna": 174, "anti": [65, 251], "anttila": [205, 263], "anual": 250, "anyon": [251, 252], "anyth": [55, 251], "aoa": [5, 7], "aod": 7, "api": [31, 38, 58, 168, 244, 248, 249, 251, 255, 256, 257, 258, 261, 264], "appear": 65, "append": [38, 55, 65, 72, 89, 94, 127, 250], "append_sampl": 65, "append_stream": [65, 127], "append_symbol": 127, "appli": [7, 9, 10, 11, 12, 32, 39, 48, 51, 59, 60, 65, 68, 77, 83, 84, 89, 92, 97, 98, 99, 110, 118, 120, 121, 122, 137, 144, 155, 167, 169, 175, 179, 180, 181, 182, 186, 196, 205, 207, 208, 209, 210, 248, 250, 251, 253, 254, 263], "applic": [0, 1, 64, 93, 111, 135, 136, 200, 249, 251, 254], "apprixm": 206, "approach": [23, 96, 99, 125, 263], "appropri": [209, 232, 251], "approv": 251, "approxim": [17, 23, 111, 241, 251, 256], "april": 263, "apt": 36, "ar": [2, 3, 5, 7, 13, 14, 18, 21, 22, 23, 25, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 52, 54, 55, 56, 59, 61, 62, 63, 64, 65, 66, 71, 76, 81, 86, 100, 101, 102, 110, 111, 117, 119, 120, 121, 125, 127, 128, 131, 135, 137, 140, 142, 147, 150, 151, 156, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 178, 185, 186, 189, 190, 191, 192, 193, 200, 205, 206, 207, 213, 215, 219, 220, 224, 225, 226, 229, 231, 232, 237, 238, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "arang": [32, 34, 255, 262], "arbitrari": [36, 53, 59, 71, 81, 100, 104, 105, 106, 107, 108, 111, 133, 136, 137, 163, 165, 166, 190, 191, 255], "architectur": 31, "archiv": [250, 251], "area": [7, 8, 21, 125, 243, 263], "arg": [14, 32, 55, 59, 60, 61, 64, 82, 86, 91, 93, 135, 136, 137, 138, 139, 140, 141, 195, 224, 254], "arg0": [69, 74, 75, 77, 78, 80], "arg1": [69, 74, 75, 77, 78, 80], "arg2": [69, 74, 75, 78, 80], "arg3": [74, 75, 78, 80], "arg4": [74, 78], "arg_0": [36, 67, 176], "arg_1": [67, 176], "arguabl": [258, 259], "argument": [1, 22, 32, 36, 48, 51, 55, 56, 59, 65, 81, 86, 91, 94, 135, 157, 215, 217, 218, 224], "argument_tupl": 59, "ari09": 263, "aribtrai": 176, "aribtrarili": 191, "arikan": [75, 263], "aris": 251, "around": [1, 36, 48, 51, 69, 74, 75, 77, 78, 80, 137, 178, 191, 207, 225, 258], "arrai": [1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 23, 24, 25, 29, 32, 33, 35, 36, 37, 39, 48, 51, 53, 55, 59, 65, 66, 67, 68, 79, 81, 83, 89, 90, 94, 97, 98, 99, 102, 109, 111, 113, 115, 117, 118, 119, 120, 127, 138, 139, 140, 141, 145, 148, 157, 163, 164, 165, 166, 167, 169, 172, 173, 174, 175, 177, 179, 180, 181, 182, 187, 188, 190, 191, 196, 222, 225, 248, 254, 255, 257, 260], "arrang": 251, "arrari": [2, 3, 254], "array_comparison": 255, "array_respons": 254, "arriv": [1, 2, 3, 5, 7, 27, 36, 90, 157, 225], "arsenia": 263, "art": [79, 132, 263], "articl": [69, 74, 75, 77, 78, 80, 251, 263], "artifact": [52, 53, 54, 59, 86, 95, 101, 102, 104, 105, 106, 107, 108, 163, 164, 165, 166, 190, 231, 258], "artifact_scalar": 59, "artifacto": 163, "artifactplot": 95, "artifacttempl": [59, 104, 105, 106, 107, 108, 163], "arxiv": [77, 263], "asarrai": 65, "ashkan": [221, 263], "asign": 13, "ask": [244, 262], "aspect": [0, 21, 263], "asplund": [21, 263], "assert": [244, 251], "assess": 253, "asset": 251, "assigend": 248, "assign": [2, 3, 5, 59, 76, 119, 121, 153, 156, 169, 172, 173, 174, 176, 202, 225, 233, 234, 235, 236, 237, 248, 253, 255, 262], "assist": 131, "associ": [13, 110, 145, 146, 147, 148, 149, 154, 204, 251], "assum": [1, 2, 3, 5, 7, 8, 9, 15, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 44, 48, 51, 58, 59, 64, 65, 66, 75, 81, 85, 89, 90, 91, 97, 98, 99, 111, 112, 118, 119, 120, 125, 128, 137, 138, 139, 141, 142, 150, 151, 153, 156, 163, 165, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 196, 200, 205, 224, 225, 238, 248, 251, 252, 254, 255, 259, 261], "assumpt": [30, 35, 194, 196, 248, 251, 261], "ast": [30, 33], "astronomi": [13, 263], "astyp": [259, 262], "asymptot": [59, 263], "asynchron": 237, "atennna": 255, "attach": [32, 36, 46, 62, 67, 71, 87, 90, 94, 109, 128, 129, 130, 132, 133, 135, 152, 155, 178, 225, 251], "attempt": [59, 251], "attenu": [18, 32, 33, 34, 84, 99, 163, 165, 166, 167, 254, 261], "attr": 109, "attribut": [13, 28, 59, 65, 68, 86, 112, 122, 123, 124, 125, 157, 169, 176, 225, 251, 255], "audio": [88, 248, 250, 264], "audioantenna": 81, "audiodevic": [81, 82, 253], "audiodeviceantenna": 81, "audioplaybackport": 81, "audioport": 81, "audiorecordport": 81, "audioscenario": 82, "aumag": [69, 74, 75, 77, 78, 80, 263], "author": 251, "autodoc": 244, "autom": 244, "automat": [36, 55, 59, 89, 174, 176, 178, 184, 191, 207, 244, 248, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "automaticgaincontrol": [206, 208, 261], "automatig": 211, "automot": 191, "avail": [36, 39, 48, 51, 54, 59, 64, 65, 66, 81, 97, 98, 99, 100, 111, 117, 118, 119, 120, 130, 137, 142, 147, 150, 169, 172, 173, 174, 176, 178, 184, 190, 191, 192, 200, 213, 225, 231, 232, 248, 250, 251, 258, 262], "averag": [39, 104, 128, 135, 137, 147, 166, 258, 262], "average_pow": 53, "avoid": [30, 35, 37, 65, 66, 127], "awai": [251, 254, 255], "awgn": [137, 200, 225, 256, 260, 262], "awgnreal": [203, 204], "ax": [7, 27, 53, 59, 65, 68, 87, 104, 105, 106, 107, 108, 127, 161, 163, 165, 166, 190, 207, 216, 222, 223, 258], "axesimag": 68, "axi": [59, 65, 68, 144, 157, 174, 207, 216, 255, 259, 260, 262], "azimuth": [1, 2, 3, 5, 7, 34, 36, 67, 81, 157, 159, 184, 254], "azimuth_angle_variation_vari": 7, "azimuth_arrival_spread": 7, "azimuth_departure_spread": 7, "azimuth_of_arriv": 7, "azimuth_of_departur": 7, "azimuth_spread_sign": 7, "b": [1, 2, 3, 5, 6, 23, 28, 58, 65, 69, 74, 75, 77, 78, 80, 99, 104, 105, 106, 107, 108, 157, 232, 241, 248, 251, 263], "b_": [104, 105, 107, 108], "back": [79, 90, 210, 248, 250, 262], "backend": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 165, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 243], "background": 202, "backoff": 208, "backscatt": 97, "backward": [67, 122], "backwards_transform": 67, "bahl": [78, 263], "balanc": [7, 23, 25], "band": [13, 15, 29, 39, 44, 45, 48, 49, 50, 51, 65, 66, 79, 81, 89, 90, 94, 95, 97, 98, 99, 113, 114, 115, 116, 118, 121, 126, 128, 132, 135, 136, 137, 147, 155, 157, 169, 176, 191, 205, 225, 231, 232, 248, 260, 262, 263], "bandlimit": 13, "bandwidth": [2, 3, 15, 16, 27, 32, 33, 34, 81, 89, 128, 135, 137, 138, 139, 140, 141, 150, 153, 167, 225, 254, 261, 262], "bandwith": 191, "bar": [59, 243], "bar50": 263, "bare": [118, 120], "barebon": [117, 118, 119, 120], "barkausen": 251, "barreto": [249, 263], "barthou": [69, 74, 75, 77, 78, 80, 263], "bartlett": [3, 263], "base": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 244, 248, 249, 250, 251, 255, 256, 260, 261, 262], "base_group": 55, "base_port": 36, "base_pos": [36, 176], "base_station_devic": [2, 3, 5, 255], "base_station_receiv": [2, 3, 5], "base_station_transmitt": [3, 5, 255], "baseband": [1, 120, 167, 226, 229, 254, 262], "baseband_recept": 262, "baseband_sampl": 262, "baseband_sign": [128, 135, 137, 147, 226, 229, 255, 257], "baseband_transmiss": 262, "basemodem": [71, 97, 98, 99, 112, 117, 118, 119, 120, 122, 128, 197, 198, 199], "basi": [39, 191, 257, 258], "basic": [13, 30, 33, 57, 66, 73, 76, 100, 191, 193, 241, 249, 251, 255, 256, 259], "bass": 89, "bastract": 164, "bayer": [59, 263], "bch": 73, "bchcode": 69, "bcjr": 78, "bcjr74": 263, "beach": [23, 263], "beaform": 254, "beam": [1, 184, 255], "beamfocu": [1, 184], "beamfor": 169, "beamform": [0, 97, 98, 99, 169, 184, 248, 258, 263, 264], "beamformed_sampl": 254, "beamformingtransmitt": 255, "beanfornm": 2, "beaulieu": [23, 263], "becaus": [251, 256], "becom": [59, 132, 162, 249, 251, 258], "bee": 109, "been": [6, 13, 37, 53, 59, 123, 124, 225, 248, 251, 252, 253, 254, 259], "befor": [37, 39, 65, 67, 86, 113, 114, 115, 117, 119, 122, 123, 124, 126, 130, 162, 191, 205, 208, 209, 210, 216, 248, 250, 252, 254, 255, 257, 258], "beforehand": 65, "begin": [29, 36, 81, 137, 147, 150, 205, 231, 254, 259, 264], "behalf": 251, "behav": 248, "behaviour": [7, 13, 15, 18, 27, 29, 30, 31, 33, 35, 38, 54, 59, 65, 71, 90, 207, 214, 216, 225, 231, 237, 248, 256, 258], "being": [1, 2, 3, 5, 7, 10, 11, 12, 14, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 32, 33, 34, 38, 58, 61, 66, 70, 86, 137, 140, 168, 184, 191, 192, 224, 231, 237, 248, 251, 252, 254, 258], "belgium": [213, 217, 263], "believ": 251, "belong": [13, 36, 59, 81, 83, 86], "below": 251, "benchmark": 81, "benefit": 251, "bengtsson": [23, 263], "ber": [8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 75, 104, 232, 248, 253, 256, 260], "ber_a": 232, "ber_b": 232, "berrou": [80, 263], "best": 251, "beta": [7, 18, 19, 20, 29, 33, 78, 80, 104, 105, 106, 107, 108, 218, 231], "beta_": 218, "beta_beta_channel": 191, "beta_devic": [8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 25, 27, 28, 30, 35, 224], "beta_propag": 30, "beta_receiv": 191, "beta_recept": 30, "beta_transmiss": 30, "beta_transmitt": 191, "better": 251, "betwe": 162, "betweeen": 119, "between": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 32, 33, 35, 36, 37, 59, 66, 70, 71, 79, 84, 90, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 119, 122, 123, 124, 125, 126, 129, 132, 135, 136, 137, 139, 140, 141, 142, 144, 150, 151, 153, 156, 166, 167, 173, 176, 183, 188, 191, 192, 193, 194, 196, 208, 209, 224, 225, 226, 227, 229, 230, 232, 233, 234, 236, 238, 241, 248, 249, 251, 255, 256, 257, 258, 260, 261, 263], "beyond": 251, "bgt93": 263, "bhvst14": 263, "bi": [250, 251], "bidirect": 110, "big": 65, "bigger": [29, 65, 71, 242], "bin": [37, 65, 157, 163, 167, 172, 250], "binari": [53, 59, 69, 75, 111, 165, 250, 261, 262, 263], "bind": [81, 82, 88, 92, 250], "bindung": 94, "biometrika": [3, 263], "bisaglia": 111, "bistat": [32, 191], "bit": [30, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 101, 103, 105, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 128, 135, 137, 147, 198, 199, 200, 207, 232, 248, 249, 253, 256, 259, 260, 261, 262], "bit_block_s": [69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 114, 116, 259], "bit_energi": [128, 135, 137, 147, 262], "biterrorartifact": 104, "biterrorevalu": [8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 101, 104, 232, 248, 253, 256, 259, 260, 262], "bitord": 262, "bits_per_fram": [108, 128, 262], "bits_per_symbol": [111, 128, 135], "bits_sourc": [100, 117, 119, 120], "bitsourc": 109, "bitssourc": [100, 109, 117, 119, 120], "bjepc14": 263, "black": 244, "blazingli": 258, "bler": 105, "bloat": 65, "block": [15, 29, 59, 65, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 101, 103, 107, 108, 110, 111, 114, 116, 121, 126, 127, 128, 130, 135, 137, 144, 147, 249, 259, 263], "block_siz": 70, "blockag": 7, "blockerrorartifact": 105, "blockerrorevalu": 105, "blockinterleav": [70, 117, 118, 120], "blostein": [132, 263], "bmatrix": 29, "bodi": 251, "bomfin": 252, "bool": [7, 9, 10, 11, 12, 13, 18, 19, 20, 32, 33, 34, 36, 39, 48, 51, 53, 54, 55, 59, 64, 65, 67, 71, 74, 78, 85, 86, 89, 90, 92, 94, 102, 104, 105, 106, 107, 108, 111, 128, 135, 137, 147, 150, 153, 156, 162, 163, 166, 208, 209, 210, 214, 216, 224, 225, 226, 227, 229, 231], "boolean": [17, 59, 65, 94, 128, 135, 144, 147, 163, 226], "borner": [36, 263], "bose": [69, 263], "both": [1, 7, 18, 20, 23, 30, 33, 36, 39, 65, 79, 95, 96, 110, 111, 119, 121, 130, 142, 144, 147, 150, 151, 156, 176, 185, 191, 192, 200, 203, 208, 244, 248, 249, 251, 256, 258, 260], "bound": [1, 7, 10, 11, 12, 13, 14, 15, 18, 29, 33, 36, 39, 42, 43, 48, 49, 50, 51, 52, 55, 59, 61, 62, 64, 66, 68, 81, 86, 87, 89, 92, 97, 104, 105, 106, 107, 108, 112, 118, 120, 128, 129, 130, 132, 133, 136, 145, 147, 148, 152, 154, 155, 163, 170, 171, 200, 263], "boundari": [6, 7, 9, 13, 21, 28, 36, 37, 38, 55, 58, 64, 86, 122, 143, 144, 211, 212, 241], "box": [110, 248], "bpsk": 111, "brc60": 263, "brief": 251, "broadcast": [39, 46, 175, 213, 217, 248, 263], "brook": 263, "browser": 244, "buffer": 33, "bufferd": 78, "buffered_cod": 78, "bug": 250, "build": [7, 244, 250], "built": [250, 258], "bullet": 5, "burkhardt": [31, 263], "busi": 251, "bypass": [89, 90, 248], "b\u00f6rner": [31, 263], "c": [1, 2, 3, 5, 6, 7, 13, 15, 18, 19, 20, 23, 25, 27, 28, 29, 30, 31, 33, 35, 36, 39, 58, 65, 69, 74, 75, 77, 78, 80, 106, 154, 155, 157, 169, 213, 244, 250, 251, 252, 254, 255, 263], "c_0": [20, 33, 99, 169], "cabl": [84, 253], "cach": [13, 55, 56, 68, 89, 168, 169], "calcul": [59, 111, 208, 221, 241, 263], "calibr": [88, 89, 90, 92], "call": [1, 2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 17, 26, 29, 30, 31, 32, 33, 35, 36, 39, 48, 51, 56, 59, 64, 66, 86, 87, 89, 92, 113, 114, 115, 116, 117, 118, 119, 120, 168, 169, 170, 171, 172, 176, 191, 216, 224, 225, 231, 248, 249, 251, 252, 253, 254, 255, 257, 258, 260], "callabl": [13, 48, 51, 55, 56, 59, 86], "callback": [7, 13, 36, 39, 48, 51, 55, 56, 59, 64, 89, 90, 92, 224, 225], "caller": 65, "campa": 86, "campaign": [2, 3, 5, 55, 59, 64, 86, 104, 105, 106, 107, 108, 165, 191, 248, 255, 257, 261, 262], "can": [1, 2, 3, 4, 5, 21, 23, 30, 32, 33, 36, 53, 55, 56, 59, 64, 65, 67, 71, 76, 81, 86, 99, 105, 107, 108, 109, 110, 111, 117, 118, 119, 120, 121, 122, 123, 124, 125, 131, 132, 135, 138, 139, 140, 141, 144, 145, 148, 149, 151, 168, 169, 174, 176, 191, 192, 200, 202, 206, 207, 209, 225, 231, 233, 234, 235, 236, 237, 243, 244, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "cancel": [75, 205, 263], "candid": [255, 261], "cannot": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 165, 167, 169, 170, 173, 184, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 251], "canyon": [7, 11, 12], "cap69": [254, 263], "capab": 191, "capabl": [225, 248, 256], "capac": [75, 263], "capaign": 259, "capon": [4, 254, 263], "caponbeamform": [2, 254], "captur": [39, 46], "card": [82, 88, 253], "care": 84, "carlo": [59, 191, 224, 225, 231, 248, 249, 255, 256, 258, 260, 261, 263], "carri": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 157, 158, 159, 161, 162, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 251, 260], "carrier": [1, 2, 3, 5, 15, 16, 18, 27, 33, 39, 41, 44, 48, 51, 65, 66, 81, 89, 90, 94, 97, 98, 99, 117, 118, 119, 120, 121, 123, 125, 132, 138, 139, 140, 141, 147, 151, 155, 157, 169, 191, 221, 225, 227, 230, 241, 248, 253, 254, 257, 261, 263], "carrier_frequ": [1, 2, 3, 5, 8, 9, 10, 11, 12, 15, 16, 19, 20, 21, 22, 25, 27, 28, 32, 33, 34, 35, 36, 39, 41, 44, 48, 51, 65, 66, 81, 89, 90, 94, 97, 98, 99, 117, 118, 119, 120, 142, 150, 151, 156, 157, 163, 165, 166, 167, 168, 169, 176, 191, 225, 227, 230, 232, 233, 234, 235, 236, 237, 241, 248, 254, 255, 257, 259, 261], "carrier_frequenc": 16, "carter": 263, "cartesean": 67, "cartesian": [1, 33, 36, 66, 67, 159, 173, 255], "cartesian_array_respons": 36, "cartesian_phase_respons": 36, "case": [1, 2, 7, 32, 54, 59, 64, 65, 67, 89, 104, 105, 106, 107, 108, 109, 132, 163, 174, 176, 185, 192, 214, 224, 248, 251, 255, 256, 257, 258], "cassagn": [69, 74, 75, 77, 78, 80, 263], "cat": [23, 263], "catch": 59, "catch_except": 59, "catesean": 67, "caught": 59, "caus": [65, 251, 255], "caution": 54, "cb06": 263, "cb07": 263, "cd": 250, "cdl": [7, 8, 9, 10, 11, 12], "cdlrealiz": 6, "cdlrt": 7, "cdltype": 6, "cdot": [5, 7, 70, 71, 76, 214, 217, 218], "ceas": 251, "ceil": [8, 173], "cell": [31, 263], "center": [36, 65, 90, 225], "central": [1, 2, 3, 5, 33, 39, 44, 48, 51, 59, 81, 94, 97, 98, 99, 128, 157, 169, 191, 225], "cerdeira": [31, 263], "certain": [1, 36, 71, 77, 111, 198, 251, 263], "cessat": 251, "cfar": 263, "ch": [213, 217, 263], "chafii": 263, "chain": [33, 62, 67, 71, 73, 89, 90, 117, 119, 168, 174, 176, 177, 185, 188, 191, 192, 193, 194, 196, 206, 216, 224, 225, 226, 227, 229, 230, 250, 254, 255, 260, 261], "chanc": 244, "chanel": [7, 15, 18, 27, 29, 31, 33, 35], "chang": [17, 29, 35, 36, 37, 64, 67, 94, 125, 167, 173, 176, 191, 251, 255], "chann": 32, "channel": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 16, 21, 22, 23, 24, 26, 27, 28, 31, 32, 34, 36, 57, 70, 71, 72, 75, 76, 79, 81, 84, 89, 90, 91, 110, 117, 118, 119, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 150, 151, 156, 163, 164, 165, 166, 167, 168, 189, 191, 202, 224, 225, 231, 232, 248, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264], "channel_equ": [2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 117, 118, 119, 128, 138, 139, 140, 141, 142, 150, 151, 156, 248, 253, 256, 257], "channel_estim": [2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 117, 118, 119, 123, 124, 125, 128, 138, 139, 140, 141, 142, 150, 151, 156, 248, 253, 256, 257], "channel_r": [30, 189, 224], "channelequ": [128, 129, 133, 256], "channelestim": [128, 130], "channelr": [6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 26, 29, 30, 31, 32, 33, 34, 35, 189, 224, 256], "channelsampl": [7, 13, 14, 15, 18, 27, 29, 30, 31, 33, 35, 256], "channelsamplehook": [6, 7, 9, 10, 11, 12, 13, 14, 26, 29, 31, 32, 33, 35, 256], "channelstatedimens": 37, "channelstateformat": [37, 256], "channelstateinform": [7, 15, 18, 27, 29, 31, 33, 35, 37, 256, 260], "characerist": 255, "character": [36, 81, 251], "characterest": [2, 3, 5], "characteris": 1, "characterist": [2, 3, 5, 7, 32, 33, 34, 36, 81, 137, 164, 168, 174, 175, 176, 195, 196, 207, 213, 214, 215, 216, 217, 218, 219, 254, 264], "characteristc": [165, 261], "charactersit": [36, 261], "charaterist": 207, "charcterist": 255, "charg": 251, "chaudhuri": [69, 263], "check": [59, 64, 73, 263], "check_block_s": 72, "checksum": 72, "chengshan": [23, 263], "chi": 241, "chirp": [110, 128, 134, 135, 138, 150, 167, 261], "chirp_bandwidth": 135, "chirp_dur": [135, 138, 167, 261], "chirp_slop": 138, "chirpfskcorrelationsynchron": 135, "chirpfsksynchron": 135, "chirpfskwaveform": 135, "chirps_in_fram": 135, "chleonardon": 263, "choic": [244, 250, 251], "choos": [248, 251], "chorti": 263, "chosen": 262, "christian": [59, 99, 263], "chronologi": [13, 263], "circl": 262, "circuit": [221, 263], "circular": 203, "circumst": 251, "circumvent": 251, "cite": 249, "civil": 251, "cl": 256, "claim": 251, "class": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 248, 251, 254, 256, 258, 259, 260, 262, 263], "classic": 255, "classif": [132, 263], "classmethod": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 17, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 52, 55, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 129, 130, 132, 135, 136, 137, 138, 143, 144, 146, 147, 148, 149, 157, 158, 159, 161, 162, 165, 167, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 256], "claus": 251, "clear": 251, "clearli": [253, 257], "cli": 250, "clip": 213, "clippingpoweramplifi": 214, "clock": [132, 135, 136], "clone": 250, "close": [55, 251, 257], "closest": 30, "cloud": [97, 98, 99, 158, 160, 162, 163, 168, 169, 170, 191], "cluster": [6, 8, 9, 10, 11, 12, 30, 191, 249], "cluster_delai": 7, "cluster_delay_lin": [7, 8, 9, 10, 11, 12], "cluster_delay_spread": 7, "cluster_delays_vari": 7, "cluster_pow": 7, "cluster_shadowing_log_vari": 7, "clusterdelaylinebas": [7, 8, 9, 10, 11, 12], "clusterdelayliner": [7, 8, 9, 10, 11, 12], "clusterdelaylinerealizationparamet": [7, 8, 9, 10, 11, 12], "clusterdelaylinesampl": [6, 7, 9, 10, 11, 12], "cluter": 8, "clutter": [8, 33, 34, 263], "clutter_dens": 8, "clutter_height": 8, "clutter_s": 8, "cmake": 250, "co": [5, 23, 36, 255], "cock": [78, 263], "code": [5, 39, 62, 65, 70, 72, 73, 74, 79, 110, 111, 112, 117, 118, 119, 120, 121, 130, 138, 139, 140, 141, 167, 212, 213, 248, 250, 251, 262, 263, 264], "code_block_s": [69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 114, 116, 259], "coeffici": 2, "cofdm": 111, "cofid": 59, "coher": [127, 260], "col": 243, "colab": 264, "collabor": [5, 263], "collect": [30, 36, 53, 59, 62, 68, 102, 113, 115, 126, 163, 164, 166, 176, 190, 191, 224, 225, 240, 248, 251, 255, 258, 261], "color": 54, "column": [5, 65], "com": [69, 74, 75, 77, 78, 80, 243, 263], "combi": 254, "combin": [28, 41, 59, 71, 98, 117, 119, 121, 124, 167, 169, 174, 191, 248, 250, 251, 255, 256, 261], "come": 251, "comm": [213, 217, 263], "command": [68, 244, 248, 250, 251, 261], "commerci": 251, "commin": 117, "commit": 251, "common": [55, 59, 95, 101, 102, 110, 174, 192, 203, 251, 256, 260], "commonli": 175, "commuic": [110, 232], "commun": [0, 2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 23, 25, 28, 30, 35, 65, 70, 71, 73, 80, 81, 96, 97, 98, 99, 100, 101, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 147, 150, 151, 153, 154, 155, 156, 175, 191, 192, 198, 199, 200, 203, 213, 218, 221, 224, 225, 231, 248, 249, 251, 253, 255, 256, 257, 259, 260, 263, 264], "communc": 262, "communication_artifact": 101, "communication_evalu": 101, "communicationevalu": [102, 104, 105, 106, 107, 108], "communicationnoiselevel": [197, 198, 199], "communicationrecept": [97, 113, 114, 118], "communicationreceptionfram": [113, 114], "communicationtransmiss": [97, 115, 120], "communicationtransmissionfram": [115, 116], "communicationwaveform": [97, 98, 112, 117, 118, 119, 120, 128, 129, 130, 132, 133, 135, 137, 138, 139, 140, 141, 147, 150, 152, 153, 155, 156, 197, 198, 199, 262], "communicaton": [128, 135, 137, 147], "compar": [101, 103, 110, 176, 202, 248, 254, 255, 257], "comparison": 263, "compat": 58, "compens": [84, 137, 232, 243], "compil": 251, "complementari": 262, "complet": [29, 55, 59, 188, 224, 237, 249, 252, 255], "complex": [1, 3, 5, 13, 23, 33, 36, 55, 62, 65, 81, 111, 117, 118, 119, 120, 127, 128, 132, 135, 136, 137, 147, 155, 175, 179, 180, 181, 182, 191, 200, 203, 208, 213, 214, 225, 248, 249, 253, 254, 256, 258, 260, 262], "complex128": [65, 128], "compli": 251, "complianc": [244, 251], "compliant": [1, 71, 244], "compon": [7, 13, 15, 18, 21, 22, 23, 25, 27, 28, 29, 31, 33, 35, 36, 81, 111, 117, 118, 119, 120, 132, 153, 156, 193, 194, 221, 251], "compos": [7, 23, 191], "composit": 169, "comprehens": 7, "compress": [1, 258], "compris": 110, "comput": [1, 7, 15, 18, 23, 27, 29, 31, 33, 35, 36, 37, 59, 65, 67, 71, 81, 165, 169, 184, 191, 193, 194, 238, 241, 249, 251, 254, 258, 261, 262, 263], "computation": [37, 59, 127], "compute_num_offset_sampl": 238, "con": 255, "concaten": [37, 65, 127, 248], "concept": [71, 99, 108, 249, 255, 256, 258, 263], "concern": 251, "concret": 30, "conda": [250, 252], "condit": [7, 251], "conduct": [3, 5, 248, 255], "conf": [111, 213, 217, 263], "confer": [23, 31, 80, 99, 263], "confid": 59, "confidence_statu": 59, "configur": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 24, 25, 28, 30, 32, 33, 34, 35, 38, 39, 46, 54, 55, 59, 62, 64, 70, 71, 81, 85, 86, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 110, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131, 135, 136, 137, 138, 139, 140, 141, 142, 144, 147, 148, 150, 151, 153, 154, 155, 156, 163, 165, 166, 167, 168, 169, 174, 176, 185, 186, 187, 188, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 213, 219, 222, 223, 224, 225, 231, 232, 233, 234, 235, 236, 237, 244, 248, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "configurablepilotwaveform": [128, 137, 138, 139, 140, 141, 147, 150, 153, 156], "configure_devic": 85, "configure_point": 59, "confin": 185, "confirm": 255, "conflict": 35, "confus": 66, "conid": 59, "conist": 30, "conj": 254, "conmsid": 48, "connect": [7, 36, 81, 84, 119, 123, 124, 125, 142, 150, 151, 156, 174, 176, 177, 178, 251, 255, 257, 258], "consecut": [61, 167], "consequ": [251, 258], "consequenti": 251, "consetal": [2, 3, 5], "consid": [1, 2, 3, 5, 7, 13, 15, 17, 18, 21, 22, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 48, 51, 55, 59, 60, 62, 63, 65, 66, 67, 71, 75, 81, 85, 90, 97, 98, 99, 101, 104, 105, 106, 107, 108, 111, 117, 118, 119, 120, 128, 130, 132, 135, 137, 138, 139, 140, 141, 142, 147, 150, 151, 156, 164, 165, 169, 173, 186, 191, 193, 202, 206, 208, 219, 220, 224, 225, 226, 232, 237, 248, 251, 255, 256, 257, 260, 261], "considered_object": 59, "consisd": 31, "consist": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12, 23, 30, 64, 71, 73, 88, 142, 150, 151, 156, 167, 168, 200, 225, 248, 251, 255, 256, 257, 258, 260, 261], "consistent_r": [6, 19, 32, 34], "consistent_sampl": 256, "consistentboolean": 17, "consistentgaussian": [7, 17], "consistentgener": [17, 256], "consistentr": [6, 7, 8, 9, 10, 11, 12, 17, 256], "consistentsampl": 17, "consistentuniform": [6, 7, 17, 256], "consistentvari": 17, "consol": [53, 54, 59, 86, 104, 105, 106, 107, 108, 163, 165, 166, 190, 191, 231], "console_mod": [54, 59, 231, 254, 255, 256, 258, 259, 260, 261, 262], "consolemod": [38, 54, 59, 231, 254, 255, 256, 258, 259, 260, 261, 262], "consolid": [33, 48, 51, 169, 248], "conspicu": 251, "constant": [19, 25, 55, 65, 173, 216, 234, 236, 254, 255], "constel": [5, 95, 106, 111, 127, 137, 147, 248, 253, 257, 262], "constellationevm": [2, 3, 5, 106], "constitut": 251, "constraint": 191, "constru": 251, "construct": [65, 75, 225, 263], "constructor": [32, 91, 224], "consum": [66, 81, 251], "contact": [249, 251], "contain": [1, 2, 3, 5, 7, 36, 37, 38, 42, 47, 52, 59, 60, 64, 65, 66, 68, 71, 79, 90, 110, 111, 113, 126, 128, 132, 135, 137, 138, 139, 140, 141, 147, 148, 161, 163, 164, 165, 166, 169, 174, 189, 191, 222, 224, 225, 226, 237, 238, 240, 250, 251, 257, 258, 263], "content": [53, 58, 59, 165, 166, 251, 253], "context": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 32, 34, 35, 54, 55, 104, 105, 106, 107, 108, 121, 163, 165, 166, 167, 168, 174, 175, 225, 248, 251, 262], "continu": [3, 13, 30, 138, 167, 225, 251, 263], "contractu": 251, "contradict": 251, "contrast": 251, "contribut": [244, 249], "contributor": [244, 251], "control": [30, 59, 69, 79, 86, 89, 94, 174, 191, 206, 207, 233, 234, 235, 236, 237, 251, 252, 258, 261, 262, 263], "convei": 251, "conveni": [23, 36, 60, 61, 64, 112, 119, 169, 178, 191, 231, 248, 251, 262], "convent": [1, 2, 4, 254, 255, 263], "conventionalbeamform": [3, 117, 118, 119, 254, 255], "convers": [37, 39, 53, 58, 59, 65, 94, 117, 118, 119, 120, 165, 166, 167, 176, 185, 191, 205, 208, 241, 248, 261], "conversion_typ": 241, "convert": [37, 39, 53, 58, 59, 65, 67, 81, 94, 127, 160, 165, 205, 206, 225, 241, 253, 255, 262], "convey": 251, "convolut": [30, 78, 137, 263], "cooper": 251, "coordiant": [34, 36, 159], "coordin": [1, 2, 3, 5, 30, 33, 34, 36, 39, 57, 59, 66, 89, 90, 159, 173, 225, 254, 255], "coordinatefocu": 1, "copi": [1, 2, 3, 5, 36, 59, 65, 81, 127, 184, 191, 250, 251, 257, 259, 260], "copyleft": 251, "copyright": 251, "core": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 81, 83, 84, 85, 86, 89, 90, 92, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 166, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 248, 254, 255, 256, 257, 258, 259, 260, 261, 262], "correct": [0, 69, 72, 74, 75, 77, 78, 80, 83, 84, 101, 103, 110, 112, 114, 116, 117, 118, 119, 120, 129, 251, 259, 263], "correct_receive_delai": 84, "correct_recept": 83, "correct_transmiss": 83, "correct_transmit_delai": 84, "corrected_data": 259, "correction_pow": [69, 77], "correl": [2, 7, 21, 22, 23, 25, 28, 30, 34, 135, 150, 187, 254, 263], "correlatiom": 98, "correlation_dist": [21, 22, 25, 28], "correlationsynchron": [135, 136, 142, 150, 151, 156], "corresp": [78, 263], "correspond": [5, 64, 66, 111, 228, 251], "corret": [69, 248], "cosin": [2, 3, 5, 110, 128, 134, 137, 175, 248, 253], "cost": [251, 263], "cost256": 21, "cost259": [21, 23, 263], "cost259typ": 21, "costli": 37, "cought": 35, "could": [248, 251, 258], "count": [36, 40, 41, 47, 65], "count_antenna": 36, "count_receive_antenna": 36, "count_transmit_antenna": 36, "counterclaim": 251, "counterpart": 260, "countri": 251, "coupl": [6, 90, 176, 191, 192, 225], "coupling_model": 176, "cours": [185, 192, 200, 213, 219, 232, 237, 248, 255, 262], "court": 251, "courtesi": 252, "covari": [2, 24, 85, 254], "coven": 251, "coventionalbeamform": 254, "cover": [244, 251], "coverag": [244, 251], "cox": [151, 263], "cpu": [59, 191, 231, 248, 258], "cpus_per_actor": 59, "cr": 29, "crc": 72, "creat": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 17, 19, 20, 21, 22, 25, 28, 30, 32, 34, 35, 36, 54, 59, 61, 64, 65, 66, 68, 81, 86, 93, 99, 101, 104, 105, 106, 107, 108, 122, 123, 124, 125, 127, 157, 161, 163, 165, 166, 167, 173, 174, 178, 184, 185, 191, 192, 194, 195, 196, 200, 206, 207, 213, 219, 223, 225, 232, 233, 234, 235, 236, 237, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "create_figur": [7, 59, 65, 68, 161, 223], "creation": [61, 64, 250], "criteria": [53, 59, 165, 166, 263], "criterion": 251, "cross": [6, 7, 21, 22, 25, 28, 32, 33, 34, 59, 150, 168, 251, 261], "cross_polarization_phase_vari": 7, "cross_polarization_power_vari": 7, "cross_sect": [32, 33], "crt": [13, 14], "cst": [13, 14, 15, 29], "ct": 89, "ctreat": 5, "cube": [97, 98, 99, 158, 159, 160, 162, 165, 168, 169, 170], "cube_h0": 165, "cube_h1": 165, "cubic": 221, "cummul": 166, "cure": 251, "current": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 54, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 92, 94, 96, 97, 98, 99, 100, 101, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 156, 157, 158, 159, 161, 162, 164, 167, 168, 169, 170, 172, 173, 175, 176, 184, 185, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 213, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 248, 249, 258], "curtesi": 243, "curv": [8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 32, 34, 165, 217], "custom": [23, 55, 60, 117, 118, 119, 120, 121, 135, 138, 139, 140, 141, 151, 176, 185, 191, 206, 213, 238, 248, 251, 255, 258, 260], "custom_arrai": 176, "customantennaarrai": [36, 178], "customantennacorrel": 24, "customari": 251, "customarili": 251, "customiz": [24, 110, 213, 215], "custompilotsymbolsequ": [138, 139, 140, 141], "custompoweramplifi": 215, "cut": [71, 214, 216], "cwt": [97, 112, 118, 120, 128, 129, 130, 132, 133, 152, 155], "cyclic": [73, 99, 142, 144, 145, 148, 150, 151, 156], "cyclicredundancycheck": 72, "d": [6, 23, 28, 30, 31, 36, 69, 74, 75, 77, 78, 80, 132, 154, 155, 248, 251, 254, 263], "d_": [33, 99], "dac": [94, 191, 206], "dai": 251, "damag": 251, "dan": [221, 263], "dani": [205, 263], "data": [7, 37, 52, 53, 54, 55, 59, 61, 62, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 99, 108, 109, 114, 116, 120, 122, 123, 124, 125, 126, 128, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 156, 157, 165, 170, 207, 225, 248, 251, 255, 256, 257, 258, 259, 260, 261, 262], "data_bit": [71, 128, 135, 137, 147, 262], "data_block_s": [69, 75, 77], "data_r": 128, "data_symbol": [128, 135, 137, 145, 147, 148, 262], "data_typ": 65, "dataclass": [59, 173, 225], "dataset": [55, 64, 249, 261, 264], "date": [54, 251], "db": [8, 9, 10, 11, 12, 13, 19, 21, 22, 25, 28, 30, 32, 34, 58, 94, 104, 105, 106, 107, 108, 166, 191, 200, 221, 225, 241, 248, 254, 255, 256, 257, 258, 259, 260, 261, 262], "db2lin": 241, "db_val": 241, "dbconversiontyp": [58, 241], "dc_suppress": [153, 156], "dcrt": 18, "ddot": 29, "de": [65, 213, 217, 263], "deactiv": 260, "debug": [54, 60, 66, 248, 258], "decai": [22, 221], "decemb": 251, "decibel": 58, "decid": [251, 259], "decim": 111, "decis": [70, 163], "declar": [32, 248], "declin": 251, "decod": [1, 2, 3, 5, 62, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 89, 90, 106, 112, 113, 114, 118, 121, 122, 123, 125, 126, 225, 254, 259, 260, 263], "decode_r": 126, "decode_stream": [1, 2, 3, 5, 62], "decode_symbol": [122, 123, 124, 125, 126, 260], "decoded_bit": 114, "decoded_sign": 114, "decoded_symbol": [114, 260], "decorrel": [6, 19, 32, 34], "decorrelation_dist": [6, 17, 19, 32, 34, 256], "decreas": [125, 254], "decsript": 176, "decvic": [90, 225], "dedic": [25, 32, 59, 61, 119, 142, 150, 151, 153, 156, 167, 174, 248, 255, 257], "deduc": 257, "deem": 251, "deep": [36, 81, 127], "deepcopi": [2, 3, 5, 232], "def": [254, 256, 258, 259, 260, 262], "default": [1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 44, 48, 51, 54, 55, 58, 59, 61, 63, 64, 65, 66, 67, 71, 79, 81, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 111, 117, 119, 120, 122, 127, 128, 135, 136, 137, 138, 139, 140, 141, 145, 146, 148, 149, 153, 154, 156, 157, 162, 165, 166, 167, 169, 173, 175, 176, 177, 179, 180, 181, 182, 185, 187, 188, 191, 194, 195, 196, 200, 207, 208, 209, 210, 213, 216, 219, 220, 224, 225, 231, 232, 237, 239, 241, 243, 256, 262], "default_channel": [91, 224], "default_results_dir": [54, 248, 261], "default_rf_chain": 176, "default_rng": 262, "defect": 251, "defend": 251, "defens": 251, "defici": 2, "defin": [2, 3, 5, 7, 8, 21, 28, 35, 36, 59, 67, 70, 71, 88, 99, 104, 105, 106, 107, 108, 111, 128, 131, 135, 137, 147, 174, 197, 198, 199, 202, 215, 221, 248, 249, 251, 254, 255, 257, 258, 260, 261, 262], "definit": [57, 151, 195, 251, 255], "defint": 24, "degener": 65, "delai": [3, 6, 8, 9, 10, 11, 12, 13, 15, 22, 23, 25, 27, 28, 29, 30, 31, 33, 35, 37, 65, 85, 88, 89, 90, 130, 132, 225, 226, 227, 229, 230, 232, 242, 248, 255, 256, 263], "delay_calibr": [84, 89, 90], "delay_norm": [7, 8, 9, 10, 11, 12], "delay_offset": 7, "delay_profil": [26, 27], "delay_resampling_matrix": 242, "delay_vari": 19, "delaycalibr": [84, 85], "delaycalibrationbas": [84, 89], "delaychannel": 18, "delaychannelbas": [18, 19, 20], "delaychannelr": [18, 19, 20], "delaychannelsampl": 18, "delaynorm": [7, 8, 9, 10, 11, 12], "deleg": [117, 118, 119, 120], "delet": [59, 251], "deliv": [7, 8, 9, 10, 11, 12, 21, 28, 79, 263], "delta": [18, 19, 20, 23, 29, 33, 59, 99, 167, 169, 172, 207, 221], "demand": [59, 259], "demap": 122, "demapp": 111, "demodul": [70, 118, 122, 123, 124, 126, 128, 130, 135, 137, 147, 253, 260, 262], "demonstr": [90, 91, 173, 248, 256, 257, 258, 259, 260], "deni": 251, "denomin": 251, "denot": [5, 7, 8, 15, 18, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 39, 44, 46, 81, 94, 97, 98, 104, 105, 106, 107, 108, 127, 157, 167, 169, 172, 217, 221, 225, 233], "dens": [37, 65, 127], "dense_st": [37, 127], "densesign": 65, "densiti": [74, 198, 199, 221, 263], "departur": [1, 3, 5, 7], "depend": [0, 1, 13, 18, 20, 29, 30, 33, 34, 36, 37, 59, 63, 65, 67, 68, 81, 111, 120, 205, 208, 213, 218, 236, 244, 248, 250, 263], "depict": [207, 216, 248], "deploi": [56, 231, 244, 249], "deploy": [21, 249, 263], "depriv": 251, "depth": [249, 255], "deriv": [5, 59, 97, 251], "describ": [0, 1, 30, 37, 64, 65, 66, 67, 70, 76, 79, 111, 128, 173, 174, 207, 218, 225, 248, 250, 255, 256, 262], "descript": [7, 57, 59, 73, 112, 117, 119, 128, 135, 138, 139, 140, 141, 145, 153, 154, 155, 168, 169, 172, 173, 174, 175, 176, 185, 190, 191, 192, 200, 213, 219, 224, 225, 231, 232, 237, 239, 248, 250], "descriptor": 59, "deseri": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 17, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 129, 130, 132, 135, 136, 137, 138, 143, 144, 146, 147, 148, 149, 157, 158, 159, 161, 162, 167, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 256, 257], "deserialization_process": 187, "deserializationprocess": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 17, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 129, 130, 132, 135, 136, 137, 138, 143, 144, 146, 147, 148, 149, 157, 158, 159, 161, 162, 170, 173, 184, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 256], "deserialize_antenna": 36, "deserialize_arrai": 55, "deserialize_complex": 55, "deserialize_custom": 55, "deserialize_flo": [55, 256], "deserialize_integ": 55, "deserialize_object": [55, 256], "deserialize_object_sequ": 55, "deserialize_rang": 55, "deserialize_str": 55, "deserialized_object": 55, "design": [18, 156, 191, 198, 199, 251], "desir": [1, 2, 3, 4, 5, 35, 62, 122, 125, 165, 174, 185, 192, 202, 207, 232, 237, 241], "detach": 67, "detail": [8, 9, 10, 11, 12, 59, 79, 93, 117, 119, 122, 153, 154, 155, 156, 168, 191, 217, 218, 248, 251], "detect": [55, 59, 72, 98, 99, 132, 135, 136, 155, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 248, 249, 250, 253, 254, 258], "detect_bit": 111, "detection_prob": 165, "detectionprobabilityevalu": 163, "detectionprobartifact": 163, "detectionprobevalu": 163, "detector": [97, 98, 99, 163, 164, 165, 166, 168, 169, 261], "deterior": 205, "determin": [89, 94, 165, 167, 198, 199, 207, 208, 251], "determinist": [13, 29, 30, 35, 100], "determinst": 31, "develop": [191, 250, 251, 252, 260, 262], "devic": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 44, 45, 46, 48, 49, 50, 51, 52, 53, 57, 60, 61, 62, 64, 66, 67, 82, 83, 84, 85, 88, 91, 92, 93, 95, 96, 97, 98, 99, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 132, 142, 150, 151, 156, 163, 164, 165, 166, 167, 168, 169, 173, 174, 176, 177, 178, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 202, 205, 206, 213, 216, 219, 220, 224, 226, 228, 231, 232, 233, 234, 235, 236, 237, 238, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "device_a_rx": [232, 233, 234, 235, 236, 237], "device_a_tx": [232, 233, 234, 235, 236, 237], "device_alpha": [104, 105, 106, 107, 108, 173, 191], "device_b_rx": [232, 233, 234, 235, 236, 237], "device_b_tx": [232, 233, 234, 235, 236, 237], "device_beta": [104, 105, 106, 107, 108, 173, 191], "device_channel": 224, "device_fram": 222, "device_frame_scal": 222, "device_id": [66, 89, 90, 225], "device_index": [61, 64], "device_input": [42, 229], "device_output": 227, "device_recept": [52, 189, 248, 255, 257], "device_regist": 64, "device_sign": 225, "device_st": 224, "device_transmiss": [52, 189, 248, 257], "devicefocu": [2, 3, 5, 184, 255], "deviceinput": [39, 40, 42, 47, 64, 89, 90, 92, 224, 225, 226, 229], "deviceoutput": [13, 15, 39, 41, 43, 64, 224, 227, 230], "devicerecept": [39, 42, 52, 64, 89, 92, 229], "devicereceptionplot": [95, 248], "devicest": [33, 39, 48, 51, 64, 66, 89, 90, 92, 225], "devicetransmiss": [39, 43, 52, 64, 89, 230], "devicetransmissionplot": [95, 248], "devicetyp": [39, 61, 64], "devis": 151, "dft": [117, 118, 119, 120, 122], "dftnorm": 122, "dh": 8, "diagon": [2, 29], "diagram": [2, 3, 5, 30, 65, 95, 106], "dict": [65, 256], "dictionari": [4, 254], "differ": [0, 18, 28, 35, 36, 52, 56, 59, 65, 66, 104, 105, 106, 107, 108, 131, 135, 164, 165, 167, 176, 185, 192, 225, 237, 248, 251, 253, 255], "differenti": [30, 73], "diffus": 23, "digial": 206, "digit": [2, 3, 5, 39, 66, 81, 89, 90, 94, 117, 118, 119, 120, 150, 151, 167, 174, 176, 185, 191, 198, 199, 205, 206, 208, 213, 217, 225, 231, 248, 255, 261, 263], "digtial": 52, "dim": 65, "dimens": [1, 2, 3, 5, 17, 29, 30, 36, 37, 53, 59, 64, 65, 78, 79, 80, 85, 86, 90, 102, 127, 144, 157, 163, 164, 165, 166, 167, 172, 183, 190, 195, 196, 198, 199, 201, 202, 225, 255, 260], "dimension": [1, 2, 3, 5, 13, 15, 24, 36, 53, 59, 64, 65, 67, 81, 90, 102, 104, 105, 106, 107, 108, 124, 127, 145, 148, 157, 159, 166, 195, 196, 225], "dipol": [36, 175], "direct": [1, 2, 3, 4, 5, 7, 21, 25, 30, 32, 36, 59, 67, 81, 89, 90, 153, 156, 169, 174, 243, 251, 254, 255, 257, 263], "directli": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 244, 248, 249, 251, 264], "directori": [54, 231, 244, 248, 250, 252], "diretli": 253, "disabl": [32, 33, 55, 59, 64, 67, 71, 86, 89, 90, 208, 209, 210, 224, 225, 231, 256], "disciplin": 252, "disclaim": 251, "discov": 244, "discret": [2, 3, 7, 13, 15, 18, 27, 29, 30, 31, 33, 35, 37, 65, 112, 121, 128, 135, 137, 147, 157, 167, 172, 234, 238, 254], "discriminatori": 251, "discuss": 30, "disk": 55, "disloc": 65, "displai": [59, 65, 196, 198, 199, 201, 202, 251, 264], "distanc": [6, 17, 19, 20, 21, 22, 25, 28, 30, 32, 33, 34, 65, 159, 166, 168, 221, 241, 261], "distinct": 15, "distinguish": [7, 251], "distorionless": 216, "distort": [29, 37, 175, 176, 205, 213, 214, 215, 216, 217, 218], "distortionless": [2, 91, 224, 254], "distribut": [5, 6, 7, 13, 17, 18, 19, 21, 22, 23, 25, 28, 30, 59, 70, 124, 125, 130, 174, 191, 195, 203, 204, 231, 233, 241, 249, 250, 251, 258, 262, 263], "diverg": 59, "divers": [125, 263], "divid": [65, 70, 101, 103, 110, 138], "divis": [125, 150, 153], "dl": 8, "dlr": [213, 217, 263], "do": [18, 23, 30, 59, 65, 70, 72, 79, 127, 232, 250, 251, 257, 258], "docssourc": 244, "document": [7, 59, 65, 168, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "doe": [1, 7, 34, 39, 48, 55, 59, 61, 62, 64, 67, 70, 71, 72, 76, 79, 89, 90, 92, 108, 128, 173, 176, 186, 193, 194, 220, 224, 248, 251, 252], "doi": [2, 5, 13, 21, 23, 31, 36, 59, 69, 74, 75, 77, 78, 79, 80, 99, 123, 125, 132, 154, 155, 205, 213, 218, 221, 249, 263], "domain": [7, 15, 18, 25, 27, 29, 30, 31, 33, 35, 37, 65, 85, 95, 127, 128, 132, 135, 136, 137, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 195, 205, 219, 221, 232, 253, 255, 260, 262], "don": [65, 127, 157, 260], "done": 70, "doppler": [21, 22, 23, 25, 27, 28, 33, 99, 157, 167, 169, 172], "doppler_bin": 157, "doppler_frequ": [21, 22, 25, 28, 142, 150, 151, 156], "dot": [5, 13, 15, 29, 30, 36, 70, 76], "dotsc": [13, 25, 29, 30], "doubl": 65, "doubt": 251, "down": [33, 79, 249, 253], "download": [89, 92, 248, 250, 264], "downsampl": 65, "downstream": 251, "dpsk": [213, 217, 263], "dpu": 108, "dr": 251, "draw": 13, "drawn": [7, 19, 59], "drive": [89, 191, 261], "driven": [213, 214, 249], "driver": 250, "drop": [30, 54, 57, 61, 64, 86, 90, 92, 130, 165, 168, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 248, 255, 257, 258, 261], "drop_dur": [64, 231], "drop_interv": 231, "droptyp": [52, 64], "drt": [42, 52], "drx": 108, "dsp": [39, 42, 47, 48, 51, 56, 64, 66, 89, 90, 92, 117, 118, 119, 120, 164, 166, 224, 225, 226, 229], "dst": [39, 64, 66], "dtt": [43, 52], "dtype": [7, 27, 36, 55, 59, 65, 68, 85, 87, 161, 216, 222, 223, 225, 254, 256, 258, 262], "dual": 17, "dualconsistentr": 17, "dualconsistentsampl": 17, "due": [1, 38, 185, 232, 242, 248, 263], "dummi": [88, 109], "dump": [55, 231], "dump_result": 231, "duplex": [36, 81, 96, 175, 179, 180, 181, 182, 191, 192], "duplexjcasoper": [97, 98, 99], "duplexlink": 122, "duplexmodem": [110, 112, 117, 253, 256, 259, 260, 262], "duplic": 191, "durabl": 251, "durat": [39, 46, 51, 64, 65, 97, 98, 108, 112, 120, 128, 135, 136, 137, 138, 146, 147, 167, 169, 172, 173, 176, 207, 231, 233, 236], "dure": [1, 2, 3, 4, 5, 7, 9, 10, 11, 12, 32, 33, 37, 38, 39, 44, 48, 51, 52, 54, 55, 59, 61, 62, 64, 65, 66, 70, 71, 72, 74, 76, 79, 80, 82, 86, 87, 89, 90, 92, 93, 97, 98, 99, 112, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 153, 156, 162, 163, 166, 167, 169, 176, 184, 186, 189, 191, 196, 198, 199, 201, 202, 205, 225, 227, 230, 231, 232, 248, 250, 255, 256, 257, 258, 259, 260, 261, 262], "durrani": [132, 263], "dwell": 251, "dwijendra": [69, 263], "dynam": [2, 3, 5, 59, 65, 206, 251, 255], "e": [5, 6, 13, 21, 22, 23, 24, 25, 28, 31, 33, 34, 36, 37, 44, 51, 55, 58, 59, 65, 70, 71, 79, 84, 89, 94, 105, 107, 108, 111, 128, 135, 137, 140, 145, 147, 148, 149, 150, 165, 167, 169, 185, 191, 192, 199, 202, 207, 213, 218, 224, 244, 248, 250, 251, 255, 263], "each": [0, 6, 7, 9, 10, 11, 12, 13, 15, 18, 19, 20, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 46, 53, 56, 59, 60, 61, 64, 65, 68, 86, 89, 104, 105, 106, 107, 108, 109, 111, 118, 122, 128, 135, 138, 139, 140, 141, 142, 147, 150, 151, 156, 165, 167, 169, 173, 174, 176, 188, 191, 195, 207, 224, 225, 228, 229, 232, 237, 238, 248, 251, 255, 256, 258, 259, 261, 262, 264], "earlier": 251, "eas": 30, "easi": [33, 250], "easili": [55, 258], "eb": 198, "eberlein": [31, 263], "ebn0": 200, "echo": 254, "edit": 250, "eeei": 263, "effect": [18, 59, 65, 81, 130, 174, 185, 191, 192, 213, 217, 219, 231, 251, 256, 258, 260, 262, 263], "effici": [59, 156, 191, 258, 263], "effort": [249, 251], "either": [1, 30, 31, 33, 34, 65, 81, 111, 121, 165, 200, 202, 207, 248, 250, 251], "electr": 263, "electromagnet": [13, 32, 36, 39, 41, 64, 65, 185, 191, 225, 248, 249, 256, 262], "electron": [251, 263], "element": [2, 3, 5, 7, 36, 37, 59, 67, 81, 84, 90, 94, 109, 111, 122, 142, 144, 150, 151, 156, 174, 175, 176, 178, 183, 225, 231, 255, 256, 257, 258, 260], "elementtyp": [99, 122, 142, 143, 150, 151, 156, 256, 257, 258, 260], "elemtromagnet": 13, "elev": [1, 3, 5, 36, 81], "elib": [213, 217, 263], "ell": [21, 22, 23, 25, 28, 32, 33], "elsevi": [69, 74, 75, 77, 78, 80, 263], "embarassingli": 258, "embodi": 251, "emerg": [37, 41, 66, 89, 90, 191, 225, 227, 230], "emerging_direct": 32, "emerging_sign": [41, 227, 230], "emiss": [39, 81, 94, 225], "emit": [2, 3, 4, 13, 36, 64, 97, 99, 112, 168, 224, 225, 248, 254], "emmiss": 39, "employ": 251, "empti": [36, 58, 65, 143, 163, 177, 178, 231, 254, 258], "empty_lik": 258, "en": [205, 251], "enabl": [7, 9, 10, 11, 12, 13, 18, 19, 20, 30, 31, 32, 33, 39, 42, 48, 54, 59, 64, 65, 67, 69, 71, 74, 75, 77, 78, 80, 85, 86, 89, 90, 92, 94, 128, 137, 140, 153, 156, 162, 166, 184, 191, 208, 209, 210, 216, 224, 225, 226, 227, 229, 231, 249, 250, 251, 258, 263], "enable_syndrome_check": 74, "encod": [1, 3, 5, 62, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 89, 90, 112, 114, 115, 116, 117, 118, 119, 120, 122, 125, 126, 135, 142, 150, 151, 169, 225, 259, 260, 262], "encode_r": 126, "encode_stream": [1, 62], "encode_symbol": [122, 125, 126, 260], "encoded_bit": [70, 71, 72, 76, 79, 113, 114, 116], "encoded_symbol": [116, 260], "encoder_manag": [112, 117, 118, 119, 120, 259], "encodermanag": [71, 112, 117, 118, 119, 120], "encount": 36, "encourag": [59, 251], "end": [29, 36, 55, 65, 81, 94, 137, 185, 191, 200, 205, 225, 250, 251, 254, 259], "endpoint": [195, 196], "energi": [7, 8, 9, 10, 11, 12, 13, 15, 18, 27, 29, 31, 33, 35, 60, 65, 111, 128, 135, 137, 147, 167, 172, 198, 199, 200, 202, 262], "enforc": [244, 251], "engin": [202, 225, 249, 250, 252, 263], "enough": 109, "ensur": [55, 65, 94, 251], "enter": 251, "entir": 251, "entiti": [191, 225, 248, 251], "entri": [54, 65, 71, 132, 136, 155], "enum": [37, 38, 55, 58, 86, 143, 144, 211, 212, 241], "enumer": [55, 254, 257], "env": [250, 252], "envelop": 253, "enviro": 98, "environ": [2, 3, 4, 5, 30, 54, 59, 67, 169, 191, 244, 248, 250, 252, 255, 257, 258], "environment": 30, "envnam": [250, 252], "eploy": 263, "equal": [8, 34, 35, 36, 39, 65, 70, 71, 72, 76, 79, 98, 105, 107, 108, 110, 113, 114, 117, 118, 119, 125, 128, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 147, 150, 151, 156, 159, 162, 167, 209, 227, 230, 231, 232, 238, 248, 256, 257, 262], "equalize_channel": [129, 133], "equalize_symbol": 128, "equalized_symbol": [113, 114, 248, 253, 257], "equat": [2, 3, 7, 8, 13, 15, 18, 21, 22, 23, 25, 27, 28, 29, 31, 32, 33, 35, 58, 70, 71, 72, 76, 79, 99, 213, 216, 241, 254, 259], "equidistantli": 176, "equip": [2, 3, 5, 255, 264], "equipm": [2, 3, 5], "equival": [30, 33, 65, 132, 136, 241, 250, 251, 262], "equl": 253, "equz": 155, "eras": 54, "erdal": [75, 263], "erik": [59, 263], "eriksson": [221, 263], "error": [0, 2, 3, 5, 30, 38, 69, 70, 72, 74, 75, 77, 78, 80, 85, 101, 102, 103, 108, 110, 112, 114, 116, 117, 118, 119, 120, 132, 164, 168, 198, 199, 205, 232, 248, 249, 253, 256, 259, 263], "error_cod": 259, "errorevalu": [102, 104, 105, 107], "errro": 166, "esenti": [252, 257], "esn0": 200, "especi": [252, 253], "essenc": 256, "essenti": [30, 59, 127, 251, 256, 260], "establish": 67, "estim": [2, 3, 13, 53, 59, 83, 84, 85, 89, 98, 99, 102, 108, 110, 111, 117, 118, 119, 128, 131, 132, 134, 135, 137, 138, 139, 140, 141, 142, 150, 151, 153, 156, 157, 163, 165, 166, 167, 169, 172, 189, 191, 208, 209, 210, 248, 249, 254, 255, 257, 258, 260, 261, 263], "estimate_channel": [128, 130], "estimate_delai": 85, "estimate_gain": [208, 209, 210], "estimate_noise_pow": 89, "et": [21, 23, 36, 59, 102, 104, 105, 107, 132, 163, 205, 221, 249], "etsi": [7, 8, 9, 10, 11, 12, 21, 28, 79, 263], "etsi18": 263, "etsi_t": [79, 263], "etsi_tr": [7, 8, 9, 10, 11, 12, 21, 28, 263], "eucap": [31, 263], "euclidean": 17, "eurasip": [132, 263], "european": [31, 213, 217, 263], "ev": 59, "evalaut": [3, 5], "evalu": [2, 3, 5, 8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 33, 52, 57, 59, 86, 95, 104, 105, 106, 107, 108, 110, 135, 138, 139, 140, 141, 165, 166, 167, 168, 176, 191, 207, 216, 231, 232, 248, 249, 253, 255, 256, 257, 260, 261, 263, 264], "evaluateddrop": 52, "evaluation_result": 59, "evaluationplot": 95, "evaluationresult": [53, 59, 164, 165, 258], "evaluationtempl": [59, 102, 104, 105, 106, 107, 108, 163], "evaluator_index": [86, 95], "evalutor": 59, "even": [65, 76, 125, 191, 207, 248, 251], "evenli": 243, "event": 251, "ever": 251, "everi": [13, 36, 67, 100, 142, 150, 151, 156, 167, 176, 191], "everyon": 251, "everyth": 38, "evluat": [32, 34], "evm": 106, "evmartifact": 106, "evmevalu": 106, "evolut": [31, 263], "evolv": 256, "ex": 252, "exact": 251, "exactli": [71, 79, 191, 235], "exampl": [1, 2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 32, 33, 34, 35, 65, 101, 104, 105, 106, 107, 108, 111, 121, 125, 163, 165, 166, 167, 168, 173, 174, 176, 191, 244, 248, 251, 252, 254, 256, 264], "except": [38, 54, 59, 109, 111, 251], "exchang": [13, 70, 79, 102, 104, 105, 106, 107, 108, 191, 225, 232, 256, 263], "excit": 30, "exclud": 251, "exclus": [1, 118, 120, 251], "excus": 251, "execut": [30, 31, 38, 53, 55, 57, 59, 61, 71, 86, 165, 168, 169, 176, 191, 225, 231, 244, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "executionmod": 252, "exemplari": 96, "exepct": [105, 107, 108], "exept": 38, "exercis": [251, 260], "exist": [30, 32, 33, 34, 35, 55, 59, 61, 64, 68, 86, 91, 92, 93, 165, 224, 225, 244, 248, 250, 252], "exp": [33, 138, 139, 140, 141, 191, 255, 256], "expand": [191, 264], "expect": [7, 8, 9, 10, 11, 12, 15, 18, 27, 29, 31, 33, 35, 39, 48, 51, 55, 59, 60, 66, 71, 84, 89, 90, 98, 99, 100, 118, 120, 128, 164, 169, 186, 193, 200, 201, 202, 225, 251, 253, 255, 256, 260, 261], "expected_energy_scal": [7, 15, 18, 27, 29, 31, 33, 35], "expected_pow": [60, 225], "expected_st": [7, 8, 9, 10, 11, 12, 257], "expens": [37, 127], "experi": [7, 10, 11, 12, 14, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 32, 33, 34, 54], "experiment": [64, 249], "explain": 262, "explicitli": [191, 251], "exploit": 176, "explot": [145, 148], "exponenti": 23, "export": 249, "expos": [30, 122, 123, 124, 125, 173], "express": [5, 30, 251], "expressli": 251, "exst": 61, "extend": [2, 3, 5, 23, 117, 118, 119, 120, 131, 174, 185, 231, 250, 251, 255, 263], "extens": [121, 176, 244, 250, 251, 260], "extent": [30, 200, 251], "extern": 250, "extra": 57, "extract": [39, 53, 59, 101, 104, 105, 106, 107, 108, 109, 158, 162, 163, 165, 166, 190, 248, 250, 258], "ey": [65, 95, 254], "eyeplot": 95, "f": [1, 2, 3, 5, 7, 13, 21, 31, 36, 46, 65, 78, 81, 97, 98, 99, 107, 108, 132, 167, 169, 172, 191, 213, 221, 251, 257, 258, 259, 262, 263], "f_": [1, 2, 3, 5, 13, 18, 19, 20, 30, 33, 36, 46, 81, 97, 98, 167, 169, 172], "f_c": [39, 44, 81, 94, 225], "facil": 251, "facilit": 251, "fact": [1, 5, 185, 206], "factor": [2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 120, 128, 137, 139, 140, 141, 192, 200, 217, 218, 253], "factori": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 90, 92, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 167, 169, 170, 173, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238], "factory_typ": 8, "factorytyp": 8, "fade": [18, 21, 22, 24, 28, 30, 263], "fail": [38, 251], "failur": 251, "fair": 251, "fall": [30, 250], "fals": [2, 3, 5, 32, 33, 34, 53, 54, 55, 59, 64, 65, 67, 86, 89, 90, 99, 111, 163, 165, 166, 195, 196, 208, 209, 210, 214, 216, 224, 225, 231, 249, 254, 255, 258, 259, 261], "false_alarm_prob": 165, "famili": 251, "far": [2, 3, 32, 36, 137, 176, 254], "fashion": [70, 123, 251], "fast": [13, 69, 74, 75, 77, 78, 80, 258, 263], "fat": [59, 104, 105, 106, 107, 108, 163], "favor": [251, 261], "fdel": 59, "featur": [0, 2, 3, 7, 18, 19, 20, 23, 29, 32, 34, 64, 104, 105, 106, 107, 108, 111, 122, 123, 124, 125, 142, 150, 151, 156, 163, 165, 166, 167, 169, 173, 174, 225, 232, 233, 234, 235, 236, 237, 244, 248, 249, 251, 252, 254, 258, 259, 262], "fec": [69, 74, 75, 77, 78, 80, 113, 115, 116, 264], "fed": 255, "fee": 251, "feed": [37, 52, 66, 89, 90, 174, 213, 214, 215, 216, 217, 218, 225, 255], "feedback": 59, "fer": 107, "fetch": [17, 253], "fetch_scalar": 17, "fettwei": 263, "few": [30, 190, 257], "fft": [37, 122, 167], "fft_norm": 122, "fget": 59, "field": [2, 3, 31, 32, 36, 77, 81, 168, 176, 185, 254, 263], "fig": 243, "fig_ax": 207, "figur": [7, 27, 36, 59, 65, 68, 87, 127, 137, 161, 176, 207, 212, 213, 216, 222, 223, 240, 258], "figurebas": [7, 59, 65, 68, 85, 223], "file": [35, 38, 53, 55, 59, 64, 83, 84, 85, 86, 89, 100, 165, 191, 231, 244, 248, 250, 251, 252, 257, 261, 264], "file_loc": 86, "filesystem": 257, "filter": [65, 85, 89, 96, 136, 137, 138, 139, 140, 141, 195, 253], "filter_calibr": 85, "filter_length": [137, 139, 141], "filter_ord": 65, "filteredsinglecarrierwaveform": [137, 138, 139, 140, 141], "final": [30, 52, 53, 55, 59, 118, 120, 130, 165, 191, 205, 225, 248, 251, 257, 258], "final_pos": 173, "find": 251, "finish": 258, "finit": [77, 263], "first": [1, 2, 3, 5, 17, 19, 30, 33, 55, 59, 64, 65, 81, 86, 90, 94, 109, 111, 127, 132, 136, 137, 155, 165, 167, 172, 205, 206, 224, 225, 236, 237, 244, 251, 253, 257, 259, 261], "first_impact": 59, "first_target": 32, "fit": [31, 109, 251], "five": 28, "fix": [13, 30, 32, 94, 191, 198, 199, 201, 225, 234, 236, 248, 250, 251], "fixedcrosssect": 32, "flag": [30, 33, 37, 42, 54, 64, 65, 89, 90, 94, 128, 135, 162, 214, 216, 225, 226, 229, 250], "flake8": 244, "flat": 258, "flatten": [65, 262], "fledg": 225, "flexibl": [59, 151], "flicker": 221, "flight": [7, 33, 98, 255, 256], "flip": [259, 260], "float": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 41, 44, 46, 48, 51, 52, 53, 55, 58, 59, 60, 62, 64, 65, 66, 67, 70, 71, 75, 81, 84, 85, 89, 90, 94, 97, 98, 99, 106, 107, 108, 111, 112, 114, 116, 117, 118, 119, 120, 128, 129, 130, 132, 135, 136, 137, 138, 140, 144, 146, 147, 150, 153, 155, 156, 157, 159, 161, 162, 165, 166, 167, 169, 172, 173, 176, 181, 183, 186, 189, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 214, 216, 217, 218, 221, 224, 225, 227, 230, 231, 236, 238, 241, 242, 254, 256, 258, 262], "float64": [104, 105, 225], "floatingerror": [38, 51, 186, 193, 194], "floor": [8, 89, 200, 221, 261], "flow": [248, 251], "flowchart": 59, "fluctuat": 219, "fly": 85, "fmcw": [32, 34, 110, 128, 134, 135, 137, 163, 165, 166, 168, 172, 191, 254, 261], "fmcwwaveform": 138, "focu": [1, 2, 3, 4, 5, 132, 254, 255], "focus": [1, 2, 3, 4, 5, 184, 254, 255], "focus_angl": [1, 3, 5], "focus_dimens": 255, "focus_point": 1, "focused_devic": [2, 3, 184], "follow": [2, 3, 5, 7, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 32, 34, 35, 65, 99, 104, 105, 106, 107, 108, 110, 111, 118, 120, 121, 125, 128, 130, 136, 137, 168, 169, 173, 191, 205, 208, 212, 213, 221, 248, 250, 251, 258, 259, 260, 261, 263], "follw": 231, "forbid": 251, "forc": [251, 256], "force_remov": 67, "form": [59, 65, 71, 203, 248, 251, 262], "format": [37, 53, 55, 59, 127, 165, 251], "formul": 249, "formula": [13, 18], "forward": [67, 69, 73, 74, 75, 77, 78, 80, 110, 112, 114, 116, 117, 118, 119, 120, 122, 248, 259, 263], "forwards_transform": 67, "fouc": [2, 3, 5], "found": [21, 244, 248, 251], "foundat": 251, "four": [125, 127, 169, 232, 248, 257, 258, 260, 262], "fourier": [37, 121], "frac": [2, 5, 7, 13, 18, 19, 20, 23, 30, 33, 36, 39, 59, 70, 71, 72, 76, 99, 104, 106, 108, 125, 167, 169, 172, 214, 217, 218, 221, 254, 259], "fraction": 126, "frame": [1, 36, 39, 46, 51, 64, 65, 67, 70, 71, 89, 90, 97, 98, 101, 103, 108, 110, 112, 113, 115, 117, 118, 119, 120, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 144, 146, 147, 148, 150, 151, 153, 154, 155, 156, 167, 168, 169, 172, 176, 207, 225, 226, 227, 229, 230, 232, 233, 234, 236, 237, 238, 249, 253, 256, 257, 258, 260, 261, 262], "frame_delai": 128, "frame_dur": [46, 60, 97, 98, 108, 112, 128, 135, 167, 169, 172, 176, 207], "frame_error": 108, "frame_gener": [109, 112, 117, 118, 119, 120], "frameerrorartifact": 107, "frameerrorevalu": 107, "framegener": [109, 112, 117, 118, 119, 120], "framegeneratorscapi": 109, "framegeneratorstub": 109, "framesect": 147, "framework": [110, 131, 191, 231, 249, 254, 263], "free": [18, 19, 20, 33, 132, 241, 251], "freedom": 251, "freeli": [225, 248], "freq_differ": 135, "freqeuenc": 151, "frequci": 65, "frequenc": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 25, 27, 28, 29, 33, 36, 37, 39, 41, 44, 48, 51, 65, 66, 81, 85, 89, 90, 94, 95, 97, 98, 99, 117, 118, 119, 120, 125, 128, 135, 137, 138, 140, 144, 147, 150, 151, 153, 154, 155, 156, 157, 167, 169, 172, 174, 175, 176, 185, 191, 192, 195, 196, 203, 213, 216, 218, 219, 221, 225, 227, 230, 232, 241, 248, 254, 255, 257, 261, 263], "frequency_select": 37, "frequeni": 188, "frequent": 191, "freuenci": 219, "frii": 18, "from": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 23, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 41, 42, 43, 46, 48, 51, 52, 53, 55, 56, 59, 61, 62, 63, 64, 65, 66, 67, 70, 71, 81, 85, 89, 90, 92, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 117, 118, 119, 120, 123, 124, 125, 128, 130, 132, 135, 137, 144, 145, 146, 147, 148, 149, 153, 154, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 176, 178, 184, 185, 186, 190, 191, 192, 193, 194, 200, 205, 206, 216, 221, 224, 225, 226, 227, 229, 230, 232, 237, 241, 244, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "from_artifact": 59, "from_cartesian": 67, "from_deviceoutput": 227, "from_hdf": 55, "from_interleav": 65, "from_ndarrai": 65, "from_output": 43, "from_paramet": 55, "from_processeddeviceinput": 42, "from_processedsimulateddeviceinput": 229, "from_quaternion": 67, "from_rpi": [67, 225], "from_simulateddeviceoutput": 230, "from_spher": 67, "from_transl": [2, 3, 5, 8, 9, 10, 11, 12, 20, 32, 35, 67, 173, 174, 176, 255, 257], "from_tupl": 58, "fromfil": [165, 261], "fromscenario": 165, "fromspher": 159, "front": [94, 185, 191, 200, 205, 225, 261], "frontend": [176, 188, 195, 225], "frontendend": 192, "fset": 59, "fsf": 251, "fsk": [110, 128, 134], "ft": 1, "fulfil": 251, "full": [36, 52, 81, 94, 144, 147, 174, 175, 179, 180, 181, 182, 192, 225, 231, 248, 249, 251, 252, 255, 257, 259, 261], "fulli": [21, 22, 25, 28, 34, 64, 65, 118, 120, 174, 191, 213, 215, 244, 255], "function": [1, 7, 13, 30, 33, 48, 51, 54, 55, 56, 57, 59, 61, 64, 68, 88, 96, 111, 118, 120, 168, 173, 221, 241, 250, 251, 252, 253, 257, 259, 262], "fundament": [198, 256], "funtion": 258, "further": [35, 36, 55, 75, 79, 93, 94, 112, 123, 125, 205, 206, 217, 218, 248, 251, 255, 257], "furthermor": 255, "futur": [55, 185, 191, 192, 251], "g": [25, 65, 74, 77, 111, 125, 263], "g_": [23, 25], "g_save_path": 74, "gain": [6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 81, 94, 174, 206, 207, 213, 215, 216, 224, 255, 256, 257, 258, 260, 261], "gaincontrolbas": [207, 208, 209, 210], "gaincontroltyp": [208, 211], "gal": [69, 74, 75, 77, 78, 80, 263], "gal63": 263, "gallag": [74, 263], "ganesan": [125, 263], "gap": 65, "gaussian": [17, 90, 111, 200, 203, 204, 225, 262], "gener": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 76, 79, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 184, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 204, 205, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 242, 244, 248, 251, 253, 254, 255, 256, 257, 258, 262, 263], "generate_bit": 100, "generate_output": [39, 64, 224, 225], "generate_pam_symbol_3gpp": 111, "generate_result": [53, 59, 102, 163, 164, 165, 166, 190, 258], "generate_sequ": 79, "generateresult": 165, "geometr": [36, 67, 263], "geometri": [30, 243], "geq": 217, "gernat": 79, "get": [2, 3, 5, 59, 61, 62, 65, 101, 122, 123, 124, 125, 207, 249, 251, 258, 260], "get_cross_sect": 32, "get_llr_3gpp": 111, "get_map": 111, "get_monitor": 243, "get_pow": [198, 199, 200, 201, 202], "get_symbol": 111, "getitem": 65, "getstream": 65, "getter": 59, "gfdm": 263, "gg": 36, "ghrayeb": [5, 263], "ghz": [7, 8, 9, 10, 11, 12, 28, 32, 34, 79, 167, 168, 191, 261, 263], "girish": 125, "git": 250, "github": [248, 249, 250, 251, 252], "give": [59, 248, 251], "given": [6, 13, 15, 17, 18, 19, 20, 24, 29, 32, 33, 35, 36, 59, 65, 67, 86, 89, 90, 109, 111, 123, 124, 163, 165, 168, 173, 199, 208, 221, 224, 225, 232, 237, 239, 241, 251, 254, 256, 258, 259], "glavieux": [80, 263], "glazunov": [21, 263], "global": [1, 15, 30, 32, 33, 36, 59, 63, 66, 67, 89, 90, 91, 173, 191, 224, 225, 256, 261, 263], "global_characterist": 36, "global_direct": 36, "global_orient": 67, "global_pos": 36, "global_posit": 67, "globecom": 263, "glocom": 263, "gnu": [249, 251], "goal": 251, "gold": 79, "goldberg": 263, "good": [23, 135, 136], "googl": 264, "govern": 251, "gpl": 251, "gpp": 263, "gpu": 191, "grade": 81, "grai": 111, "grant": 251, "graph": [57, 78, 80, 127, 191, 248], "graphic": 165, "grasp": 258, "grati": 251, "greater": [19, 39, 59, 65, 81, 94, 128, 135, 136, 137, 147, 173, 224, 225, 227, 230], "greatest": [208, 251], "grid": [53, 59, 86, 102, 104, 105, 106, 107, 108, 142, 144, 145, 146, 147, 148, 149, 150, 151, 156, 163, 164, 165, 166, 190, 191, 231, 248, 255, 258], "grid_configur": 59, "grid_resourc": [99, 122, 142, 147, 150, 151, 153, 156, 256, 257, 258, 260], "grid_sect": 59, "grid_structur": [99, 122, 142, 147, 150, 151, 153, 156, 256, 257, 258, 260], "griddimens": [53, 59, 86, 102, 163, 164, 165, 166, 190, 258], "gridel": [99, 122, 142, 143, 144, 150, 151, 156, 256, 257, 258, 260], "gridresourc": [99, 122, 142, 144, 147, 150, 151, 153, 156, 256, 257, 258, 260], "gridsect": [59, 145, 146, 147, 148, 149, 150, 153, 154, 156], "gridvisu": 147, "ground": [164, 166], "ground_truth": [33, 166], "group": [20, 55, 69, 83, 84, 85, 89, 263], "gs01": 263, "guarante": [55, 251], "guard": [48, 51, 60, 98, 99, 118, 120, 128, 135, 136, 137, 140, 147, 167, 169], "guard_interv": [135, 137, 140], "guard_ratio": [135, 136], "guardsect": 146, "h": [2, 3, 5, 7, 13, 15, 18, 19, 20, 23, 27, 29, 30, 31, 33, 35, 36, 59, 74, 81, 130, 132, 195, 243, 254, 263], "h0": 165, "h0_campaign": 165, "h0_measur": [165, 261], "h0_oper": 165, "h0_scenario": 165, "h0_valu": 165, "h1": 165, "h1_campaign": 165, "h1_measur": [165, 261], "h1_oper": 165, "h1_scenario": 165, "h1_valu": 165, "h5": [248, 257, 261], "h5py": 165, "h_": 23, "h_c": 8, "h_source_path": 74, "ha": [5, 6, 13, 23, 36, 37, 59, 111, 118, 120, 125, 137, 142, 175, 176, 185, 191, 192, 195, 200, 213, 219, 225, 231, 251, 252, 254, 255, 258, 259, 260], "had": 251, "half": [2, 3, 5, 36, 81, 168, 255], "half_wavelength": [5, 254], "hall": [7, 8], "hand": [39, 191], "handl": [13, 24, 25, 32, 54, 55, 61, 62, 64, 71, 89, 93, 120, 127, 128, 129, 130, 132, 137, 165, 186, 193, 205, 216, 225, 227, 231, 237], "handler": 54, "hani": [132, 263], "happen": 30, "hard": [89, 100, 111, 128, 135, 137, 147, 262], "hardawar": [88, 253], "hardwar": [0, 81, 86, 89, 90, 95, 130, 132, 191, 200, 213, 225, 231, 249, 250, 253, 255, 258, 261, 262], "hardware_loop": [81, 83, 84, 85, 86, 87, 89, 90, 92, 94, 248, 253, 261], "hardware_scenario": 248, "hardwareloop": [86, 87, 95, 248, 261], "hardwareloopdeviceplot": 95, "hardwareloopevaluatorplot": 95, "hardwareloopplot": [86, 87, 95], "hardwareloopsampl": [86, 87], "hartmann": [69, 74, 75, 77, 78, 80, 263], "hat": [2, 3, 13, 254], "have": [0, 13, 53, 59, 123, 124, 130, 155, 157, 169, 207, 208, 219, 225, 248, 250, 251, 253, 255, 261, 262], "hdf": [55, 64, 83, 84, 85, 89, 165], "hdf5": [55, 64, 257], "hdf_group_nam": [83, 84, 85, 89], "hdfdeserializationprocess": 55, "hdfserializationprocess": 55, "he": [69, 74, 75, 77, 78, 80, 263], "head": [59, 173, 231], "header": 109, "hearten": 251, "heddergott": [21, 263], "height": [8, 243], "help": 249, "helper": [55, 173], "henc": [108, 111], "henrik": [21, 263], "herbert": [221, 263], "here": [59, 65, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "hereaft": 251, "herm": [31, 33, 58, 69, 74, 75, 77, 78, 80, 81, 104, 105, 106, 107, 108, 130, 132, 168, 200, 237, 244, 248, 250, 251, 252, 255, 256, 257, 258, 259, 260, 261, 262], "hermann": 263, "hermes_quadriga": 250, "hermespi": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 74, 75, 77, 78, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 163, 165, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "heterogen": [248, 249], "hh": 8, "high": [2, 79, 156, 195, 196, 249, 261, 263], "higher": [65, 253, 255], "highest": 237, "highli": [64, 249], "highlight": [260, 262], "higlight": 256, "hilbert": 253, "hilli": 21, "hint": [31, 244, 260], "hiperlan": 111, "hire": [65, 138, 139, 140, 141, 167, 212, 213], "hit": 35, "hocquenghem": 69, "hoel": [59, 263], "hold": [59, 121], "holder": 251, "hook": [6, 7, 9, 10, 11, 12, 13, 14, 26, 29, 31, 32, 33, 35, 48, 51, 57, 86, 258], "hookabl": [39, 56, 225], "hope": 251, "horizont": [36, 81], "horizontal_phase_respons": 36, "host": [59, 94, 251, 252, 253], "hour": 255, "household": 251, "how": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 32, 34, 35, 104, 105, 106, 107, 108, 118, 120, 121, 125, 135, 137, 138, 139, 140, 141, 173, 243, 248, 249, 251, 253, 255, 261], "howev": [23, 30, 58, 59, 94, 191, 232, 237, 244, 248, 251, 256], "hpa": [213, 217, 263], "html": [244, 251], "http": [3, 7, 8, 9, 10, 11, 12, 21, 28, 69, 74, 75, 77, 78, 79, 80, 205, 213, 217, 243, 251, 263], "human": 261, "hybrid": [174, 255], "hybrid_arrai": [174, 255], "hybrid_port": 255, "hypothesi": [32, 33, 165], "hz": [1, 3, 5, 15, 16, 25, 27, 33, 36, 39, 41, 44, 46, 65, 66, 81, 85, 89, 90, 94, 97, 98, 99, 112, 128, 135, 137, 138, 139, 140, 141, 150, 153, 156, 157, 167, 169, 172, 225, 227, 230, 238, 241, 242, 262], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 74, 76, 77, 79, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "icassp": 263, "icc": [80, 111, 263], "idea": 251, "ideal": [2, 3, 5, 21, 22, 25, 28, 30, 36, 37, 84, 90, 91, 128, 130, 137, 174, 175, 188, 191, 194, 205, 213, 219, 220, 224, 225, 253, 255, 256, 258], "idealantenna": [36, 180], "idealchannel": [29, 191, 248], "idealchannelr": 29, "idealchannelsampl": 29, "ident": [19, 25, 30, 59, 66, 79, 86, 101, 187, 215, 232, 248, 255, 257, 261], "identifi": [55, 59, 64, 66, 81, 89, 90, 165, 225, 250, 251], "idl": 84, "ido": [75, 263], "iee99": 263, "ieee": [2, 5, 13, 21, 23, 31, 36, 75, 78, 79, 80, 99, 111, 125, 154, 155, 205, 213, 218, 221, 249, 263], "ieeestd": [79, 263], "ifft": [195, 196], "ifftshift": [195, 196], "ignor": [21, 65, 71, 125, 128, 132, 135, 137, 147, 225], "ii": [21, 263], "iii": 263, "illumin": [2, 3, 5, 32, 34, 163, 165, 166, 167, 255], "illustr": 165, "imag": [4, 13, 68, 99, 157, 254, 263], "imagevisu": [68, 147], "imaginari": [195, 203, 207, 208], "imbal": [191, 205], "imed": 187, "imens": 86, "iming": 176, "immut": [15, 17, 27, 36, 39, 55, 66, 81, 90, 94, 225, 256], "impact": [18, 59, 129, 232], "impair": [191, 205, 261], "imped": 185, "impedancecoupl": 187, "imping": [5, 23, 32, 36, 39, 40, 42, 47, 64, 89, 92, 127, 224, 225, 226, 229, 248, 254, 255, 261], "impinging_direct": 32, "impinging_sign": [39, 40, 42, 47, 64, 89, 90, 91, 92, 176, 224, 225, 226, 229, 253], "implement": [1, 2, 3, 6, 7, 8, 9, 10, 11, 13, 15, 18, 19, 20, 23, 25, 28, 29, 30, 32, 33, 34, 35, 53, 54, 55, 59, 65, 67, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 96, 99, 100, 101, 104, 105, 106, 107, 108, 110, 111, 112, 117, 118, 119, 120, 121, 122, 131, 135, 136, 137, 138, 139, 140, 141, 142, 156, 163, 164, 165, 166, 168, 175, 176, 185, 186, 190, 191, 192, 193, 194, 195, 196, 200, 205, 207, 213, 216, 217, 218, 219, 220, 225, 232, 237, 241, 244, 248, 249, 250, 251, 252, 263, 264], "impli": [79, 251], "implicit": 85, "import": [2, 3, 5, 13, 30, 54, 163, 165, 166, 167, 168, 243, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "import_modul": 252, "importantli": [110, 132], "importlib": 252, "impos": 251, "imposs": [53, 59, 165, 166], "improperli": 225, "improv": [205, 250, 251, 263], "impuls": [7, 18, 19, 20, 29, 31, 33, 37, 85, 175, 176, 195, 253], "impulse_respons": [37, 256], "inabl": 251, "inaccur": 251, "inc": 251, "incident": 251, "includ": [7, 33, 55, 65, 68, 87, 147, 191, 192, 207, 224, 244, 248, 249, 250, 251, 257], "inclus": 251, "incom": [118, 200, 260], "incompat": 39, "incorpor": 251, "incorrect": 35, "increas": [59, 65, 125, 255], "indemnif": 251, "independ": [29, 59, 71, 188, 203, 213, 218, 251, 263], "indepent": 200, "indepentedli": 207, "index": [1, 33, 36, 54, 55, 59, 61, 62, 64, 76, 81, 86, 95, 231, 243, 244, 250], "indexerror": [36, 55], "indic": [2, 3, 5, 6, 19, 23, 36, 48, 51, 53, 59, 62, 65, 66, 74, 81, 89, 90, 94, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 110, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 132, 135, 136, 137, 155, 157, 159, 163, 165, 166, 167, 169, 172, 190, 191, 200, 204, 225, 227, 249, 251, 253, 256, 258, 262], "individu": [7, 25, 27, 33, 36, 59, 65, 68, 97, 109, 113, 115, 118, 123, 124, 144, 153, 156, 167, 168, 174, 191, 222, 224, 225, 237, 248, 251, 255], "indiviu": 169, "indoor": [7, 23, 257, 263], "indoor_factori": 8, "indoor_offic": 9, "indoorfactori": 8, "indoorfactoryr": 8, "indooroffic": [9, 257], "indoorofficer": 9, "industri": [77, 251, 263], "inf": [19, 21, 22, 25, 28, 32, 34, 69, 197, 198, 199, 214, 216, 231, 263], "infeas": [2, 3, 5, 62, 122, 123, 124, 125], "infer": [42, 48, 51, 59, 169, 229], "infin": 263, "infinit": [90, 207, 225], "info": [38, 54, 231], "inform": [7, 8, 9, 10, 11, 12, 15, 16, 18, 21, 27, 29, 31, 33, 35, 36, 38, 39, 40, 42, 43, 47, 48, 49, 50, 51, 52, 54, 57, 64, 66, 68, 75, 78, 79, 81, 86, 87, 89, 90, 92, 95, 97, 102, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 127, 128, 130, 132, 135, 138, 139, 140, 141, 168, 169, 170, 171, 189, 190, 216, 221, 224, 225, 226, 227, 229, 230, 231, 238, 244, 248, 251, 253, 256, 257, 258, 260, 261, 262, 263], "infring": 251, "infti": [21, 22, 25, 28, 30, 32, 34], "ing": 256, "inher": 84, "inherit": [1, 55, 71, 100, 101, 164, 173, 186, 193, 216, 248, 254, 256, 259, 260], "init": 65, "init_sequ": 79, "initi": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 43, 48, 51, 55, 58, 59, 63, 64, 65, 66, 67, 79, 82, 83, 84, 85, 87, 90, 92, 93, 97, 98, 99, 100, 101, 112, 117, 118, 119, 120, 121, 125, 128, 135, 136, 137, 138, 139, 140, 141, 142, 150, 151, 153, 156, 168, 169, 174, 191, 195, 200, 205, 215, 217, 218, 219, 220, 224, 225, 227, 229, 231, 248, 251, 252, 253, 254, 255, 257, 259, 261, 262], "initial_pos": 173, "initialis": [2, 3, 5], "initializ": [200, 203], "initil": [65, 66], "input": [1, 2, 3, 5, 30, 39, 42, 52, 62, 64, 70, 71, 72, 75, 76, 79, 86, 89, 90, 92, 111, 114, 116, 122, 123, 124, 125, 126, 205, 206, 207, 208, 209, 210, 215, 224, 225, 229, 241, 242, 253, 254, 259, 260, 263], "input_callback": 39, "input_sampl": 207, "input_sign": [167, 205, 207, 208, 209, 210, 214, 215, 216, 217, 218], "insert": 244, "insid": 7, "insight": 258, "inspect": [2, 3, 225, 253, 259, 261, 262], "instal": [31, 244, 248, 251, 252], "instanc": [7, 13, 14, 15, 18, 27, 29, 30, 31, 32, 33, 35, 42, 46, 54, 56, 59, 65, 71, 84, 85, 100, 101, 113, 114, 115, 116, 121, 122, 123, 124, 125, 137, 139, 141, 185, 191, 192, 194, 195, 196, 200, 202, 224, 225, 231, 232, 233, 234, 235, 236, 237, 248, 252], "instanti": [30, 56, 174, 262], "instantiant": 262, "instead": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 58, 60, 62, 63, 64, 65, 66, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 174, 178, 184, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 248, 252, 255], "institut": 251, "instruct": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 248, 255, 264], "int": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 52, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 84, 85, 86, 87, 89, 90, 92, 93, 94, 95, 97, 98, 99, 100, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 132, 135, 136, 137, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 156, 161, 165, 166, 167, 169, 183, 196, 200, 203, 204, 207, 216, 219, 220, 222, 223, 225, 227, 230, 231, 234, 237, 238, 242, 243, 254, 256, 259, 260, 262], "int16": 65, "int32": [69, 74, 75, 77, 80], "int64": 135, "int8": 78, "int_": 30, "intact": 251, "integ": [7, 15, 18, 27, 29, 31, 33, 35, 55, 63, 65, 71, 236, 238, 262], "integr": [31, 244, 248, 249, 252], "integration_test": 244, "integrity_test": 244, "intend": [5, 225, 244, 248, 250, 251, 255], "intent": 251, "intenum": [7, 64], "inter": [137, 139, 141], "interact": [30, 38, 54, 58, 59, 231, 251, 258], "interc": [36, 70, 76], "interchang": 251, "interconnect": [64, 191, 224, 225, 248, 258], "interdepend": [0, 57], "intereset": 238, "interest": [1, 2, 3, 4, 36, 59, 169, 184, 249, 251, 252, 254], "interf": [232, 237, 251], "interfac": [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 151, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 184, 187, 188, 189, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 248, 249, 250, 251, 252, 255, 258, 259, 260], "interfer": [7, 15, 18, 27, 29, 31, 32, 33, 35, 65, 89, 137, 139, 141, 190, 232, 249, 255], "interfernc": 190, "interleav": [65, 73, 111, 128, 135, 137, 147], "interleave_block": 70, "interleaved_sampl": 65, "intermedi": 126, "intern": [13, 37, 39, 58, 64, 65, 79, 80, 87, 89, 92, 111, 128, 135, 137, 150, 153, 216, 224, 233, 234, 235, 236, 237, 253, 257, 258, 263], "internet": [94, 191], "interpol": [7, 13, 15, 18, 27, 29, 30, 31, 33, 35, 224, 242, 256, 263], "interpolation_mod": [7, 13, 15, 18, 27, 29, 31, 33, 35, 224, 256], "interpolationmod": [7, 13, 15, 18, 27, 29, 30, 31, 33, 35, 224, 256], "interpret": [32, 89, 132, 250, 251], "intersymbol": 65, "interv": [2, 3, 5, 19, 22, 48, 51, 59, 60, 65, 98, 99, 118, 120, 128, 132, 135, 136, 137, 140, 147, 167, 169, 231, 232, 233, 237, 239, 255], "intial": 248, "intim": 251, "introduc": [5, 29, 35, 70, 71, 72, 79, 132, 191, 200, 205, 233, 234, 236, 237, 244, 248, 256], "introduct": [248, 255], "inv": 254, "invalid": [1, 22, 36, 37, 59, 67, 195, 251], "invari": [7, 17, 30, 203, 213], "invers": [2, 4, 71, 122, 128, 138, 254, 260], "invert": [67, 262], "investig": [18, 30, 53, 59, 86, 104, 105, 106, 107, 108, 163, 165, 166, 190, 248, 249, 255, 258, 259], "investigated_object": 59, "invoc": 30, "invok": 13, "involv": [7, 39, 89, 90, 225], "ip": [93, 94], "iq_imbal": 205, "ir": [123, 263], "irrevoc": 251, "is_bas": 67, "is_complex": 111, "is_regist": 59, "isi": 137, "iso": [35, 191], "isol": [90, 176, 185, 191, 195, 205, 225, 261, 263], "isolation_model": 176, "isometr": 35, "isotrop": [2, 3, 5, 174, 175], "israel": 263, "issu": 249, "istrop": [90, 225, 255], "item": 251, "iter": [37, 59, 74, 80, 84, 86, 126, 127, 189, 191, 231, 248], "iteration_prior": 86, "iterationprior": 86, "itertool": 255, "its": [1, 2, 3, 17, 23, 30, 32, 33, 36, 39, 42, 56, 59, 66, 67, 71, 79, 81, 89, 90, 92, 138, 168, 169, 175, 176, 177, 178, 179, 180, 181, 182, 183, 191, 200, 203, 219, 224, 225, 227, 229, 248, 249, 250, 251, 254, 255, 260], "itself": [67, 185, 251], "j": [2, 5, 23, 33, 36, 69, 74, 75, 77, 78, 80, 218, 263], "jaeckel": [31, 36, 263], "jan": [249, 263], "jbtj12": 263, "jca": [0, 98, 99, 225, 248], "jcasrecept": 97, "jcastransmiss": 97, "jelinek": [78, 263], "jitter": 207, "join": 261, "joint": [30, 96, 97, 98, 99, 225, 248, 263], "journal": [59, 77, 125, 132, 263], "jrbt14": 263, "jrproc": [123, 263], "json": 55, "jstor": [3, 263], "jump": 260, "jungnickel": [36, 263], "jupyt": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "jussi": [205, 263], "just": [30, 55, 185, 192, 248, 257], "j\u00e9go": [69, 74, 75, 77, 78, 80, 263], "k": [6, 7, 25, 36, 65, 69, 70, 71, 74, 75, 76, 77, 78, 80, 111, 125, 128, 135, 137, 147, 259, 263], "k0": 221, "k2": 221, "k3": 221, "k_": [23, 25, 71], "k_0": 221, "k_2": 221, "k_3": 221, "k_n": [70, 71, 72, 76, 79], "kah54": 263, "kahn": [123, 263], "kai": [23, 31, 36, 263], "kari": [205, 263], "karlsson": [23, 263], "kc76": [136, 263], "keep": 251, "keepdim": [258, 259], "kei": [55, 65, 101, 135, 198, 199, 251, 262], "kennedi": [132, 263], "kernel": [13, 30, 251], "keyboard": 86, "keysview": 55, "keyword": [32, 86], "khanzadi": [221, 263], "khz": [81, 153, 156, 253], "kiayani": [205, 263], "kind": [251, 257], "kindli": 244, "kinemat": 67, "kinetmat": 67, "kkp": 263, "klau": [21, 263], "knapp": 263, "know": 251, "knowingli": 251, "knowledg": 251, "known": [3, 13, 79, 130, 136, 157, 254], "kon": [59, 263], "korpi": [205, 263], "kosunen": [205, 263], "kotel": 13, "kronauer": [249, 263], "kuylenstierna": [221, 263], "kwa": 263, "kwarg": [6, 7, 14, 32, 59, 60, 61, 64, 65, 68, 81, 82, 86, 91, 93, 94, 128, 135, 136, 137, 138, 139, 140, 141, 147, 150, 153, 156, 161, 195, 215, 217, 218, 223, 224, 254, 258], "l": [7, 23, 25, 33, 59, 71, 78, 85, 105, 107, 108, 128, 135, 137, 147, 195, 263], "l_n": [70, 71, 72, 76, 79], "label": [53, 59, 104, 105, 106, 107, 108, 163, 165, 166, 190, 207], "lack": 248, "lambda": [2, 5, 39, 167, 172], "lan": [79, 263], "land": [31, 263], "languag": 251, "languang": 252, "laptop": 191, "lar": [31, 36, 263], "larg": [7, 8, 9, 10, 11, 12, 256], "large_scale_paramet": 7, "larger": [137, 144, 243, 251], "largescalest": [7, 10, 11, 12], "last": [13, 55, 59, 71, 127, 132, 206, 216, 263], "last_impact": 59, "latenc": 156, "later": [251, 257], "latest": 250, "launch": [59, 231, 244, 248, 255], "lauri": [205, 263], "law": [221, 251, 263], "lawsuit": 251, "layer": [39, 52, 56, 60, 64, 66, 79, 89, 90, 91, 92, 109, 110, 119, 191, 224, 225, 231, 237, 248, 255, 256, 263], "lbrace": [1, 2, 3, 13, 29, 30, 70, 76, 104, 105, 107, 108, 213, 217, 218], "lceil": 71, "ldot": [104, 105, 106, 107, 108], "ldpc": [74, 263], "ldpccode": 74, "le": [69, 74, 75, 77, 78, 80, 263], "lead": [30, 65, 76, 130, 185, 224, 248, 251], "leak": [90, 176, 193, 194, 196, 224, 225, 226, 227, 229, 230], "leakag": [33, 88, 89, 90, 176, 192, 193, 194, 196, 224, 225, 226, 261], "leakage_calibr": [85, 89, 90], "leakage_frequency_respons": [195, 196], "leakage_impulse_respons": [195, 196], "leakage_respons": [85, 195], "leakagecalibrationbas": [85, 89], "leakg": 195, "leaking_sign": [90, 91, 176, 224, 225, 226, 227, 229, 230], "leanoard": [123, 263], "least": [251, 253], "leastsquaresestim": 85, "leat": 85, "leav": 32, "left": [2, 5, 13, 15, 23, 25, 29, 30, 33, 36, 39, 44, 46, 59, 70, 71, 76, 81, 94, 97, 98, 104, 105, 106, 107, 108, 167, 169, 172, 217, 225], "legal": 251, "legend": 65, "len": 65, "length": [25, 37, 55, 65, 70, 71, 72, 76, 79, 89, 105, 106, 107, 108, 111, 128, 135, 137, 139, 141, 144, 167, 215, 224], "leq": [5, 59, 132], "leroux": [69, 74, 75, 77, 78, 80, 263], "less": [13, 29, 36, 65, 70, 135, 144, 165, 205, 207, 255], "leszek": [31, 263], "let": [2, 3, 5, 13, 15, 30, 70, 76, 81, 251, 254, 255, 257, 258, 259, 260, 261, 262], "level": [6, 30, 59, 73, 90, 91, 125, 132, 142, 150, 151, 156, 198, 199, 200, 201, 202, 207, 208, 221, 224, 225, 232, 237, 244, 249, 251, 256, 262, 263], "lf": 250, "lfloor": 13, "li": 19, "liabil": 251, "liabl": 251, "librari": [94, 248, 251, 258], "licens": 249, "license": 251, "licensor": 251, "lieg": [213, 217, 263], "light": 39, "like": [55, 65, 74, 167, 248, 251, 252, 258], "likelihood": 111, "likewis": 251, "limit": [59, 80, 81, 111, 137, 191, 192, 200, 251, 255, 261, 263], "lin": 58, "lin2db": 241, "linalg": 254, "line": [6, 8, 9, 10, 11, 12, 21, 22, 23, 25, 27, 28, 30, 33, 65, 68, 87, 132, 157, 169, 173, 248, 250, 251, 255, 257, 261], "line_of_sight": 7, "line_width": 65, "linear": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 53, 58, 59, 78, 111, 137, 157, 162, 173, 174, 175, 191, 196, 202, 205, 208, 209, 210, 214, 216, 241, 242, 254, 255, 259, 263], "linearantenna": [36, 181], "linearli": 36, "lineartrajectori": 173, "lines_arrai": 258, "linewidth": 65, "link": [6, 7, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 25, 28, 29, 30, 32, 33, 35, 36, 37, 63, 67, 71, 79, 90, 91, 94, 101, 104, 105, 106, 107, 108, 110, 117, 123, 124, 125, 132, 135, 138, 139, 140, 141, 142, 150, 151, 156, 189, 191, 224, 225, 229, 232, 233, 234, 235, 236, 237, 248, 249, 251, 253, 257, 258, 263, 264], "link_a": 232, "link_b": 232, "linked_fram": 67, "linkstat": [6, 7, 15, 16, 18, 29, 31, 33, 35, 256], "linspac": [195, 196], "linux": 250, "list": [7, 13, 25, 36, 39, 40, 41, 42, 43, 47, 52, 55, 58, 59, 64, 65, 71, 75, 81, 86, 90, 92, 111, 113, 115, 132, 136, 144, 149, 155, 161, 213, 219, 224, 225, 226, 232, 237, 244, 250, 251, 258, 263, 264], "liter": [1, 36, 55, 65, 95], "literatur": [39, 44, 46, 81, 94, 97, 98, 167, 169, 172, 225], "litig": 251, "litsyn": 263, "littl": 262, "ll": [255, 258, 261], "llr": [111, 137], "lna": 191, "lo": [7, 8, 9, 10, 11, 12, 33, 257], "loacat": 7, "load": [2, 35, 55, 89, 252], "load_calibr": 89, "load_scen": 35, "lobe": [2, 3, 5, 255], "local": [1, 36, 67, 90, 225, 244, 251, 255], "local_characterist": [36, 81], "locat": [5, 17, 20, 33, 34, 36, 59, 64, 66, 74, 86, 127, 165, 244, 250, 255, 256, 257, 261, 262], "log": [53, 59, 111], "log2": [111, 262], "logarithm": [13, 57, 157], "logarithmicsequ": 58, "logic": 254, "lokal": 253, "long": [53, 59, 79, 104, 105, 106, 107, 108, 163, 165, 166, 190, 251], "longer": [56, 106, 137, 226], "look": [67, 167, 173, 191, 252, 255], "lookat": [67, 173], "lookat_dis": 173, "lookat_en": 173, "lookup": 64, "loook": 67, "loop": [0, 95, 130, 253, 258, 261], "los_angl": [21, 22, 25, 27, 28], "los_angles_vari": 26, "los_doppl": [26, 27], "los_doppler_frequ": [21, 22, 25, 28], "los_gain": [26, 27], "los_phas": 27, "los_phases_vari": 26, "los_real": [8, 9, 10, 11, 12], "lose": [54, 240], "loss": [14, 18, 19, 20, 25, 26, 27, 29, 33, 34, 202, 241, 251, 260], "lossless": 29, "losstat": [7, 8, 9, 257], "lot": 248, "low": [73, 156, 191, 205, 259, 261, 263], "lower": [8, 59, 191], "lowpass": 89, "lowpass_bandwidth": [89, 90], "lowpass_filt": [89, 90], "lshift": 59, "lsst": [7, 10, 11, 12], "lvert": [36, 81, 104, 106, 132], "l\u00e9onardon": [69, 74, 75, 77, 78, 80, 263], "m": [1, 3, 7, 8, 13, 15, 18, 23, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 59, 65, 66, 67, 69, 70, 74, 75, 76, 77, 78, 80, 85, 89, 98, 99, 111, 125, 154, 155, 157, 159, 161, 167, 168, 169, 172, 183, 195, 213, 218, 221, 241, 242, 244, 250, 254, 261, 263], "m_": [13, 15, 30, 36, 59], "m_n": 71, "ma": 4, "mac": [79, 263], "machin": [59, 231, 251], "macrocel": [7, 21, 263], "made": [163, 249, 251], "magnitud": [1, 2, 3, 5, 36, 81, 101, 103, 110, 255], "mah": 263, "mahmoud": [205, 263], "mai": [0, 1, 23, 33, 37, 46, 55, 59, 62, 64, 65, 68, 71, 77, 84, 86, 90, 104, 105, 106, 107, 108, 122, 123, 124, 126, 127, 130, 142, 150, 151, 156, 173, 175, 176, 185, 191, 208, 215, 216, 222, 225, 232, 244, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 260, 261, 262, 264], "mail": 251, "main": [2, 3, 5, 52, 55, 240, 251, 255], "maintain": [244, 249, 251], "major": [251, 259], "make": [59, 191, 249, 250, 251], "make_target": 32, "man": [79, 263], "manag": [54, 55, 71, 86, 92, 93, 119, 131, 224, 231, 248], "mandatori": [112, 169], "mani": [30, 251], "manipul": [59, 121], "manner": 251, "manual": [86, 94, 174, 244, 250], "manual_trigg": 86, "map": [31, 55, 59, 99, 100, 120, 122, 126, 128, 135, 137, 147, 148, 154, 167, 168, 169, 172, 248, 260, 262], "mapped_symbol": 262, "mapper": 111, "mapping_avail": 111, "mapping_available_pam": 111, "march": 251, "marcum": 241, "marcum_q": 241, "mark": 251, "markerlin": 258, "marko": [205, 263], "martin": [21, 263], "mask": [65, 79, 144, 147, 251], "mat": [55, 191], "match": [1, 17, 29, 39, 48, 59, 62, 64, 65, 71, 89, 90, 92, 96, 127, 157, 176, 186, 187, 193, 194, 224], "matched_filt": 98, "matchedfilterjca": 98, "matching_imped": 187, "materi": 251, "math": 240, "mathbb": [1, 2, 3, 7, 13, 15, 18, 25, 27, 29, 30, 31, 33, 35, 36, 59, 105, 106, 107, 108, 157, 213, 214, 216, 217, 218, 254], "mathbf": [1, 2, 3, 5, 7, 13, 15, 18, 19, 20, 23, 25, 27, 29, 30, 31, 33, 35, 36, 70, 76, 81, 104, 105, 106, 107, 108, 130, 132, 195, 254, 259], "mathcal": [1, 2, 3, 19], "mathemat": [77, 263], "mathod": 250, "mathrm": [1, 2, 3, 5, 7, 8, 13, 15, 18, 19, 20, 23, 27, 29, 30, 31, 32, 33, 35, 36, 39, 44, 46, 59, 71, 72, 76, 81, 94, 97, 98, 99, 104, 105, 106, 107, 108, 132, 153, 156, 157, 167, 168, 169, 172, 191, 213, 214, 216, 217, 218, 221, 225, 233, 253, 254, 261], "mathscr": 13, "mathsf": [2, 3, 13, 25, 29, 33, 104, 105, 106, 107, 108, 254], "mathwork": 252, "matlab": [31, 55, 59, 249, 250, 257], "matolotlib": 68, "matplotlib": [5, 36, 54, 59, 68, 127, 137, 207, 216, 222, 243, 253, 254, 256, 257, 258, 260, 261, 262], "matric": [23, 30, 65], "matrici": 65, "matrix": [1, 2, 3, 5, 13, 19, 24, 27, 29, 33, 36, 37, 65, 67, 74, 85, 127, 157, 167, 172, 173, 185, 187, 189, 195, 196, 205, 224, 231, 242, 254], "matth": 263, "max": [19, 59, 99, 132, 160, 167, 168, 169, 172], "max_": 5, "max_amplitud": [208, 211], "max_delai": [7, 25, 84], "max_frame_dur": [39, 236], "max_num_clust": [7, 8, 9, 10, 11, 12], "max_num_rai": [7, 8, 9, 10, 11, 12], "max_num_sampl": 59, "max_num_tap": [7, 15, 18, 27, 29, 31, 33, 35, 256], "max_rang": [98, 99, 161, 166, 167, 168, 169, 172], "max_receive_delai": [89, 90, 253], "max_relative_doppl": [99, 167, 172], "max_sampling_r": [81, 89, 90, 94], "max_timestamp": 173, "max_trajectory_timestamp": 173, "maxdetector": [99, 158, 166], "maxim": [3, 5, 34, 81, 89, 90, 94, 98, 121, 132, 161, 233], "maximum": [3, 5, 7, 8, 9, 10, 11, 12, 15, 18, 25, 27, 29, 31, 33, 35, 39, 59, 64, 84, 89, 94, 98, 99, 123, 125, 153, 156, 157, 158, 167, 168, 169, 172, 173, 208, 214, 263], "maximumratiocombin": 123, "maxium": 19, "mc": 191, "mcnamara": [23, 263], "mean": [6, 8, 14, 17, 22, 23, 26, 28, 29, 30, 32, 35, 36, 59, 85, 101, 103, 106, 110, 111, 137, 139, 141, 164, 168, 178, 188, 195, 203, 209, 232, 241, 248, 249, 251, 255, 258, 259, 261], "mean_pow": 258, "meant": 142, "measur": [53, 64, 86, 165, 199, 202, 221, 248, 249, 251, 257, 261, 263], "mechan": 249, "medium": [79, 251, 263], "meet": 251, "mehrpouyan": [132, 263], "mei02": 263, "meijer": [13, 263], "memori": [55, 65, 66, 191], "memoryless": [75, 213, 263], "mention": 262, "menu": 251, "merchant": 251, "mere": 251, "merg": [185, 192, 251], "mesh": 68, "messag": [59, 263], "met": 251, "meter": [8, 19, 25, 34, 167, 169, 172], "method": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 54, 55, 56, 59, 60, 62, 63, 64, 65, 66, 67, 70, 71, 72, 75, 76, 79, 81, 83, 84, 85, 86, 87, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 157, 158, 159, 161, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 184, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 241, 248, 250, 251, 254, 255, 256, 258, 260, 262, 263], "methodologi": [21, 263], "metric": [102, 110, 166, 231], "mhz": [94, 191, 257], "microcel": 7, "microwav": [205, 263], "mid_ris": [206, 207, 212], "mid_tread": [207, 212], "might": [30, 71, 185, 192, 237, 242, 255, 260], "mike": 263, "mikko": [205, 263], "mimo": [1, 4, 23, 31, 62, 114, 117, 118, 119, 120, 121, 125, 127, 255, 262, 263], "min": [19, 59, 132, 214, 257], "min_num_iter": 74, "min_num_sampl": 59, "min_pow": 162, "minim": [7, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 32, 34, 35, 78, 104, 105, 106, 107, 108, 128, 135, 137, 138, 140, 150, 153, 162, 163, 165, 166, 167, 244, 248, 249, 252, 263], "minimum": [2, 59, 74, 85, 118, 120, 132, 135, 136, 198, 254], "mininum": 19, "minmal": 162, "minu": 109, "mismatch": 185, "misrepresent": 251, "miss": 261, "mix": [1, 3, 5, 9, 41, 43, 48, 51, 65, 90, 97, 98, 99, 167, 169, 225], "mixed_sign": [41, 43, 248, 257, 261], "mixer": 205, "mixingoper": [44, 48, 51, 60, 97, 98, 99, 169], "mmse": 85, "mmseestim": 85, "mo": 59, "mobil": [21, 31, 156, 249, 263], "mock": [60, 68, 72, 261], "mod": [70, 76], "mode": [24, 36, 37, 54, 59, 61, 64, 65, 81, 91, 92, 130, 165, 175, 179, 180, 181, 182, 224, 231, 251], "model": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 47, 48, 49, 50, 52, 57, 59, 64, 65, 71, 81, 85, 90, 91, 94, 95, 117, 118, 120, 128, 132, 137, 142, 147, 150, 151, 156, 167, 168, 169, 172, 173, 174, 175, 176, 179, 180, 181, 182, 183, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 248, 250, 251, 255, 256, 258, 260, 262, 263], "model_propagation_loss": [2, 3, 5, 18, 19, 20, 255], "model_typ": [6, 21, 28], "modem": [2, 3, 5, 30, 64, 71, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 197, 198, 199, 225, 248, 253, 256, 257, 258, 259, 260, 262], "modem_alpha": [101, 104, 105, 106, 107, 108], "modem_beta": [101, 104, 105, 106, 107, 108], "modern": [13, 263], "modif": [248, 251], "modifi": [62, 67, 122, 123, 124, 126, 176, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "modul": [0, 4, 6, 7, 9, 13, 21, 23, 28, 30, 35, 36, 37, 38, 55, 57, 58, 59, 60, 64, 68, 71, 73, 79, 86, 88, 96, 97, 111, 120, 121, 122, 126, 128, 131, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 154, 156, 167, 168, 174, 176, 191, 211, 212, 219, 225, 240, 241, 243, 244, 248, 251, 252, 253, 254, 256, 259, 260, 262, 263], "modulation_ord": [111, 117, 118, 119, 120, 123, 124, 125, 128, 135, 137, 138, 139, 140, 141, 147, 253, 259, 262], "molisch": [21, 263], "monitor": 243, "mono": 33, "monostat": [169, 192, 261], "mont": [59, 191, 224, 225, 231, 248, 249, 255, 256, 258, 260, 261, 263], "monte_carlo": [53, 102, 104, 105, 106, 107, 108, 190, 196, 197, 198, 199, 200, 201, 202, 231], "montecarlo": [59, 189, 231], "montecarloactor": 59, "montecarloresult": [59, 86, 191, 231, 258], "montecarlosampl": 59, "more": [21, 23, 33, 34, 59, 67, 86, 125, 132, 135, 138, 139, 140, 141, 145, 148, 165, 168, 175, 191, 205, 207, 225, 243, 248, 251, 253, 258], "moreov": 251, "most": [37, 68, 70, 76, 79, 90, 110, 130, 132, 135, 136, 191, 203, 244, 250, 251, 256, 259, 261, 264], "mother": [63, 219, 220], "mother_nod": [63, 219, 220], "motion": 173, "moulat": 120, "move": [33, 67, 173, 256], "moveabl": [32, 90, 173, 225], "movebl": 32, "movement": 173, "msb": 111, "mu": 167, "muhammad": [205, 263], "multi": [1, 2, 3, 5, 30, 31, 48, 62, 65, 169, 249, 263], "multicarri": 142, "multicor": [191, 258], "multidimension": 59, "multipath": [21, 22, 28, 30, 33, 132, 258], "multipathfadingchannel": [21, 22, 23, 25, 26, 28], "multipathfadingr": [23, 25, 26, 27], "multipathfadingsampl": [23, 25, 26, 27], "multipl": [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 58, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 174, 184, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 248, 255, 256, 258, 261, 262, 263], "multiplex": [150, 151, 153], "multipli": [101, 103, 110], "multitargetradarchannel": [32, 33], "multitargetradarchannelr": 32, "multitud": 248, "munich": 35, "must": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 164, 166, 167, 169, 170, 173, 184, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 244, 251, 254], "mutabl": 66, "mutual": [90, 176, 186, 187, 188, 191, 192, 225], "mvdr": [2, 254], "mxn": [65, 242], "mxt": 65, "mxt_i": 65, "mypi": 244, "n": [1, 2, 3, 5, 7, 18, 19, 20, 21, 22, 23, 25, 28, 65, 71, 72, 79, 85, 99, 111, 125, 128, 135, 137, 147, 191, 195, 242, 250, 254, 257, 259], "n0": [167, 198, 199, 200, 225, 257, 261], "n_": [7, 13, 15, 18, 27, 29, 30, 31, 33, 35], "n_0": 201, "n_in": 37, "n_out": 37, "n_rx": 37, "n_tx": 37, "name": [6, 7, 9, 13, 18, 21, 28, 30, 33, 36, 37, 38, 54, 55, 58, 59, 64, 83, 84, 85, 86, 89, 101, 122, 130, 143, 144, 211, 212, 232, 241, 248, 251, 252, 260, 262], "namespac": [0, 55, 248], "nasir": [132, 263], "nativ": [36, 86, 249, 250, 253], "natur": [30, 142, 251], "ncmf18": 263, "ncol": [68, 222], "ndarrai": [1, 2, 3, 5, 6, 7, 15, 17, 24, 25, 27, 31, 33, 34, 36, 37, 53, 55, 58, 59, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 85, 87, 89, 90, 100, 102, 106, 108, 109, 111, 113, 114, 115, 116, 127, 128, 131, 132, 135, 136, 137, 144, 145, 146, 147, 148, 149, 155, 157, 159, 161, 163, 164, 165, 166, 167, 172, 173, 184, 187, 190, 195, 196, 205, 207, 214, 215, 216, 217, 218, 222, 223, 225, 241, 242, 254, 258, 259, 262], "ndim": 65, "ndindex": [176, 258], "ndm": 263, "nearest": [7, 13, 15, 18, 27, 29, 31, 33, 35, 224, 236, 238, 256], "necessari": [71, 251], "necessarili": 242, "need": [65, 191, 200, 248, 250, 251, 257, 258], "neg": [2, 3, 5, 6, 19, 39, 59, 62, 81, 85, 89, 94, 122, 123, 124, 125, 128, 200, 201, 202, 207, 221, 225, 242], "neighbour": 135, "neither": [29, 30, 225, 251], "network": [5, 18, 31, 132, 187, 225, 251, 263], "never": 59, "new": [2, 3, 5, 6, 7, 13, 19, 20, 25, 29, 30, 31, 32, 34, 35, 36, 37, 54, 55, 56, 59, 61, 63, 64, 65, 67, 68, 71, 79, 86, 91, 92, 93, 100, 104, 105, 106, 107, 108, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 161, 163, 165, 166, 167, 173, 174, 178, 185, 191, 192, 194, 195, 196, 200, 206, 207, 213, 216, 219, 223, 224, 225, 232, 233, 234, 235, 236, 237, 244, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262], "new_devic": [2, 3, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 25, 28, 32, 34, 35, 61, 64, 93, 104, 105, 106, 107, 108, 117, 118, 119, 120, 122, 123, 124, 125, 142, 150, 151, 156, 163, 165, 166, 167, 168, 173, 174, 176, 185, 191, 192, 194, 195, 196, 200, 206, 213, 219, 225, 232, 233, 234, 235, 236, 237, 248, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262], "new_dimens": [2, 3, 5, 8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 32, 34, 59, 86, 104, 105, 106, 107, 108, 163, 166, 176, 191, 248, 254, 255, 256, 258, 259, 260, 261, 262], "newaxi": [254, 262], "newest": 250, "newli": [7, 13, 32, 36, 54, 59, 65, 68, 86, 161, 178, 223, 250, 254, 256, 258, 259, 260, 262], "next": [71, 79, 251, 260], "nikov": 13, "nimr": 263, "nlo": [7, 8, 9, 10, 11, 12, 23, 263], "nlos_angl": 27, "nlos_angles_vari": 26, "nlos_doppl": [26, 27], "nlos_gain": [26, 27], "nlos_phas": 27, "nlos_phases_vari": 26, "nlos_real": [8, 9, 10, 11, 12], "no_antenna": 205, "no_sampl": 205, "noantennacalibr": [83, 89], "node": [31, 59, 63, 100, 219, 220, 231], "nodelaycalibr": [84, 89], "nois": [7, 15, 18, 27, 29, 31, 33, 34, 35, 39, 65, 85, 89, 90, 91, 111, 125, 165, 190, 191, 198, 199, 201, 202, 203, 204, 205, 206, 207, 224, 225, 228, 229, 248, 259, 261, 262, 263], "noise_level": [8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 32, 34, 90, 91, 104, 105, 106, 107, 108, 166, 167, 191, 200, 224, 225, 248, 254, 255, 256, 257, 259, 260, 261, 262], "noise_model": [90, 91, 200, 224, 225], "noise_pow": [65, 85, 89, 90], "noise_r": [226, 228, 229], "noise_vari": 111, "noiselevel": [90, 197, 198, 199, 200, 201, 202, 224, 225], "noisemodel": [90, 200, 203, 224, 225], "noiser": [200, 204, 228, 229], "noleakagecalibr": [85, 89], "noll": [249, 263], "non": [7, 23, 25, 27, 33, 37, 59, 65, 128, 130, 132, 163, 191, 197, 219, 251, 263], "noncommerci": 251, "none": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 165, 166, 167, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 243, 254, 256, 258], "nonlinear": [205, 213, 217, 218, 263], "nophasenois": 220, "nor": [29, 30, 225, 251], "norm": [67, 122], "normal": [7, 9, 10, 11, 12, 17, 35, 67, 111, 122, 157, 162, 163, 195, 216, 225, 251, 262], "normalize_pow": 157, "normalize_quaternion": 67, "norman": [23, 263], "notabl": 261, "notat": [30, 205], "note": [23, 30, 33, 35, 37, 56, 58, 65, 68, 89, 108, 109, 111, 118, 120, 123, 124, 125, 127, 185, 192, 207, 208, 225, 232, 236, 248, 250, 252, 253], "notebook": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "notfii": 39, "noth": [29, 38, 251], "notic": 251, "notifi": [39, 48, 51, 56, 64, 89, 90, 91, 92, 176, 224, 225, 251], "notify_transmit_callback": 51, "notimplementederror": 65, "notin": 30, "notwithstand": 251, "novel": [23, 263], "novemb": [213, 218, 251, 263], "now": [2, 3, 5, 30, 191, 243, 248, 253, 254, 255, 256, 257, 258, 259, 261, 262], "np": [2, 3, 5, 8, 9, 10, 11, 12, 20, 25, 32, 34, 35, 65, 67, 79, 125, 138, 139, 140, 141, 173, 174, 176, 191, 195, 196, 225, 254, 255, 256, 257, 258, 259, 260, 262], "nrow": [68, 222], "nrt": 200, "null": [3, 4, 32, 33, 143, 165, 263], "null_hypothesi": 33, "nullsteeringbeamform": 5, "num": 137, "num_actor": [59, 191, 231], "num_antenna": [36, 39, 41, 81, 227, 230], "num_appended_zero": 94, "num_artifact": [52, 59], "num_bin": 37, "num_bit": [100, 109], "num_block": [125, 127], "num_chirp": [167, 261], "num_clust": 7, "num_code_bit": 71, "num_data_bit": 71, "num_data_chirp": 135, "num_data_symbol": [2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 104, 105, 106, 107, 108, 117, 118, 119, 120, 123, 124, 125, 128, 135, 137, 138, 139, 140, 141, 147, 248, 253, 259, 262], "num_decoded_block": 126, "num_delay_tap": 37, "num_devic": [64, 237], "num_device_recept": 52, "num_device_transmiss": 52, "num_digital_receive_port": [39, 66, 89, 90, 225], "num_digital_transmit_port": [39, 66, 89, 90, 225], "num_drop": [61, 64, 165, 248, 255, 257, 261], "num_element_typ": 144, "num_emerging_sign": 41, "num_encoded_block": 126, "num_error": 166, "num_evalu": [59, 86], "num_fram": [113, 115], "num_frequency_bin": 37, "num_guard_sampl": 137, "num_impinging_sign": 40, "num_input_block": 126, "num_input_stream": [2, 3, 5, 62, 122, 123, 124, 125, 254, 260], "num_iter": [74, 80, 84], "num_leaking_sign": 227, "num_offset_sampl": [234, 238], "num_oper": 64, "num_operator_input": 47, "num_operator_recept": 42, "num_operator_transmiss": 43, "num_output_stream": [1, 3, 5, 62, 122, 123, 124, 125, 126, 260], "num_path": 75, "num_pilot_chirp": 135, "num_point": 161, "num_port": [36, 94], "num_postamble_symbol": [137, 140], "num_preamble_symbol": [2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 104, 105, 106, 107, 108, 117, 118, 119, 120, 123, 124, 125, 137, 138, 139, 140, 141, 248, 253, 259], "num_prepended_zero": 94, "num_prepeneded_zero": 94, "num_prob": 85, "num_quantization_bit": [206, 207, 261], "num_quantization_level": 207, "num_rai": 7, "num_recalled_drop": 257, "num_receiv": 64, "num_receive_antenna": [15, 36, 39, 81, 94, 225, 254, 256], "num_receive_antenna_port": [39, 94], "num_receive_focus_angl": 254, "num_receive_focus_point": [1, 2, 3, 5, 254], "num_receive_input_symbol": [122, 123, 124, 125, 126, 260], "num_receive_output_stream": [2, 3, 5, 62, 122, 123, 124, 125, 254, 260], "num_receive_output_symbol": [122, 123, 124, 125, 126, 260], "num_receive_port": [36, 39, 94], "num_receive_stream": 37, "num_recorded_drop": 257, "num_refer": [144, 145, 148, 149], "num_repetit": [145, 146, 148, 149], "num_resolvable_path": 25, "num_sampl": [7, 15, 18, 19, 27, 29, 31, 32, 33, 34, 35, 37, 59, 60, 65, 89, 104, 105, 106, 107, 108, 132, 136, 145, 146, 148, 149, 155, 166, 195, 231, 254, 256, 259, 262], "num_sample_point": 59, "num_samples_in": 242, "num_samples_out": 242, "num_scalar": 17, "num_sinusoid": [17, 21, 22, 25, 28], "num_stream": [65, 127, 132, 136, 155], "num_subcarri": [99, 122, 142, 144, 145, 147, 148, 149, 150, 151, 153, 156], "num_symbol": [37, 127, 128, 144, 145, 148, 149], "num_threshold": 165, "num_transmit_antenna": [15, 36, 39, 81, 94, 225, 256], "num_transmit_antenna_port": [39, 94], "num_transmit_focus_point": [1, 3, 5], "num_transmit_input_stream": [3, 5, 62, 122, 125, 254, 260], "num_transmit_input_symbol": [122, 125, 126, 260], "num_transmit_output_symbol": [122, 125, 126, 260], "num_transmit_port": [36, 39, 94], "num_transmit_stream": [37, 127], "num_transmitt": 64, "num_wavelet_sampl": 85, "num_word": [145, 148, 149], "number": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 47, 48, 51, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 90, 92, 93, 94, 97, 98, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 135, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 153, 156, 157, 161, 165, 166, 167, 169, 176, 183, 186, 191, 192, 193, 194, 195, 200, 203, 204, 207, 208, 219, 220, 224, 225, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 242, 243, 248, 251, 254, 256, 258, 260, 262], "numer": [59, 191, 252, 263], "numpi": [1, 2, 3, 5, 7, 17, 24, 33, 36, 37, 42, 47, 53, 55, 58, 59, 63, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 89, 90, 100, 102, 111, 113, 115, 122, 127, 145, 146, 148, 149, 157, 163, 164, 166, 167, 172, 184, 190, 195, 196, 222, 225, 226, 254, 255, 256, 257, 258, 259, 260, 262], "o": [69, 74, 75, 77, 78, 80, 261, 263], "o2i": [7, 10, 11, 12], "o2i_r": [10, 11, 12], "o2ist": [7, 10, 11, 12], "obj": 55, "object": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 55, 56, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 90, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 222, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 248, 251, 252, 255, 256, 258, 262], "oblig": 251, "observ": [15, 59, 130, 258, 262], "obtain": [59, 200, 249], "obvisouli": 248, "occasion": 251, "occupi": 144, "occur": [35, 59, 61, 65, 126, 251], "occurr": 72, "ocdm": [110, 128, 134, 142], "ocdmwaveform": 150, "oct2pi": 250, "octav": [31, 250], "octob": [69, 74, 75, 77, 78, 80, 263], "ofdm": [96, 110, 122, 128, 134, 142, 144, 145, 146, 147, 148, 149, 154, 155, 156, 213, 217, 256, 257, 258, 260, 263], "ofdm_radar": 99, "ofdmidealchannelestim": 256, "ofdmradar": 99, "ofdmsynchron": [152, 155], "ofdmwaveform": [99, 122, 151, 152, 153, 154, 156, 256, 257, 258, 260], "off": [65, 137, 139, 141, 214, 216, 255], "off_focus_drop": 255, "off_target_focu": 255, "offer": [18, 81, 88, 110, 248, 251, 257, 258], "offic": [7, 257], "office_typ": [9, 257], "officetyp": [9, 257], "offici": [249, 250, 251, 252, 264], "offlin": 261, "offset": [7, 17, 65, 67, 79, 130, 132, 135, 145, 146, 147, 148, 149, 155, 205, 232, 233, 237, 238, 239, 243], "old": 65, "older": 251, "omega": 25, "omega_": [21, 22, 23, 25, 28], "omit": 250, "ommit": 30, "on_focus_drop": 255, "on_target_focu": 255, "onc": [35, 56, 59, 191, 207, 231, 232, 238, 258], "one": [2, 3, 5, 13, 30, 34, 36, 37, 59, 61, 65, 70, 76, 100, 111, 132, 135, 136, 137, 139, 141, 142, 144, 147, 150, 151, 156, 162, 165, 167, 174, 175, 176, 185, 191, 200, 205, 207, 213, 217, 219, 225, 226, 227, 230, 231, 248, 250, 251, 258, 262], "ones": [29, 125, 225, 255, 256], "onli": [13, 23, 32, 33, 34, 36, 38, 48, 51, 55, 56, 60, 65, 66, 68, 71, 72, 79, 85, 89, 90, 94, 98, 99, 111, 112, 118, 120, 125, 127, 128, 130, 132, 135, 137, 142, 147, 150, 151, 156, 162, 165, 169, 184, 190, 200, 206, 207, 210, 224, 225, 231, 232, 248, 251, 252, 253, 254, 255, 256, 258, 260, 261], "onlin": [253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "onto": [5, 32, 36, 39, 40, 42, 47, 64, 65, 89, 92, 127, 128, 135, 137, 142, 147, 150, 151, 156, 176, 224, 225, 226, 229, 254, 261], "open": [9, 55, 244, 249, 250, 251, 257, 263], "opensourc": 251, "oper": [1, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 62, 64, 70, 71, 72, 73, 76, 79, 81, 89, 90, 94, 96, 98, 99, 117, 118, 119, 120, 122, 123, 124, 126, 127, 130, 164, 166, 168, 169, 175, 179, 180, 181, 182, 184, 188, 200, 209, 225, 226, 227, 228, 229, 230, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264], "operationresult": [45, 49, 50, 97, 113, 114, 115, 116], "operator_input": [39, 42, 47, 52, 64, 226, 229], "operator_recept": [42, 99, 229, 248, 253, 257], "operator_separ": [42, 90, 225, 226, 227, 229], "operator_transmiss": [39, 43, 225, 230], "operator_transmit_port": 225, "operatornam": 13, "opportun": 251, "optim": [5, 59, 78, 123, 132, 225, 258, 262, 263], "optimum": 263, "option": [7, 10, 11, 12, 14, 17, 29, 35, 36, 39, 55, 59, 64, 65, 66, 68, 81, 89, 97, 98, 99, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 128, 129, 130, 132, 133, 145, 148, 149, 152, 154, 155, 167, 169, 172, 224, 251], "order": [4, 30, 33, 58, 59, 63, 65, 66, 70, 71, 72, 79, 111, 128, 135, 137, 138, 139, 140, 141, 145, 147, 148, 191, 206, 221, 244, 248, 250, 251, 255, 258, 261, 262, 264], "org": [3, 7, 8, 9, 10, 11, 12, 21, 28, 69, 74, 75, 77, 78, 79, 80, 205, 251, 263], "organ": 251, "orient": [15, 20, 30, 36, 67, 81, 90, 173, 175, 176, 177, 179, 180, 181, 182, 191, 225, 248], "origin": [13, 39, 65, 66, 79, 90, 99, 106, 109, 159, 208, 209, 210, 225, 251], "ortho": 122, "orthogon": [5, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], "orthogonalleastsquareschannelestim": [142, 150, 151, 156, 257], "orthogonalwaveform": [142, 145, 146, 147, 148, 149, 150, 153, 154, 156], "oscial": 219, "oscil": [191, 205, 219, 220, 263], "oscillatorphasenois": 221, "osical": 219, "ot": 1, "otf": [110, 128, 134, 142, 263], "otfswaveform": 156, "other": [3, 5, 20, 59, 67, 70, 71, 72, 76, 79, 130, 173, 185, 188, 191, 216, 232, 237, 248, 251, 257, 258], "otherwis": [1, 2, 3, 5, 29, 39, 65, 90, 91, 225, 251], "ottersten": [23, 263], "our": [251, 254, 255, 256, 258, 259, 260, 261, 262], "out": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 248, 251], "outer": 255, "outlin": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 32, 34, 35, 104, 105, 106, 107, 108, 253, 254, 259, 261], "outofprocess": 252, "output": [1, 2, 3, 5, 17, 30, 31, 38, 39, 42, 43, 45, 48, 51, 53, 54, 56, 58, 59, 62, 64, 70, 71, 72, 76, 79, 104, 105, 106, 107, 108, 111, 114, 116, 122, 123, 124, 125, 126, 137, 163, 164, 165, 166, 190, 207, 224, 225, 230, 231, 242, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "output_callback": 39, "outsid": [7, 30, 225, 251], "over": [7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 32, 33, 34, 37, 39, 42, 43, 46, 47, 49, 50, 51, 53, 59, 64, 65, 70, 77, 81, 86, 88, 89, 90, 92, 97, 100, 102, 112, 113, 114, 115, 116, 119, 125, 130, 132, 142, 150, 151, 156, 163, 164, 166, 168, 170, 171, 173, 174, 175, 176, 190, 191, 193, 194, 202, 205, 224, 225, 226, 229, 230, 231, 233, 248, 253, 255, 256, 257, 258, 260, 261, 262, 263], "overal": [23, 33, 142, 150, 151, 156, 167, 191], "overflow": 65, "overhead": 109, "overlap": [65, 137, 232], "overlin": [18, 19, 20, 33], "overload": 55, "oversampl": [128, 137, 140, 253], "oversampling_factor": [2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 99, 117, 118, 119, 120, 122, 123, 124, 125, 128, 137, 138, 139, 140, 141, 248, 253, 259, 262], "oversight": 248, "overview": [21, 132, 248, 263], "overwrit": [64, 86, 257, 261], "overwrite_result": 54, "overwritten": 216, "own": [6, 13, 18, 19, 20, 23, 25, 29, 32, 34, 35, 90, 215, 248, 249, 251], "owt": [145, 147, 148, 154], "oxygen": [7, 9, 10, 11, 12], "oxygen_absorpt": [7, 8, 9, 10, 11, 12], "p": [2, 3, 20, 23, 33, 59, 79, 80, 125, 254, 263], "p_": 217, "p_a": 5, "p_t": 5, "pa": 191, "pack": [109, 112, 117, 118, 119, 120], "pack_fram": 109, "packag": [0, 4, 110, 248, 250, 251, 253], "packbit": 262, "packet": 109, "packet_typ": 109, "pad": [29, 37, 71, 94, 104, 105, 107, 108, 144], "pair": [7, 195], "pam": 111, "panahi": [221, 263], "paper": [221, 251, 263], "paragraph": 251, "parallel": [62, 191, 231, 248, 258], "paramet": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 242, 243, 248, 255, 256, 260, 261], "parameter": [7, 23, 28, 165, 191, 231, 249, 261], "parametr": 21, "paramt": 59, "paramter": 13, "parent": 94, "pariti": [73, 263], "part": [0, 13, 21, 48, 51, 60, 98, 99, 118, 120, 128, 135, 137, 145, 147, 169, 195, 203, 207, 208, 250, 251, 255, 263], "parti": [249, 251], "partial": 232, "particular": 251, "particularli": 156, "partit": [105, 107, 108, 132], "partitionin": 118, "partner": 232, "pass": [32, 36, 48, 51, 56, 59, 65, 66, 86, 91, 94, 178, 191, 195, 196, 200, 224, 244, 248, 263], "password": 251, "patch": [36, 84, 174, 175, 248, 253], "patchantenna": [36, 182], "patent": 251, "path": [7, 23, 25, 27, 28, 31, 33, 35, 54, 55, 59, 64, 68, 75, 89, 100, 132, 137, 250, 252, 261], "path_delai": 31, "path_gain": 31, "path_real": 27, "pattern": [5, 35, 131, 149, 175, 185, 191, 255, 256, 258, 260], "payload": [109, 153, 156], "payment": 251, "pcl": 166, "pdf": [7, 8, 9, 10, 11, 12, 21, 28, 65, 79, 138, 139, 140, 141, 167, 212, 213, 263], "pdst": 89, "pdt": [86, 89, 92], "peak": [85, 135, 136, 162], "peak_detect": 162, "peak_promin": [135, 136], "pedersen": [21, 263], "peer": [251, 263], "pep8": 244, "per": [7, 8, 9, 10, 11, 12, 15, 18, 27, 29, 31, 33, 35, 59, 60, 69, 70, 72, 75, 76, 77, 78, 80, 85, 108, 112, 122, 123, 124, 126, 127, 128, 135, 137, 142, 147, 150, 151, 153, 156, 167, 169, 198, 199, 231, 238, 248, 254, 255, 256], "perceiv": [7, 33, 34, 132], "perfect": [13, 90, 185, 192, 225, 248, 261], "perfectcoupl": [188, 225], "perfectisol": 194, "perfectli": 235, "perform": [2, 3, 5, 30, 37, 44, 48, 51, 53, 59, 83, 101, 102, 103, 104, 105, 106, 107, 108, 110, 118, 120, 128, 163, 164, 165, 166, 169, 176, 190, 191, 192, 200, 221, 225, 231, 248, 249, 250, 251, 254, 255, 256, 258, 260, 261, 263], "performance_tim": 59, "periodogram": [3, 263], "peripher": 88, "perman": 251, "permiss": 251, "permit": [64, 251], "perpetu": 251, "person": 251, "perspect": [185, 192], "pertin": 251, "petr": 125, "pgt": 136, "phase": [6, 17, 21, 22, 23, 25, 27, 28, 29, 33, 36, 137, 175, 179, 180, 181, 182, 191, 205, 215, 216, 218, 256, 263], "phase_alpha": 218, "phase_beta": 218, "phase_nois": [205, 213, 219, 220, 221], "phase_offset": 205, "phase_shift": 256, "phase_shift_vari": 256, "phase_shifted_block": 256, "phase_vari": 32, "phasenois": [205, 219, 220, 221], "phaseshiftchannel": 256, "phaseshiftchannelr": 256, "phaseshiftchannelsampl": 256, "phenomenon": 192, "phi": [2, 3, 5, 7, 36, 81, 218, 221, 254], "phi_": [7, 23, 33], "phi_0": 221, "phi_1": 5, "phi_2": 221, "phi_3": 221, "phi_l": 5, "phy": [79, 263], "phyical": 82, "physic": [7, 13, 16, 30, 33, 36, 39, 62, 66, 79, 81, 83, 84, 85, 86, 88, 94, 95, 110, 185, 191, 192, 224, 225, 231, 237, 248, 251, 255, 256, 261, 263], "physical_devic": [81, 83, 84, 85, 89, 90, 94], "physical_device_dummi": 90, "physicaldevic": [81, 83, 84, 85, 89, 90, 92, 94, 95, 248], "physicaldevicedummi": [90, 91, 248], "physicaldevicedummyst": 90, "physicaldevicest": [81, 89, 90, 94], "physicalradartarget": 32, "physicalscenario": [82, 83, 86, 91, 92, 93, 248], "physicalscenariodummi": [90, 91, 248, 261], "physicalscenariotyp": [86, 92], "pi": [5, 18, 19, 20, 23, 33, 36, 138, 139, 140, 141, 191, 225, 254, 255, 256], "pick": [118, 128, 135, 137, 145, 146, 147, 148, 149, 192, 262], "pick_sampl": [145, 146, 148, 149], "pick_symbol": 145, "pickl": [55, 59], "piec": [65, 251], "pignoli": [69, 74, 75, 77, 78, 80, 263], "pii": [69, 74, 75, 77, 78, 80, 263], "pilot": [128, 135, 136, 137, 138, 139, 140, 141, 142, 147, 150, 151, 153, 155, 156], "pilot_el": [148, 154], "pilot_r": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 137, 140, 253], "pilot_sect": [142, 147, 150, 151, 153, 156], "pilot_sequ": [147, 150, 153, 156], "pilot_sign": [128, 135, 137, 147], "pilot_symbol": 128, "pilot_symbol_sequ": [128, 137, 138, 139, 140, 141], "pilotcommunicationwaveform": [128, 135, 136, 137, 138, 139, 140, 141, 147, 150, 153, 156], "pilotsect": [142, 147, 148, 150, 151, 153, 154, 156], "pilotsymbolsequ": [128, 131, 137, 147, 150, 153, 156], "ping": [167, 169, 172], "pip": [244, 250], "pipelin": [30, 48, 51, 56, 57, 59, 66, 69, 73, 74, 75, 77, 78, 80, 86, 110, 121, 130, 169, 231, 244, 248, 249, 262], "pitch": 67, "pixel": 243, "place": [83, 120, 128, 135, 137, 142, 145, 146, 147, 148, 149, 150, 151, 156, 251, 255, 262], "place_sampl": [145, 146, 148, 149], "place_symbol": [145, 148], "placed_symbol": [128, 135, 137, 147], "placehold": 109, "plain": 71, "plan": 250, "planar": [36, 255], "plane": [65, 127, 255, 262], "platform": 248, "playback": 64, "playback_channel": 81, "playback_devic": 81, "pleas": [7, 31, 168, 248, 249, 250, 252], "ploariz": [36, 81], "plot": [7, 8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 32, 34, 36, 37, 53, 59, 65, 68, 85, 86, 88, 95, 101, 102, 104, 105, 106, 107, 108, 127, 137, 147, 157, 161, 163, 165, 166, 168, 173, 190, 191, 196, 198, 199, 201, 202, 207, 216, 222, 223, 231, 232, 248, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "plot_angl": [7, 157], "plot_characterist": 216, "plot_constel": [127, 248, 253, 257, 262], "plot_filt": 137, "plot_filter_correl": 137, "plot_gain": 36, "plot_grid": 147, "plot_inform": [86, 261], "plot_pattern": [5, 176, 254, 255], "plot_polar": 36, "plot_power_delai": [7, 27], "plot_quant": 207, "plot_rai": 7, "plot_rang": [99, 157, 168], "plot_range_veloc": [99, 157, 168], "plot_result": 231, "plot_scal": [53, 59], "plot_surfac": [53, 59, 102, 104, 105, 106, 107, 108, 166], "plot_topologi": [36, 255], "plotvisu": [59, 65, 68, 95, 106, 108, 157, 165, 258], "plt": [5, 173, 253, 254, 256, 257, 258, 260, 261, 262], "plu": [7, 15, 18, 27, 29, 31, 33, 35, 190, 208, 251], "plug": [248, 256], "plugin": 31, "pmatrix": [36, 81], "pn": 191, "png": [65, 138, 139, 140, 141, 167, 212, 213], "po": 67, "point": [1, 2, 3, 4, 5, 6, 15, 19, 23, 29, 30, 34, 35, 36, 53, 54, 55, 59, 61, 64, 65, 66, 67, 86, 94, 97, 98, 111, 118, 120, 158, 160, 162, 163, 165, 166, 168, 169, 170, 173, 184, 207, 213, 214, 216, 221, 250, 251, 252, 255, 256], "point_index": 59, "pointdetect": [159, 161], "pointer": 251, "polar": [6, 7, 33, 35, 36, 73, 81, 174, 263], "polarimetr": [175, 176, 191], "polarization_transform": 7, "polarsccod": 75, "polarsclcod": 75, "poly_a": [78, 80], "poly_b": [78, 80], "polynomi": [77, 78, 80, 263], "pop_precod": [62, 260], "popul": 174, "popular": 252, "porperti": 200, "port": [36, 39, 48, 51, 66, 81, 83, 93, 94, 97, 98, 99, 117, 118, 119, 120, 169, 174, 176, 178, 225, 255], "portion": [251, 253], "pose": [2, 3, 5, 8, 9, 10, 11, 12, 20, 35, 36, 39, 66, 67, 81, 89, 90, 94, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 225, 255], "posit": [15, 17, 20, 30, 32, 33, 34, 35, 36, 66, 67, 70, 79, 81, 85, 90, 159, 163, 166, 173, 175, 176, 177, 179, 180, 181, 182, 191, 197, 207, 225, 231, 248, 255, 256], "position_a": 17, "position_b": 17, "possess": 251, "possibl": [37, 55, 65, 98, 111, 127, 248, 251, 252], "post": [56, 86, 142, 150, 151, 156], "post_drop_hook": 86, "postambl": [137, 140], "postion": 225, "postiv": 24, "postprocess": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35], "potenti": 59, "power": [1, 2, 3, 4, 5, 7, 13, 14, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 39, 48, 51, 53, 58, 60, 65, 69, 85, 89, 90, 95, 97, 98, 99, 111, 118, 120, 125, 128, 135, 137, 147, 157, 159, 162, 167, 168, 169, 172, 190, 191, 192, 194, 196, 198, 199, 200, 201, 202, 203, 204, 205, 213, 221, 225, 241, 244, 251, 254, 255, 258, 261, 262, 263], "power_amplifi": [205, 213, 214, 215, 216, 217, 218, 244], "power_estim": 258, "power_profil": [25, 26, 27], "poweramplifi": [205, 213, 214, 215, 216, 217, 218], "powerartifact": [53, 258], "powerestim": 258, "powerevalu": [53, 190, 258], "powerevaluationresult": 258, "powerresult": [53, 190], "practic": [104, 105, 106, 107, 108, 191, 251, 262], "pre": [86, 136, 250], "pre_drop_hook": 86, "preambl": [136, 137, 138, 139, 140, 141, 251], "preced": [153, 156], "precis": [67, 251, 253], "precod": [1, 2, 3, 4, 5, 57, 110, 114, 117, 118, 119, 120, 122, 123, 124, 125, 128, 135, 156, 248, 264], "precodertyp": 62, "precodingtyp": 62, "predecessor": 251, "predict": [85, 261], "predict_leakag": 85, "prefer": [46, 97, 98, 157, 169, 251], "prefix": [144, 145, 148], "prefix_ratio": [122, 144], "prefix_typ": 144, "prefixtyp": [99, 142, 144, 150, 151, 156], "preliminari": 250, "prematur": [53, 59, 74, 165, 166], "prepar": 87, "prepare_plot": 87, "prepend": 94, "preprocessor": 244, "present": [243, 251, 261], "preserv": [58, 65, 214, 251], "preset": [7, 8, 9, 10, 11, 12], "prevent": [79, 136, 251], "previou": [3, 5, 35, 59, 65, 251], "price": 251, "prieto": [31, 263], "primari": [132, 200], "primarili": [60, 110, 120, 224, 251], "print": [38, 54, 58, 59, 191, 255, 259, 262], "prior": [244, 251], "prioriti": 86, "privat": [59, 251], "pro": 255, "proagat": [7, 13, 15, 18, 27, 29, 31, 33, 35], "probabl": [164, 165, 166, 167, 168, 249, 254, 258], "probe": [1, 2, 3, 4, 5, 85, 169, 255], "probe_focus_point": [1, 254], "problem": [132, 192, 251], "proc": [2, 263], "proce": 54, "procedur": 251, "proceed": [2, 13, 80, 111, 123, 263], "process": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 51, 52, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 76, 79, 81, 83, 84, 85, 89, 90, 91, 92, 94, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 173, 184, 187, 188, 189, 190, 191, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 215, 216, 217, 218, 220, 221, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 248, 249, 254, 256, 257, 258, 259, 260, 262, 263], "process_from_r": 225, "process_input": [39, 64, 89, 90, 92, 224, 225], "processbas": 55, "processeddeviceinput": [39, 42, 47, 64, 89, 226, 229], "processedsimulateddeviceinput": [90, 224, 225, 226, 229], "procur": 251, "produc": [35, 71, 251], "product": [251, 255], "profil": [7, 95, 99, 157, 168], "program": [0, 59, 248, 251, 258, 260], "programm": [251, 258], "progress": 165, "progress_log_interv": 59, "prohibit": 251, "project": [5, 59, 69, 74, 75, 77, 78, 80, 127, 244, 248, 249, 251], "promin": [85, 135, 136, 251], "propag": [5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 99, 129, 130, 132, 137, 167, 168, 169, 172, 189, 191, 202, 216, 224, 231, 232, 241, 248, 251, 255, 256, 257, 259, 261, 263], "propagated_sampl": 33, "propagation_delai": 33, "propagation_respons": 33, "propagt": 25, "proper": [94, 253], "properli": [65, 248, 250, 252, 257, 262], "properti": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 94, 95, 97, 98, 99, 102, 104, 105, 106, 107, 108, 112, 113, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 144, 145, 146, 147, 148, 149, 150, 153, 157, 159, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 213, 215, 216, 217, 218, 219, 221, 223, 224, 225, 226, 227, 228, 231, 233, 234, 235, 236, 237, 238, 248, 251, 254, 256, 258, 259, 260, 262], "property_blacklist": [1, 36, 67, 231], "propgat": [2, 3, 5, 33, 191], "propgram": [110, 151], "propos": 23, "prose": 260, "protect": 251, "protoc": 108, "protocol": [94, 249, 251], "prototyp": [1, 216, 254], "prove": 251, "provid": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 76, 79, 81, 83, 84, 85, 88, 89, 90, 91, 94, 96, 97, 98, 99, 100, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 156, 157, 158, 159, 161, 162, 165, 167, 168, 169, 170, 173, 184, 187, 188, 189, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 242, 244, 248, 250, 251, 252, 255, 256, 263, 264], "provis": 251, "provision": 251, "proxi": 251, "psd": 221, "pseud": [200, 203], "pseudo": [7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 25, 28, 29, 31, 32, 33, 35, 39, 48, 51, 63, 64, 79, 82, 90, 92, 93, 97, 98, 99, 100, 112, 117, 118, 119, 120, 148, 153, 154, 156, 169, 219, 220, 225, 231, 262], "pseudorandomgener": 79, "psi_": 5, "psi_1": 5, "psi_k": 5, "psk": [111, 137, 262], "psk_qam_map": [111, 137], "pskqammap": [111, 137, 147], "public": [48, 51, 99, 169, 251], "publicli": 251, "publish": [249, 251, 263], "pull": [249, 250], "puls": [137, 167, 253], "pulse_rep_interv": [167, 261], "pure": [23, 30], "purpos": [2, 3, 5, 248, 251, 255, 257, 259, 260], "pursuant": 251, "pwoer": 215, "py": [244, 252], "pybind11_object": [69, 74, 75, 77, 78, 80], "pyenv": 252, "pymont": 57, "pypi": 244, "pyplot": [5, 127, 253, 254, 256, 257, 258, 260, 261, 262], "python": [31, 69, 74, 75, 77, 78, 80, 191, 244, 248, 249, 250, 252], "q": [36, 72, 111, 191, 205, 241], "q_m": 241, "qam": [111, 137], "qpsk": 111, "qt": 243, "qt5agg": 243, "quad": [1, 5, 13, 68, 99, 132, 221], "quadmesh": 68, "quadmeshvisu": [68, 157], "quadrant": 255, "quadratur": 191, "quadriga": [30, 263], "quadriga_interfac": 31, "quadriga_src": 250, "quadrigachannel": 31, "quadrigachannelr": 31, "quadrigachannelsampl": 31, "quadrigaoctaveinterfac": 31, "qualifi": 251, "qualiti": [2, 3, 5, 251], "qualnam": [6, 7, 9, 13, 21, 28, 36, 37, 38, 55, 58, 64, 86, 122, 143, 144, 211, 212, 241], "quantiti": 208, "quantiz": [191, 206, 207, 208, 209, 210, 261], "quantizationtyp": 207, "quantized_sign": 210, "quantizer_typ": [206, 207], "quantizertyp": [206, 207, 212], "quasi": 31, "quaternion": 67, "queri": [32, 33, 36, 39, 51, 64, 81, 89, 92, 94, 120, 169, 224, 233, 234, 235, 236, 237, 243, 253, 254], "query_devic": 253, "question": [59, 224, 243, 249], "queue": 79, "queue_length": 95, "quickli": 248, "qzanit": 210, "r": [2, 25, 30, 31, 36, 59, 69, 70, 71, 74, 75, 77, 78, 79, 80, 99, 157, 167, 172, 214, 216, 217, 218, 254, 259, 263], "r_": [72, 167, 169, 172], "r_1": 5, "r_k": 5, "r_n": [70, 71, 76], "ra": [59, 263], "radar": [30, 32, 34, 95, 96, 97, 98, 158, 159, 162, 163, 165, 166, 167, 168, 191, 192, 225, 248, 254, 261, 263], "radar_channel": [99, 164, 165, 166, 254, 261], "radar_cross_sect": [34, 163, 254, 261], "radarbas": [97, 98, 99, 169], "radarchannelbas": [32, 33, 34, 164, 165, 166], "radarchannelr": [32, 33, 34], "radarchannelsampl": [32, 33], "radarcrosssectionmodel": 32, "radarcub": [157, 158, 160, 162, 163, 165, 169, 170], "radardetector": [97, 98, 99, 158, 160, 162, 163, 168, 169], "radarevalu": [164, 165, 166], "radarinterferencepath": 33, "radarpath": 33, "radarpointcloud": [158, 160, 161, 162, 169, 170], "radarrangeplot": 95, "radarrecept": [97, 163, 169, 170], "radartarget": 32, "radartargetpath": 33, "radartransmiss": [97, 169, 171], "radarwaveform": [167, 168, 169, 172], "radat": 256, "radial": [167, 172], "radian": [1, 2, 3, 5, 7, 25, 33, 34, 36, 67, 81, 157, 159, 181, 184, 205], "radiat": [3, 5, 175, 176, 185, 191, 255, 256], "radio": [13, 15, 21, 29, 31, 44, 48, 51, 65, 88, 90, 97, 98, 99, 169, 174, 175, 185, 188, 191, 195, 196, 213, 216, 225, 249, 255, 258, 261], "radr": 32, "rai": [6, 7, 8, 9, 10, 11, 12, 35, 59, 69, 191, 231, 258, 263], "rais": [1, 2, 6, 8, 13, 19, 21, 22, 25, 28, 32, 34, 36, 37, 38, 39, 44, 48, 51, 54, 55, 59, 61, 62, 64, 65, 67, 68, 70, 71, 72, 76, 79, 81, 85, 86, 87, 89, 90, 91, 92, 94, 98, 109, 110, 125, 127, 128, 132, 134, 135, 136, 137, 138, 140, 144, 147, 148, 155, 157, 159, 161, 162, 164, 165, 166, 167, 175, 176, 178, 186, 193, 194, 195, 197, 200, 201, 202, 205, 207, 209, 215, 216, 217, 218, 221, 224, 225, 226, 227, 230, 231, 238, 241, 248, 253, 258], "raisedcosinewaveform": 139, "ralf": [21, 263], "ramp": 135, "ran": [7, 8, 9, 10, 11, 12, 28, 263], "randint": 259, "random": [7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 35, 39, 48, 51, 57, 59, 64, 72, 79, 82, 90, 92, 93, 97, 98, 99, 100, 112, 117, 118, 119, 120, 148, 153, 154, 156, 169, 191, 200, 203, 204, 219, 220, 224, 225, 228, 231, 232, 234, 235, 236, 237, 239, 256, 259, 262], "random_nod": [6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 25, 28, 29, 31, 32, 34, 35, 39, 48, 51, 60, 64, 81, 89, 90, 92, 94, 97, 98, 99, 100, 112, 169, 200, 203, 204, 219, 220, 221, 224, 233, 234, 235, 236, 237], "random_r": 26, "randombitssourc": [100, 117, 119, 120], "randomdelaychannel": [18, 19], "randomdelaychannelr": [18, 19], "randomli": [7, 8, 9, 10, 11, 12, 117, 119, 120], "randomnod": [6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 25, 28, 29, 31, 32, 34, 35, 39, 48, 51, 60, 63, 64, 71, 72, 81, 89, 90, 92, 94, 97, 98, 99, 100, 112, 169, 200, 203, 219, 220, 221, 224, 233, 234, 235, 236, 237], "randomr": [63, 200, 204], "randomtrigg": [225, 233], "rang": [34, 55, 65, 94, 95, 98, 99, 111, 157, 159, 161, 167, 168, 169, 172, 174, 206, 208, 209, 210, 248, 255, 257], "range_bin": [157, 172], "range_resolut": [98, 99, 167, 172], "rank": 2, "rap91": 263, "rapp": [213, 263], "rapppoweramplifi": 217, "raschkowski": [31, 263], "rat": 249, "rate": [7, 13, 15, 18, 27, 29, 30, 31, 33, 35, 39, 41, 46, 60, 65, 66, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 85, 89, 90, 94, 97, 98, 101, 103, 110, 112, 125, 126, 128, 135, 137, 138, 139, 140, 141, 147, 150, 153, 167, 169, 172, 198, 199, 225, 227, 230, 232, 236, 238, 242, 248, 249, 253, 256, 259, 262, 263], "rather": [101, 174, 225, 256], "ratio": [7, 15, 18, 27, 29, 31, 33, 35, 39, 90, 111, 121, 135, 136, 144, 190, 191, 198, 199, 200, 202, 208, 225, 241, 248, 259, 263], "ratio_combin": 123, "raviv": [78, 263], "raw": [53, 59, 127, 128, 135, 137, 147, 157, 165, 170, 260, 262], "ray_address": [59, 231], "rayleigh": [6, 23, 263], "rayleigh_factor": 6, "raytrac": [33, 250], "rbrace": [1, 2, 3, 13, 29, 30, 70, 76, 104, 105, 107, 108, 213, 217, 218], "rc": [34, 163], "rceil": 71, "rcrt": 33, "rcst": 33, "re": [54, 59, 65, 167, 169, 172, 258, 260], "reach": 59, "read": [55, 251], "readabl": [59, 251], "readili": 251, "real": [2, 3, 5, 68, 88, 89, 111, 132, 157, 195, 203, 207, 208, 248, 253, 258, 261], "realis": [2, 3, 5, 255], "realist": [13, 36, 132, 191], "realiz": [6, 7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 59, 63, 90, 168, 189, 200, 203, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 248, 256, 258], "realize_channel": 224, "realize_recept": 225, "realize_trigg": 224, "realtiv": [167, 172], "realzat": [6, 13, 19, 20, 25, 29, 32, 34, 35], "reason": [165, 225, 248, 250, 251, 256, 261], "recal": 257, "recalled_drop": 257, "recalled_scenario": 257, "recangular": 140, "receiev": [3, 5], "receipt": 251, "receiv": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 42, 47, 49, 52, 53, 60, 62, 64, 66, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 117, 119, 123, 124, 125, 126, 127, 129, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 155, 164, 165, 166, 167, 168, 169, 170, 175, 176, 179, 180, 181, 182, 185, 186, 187, 189, 191, 192, 193, 194, 195, 196, 200, 202, 205, 206, 224, 225, 226, 227, 229, 230, 231, 232, 248, 251, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264], "receive_antenna": 36, "receive_beamform": [97, 98, 99, 169, 254], "receive_cod": [2, 3, 5, 39], "receive_correction_weight": 83, "receive_correl": 187, "receive_decod": [39, 89, 90, 225], "receive_devic": [64, 91, 92, 224], "receive_dsp": [39, 89, 90, 225], "receive_focu": [1, 2, 3, 5], "receive_imped": 187, "receive_oper": [39, 64, 89, 224], "receive_port": [36, 81, 94], "receive_signal_cod": [117, 118, 119], "receive_st": 66, "receive_stream": 37, "receive_symbol_cod": [117, 118, 119, 121, 123, 124, 125, 260], "receive_topologi": 36, "receive_transmiss": 90, "receivebeamform": [1, 2, 3, 5, 97, 98, 99, 169, 254], "received_sign": 85, "received_stream": 37, "received_symbol": [106, 262], "receivedconstellationplot": [95, 248], "receivedecod": [2, 3, 5, 62, 122, 123, 124, 125, 126], "receivedecodertyp": 62, "receivepowerevalu": [3, 5, 53, 191, 255], "receiveprecod": [62, 126], "receiveprecodingtyp": 62, "receiver_antenna": 15, "receiver_index": 231, "receiver_pos": 15, "receiver_st": [15, 27, 33, 256], "receiver_veloc": 15, "receiveroperatingcharacterist": [32, 34, 165, 167, 254, 261], "receiverslot": 39, "receivesignalcod": [39, 62, 117, 118, 119], "receivest": [1, 48, 62, 66], "receivestreamdecod": [1, 2, 3, 5, 39, 62, 117, 118, 119, 120], "receivesymbolcod": [117, 118, 119, 121, 126], "receivesymboldecod": [117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 260], "receiving_devic": [119, 164, 165, 166], "receiving_modem": [102, 104, 105, 106, 107, 108], "receiving_radar": [164, 165, 166], "receivingmodem": [2, 3, 5, 95, 102, 104, 105, 106, 107, 108, 112, 113, 114, 117, 118, 119], "receivingmodembas": [97, 98, 99, 117, 118, 119, 122, 124, 125], "recent": [37, 68, 90, 130, 264], "recepept": 62, "recept": [1, 3, 4, 5, 13, 15, 30, 39, 48, 52, 60, 62, 64, 66, 70, 71, 72, 76, 79, 81, 83, 89, 90, 92, 94, 97, 98, 99, 112, 117, 118, 119, 121, 122, 123, 124, 126, 128, 130, 135, 138, 139, 140, 141, 142, 150, 151, 156, 168, 169, 175, 176, 186, 189, 191, 205, 224, 225, 228, 231, 248, 253, 255, 258, 260], "receptiontyp": [48, 49], "recipi": 251, "reciproc": [7, 30, 37, 191, 248], "reciprocal_sampl": 14, "recogn": 251, "recommend": [13, 250], "reconfigur": 59, "record": [64, 65, 81, 86, 248, 255, 264], "record_channel": 81, "record_devic": 81, "record_drop": 86, "recorded_drop": 257, "recov": 37, "recoveri": 248, "rectangl": [138, 140], "rectangular": [110, 128, 134, 137], "rectangularwaveform": 140, "recurs": [71, 78, 250], "recveived_sign": 85, "redistribut": 251, "reduc": [5, 59], "reduct": 65, "redund": [70, 73, 76, 79], "reed": [73, 263], "reedsolomoncod": 77, "refer": [1, 2, 4, 7, 8, 9, 10, 11, 12, 13, 21, 30, 31, 35, 36, 55, 59, 65, 66, 67, 70, 71, 72, 75, 76, 79, 83, 86, 93, 99, 112, 117, 119, 121, 122, 123, 125, 128, 129, 130, 132, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 154, 155, 156, 168, 169, 176, 185, 192, 197, 198, 199, 200, 202, 216, 217, 219, 221, 244, 248, 251, 257], "referenc": 255, "reference_devic": 83, "reference_symbol": [145, 148], "references_per_fram": 147, "reffer": 3, "refin": 206, "reflect": [32, 33, 34, 168, 254], "reflection_phas": 33, "reflector": [32, 33, 34], "refor": 36, "refrain": 251, "refresh": 38, "regard": 251, "regardless": 251, "regener": 251, "region": 65, "regist": [39, 51, 55, 56, 59, 64, 67, 71, 79, 86, 89, 90, 91, 92, 93, 165, 224, 225, 231, 250], "registerd": [67, 228], "registered_class": 55, "registered_tag": 55, "registereddimens": 59, "registr": 64, "regress": 244, "regular": [221, 263], "reinstat": 251, "reiver": [164, 168], "rel": [2, 3, 20, 33, 59, 65, 67, 86, 99, 136, 137, 139, 140, 141, 162, 167, 172, 175, 197, 198, 199, 254], "relat": [20, 39, 55, 67, 70, 71], "relationship": [196, 241, 251], "relative_bandwidth": [137, 139, 140, 141], "relative_doppler_bin": [167, 172], "relative_doppler_resolut": [99, 167, 169, 172], "relative_veloc": 33, "releas": [7, 8, 9, 10, 11, 12, 21, 28, 55, 79, 185, 192, 250, 251, 263], "relev": [89, 111, 127, 191, 251], "reli": [130, 190, 251, 260], "relicens": 251, "remain": [33, 55, 250, 251], "remind": 255, "remot": [59, 94, 251], "remov": [13, 33, 36, 48, 51, 56, 59, 62, 67, 85, 128, 135, 137, 147, 178, 237, 251, 255, 258, 261], "remove_antenna": 36, "remove_devic": 237, "remove_dimens": [59, 255], "remove_hook": 56, "remove_leakag": 85, "remove_link": 67, "remove_port": [36, 178], "remove_sample_hook": 13, "render": [5, 65, 244, 248, 251, 254, 258], "repair": 251, "repeat": [36, 76, 120, 131, 144, 145, 146, 147, 149, 150, 259, 262], "repeat_pilot_sequ": [147, 150, 153, 156], "repeat_pilot_symbol_sequ": [128, 137, 140], "repeat_symbol_sequ": 128, "repeatedli": 231, "repetit": [65, 73, 122, 128, 137, 140, 142, 143, 144, 145, 148, 150, 151, 156, 167, 257, 259], "repetitioncod": 259, "repetitionencod": [76, 117, 118, 119, 120], "replac": [86, 122, 142, 176, 185, 192, 200, 213, 219, 232, 237, 248, 250, 252, 256], "replai": [64, 86, 165, 224, 248, 257], "replayscenario": 64, "repo": 250, "report": [56, 59, 71, 244, 249], "repositori": [244, 250, 251, 252, 264], "repres": [1, 2, 3, 5, 7, 13, 14, 15, 18, 24, 25, 27, 29, 30, 31, 32, 33, 35, 36, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 76, 79, 81, 89, 100, 102, 104, 105, 106, 107, 108, 117, 118, 119, 120, 127, 157, 161, 163, 164, 165, 166, 169, 173, 190, 191, 200, 204, 205, 213, 224, 225, 231, 248, 251, 255, 256, 258, 259, 260, 262], "represent": [36, 37, 39, 53, 55, 58, 59, 67, 68, 86, 104, 105, 106, 107, 108, 117, 118, 120, 143, 149, 157, 163, 165, 166, 190, 191, 201, 206, 207, 225, 262], "reproduc": 63, "request": [37, 64, 71, 224, 249], "requir": [1, 2, 3, 5, 6, 7, 13, 15, 18, 19, 20, 25, 27, 29, 30, 31, 32, 33, 34, 35, 40, 54, 56, 59, 62, 65, 70, 71, 79, 84, 86, 88, 100, 112, 120, 121, 122, 123, 124, 125, 126, 128, 135, 137, 138, 140, 142, 145, 147, 148, 149, 150, 151, 153, 155, 156, 162, 167, 168, 169, 172, 191, 193, 194, 198, 199, 206, 208, 209, 210, 213, 219, 225, 243, 244, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263], "required_num_data_bit": 71, "rerout": 65, "resambl": 65, "resampl": [13, 30, 39, 65, 225, 240], "rescal": [208, 209, 210], "rescale_quant": [208, 209, 210], "research": [132, 249, 263], "reserv": [55, 59], "reset": 79, "reshap": [259, 262], "resolut": [2, 36, 98, 99, 167, 169, 172, 207, 263], "resolv": [59, 86, 91, 169, 244, 251, 263], "resort": [87, 95], "resourc": [55, 59, 142, 143, 145, 146, 147, 148, 149, 150, 151, 153, 156, 191], "resource_mask": [145, 147, 148, 149], "respect": [1, 2, 3, 5, 7, 8, 13, 15, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 39, 55, 56, 59, 64, 66, 67, 70, 71, 72, 76, 79, 81, 89, 94, 104, 105, 106, 107, 108, 117, 119, 120, 127, 130, 132, 155, 157, 169, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 191, 193, 194, 197, 198, 199, 200, 214, 218, 225, 232, 244, 248, 250, 251, 252, 253, 254, 255, 257, 259, 260], "respond": 36, "respons": [2, 3, 7, 18, 19, 20, 23, 27, 29, 31, 33, 36, 37, 81, 85, 175, 176, 195, 207, 212, 251, 253, 254], "rest": [90, 225], "restrict": 251, "result": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 19, 21, 22, 23, 25, 28, 30, 32, 33, 34, 35, 36, 52, 53, 54, 55, 56, 59, 61, 64, 65, 67, 68, 70, 71, 86, 90, 92, 102, 104, 105, 106, 107, 108, 109, 118, 120, 122, 123, 124, 125, 126, 128, 132, 135, 137, 138, 147, 158, 160, 162, 163, 164, 165, 166, 167, 169, 186, 189, 190, 191, 207, 216, 224, 225, 231, 232, 238, 244, 248, 249, 250, 251, 254, 255, 256, 258, 259, 260, 261, 262], "results_dir": [54, 231, 248, 261], "retain": 251, "return": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 175, 176, 178, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 242, 243, 251, 254, 256, 258, 259, 260, 262], "reve": 30, "reveiv": [163, 165, 166, 167], "revers": [71, 126, 260], "revert": 79, "review": [251, 263], "revis": 251, "reza": [221, 263], "rf": [1, 3, 5, 39, 81, 90, 94, 174, 176, 177, 188, 191, 192, 193, 194, 196, 205, 225, 248, 261, 263], "rf_chain": [90, 176, 177, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 244, 261], "rf_chain_modifi": 176, "rf_signal": 176, "rfchain": [90, 174, 176, 177, 205, 225], "rfloor": 13, "rice": [7, 23, 25], "rice_factor": [7, 25], "ricean": 7, "rich": [59, 165], "rician": [23, 263], "right": [2, 5, 13, 15, 23, 25, 29, 30, 33, 36, 39, 44, 46, 59, 70, 71, 76, 81, 94, 97, 98, 104, 105, 106, 107, 108, 167, 169, 172, 217, 225, 251, 258, 260], "risk": 251, "rm": [106, 208], "rms_amplitud": [208, 211], "rms_delai": [6, 22, 28], "rms_valu": 241, "rmse": 166, "rng": [17, 79, 233, 234, 235, 236, 237, 256, 262], "robert": [74, 263], "roberto": 252, "robust": [2, 145, 148, 154, 155, 263], "roc": [32, 34, 165, 261], "rocartifact": 165, "rocevalu": 165, "rocevaluationresult": 165, "rock": 81, "rodnei": [132, 263], "roh83": 263, "rohl": 263, "roll": [67, 137, 139, 141], "roll_off": [2, 3, 5, 123, 124, 125, 137, 139, 141, 248], "rolledoffsinglecarrierwaveform": [137, 139, 141], "rom": [33, 251], "root": [0, 6, 22, 28, 36, 55, 63, 101, 103, 106, 110, 128, 134, 137, 139, 164, 168, 219, 220, 241, 244, 248, 253], "rootmeansquareartifact": 166, "rootmeansquareerror": 166, "rootmeansquareerrorresult": 166, "rootmeansquareevalu": 166, "rootraisedcosin": 248, "rootraisedcosinewaveform": [2, 3, 5, 30, 104, 105, 106, 107, 108, 117, 118, 119, 120, 123, 124, 125, 141, 248, 253, 259], "rosa": [23, 263], "rotat": [36, 67, 263], "rotate_direct": 67, "rotation_quaternion": 67, "rotation_rpi": 67, "rough": 248, "roughli": [256, 261], "round": [7, 15, 18, 27, 29, 30, 31, 33, 35, 65, 236, 238, 262], "rountin": 248, "router": 191, "routin": [4, 7, 9, 10, 11, 12, 13, 19, 26, 27, 29, 35, 54, 59, 68, 70, 71, 72, 76, 79, 88, 89, 97, 98, 100, 117, 118, 119, 128, 129, 130, 132, 133, 135, 136, 138, 139, 140, 141, 142, 150, 151, 152, 155, 156, 168, 169, 172, 216, 225, 232, 240, 244, 248, 252, 253, 254, 256, 257, 258, 260, 262], "row": 243, "royalti": 251, "rpy": 67, "rrcwaveform": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 35], "rrt": [169, 170], "rs60": 263, "rsc": 73, "rsccode": 78, "rt": 35, "rtt": [169, 171], "rtype": 169, "rule": 251, "run": [2, 3, 5, 8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 30, 32, 34, 52, 54, 59, 61, 64, 86, 93, 104, 105, 106, 107, 108, 162, 163, 165, 166, 167, 191, 231, 244, 248, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264], "runner": 59, "runtim": [38, 54, 55, 59, 86, 87, 130, 176, 196, 198, 199, 201, 202, 205, 225, 231, 248, 250, 255, 257, 258], "runtime_env": 59, "runtimeerror": [38, 39, 55, 61, 62, 64, 65, 67, 68, 71, 87, 91, 92, 125, 128, 132, 136, 155, 157, 224, 258], "rural": [7, 21], "rural_macrocel": 10, "ruralmacrocel": 10, "ruralmacrocellsr": 10, "rvert": [36, 81], "rvert_": 132, "rvert_2": [36, 104, 106], "rx": [7, 13, 15, 18, 27, 29, 30, 31, 33, 35, 36, 104, 105, 106, 107, 108, 123, 124, 125, 191, 248], "rx_devic": [119, 123, 124, 125, 142, 150, 151, 156, 248, 257, 258], "rx_gain": 94, "rx_modem": 118, "rx_preocod": 121, "rx_symbol": 111, "rxpwr": 255, "ryyn\u00e4nen": [205, 263], "s13638": [132, 263], "s2352711019300457": [69, 74, 75, 77, 78, 80, 263], "s_": [13, 106, 213, 214, 216, 217, 218, 221], "safest": 251, "sai": 251, "said": [121, 248, 254], "sake": [191, 262], "sal81": 263, "sale": 251, "saleh": [213, 263], "salehpoweramplifi": 218, "salman": [132, 263], "same": [3, 5, 30, 35, 36, 55, 59, 65, 81, 111, 125, 174, 176, 185, 192, 205, 207, 232, 233, 234, 235, 236, 237, 248, 251, 254, 255], "sampl": [1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 46, 48, 51, 59, 60, 65, 66, 81, 85, 86, 87, 89, 90, 92, 94, 97, 98, 112, 118, 128, 132, 135, 136, 137, 138, 139, 140, 141, 145, 146, 147, 148, 149, 150, 153, 155, 157, 166, 167, 169, 172, 173, 176, 191, 195, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 224, 225, 227, 230, 231, 232, 236, 237, 238, 239, 242, 248, 254, 255, 256, 258, 262], "sample_covari": [24, 254], "sample_cross_sect": 32, "sample_grid": 59, "sample_hook": [6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 26, 29, 31, 32, 33, 34, 35, 256], "sample_index": 59, "sample_offset": [145, 146, 148, 149], "sample_orient": 173, "sample_point": [59, 86], "sample_trajectori": 32, "sample_transl": 173, "sample_veloc": 173, "samplegrid": 59, "sampleoffsettrigg": 234, "samplepoint": [59, 255], "samples_in_chirp": 135, "samples_in_fram": 262, "samples_matrix": 65, "samples_per_fram": [112, 128, 135, 137, 147, 153, 262], "samplin": [81, 89, 90, 94], "sampling_r": [2, 3, 5, 39, 41, 46, 60, 65, 66, 81, 85, 89, 90, 94, 97, 98, 112, 128, 135, 137, 150, 153, 167, 169, 172, 225, 227, 230, 238, 242, 255, 262], "sampling_rate_new": 65, "sampling_rate_old": 65, "sat": [213, 214, 216, 217, 218, 263], "satellit": [31, 156, 263], "satisfi": 251, "satur": [213, 214, 216, 217, 218], "saturation_amplitud": [214, 216], "save": [54, 55, 59, 64, 83, 84, 85, 89, 191, 261], "save_calibr": 89, "save_to_matlab": [59, 191], "savefil": [64, 74, 86, 165], "sc97": 263, "scalar": [17, 19, 53, 58, 59, 83, 95, 111, 131, 165, 166, 192, 196, 198, 199, 200, 201, 202], "scalar_result": [59, 166], "scalar_sampl": 17, "scalarantennacalibr": 83, "scalardimens": [59, 196, 197, 198, 199, 200, 201, 202], "scalarevaluationresult": [53, 59, 102, 163, 166], "scale": [7, 8, 9, 10, 11, 12, 15, 18, 27, 29, 31, 33, 35, 53, 58, 59, 65, 94, 99, 157, 191, 196, 202, 208, 210, 241, 255, 256], "scale_quantized_sign": 210, "scale_transmiss": 94, "scapi": 109, "scatter": [7, 30, 32, 33, 36, 68, 261], "scattervisu": [7, 68, 95, 127, 161, 163, 166], "sccorrelationsynchron": [19, 20], "scenario": [2, 3, 5, 8, 9, 10, 11, 13, 28, 39, 52, 57, 59, 61, 83, 86, 88, 90, 93, 123, 124, 125, 128, 135, 137, 138, 140, 142, 150, 151, 153, 156, 163, 165, 166, 167, 168, 173, 189, 190, 225, 231, 232, 248, 249, 254, 255, 256, 257, 258, 259, 261], "scenariomod": 64, "scenariotyp": [61, 64], "scenariovisu": [222, 223], "scene": 35, "scene_fil": 35, "schedul": [59, 250, 263], "schema": 125, "scheme": [54, 70, 71, 72, 76, 131, 135, 138, 139, 140, 141, 156, 259, 260], "schmidl": [151, 263], "schmidlcoxpilotsect": [154, 155], "schmidlcoxsynchron": 155, "school": 251, "schwerin": [59, 263], "scienc": [69, 74, 75, 77, 78, 80, 202, 263], "sciencedirect": [69, 74, 75, 77, 78, 80, 263], "scientif": [59, 263], "scipi": [254, 255], "scleastsquareschannelestim": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 35], "scope": 251, "scrambl": 73, "scrambler": 79, "scrambler3gpp": 79, "scrambler80211a": 79, "scratch": 250, "screen": 243, "screen_geometri": 243, "screen_rect": 243, "screeninfo": 243, "script": [31, 244, 250, 251, 252], "sczeroforcingchannelequ": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 35], "sdr": 130, "seamlessli": 248, "search": [61, 86, 136, 162, 250], "second": [1, 2, 3, 5, 7, 13, 15, 16, 17, 18, 19, 22, 25, 27, 28, 30, 32, 33, 46, 51, 59, 64, 65, 84, 85, 89, 90, 97, 98, 108, 112, 114, 116, 127, 128, 130, 135, 137, 138, 140, 146, 157, 167, 169, 172, 173, 176, 207, 213, 217, 224, 225, 231, 236, 238, 242, 261, 263], "second_target": 32, "secondari": 251, "secondarili": 251, "section": [0, 2, 3, 5, 32, 33, 34, 59, 70, 71, 79, 131, 132, 135, 136, 137, 142, 144, 147, 150, 151, 153, 154, 155, 156, 168, 231, 244, 248, 249, 250, 251, 253, 256, 258, 260, 261, 264], "section_block_s": 59, "section_coord": 258, "see": [32, 33, 65, 79, 86, 111, 122, 217, 218, 244, 251], "seed": [2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 21, 22, 25, 28, 29, 31, 32, 33, 34, 35, 39, 48, 51, 63, 64, 79, 82, 89, 90, 91, 92, 93, 97, 98, 99, 100, 112, 117, 118, 119, 120, 169, 200, 203, 204, 219, 220, 221, 225, 231, 248, 253, 255, 257], "segment": [105, 107, 108], "select": [31, 36, 37, 48, 51, 59, 65, 66, 81, 85, 94, 97, 98, 99, 101, 117, 118, 119, 120, 125, 144, 169, 191, 192, 225, 248, 252, 255, 259, 263], "select_subarrai": 36, "selected_digital_receive_port": 66, "selected_digital_transmit_port": 66, "selected_receive_port": [48, 94, 97, 98, 99, 117, 118, 119, 169], "selected_transmit_port": [51, 94, 97, 98, 99, 117, 119, 120, 169], "selectiveleakag": [195, 196], "selectiveleakagecalibr": 85, "selet": 192, "self": [0, 65, 69, 74, 75, 77, 78, 80, 111, 190, 254, 256, 258, 259, 260, 262], "sell": 251, "semi": 249, "semiconductor": 251, "send": 216, "sens": [0, 4, 33, 96, 97, 98, 99, 164, 167, 169, 172, 191, 200, 225, 231, 237, 248, 249, 256, 261], "sensor": [2, 3, 5, 19, 20, 33, 34, 36, 206, 254, 263], "sent": [109, 258], "separ": [42, 90, 101, 191, 207, 208, 225, 226, 227, 229, 251], "sequenc": [1, 2, 3, 5, 25, 33, 36, 39, 40, 41, 42, 43, 47, 48, 51, 52, 53, 55, 58, 59, 61, 62, 64, 65, 66, 79, 81, 86, 89, 90, 91, 92, 94, 97, 98, 99, 100, 102, 106, 111, 112, 117, 118, 119, 120, 121, 126, 127, 128, 135, 136, 137, 138, 139, 140, 141, 147, 148, 150, 153, 154, 156, 163, 164, 165, 166, 167, 169, 177, 178, 183, 189, 190, 207, 224, 225, 226, 227, 228, 229, 230, 231, 262], "sequence_length": 55, "sequenti": [65, 71, 191, 248, 250], "seri": [13, 127, 260], "serial": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 57, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 94, 97, 98, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 165, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 249, 256], "serializ": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 90, 91, 92, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 169, 172, 173, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 256], "serializable_object": 55, "serializableenum": [6, 7, 8, 9, 13, 21, 28, 36, 38, 55, 86, 122, 143, 144, 211, 212], "serializabletyp": 55, "serialization_process": [187, 188, 194, 195, 196], "serialization_tag": 55, "serializationbackend": [55, 64, 89, 165], "serializationprocess": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 94, 97, 98, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 184, 189, 190, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 256], "serialize_arrai": 55, "serialize_complex": 55, "serialize_custom": 55, "serialize_flo": [55, 256], "serialize_integ": 55, "serialize_object": [55, 256], "serialize_object_map": 55, "serialize_object_sequ": 55, "serialize_rang": 55, "serialize_st": [64, 86], "serialize_str": 55, "serialized_attribut": 60, "sert": 59, "serv": [131, 251, 252], "server": [30, 93, 244, 251], "servic": 251, "session": 64, "set": [3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 19, 23, 26, 29, 30, 31, 32, 33, 35, 36, 37, 54, 55, 59, 63, 64, 65, 67, 87, 91, 120, 153, 156, 173, 174, 185, 191, 192, 194, 195, 196, 200, 206, 209, 213, 219, 224, 225, 231, 232, 233, 234, 235, 236, 237, 248, 250, 252, 253, 256, 261, 262], "set_bas": 67, "set_channel": [2, 3, 5, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 25, 28, 32, 34, 35, 142, 150, 151, 156, 163, 165, 166, 167, 168, 191, 224, 231, 248, 254, 255, 256, 257, 261], "set_figure_geometri": 243, "set_sampl": 65, "set_stat": 37, "set_xlabel": 258, "set_ydata": 258, "set_ylabel": 258, "settabl": 59, "setter": 59, "setup": [31, 88, 248, 253], "setx": 250, "sever": [23, 30, 35, 38, 57, 64, 65, 120, 130, 252, 254, 255, 257, 262], "sh": 8, "shall": 251, "shannon": [13, 80, 263], "shape": [17, 65, 68, 137, 138, 139, 140, 141, 205, 222, 254, 258], "share": [92, 224, 232, 237, 251], "sharon": 263, "shell": 38, "shift": [21, 22, 23, 25, 27, 28, 29, 33, 99, 135, 157, 167, 172, 175, 179, 180, 181, 182, 200, 242, 256, 262], "ship": 248, "shoot": 60, "short": [39, 53, 59, 104, 105, 106, 107, 108, 163, 165, 166, 190, 251], "shortcut": 200, "shorter": [104, 105, 106, 107, 108, 147, 150], "shortest": 132, "shorthand": [13, 39, 59, 66, 173, 174, 191, 200, 225], "should": [1, 8, 13, 18, 19, 20, 32, 33, 35, 36, 37, 48, 51, 53, 55, 56, 59, 60, 64, 65, 68, 71, 84, 89, 98, 99, 101, 118, 120, 122, 125, 127, 135, 138, 139, 140, 141, 169, 173, 200, 204, 207, 216, 224, 232, 242, 244, 251, 252, 256, 261], "show": [5, 68, 118, 120, 125, 173, 191, 253, 254, 255, 256, 257, 258, 260, 261, 262], "showcas": 255, "shown": 243, "shuch": [48, 51, 60, 98, 99, 118, 120, 169], "si": 190, "siam": [59, 263], "side": [132, 136, 155, 205, 249], "siganl": 89, "sight": [7, 21, 22, 23, 25, 27, 28, 33, 132, 255, 257], "sigma_": [32, 33], "sign": [63, 251], "signal": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 60, 61, 62, 64, 66, 73, 81, 83, 84, 85, 89, 90, 92, 94, 95, 97, 98, 99, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 128, 130, 132, 135, 136, 137, 145, 146, 147, 148, 149, 150, 153, 155, 167, 168, 169, 170, 171, 172, 175, 176, 179, 180, 181, 182, 186, 190, 191, 193, 194, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 229, 230, 231, 242, 248, 249, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263], "signal_model": 65, "signalblock": [15, 29, 65, 83, 256], "signalplot": 95, "signalreceiv": [60, 191, 225, 255], "signaltransmitt": [60, 191, 225], "signific": 251, "significantli": [59, 255], "silent": [38, 48, 51, 60, 98, 99, 118, 120, 169, 254, 255, 256, 258, 259, 260, 261, 262], "silenttransmitt": 60, "sim": 19, "similar": [111, 251], "similarli": [117, 119, 225], "simo": [123, 124], "simpl": [18, 35, 55, 59, 125, 191, 200, 225, 248, 263], "simplex": [135, 138, 139, 140, 141, 142, 150, 151, 156, 248, 257, 258], "simplexlink": [8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 110, 112, 119, 123, 124, 125, 142, 150, 151, 156, 232, 248, 257, 258], "simpli": [248, 255, 258], "simplic": [191, 262], "simplif": 71, "simplifi": [111, 196], "simplist": 225, "simul": [0, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 19, 20, 21, 22, 23, 25, 28, 29, 30, 32, 33, 34, 35, 38, 52, 53, 54, 57, 59, 61, 64, 66, 67, 86, 90, 102, 104, 105, 106, 107, 108, 110, 117, 118, 119, 120, 122, 123, 124, 125, 128, 130, 132, 135, 136, 137, 138, 140, 142, 150, 151, 153, 155, 156, 163, 164, 165, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 238, 244, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "simulatan": 30, "simulated_devic": [90, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 237, 238, 261], "simulated_input_callback": 225, "simulated_output_callback": 225, "simulatedantenna": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183], "simulatedantennaarrai": [90, 174, 176, 177, 178, 183, 225], "simulatedantennaport": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 255], "simulatedcustomarrai": [174, 176, 178, 255], "simulateddevic": [13, 30, 90, 91, 99, 164, 166, 174, 176, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 196, 200, 206, 213, 219, 224, 225, 231, 237, 248], "simulateddeviceoutput": [90, 224, 225, 227, 230], "simulateddevicereceiver": [225, 226, 228, 229], "simulateddevicerecept": [90, 91, 189, 224, 225, 229], "simulateddevicest": [15, 16, 90, 224, 225], "simulateddevicetransmiss": [90, 189, 224, 225, 230], "simulateddipol": 179, "simulateddrop": [189, 224, 231, 234, 235, 236, 237, 238, 248], "simulatedidealantenna": [2, 3, 5, 123, 124, 125, 174, 176, 180, 225, 254, 255], "simulatedlinearantenna": 181, "simulatedpatchantenna": [174, 182], "simulateduniformarrai": [2, 3, 5, 123, 124, 125, 174, 176, 183, 225, 254], "simulaten": [117, 224, 258], "simulation_modul": 252, "simulationscenario": [13, 91, 224, 231, 248, 257], "simultan": [64, 97, 117, 205, 248, 251, 263], "sin": [36, 255], "sinc": [5, 13, 30, 33, 37, 58, 65, 111, 174, 190, 191, 207, 250, 254, 259, 260, 262], "singl": [1, 2, 3, 5, 23, 30, 32, 33, 35, 36, 37, 46, 48, 51, 55, 59, 64, 65, 70, 71, 72, 76, 79, 81, 90, 97, 98, 99, 105, 107, 108, 112, 114, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 135, 138, 139, 140, 141, 143, 147, 159, 163, 165, 166, 167, 168, 169, 172, 173, 174, 175, 179, 180, 181, 182, 188, 189, 191, 213, 225, 231, 232, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "single_carri": 124, "singlecarri": 124, "singlecarriercorrelationsynchron": [2, 3, 5, 117, 118, 119, 138, 139, 140, 141, 253], "singlecarrieridealchannelestim": [123, 124, 125], "singlecarrierleastsquareschannelestim": [2, 3, 5, 30, 117, 118, 119, 138, 139, 140, 141, 248, 253], "singlecarrierzeroforcingchannelequ": [2, 3, 5, 30, 117, 118, 119, 138, 139, 140, 141, 248, 253], "singletargetradarchannel": [33, 34, 99, 163, 165, 166, 167, 168, 254, 261], "singletargetradarchannelr": 34, "singleton": 35, "singnal": 225, "singular": [128, 135, 137, 147], "sinr": [7, 15, 18, 27, 29, 31, 33, 35], "sinusoid": [17, 21, 22, 23, 25, 28, 255, 263], "sionna": [35, 250], "sionna_rt_channel": 35, "sionnart": 30, "sionnartchannel": 35, "sionnartchannelr": 35, "sionnartchannelsampl": 35, "siso": [253, 258], "site": 56, "situat": 263, "size": [17, 59, 70, 71, 72, 76, 79, 109, 111, 114, 116, 125, 126, 145, 146, 148, 149, 225, 259], "skip": 262, "sky": [67, 173], "sl": 8, "slant": [36, 181], "slg04": 263, "slice": [36, 37, 65], "slope": [138, 167], "slot": [125, 126, 225, 262], "small": [2, 3, 8, 9, 10, 11, 12, 254], "smaller": [2, 8, 13, 25, 28, 32, 34, 36, 39, 44, 59, 61, 64, 65, 71, 72, 76, 89, 98, 135, 136, 137, 138, 140, 147, 159, 161, 162, 167, 209, 216, 217, 218, 227, 230, 231, 236, 238, 242], "smartphon": 191, "smooth": 217, "smoother": 165, "smoothness_factor": 217, "snippet": [5, 30, 118, 120, 168, 174, 176, 185, 192, 200, 213, 219, 225, 232, 237, 248], "snr": [7, 8, 9, 10, 11, 12, 15, 18, 19, 21, 22, 25, 27, 28, 29, 31, 33, 35, 39, 90, 123, 125, 166, 191, 199, 200, 225, 248, 255, 256, 260, 261, 263], "snr_dimens": 255, "so": [2, 3, 7, 13, 23, 35, 36, 39, 66, 125, 130, 142, 150, 151, 156, 162, 169, 174, 214, 224, 242, 248, 251, 252, 253, 254, 259], "societi": [77, 263], "soft": [79, 111], "soft_output": 111, "softwar": [31, 88, 248, 249, 251, 258, 261], "softwarex": [69, 74, 75, 77, 78, 80, 263], "softx": [69, 74, 75, 77, 78, 80, 263], "sold": 251, "sole": [248, 251], "solomon": [73, 263], "solut": [5, 251], "some": [1, 7, 65, 200, 244, 248, 250, 251, 260], "someth": 252, "sometim": [191, 192], "somewher": [127, 255], "sort": [59, 64, 65, 132, 136, 155, 207], "sound": [82, 88, 213, 217, 253, 263], "soundcard": 81, "sounddevic": 253, "sourc": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 76, 79, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 242, 243, 244, 249, 251, 252, 254, 263], "space": [2, 3, 5, 6, 13, 15, 16, 17, 18, 19, 20, 21, 22, 25, 28, 29, 30, 32, 33, 34, 35, 36, 65, 67, 90, 95, 121, 132, 153, 156, 174, 176, 183, 191, 225, 241, 255, 256, 263], "space_time_block_cod": 125, "span": [5, 136], "sparcifi": 65, "spare": 251, "spars": [30, 37, 65, 127, 158, 160, 161, 162], "sparsearrai": [37, 127], "sparsesign": 65, "sparsif": 65, "sparsifi": 65, "spatial": [2, 4, 7, 8, 9, 10, 11, 12, 18, 23, 27, 30, 32, 36, 67, 132, 222, 223, 225, 248, 249, 254, 255, 263], "spatial_respons": 27, "spatialdelaychannel": [2, 3, 5, 18, 20, 255], "spatialdelaychannelr": [18, 20], "spawn": 59, "spcifi": 224, "speak": 251, "speaker": 253, "special": [65, 251], "specic": 120, "specif": [7, 13, 30, 33, 34, 48, 51, 56, 59, 66, 73, 79, 88, 91, 110, 111, 131, 132, 142, 144, 150, 151, 156, 169, 191, 192, 200, 205, 224, 231, 242, 248, 249, 251, 252, 253, 260, 262, 263], "specifi": [7, 8, 9, 10, 11, 12, 13, 15, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 33, 35, 36, 44, 48, 51, 54, 59, 64, 65, 66, 68, 81, 85, 87, 89, 90, 91, 92, 94, 95, 97, 98, 99, 112, 117, 118, 119, 120, 128, 135, 138, 139, 140, 141, 142, 148, 150, 151, 153, 156, 157, 167, 169, 176, 177, 178, 186, 191, 192, 193, 194, 195, 196, 200, 205, 206, 208, 216, 224, 225, 231, 232, 233, 234, 235, 236, 237, 243, 250, 251, 254, 255, 257], "specificisol": [196, 225, 261], "specifii": [5, 248, 255], "spectra": [3, 263], "spectral": [90, 156, 198, 199, 221, 225, 263], "spectrum": [2, 263], "specular": 23, "speech": 263, "speed": [39, 79, 263], "speed_of_light": [254, 255], "spheric": [1, 2, 3, 5, 32, 34, 36, 67, 159, 254, 255], "spherical_angl": [1, 184], "spherical_phase_respons": [36, 254], "sphericalfocu": [1, 5, 255], "sphinx": 244, "spike": 232, "spillag": 192, "spillov": 192, "spiral": 255, "spiral_arrai": 255, "spiral_port": 255, "spirit": 251, "split": [1, 57, 71], "spread": [6, 7, 23, 132, 219], "spring": [23, 99, 263], "sqrt": [5, 7, 23, 36, 81, 106], "squar": [6, 22, 24, 28, 85, 101, 103, 106, 110, 164, 168, 221, 241, 242], "squarer": [123, 263], "squenc": 189, "squre": 166, "ssinr": 190, "stabl": [3, 263], "stackoverflow": 243, "stadiu": [205, 263], "stage": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 56, 59, 60, 62, 63, 64, 65, 66, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 89, 90, 94, 97, 98, 99, 100, 102, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 260], "stage_argu": 59, "stage_executor": 59, "stage_identifi": 59, "staircas": 207, "stamp": [66, 89], "stand": [59, 225], "standard": [7, 21, 23, 28, 59, 71, 79, 111, 251, 263], "start": [6, 7, 9, 13, 21, 23, 28, 36, 37, 38, 55, 58, 64, 65, 86, 90, 122, 130, 135, 143, 144, 145, 146, 148, 149, 173, 211, 212, 221, 225, 226, 227, 229, 230, 233, 234, 235, 236, 238, 241, 249, 251, 252, 257, 261], "state": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 55, 57, 59, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 90, 91, 92, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 173, 176, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 238, 251, 253, 256, 257, 260], "state_format": 37, "state_inform": 37, "state_r": [7, 8, 9, 10, 11, 12], "state_vari": 7, "stated_symbol": 129, "statedsymbol": [118, 122, 123, 124, 125, 126, 127, 128, 130, 135, 137, 147, 260, 262], "statement": [168, 244, 250, 251], "static": [7, 19, 32, 33, 37, 54, 55, 59, 60, 65, 66, 83, 84, 85, 90, 111, 147, 165, 173, 225, 232, 237, 239, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "staticconsistentr": 17, "staticconsistentsampl": 17, "staticoper": 60, "statictrajectori": [32, 173, 225, 257], "statictrigg": [90, 225, 235], "station": [2, 3, 5, 7, 191, 255], "statist": [21, 22, 23, 24, 25, 26, 27, 28, 30, 132, 200, 263], "statu": [59, 64, 251], "stbc": 125, "std": [17, 79, 263], "steer": [1, 2, 3, 4, 254, 255, 263], "steinbauer": [21, 263], "stem": [68, 206, 258], "stemcontain": 68, "stemvisu": [7, 53, 68, 102, 258], "step": [56, 59, 62, 70, 71, 72, 73, 79, 111, 120, 121, 123, 124, 126, 128, 130, 135, 138, 139, 140, 141, 169, 185, 191, 192, 200, 207, 213, 248, 250, 251, 254, 259, 262, 264], "stephan": [31, 36, 263], "steven": [132, 263], "still": [207, 232], "stochast": [25, 30], "stoica": [125, 263], "stop": [53, 54, 55, 59, 64, 65, 74, 135, 165, 166, 257, 263], "storag": 251, "store": [53, 54, 55, 59, 64, 65, 86, 89, 165, 257, 258], "str": [7, 35, 53, 54, 55, 59, 64, 65, 68, 74, 86, 87, 89, 93, 94, 95, 100, 104, 105, 106, 107, 108, 127, 147, 157, 161, 163, 165, 166, 190, 196, 198, 199, 201, 202, 207, 216, 223, 231, 256, 258], "straight": 173, "straightforward": 101, "straightfoward": 256, "stream": [1, 2, 3, 4, 5, 30, 37, 39, 48, 53, 62, 65, 66, 71, 81, 85, 89, 90, 100, 101, 103, 104, 105, 107, 108, 110, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 135, 137, 142, 147, 148, 167, 169, 172, 175, 176, 186, 193, 194, 195, 225, 254, 257, 258, 260, 262], "stream_indic": 65, "streambitssourc": 100, "streamlin": 68, "streams_kei": 65, "street": [7, 11, 12], "stretch": [65, 137, 167], "strictli": [85, 248], "string": [7, 53, 55, 59, 65, 68, 86, 104, 105, 106, 107, 108, 127, 147, 157, 161, 163, 165, 166, 190, 223], "strip": 33, "strongli": 30, "structur": [52, 69, 74, 75, 77, 78, 80, 147, 150, 237, 248, 254, 258], "stub": [89, 112, 118, 119, 120, 256], "student": 249, "studi": [2, 3, 5], "studio": 250, "sturm": [99, 263], "style": [54, 59, 249], "style_context": 54, "sub": [0, 57, 59, 70, 86, 144, 240], "subcarri": [142, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156], "subcarrier_spac": [99, 151, 153, 156], "subclass": [65, 89], "subcluster_indic": 7, "subdirectori": 54, "subdivid": 251, "subject": [5, 64, 251], "sublicens": 251, "sublist": 226, "submit": 248, "submodul": [250, 263], "subpackag": 0, "subprogram": 251, "subroutin": [1, 2, 3, 5, 6, 13, 15, 19, 20, 25, 29, 32, 34, 35, 48, 51, 87, 169, 172, 216, 225, 254, 257], "subsect": [248, 251], "subsequ": 71, "subset": 36, "subseuent": 120, "subspac": 5, "substack": 30, "substanti": [5, 251], "success": [74, 75, 163], "sue": 251, "suffic": 251, "suffici": [59, 71], "suffix": [145, 148], "suggest": [59, 99, 100, 232], "suit": [156, 248], "sum": [3, 7, 23, 33, 58, 128, 135, 137, 147, 166, 255, 258, 263], "sum_": [13, 15, 23, 30, 33, 59, 128, 135, 137, 147], "summari": [30, 251, 255], "summed_pow": 258, "superimpos": [65, 191], "superposit": [65, 221], "supplement": 251, "suppli": 59, "support": [1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 55, 60, 62, 63, 64, 65, 67, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 89, 90, 94, 97, 98, 99, 100, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 132, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 153, 157, 158, 159, 161, 162, 167, 169, 170, 173, 176, 184, 187, 188, 189, 190, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 250, 251, 252], "supportsfloat": [59, 104, 105, 106, 107, 108, 163], "supportsindex": 55, "suppress": [153, 156], "sure": [250, 251], "surfac": [8, 53, 59, 102, 104, 105, 106, 107, 108, 166, 174], "surrend": 251, "survei": [132, 263], "surviv": 251, "sustain": 251, "sweep": [8, 9, 10, 11, 12, 19, 21, 22, 25, 28, 59, 86, 163, 166, 167, 191, 231, 255, 256, 258, 260, 261], "swept": [59, 167], "switch": [2, 3, 5, 255], "symbol": [37, 65, 70, 77, 78, 99, 101, 103, 106, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 133, 135, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 150, 151, 153, 154, 155, 156, 199, 200, 248, 253, 256, 257, 258, 260, 262, 263], "symbol_cutoff": 65, "symbol_dur": [65, 112, 128, 135, 137, 147, 262], "symbol_energi": [128, 135, 137, 147, 262], "symbol_index_estim": 262, "symbol_indic": 262, "symbol_pow": 262, "symbol_precod": [122, 123, 124, 125, 126], "symbol_precoding_support": [128, 135], "symbol_r": [2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 104, 105, 106, 107, 108, 117, 118, 119, 120, 123, 124, 125, 137, 138, 139, 140, 141, 248, 253, 259], "symbol_sequ": 128, "symbol_typ": [128, 135], "symbolflipp": 260, "symbolprecod": 123, "symbols_candid": 262, "symbols_per_fram": [147, 262], "symbolsect": [99, 122, 142, 149, 150, 151, 156, 256, 257, 258, 260], "symmetr": [75, 207, 263], "synchron": [2, 3, 5, 18, 19, 20, 92, 110, 114, 116, 117, 118, 119, 128, 130, 131, 134, 135, 136, 138, 139, 140, 141, 142, 147, 150, 151, 154, 156, 225, 233, 234, 235, 236, 237, 238, 248, 253, 262, 263], "synchronizatio": 225, "syndrom": 74, "synonym": 13, "synthet": 35, "syrj\u00e4l\u00e4": [205, 263], "system": [0, 1, 2, 3, 5, 21, 30, 36, 39, 57, 59, 61, 64, 66, 79, 86, 88, 89, 99, 100, 102, 110, 118, 120, 131, 132, 159, 165, 191, 192, 198, 199, 200, 203, 205, 213, 217, 221, 243, 248, 250, 251, 252, 253, 255, 256, 258, 261, 263], "systemat": 78, "sytem": 67, "szw09": 263, "t": [1, 2, 3, 5, 7, 13, 18, 19, 20, 23, 25, 29, 30, 33, 36, 55, 65, 69, 74, 75, 77, 78, 80, 104, 105, 106, 107, 108, 111, 127, 132, 154, 155, 157, 191, 213, 214, 216, 217, 218, 254, 255, 260, 263], "t_": [46, 97, 98, 108, 132, 167, 169, 172, 233], "t_i": 65, "tabl": [8, 59, 111, 185, 192, 196, 198, 199, 200, 201, 202], "tackl": 0, "tae": 263, "tag": 55, "tag_registri": 55, "tajan": [69, 74, 75, 77, 78, 80, 263], "take": [124, 251, 259], "taken": [65, 205, 250], "tal": [75, 263], "tandem": 30, "tangibl": 251, "tap": [7, 15, 18, 22, 23, 25, 27, 29, 30, 31, 33, 35, 36, 37, 248, 263], "tap_interv": 22, "target": [33, 36, 53, 55, 67, 99, 163, 165, 166, 167, 168, 173, 184, 248, 249, 254, 255, 261, 263], "target_azimuth": 34, "target_azimuth_vari": 34, "target_cross_sect": 34, "target_exist": [34, 261], "target_phase_vari": 34, "target_rang": [34, 254, 261], "target_range_vari": 34, "target_veloc": 34, "target_velocity_vari": 34, "target_zenith": 34, "target_zenith_vari": 34, "task": 59, "tassp": 263, "tau": [7, 13, 15, 18, 19, 20, 23, 25, 27, 29, 30, 31, 33, 35, 132], "tau_": [19, 23, 25, 30, 33], "tau_0": 30, "tcom": [213, 218, 263], "tcsi": [221, 263], "tdl": [23, 142, 150, 151, 156, 248], "tdltype": [28, 142, 150, 151, 156], "technic": [35, 79], "techniqu": [125, 205, 263], "technolog": 251, "technologi": [23, 99, 263], "telecommun": [21, 79, 263], "televis": 175, "tell": 251, "templat": 59, "tempon": [59, 263], "tempor": 65, "tend": 132, "tensor": [37, 127, 157], "tensorflow": 250, "term": [70, 110, 137, 191, 200, 251], "termin": [7, 250, 251, 255, 256], "terrain": 21, "test": [32, 33, 66, 90, 91, 165, 248], "test_instal": 244, "testb": [88, 248, 249, 261], "text": [1, 5, 13, 15, 19, 20, 23, 29, 30, 33, 59, 99, 104, 105, 106, 107, 108, 132, 214, 216, 217, 221], "tfrac": [39, 44, 46, 81, 94, 97, 98, 167, 169, 172, 225, 248, 256], "tghe": 132, "th": [23, 33, 36, 59, 71, 111, 142, 150, 151, 156], "than": [2, 8, 13, 19, 25, 28, 32, 34, 36, 39, 44, 59, 61, 64, 65, 70, 71, 72, 76, 81, 89, 94, 125, 136, 137, 138, 144, 147, 150, 161, 165, 167, 173, 175, 205, 207, 216, 217, 218, 224, 225, 226, 227, 230, 231, 238, 242, 243, 251, 255], "thank": 252, "thei": [14, 18, 23, 33, 56, 58, 65, 66, 67, 72, 100, 110, 117, 119, 122, 123, 124, 125, 128, 137, 167, 169, 175, 176, 189, 190, 191, 224, 237, 248, 251, 252, 253, 256, 258, 262], "them": [3, 5, 46, 65, 71, 72, 89, 112, 118, 169, 176, 251, 259, 264], "themselv": 225, "theoret": [36, 128, 135, 137, 147], "theori": [75, 78, 125, 205, 263], "therefor": [7, 29, 30, 36, 58, 59, 70, 71, 72, 79, 123, 124, 125, 132, 185, 192, 248, 250, 251, 254], "therfor": [7, 15, 18, 27, 29, 31, 33, 35, 194, 216], "thermal": 200, "thershold": 59, "theta": [2, 3, 7, 36, 81, 254], "theta_": [7, 23, 25], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 59, 60, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 76, 79, 81, 83, 84, 85, 87, 89, 90, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 200, 201, 202, 203, 205, 207, 208, 209, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "thiel": [31, 36, 263], "thing": [191, 251], "think": 258, "third": [1, 2, 3, 5, 127, 251], "thitimajshima": [80, 263], "thoma": [21, 99, 221, 263], "those": [169, 250, 251, 254], "though": [169, 191, 248, 251], "thought": 33, "thread": 191, "three": [1, 2, 3, 5, 15, 67, 125, 127, 157, 159, 164, 191, 195, 221, 248, 251, 254, 255, 260], "threshold": [59, 135, 136, 160, 165, 168, 263], "thresholddetector": [162, 163, 168], "thrid": 249, "throug": 191, "through": [13, 191, 224, 251], "throughout": 38, "throughput": [101, 103, 110, 249, 258], "throughputartifact": 108, "throughputevalu": 108, "througput": 108, "thu": [5, 35, 65, 125, 191, 251], "tick": 59, "tick_format": 59, "tild": [70, 76, 254], "tile": [240, 259], "tile_figur": 243, "tile_offset": 243, "time": [1, 2, 3, 6, 7, 13, 15, 16, 18, 23, 25, 27, 29, 30, 31, 32, 33, 35, 36, 37, 51, 52, 59, 65, 66, 67, 68, 76, 84, 85, 89, 90, 95, 98, 112, 114, 116, 120, 121, 127, 128, 132, 135, 136, 137, 142, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 169, 173, 189, 195, 203, 213, 224, 225, 226, 227, 229, 230, 232, 237, 238, 239, 248, 249, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263], "timeoffsettrigg": 236, "timestamp": [13, 32, 37, 52, 65, 66, 89, 90, 114, 116, 173, 189, 224, 225, 231], "tit": [75, 78, 263], "titl": [0, 5, 7, 53, 59, 65, 68, 87, 95, 100, 104, 105, 106, 107, 108, 127, 147, 157, 161, 163, 164, 165, 166, 168, 176, 190, 196, 198, 199, 201, 202, 216, 223, 232, 243, 248, 250, 253, 254, 255, 257, 258, 260, 261], "tk": 243, "tkagg": 243, "tl": 251, "tmtt": [205, 263], "to_arrai": [53, 59, 165, 258], "to_dens": 65, "to_frequency_select": 37, "to_hdf": 55, "to_impulse_respons": 37, "to_interleav": 65, "to_local_coordin": 67, "to_scalar": [53, 59, 165, 166, 258], "to_spher": 67, "tobia": [249, 263], "todo": 35, "tof": 7, "tol": 59, "toler": [59, 71], "tolist": [32, 34, 58], "tonnelli": [69, 74, 75, 77, 78, 80, 263], "tool": [0, 31, 111, 137, 244, 250, 251, 252, 258], "toolbox": [69, 74, 75, 77, 78, 80, 263], "topic": 191, "toplogi": 255, "topologi": [36, 39, 248, 255], "tosato": 111, "total": [5, 7, 8, 174, 248], "toward": [1, 2, 3, 4, 5, 7, 20, 36, 67, 169, 184, 244, 248, 254, 255], "tr": [8, 28, 263], "tr_125943v130000p": [21, 263], "tr_138901v170000p": [7, 8, 9, 10, 11, 12, 28, 263], "trace": 35, "track": [165, 173], "trade": 251, "trademark": 251, "trajectori": [30, 32, 90, 225, 257], "trajectory_sampl": [90, 225], "trajectorysampl": [32, 90, 173, 225], "transact": [5, 21, 23, 31, 36, 75, 78, 125, 154, 155, 205, 213, 218, 221, 251, 263], "transfer": [69, 74, 75, 77, 78, 80, 251], "transform": [2, 3, 5, 7, 8, 9, 10, 11, 12, 15, 20, 30, 32, 35, 36, 37, 39, 64, 66, 67, 81, 89, 90, 92, 94, 121, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 224, 225, 242, 253, 255, 257], "transform_direct": 67, "transform_posit": 67, "transformablebas": [64, 67, 92, 224], "transformablelink": [39, 64, 67, 81, 89, 90, 92, 94, 224], "translat": [66, 67, 147, 173], "transmisison": 39, "transmiss": [1, 4, 5, 18, 30, 37, 39, 41, 44, 48, 51, 52, 60, 62, 64, 66, 70, 71, 72, 76, 79, 81, 83, 84, 89, 90, 92, 94, 97, 98, 99, 112, 117, 118, 119, 120, 121, 122, 126, 128, 130, 132, 135, 138, 139, 140, 141, 142, 150, 151, 156, 168, 169, 175, 176, 186, 189, 191, 205, 224, 225, 227, 231, 248, 249, 251, 253, 260, 262], "transmissiontyp": [50, 51], "transmissison": 224, "transmit": [1, 2, 3, 5, 13, 15, 16, 18, 23, 24, 27, 29, 30, 33, 34, 35, 36, 37, 39, 41, 42, 43, 50, 51, 52, 53, 60, 62, 64, 65, 66, 70, 71, 72, 76, 79, 81, 83, 84, 85, 88, 89, 90, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 112, 114, 115, 116, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 130, 132, 135, 137, 138, 139, 140, 141, 142, 147, 150, 151, 156, 163, 164, 165, 166, 167, 168, 169, 171, 175, 176, 179, 180, 181, 182, 186, 187, 189, 191, 192, 193, 194, 195, 196, 205, 206, 216, 224, 225, 226, 227, 229, 230, 231, 232, 248, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "transmit_antenna": 36, "transmit_cod": [3, 5, 39, 254], "transmit_correction_weight": 83, "transmit_correl": 187, "transmit_devic": [64, 224], "transmit_dsp": [39, 89, 90, 225], "transmit_encdod": 39, "transmit_encod": [39, 89, 90, 225], "transmit_focu": [1, 3, 5, 255], "transmit_imped": 187, "transmit_oper": [39, 64], "transmit_port": [36, 81, 94, 255], "transmit_signal_cod": [117, 119, 120], "transmit_st": 66, "transmit_stream": 37, "transmit_symbol_cod": [117, 119, 120, 121, 122, 125, 260], "transmit_topologi": 36, "transmitbeamform": [1, 3, 5, 169], "transmitencod": [3, 5, 62, 122, 125, 126], "transmitencodertyp": 62, "transmitpowerevalu": 53, "transmitprecod": [62, 126], "transmitprecodingtyp": 62, "transmitsignalcod": [39, 62, 117, 119, 120], "transmitst": [1, 51, 62, 66], "transmitstreamencod": [1, 3, 5, 62, 117, 119, 120], "transmitsymbolcod": [117, 119, 120, 121, 126], "transmitsymbolencod": [117, 119, 120, 121, 122, 125, 126, 260], "transmitt": [8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 23, 25, 27, 28, 30, 32, 33, 35, 39, 53, 60, 64, 79, 89, 97, 98, 99, 104, 105, 106, 107, 108, 117, 119, 120, 129, 132, 169, 185, 191, 192, 202, 205, 224, 225, 231, 232, 248, 255, 256], "transmitted_sign": [85, 191], "transmitted_symbol": 106, "transmitter_antenna": 15, "transmitter_index": 231, "transmitter_pos": 15, "transmitter_st": [15, 27, 33, 256], "transmitter_veloc": 15, "transmitterslot": 39, "transmittgin": 116, "transmitting_devic": [119, 164, 165, 166], "transmitting_modem": [102, 104, 105, 106, 107, 108], "transmittingmodem": [2, 3, 5, 100, 102, 104, 105, 106, 107, 108, 112, 115, 116, 117, 119, 120], "transmittingmodembas": [97, 98, 99, 117, 119, 120, 122, 124, 125], "travel": [132, 241], "treat": [59, 251], "treati": 251, "trelli": [78, 80], "trial": [31, 263], "triangleq": 5, "trigger": [31, 56, 61, 81, 86, 89, 90, 92, 94, 169, 224, 225, 226, 227, 229, 230, 232, 239, 248, 253], "trigger_delai": 238, "trigger_direct": [89, 90, 92], "trigger_model": [90, 225, 232, 233, 234, 235, 236, 237], "trigger_model_a": [232, 233, 234, 235, 236, 237], "trigger_model_b": [232, 233, 234, 235, 236, 237], "trigger_r": [90, 91, 224, 225, 226, 227, 229, 230], "triggermodel": [90, 225, 232, 233, 234, 235, 236, 237, 238], "triggerr": [90, 224, 225, 226, 227, 229, 230, 233, 234, 235, 236, 237, 238], "troubl": 60, "true": [7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 32, 33, 34, 39, 48, 51, 54, 55, 59, 64, 65, 67, 69, 71, 74, 75, 77, 78, 80, 85, 86, 89, 90, 91, 92, 94, 102, 104, 105, 106, 107, 108, 111, 128, 137, 147, 150, 153, 156, 162, 163, 165, 166, 167, 195, 196, 224, 225, 231, 257, 261], "truncat": [71, 106], "truth": [164, 166], "ts_138211v150200p": [79, 263], "tsg": [7, 8, 9, 10, 11, 12, 28, 263], "tsp": [5, 263], "tudi": [7, 8, 9, 10, 11, 12, 28, 263], "tupl": [7, 17, 19, 27, 33, 34, 36, 55, 59, 64, 65, 68, 85, 86, 87, 161, 176, 216, 222, 223, 224, 243], "turbo": [73, 263], "turbocod": 80, "turn": [67, 100, 191, 253], "tutori": [168, 248, 249, 260, 261, 262], "tv15": 263, "twc": [21, 23, 263], "two": [1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 32, 33, 35, 36, 37, 53, 59, 64, 65, 81, 90, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 119, 123, 124, 125, 127, 128, 135, 142, 145, 148, 150, 151, 156, 165, 166, 167, 173, 176, 185, 188, 191, 192, 196, 218, 224, 225, 232, 233, 234, 235, 236, 237, 248, 250, 251, 253, 255, 257, 258, 260, 261], "twt": [213, 218, 263], "tx": [7, 13, 15, 18, 27, 29, 30, 31, 33, 35, 36, 104, 105, 106, 107, 108, 125, 191, 248, 255], "tx_devic": [119, 123, 124, 125, 142, 150, 151, 156, 248, 257, 258], "tx_gain": 94, "tx_modem": 120, "tx_precod": 121, "txn": 65, "type": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 76, 79, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 97, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 178, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 241, 242, 243, 248, 256, 258], "typevar": [1, 7, 10, 11, 12, 13, 14, 15, 18, 29, 33, 36, 39, 42, 43, 48, 49, 50, 51, 52, 55, 56, 59, 61, 62, 64, 66, 68, 81, 86, 87, 89, 92, 97, 102, 104, 105, 106, 107, 108, 112, 118, 120, 128, 129, 130, 132, 133, 136, 145, 147, 148, 152, 154, 155, 163, 170, 171, 200], "typic": [81, 137, 191, 248, 251, 261], "u": [5, 19, 257, 259], "ue": [2, 3, 5], "ue1": 5, "ue2": 5, "ue3": 5, "ue_receiver_1": 5, "ue_receiver_2": 5, "ue_receiver_3": 5, "uhd": [88, 93, 94, 250], "uint8": 262, "umt": [21, 263], "unabl": [64, 250], "unassign": [153, 156], "unavail": [68, 222], "unbias": 89, "uncorrel": [17, 21, 22, 25, 28, 32, 34, 203], "undef": 55, "undef_typ": 55, "undefin": 55, "under": [59, 89, 165, 167, 191, 244, 249, 250, 251], "underli": [13, 51, 53, 59, 165, 166], "underset": 132, "underyl": 253, "undesir": 185, "unequ": [29, 36], "unexpect": [157, 185], "unflatten": 65, "unidirect": [110, 119], "unifi": 248, "uniform": [5, 17, 19, 36, 128, 137, 140, 174, 175, 176, 191, 207, 254, 255, 256], "uniform_arrai": [5, 174, 176, 255], "uniformarrai": [36, 183], "uniformli": [5, 17, 19, 30, 36, 65, 174, 176, 233, 263], "unintend": 5, "union": [1, 19, 25, 34, 36, 54, 55, 58, 59, 65, 112, 117, 118, 119, 120, 127, 183, 224], "uniqu": [54, 55, 64, 66, 89, 90, 128, 142, 150, 151, 156, 191, 224, 225, 237, 238, 248], "unit": [36, 39, 44, 46, 67, 81, 94, 97, 98, 108, 111, 128, 135, 137, 147, 157, 167, 169, 172, 173, 209, 225, 262], "unit_test": 244, "unitari": 111, "unitless": [128, 135, 137, 147], "unittest": 244, "univers": [21, 88, 263], "unknown": [59, 68, 89, 161, 222], "unless": [30, 251], "unlimit": 251, "unmap": [118, 126, 128, 130, 135, 137, 147, 260, 262], "unmatchableexcept": 59, "unmodifi": 251, "unmodul": 167, "unnecessari": 251, "unpack": [109, 112, 117, 118, 119, 120, 251], "unpack_fram": 109, "unpackbit": 262, "unregist": 55, "until": 251, "up": [3, 5, 54, 59, 67, 79, 118, 120, 173, 192, 248, 249, 253, 255, 261], "updat": [13, 36, 67, 68, 87, 89, 248, 251], "update_plot": 87, "update_visu": 68, "upgrad": 244, "upper": 59, "upward": 67, "urban": [7, 21, 255], "urban_macrocel": 11, "urban_microcel": 12, "urbanmacrocel": 11, "urbanmacrocellsr": 11, "urbanmicrocel": 12, "urbanmicrocellsr": 12, "url": [3, 7, 8, 9, 10, 11, 12, 21, 28, 69, 74, 75, 77, 78, 79, 80, 213, 217, 263], "us": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 28, 29, 30, 31, 32, 33, 35, 38, 39, 48, 51, 53, 55, 58, 59, 60, 63, 64, 65, 66, 67, 68, 79, 82, 83, 85, 86, 89, 90, 92, 93, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 110, 112, 117, 118, 119, 120, 125, 128, 130, 131, 135, 137, 138, 140, 142, 145, 147, 148, 150, 153, 156, 161, 163, 165, 166, 167, 168, 169, 174, 175, 176, 190, 191, 198, 199, 200, 202, 203, 205, 219, 220, 231, 233, 234, 235, 236, 237, 241, 243, 244, 248, 250, 251, 252, 254, 257, 258, 259, 261, 262, 264], "usag": [2, 3, 5, 35, 65], "user": [2, 3, 5, 7, 23, 33, 86, 130, 215, 225, 231, 248, 249, 250, 251, 252, 255, 258, 260, 261], "user_equipment_devic": 255, "user_equipment_device_1": [2, 3, 5], "user_equipment_device_2": [2, 3, 5], "user_equipment_device_3": 5, "user_equipment_receiv": 255, "user_equipment_receiver_1": 3, "user_equipment_receiver_2": 3, "user_equipment_transmitter_1": [2, 3, 5], "user_equipment_transmitter_2": [2, 3, 5], "user_equipment_transmitter_3": 5, "usernam": 252, "usrp": [88, 248, 250], "usrpantenna": 94, "usrpdevic": [93, 94], "usrpsystem": 93, "usual": [59, 70, 72, 79, 158, 160, 162, 191, 206, 216, 248], "util": [35, 250], "v": [33, 35, 36, 39, 53, 69, 74, 75, 77, 78, 80, 81, 169, 255, 263], "v17": 8, "v6": 263, "v_": [33, 167, 172], "vacuum": 241, "val": 241, "valid": [65, 67, 251, 253], "valkama": [205, 263], "valu": [1, 3, 5, 6, 7, 8, 9, 13, 19, 21, 25, 28, 36, 37, 38, 39, 55, 58, 59, 62, 64, 65, 66, 81, 86, 94, 104, 105, 106, 107, 108, 111, 122, 127, 128, 135, 136, 137, 140, 143, 144, 147, 157, 162, 163, 165, 173, 191, 207, 208, 211, 212, 213, 214, 221, 231, 241, 248, 253, 262], "value_db": 58, "value_typ": 58, "valueerror": [1, 2, 6, 8, 13, 19, 21, 22, 25, 28, 32, 34, 36, 37, 39, 44, 48, 54, 59, 61, 62, 64, 65, 67, 70, 71, 72, 76, 79, 81, 85, 86, 89, 90, 91, 92, 94, 98, 109, 125, 127, 135, 136, 137, 138, 140, 144, 147, 148, 157, 159, 161, 162, 164, 165, 166, 167, 175, 176, 178, 186, 193, 194, 195, 197, 200, 201, 202, 205, 207, 209, 215, 216, 217, 218, 221, 224, 225, 226, 227, 230, 231, 238, 241], "valuesview": 55, "valuetyp": [58, 59], "varaianc": 111, "vardi": [75, 263], "vari": [59, 191, 255], "variabl": [7, 13, 17, 32, 49, 50, 66, 68, 89, 147, 250, 262], "varianc": [2, 89, 111, 195, 254], "variant": 23, "variou": [131, 240, 244], "varphi_3": 221, "vat": [68, 258], "vdot": 29, "vector": [1, 2, 3, 5, 7, 13, 17, 32, 33, 34, 36, 42, 47, 59, 65, 67, 70, 71, 72, 76, 79, 81, 100, 101, 103, 110, 111, 128, 132, 135, 136, 137, 145, 146, 147, 148, 149, 155, 157, 159, 167, 172, 173, 184, 214, 215, 216, 217, 218, 226, 241, 254], "vehicular": [23, 99, 263], "veloc": [15, 30, 33, 34, 66, 89, 90, 99, 157, 159, 168, 169, 173, 225], "velocity_bin": 157, "velocity_resolut": 169, "veloctii": 173, "venv": 250, "verbatim": 251, "verbos": [38, 54, 231], "veri": [13, 258, 259], "versa": 206, "version": [7, 8, 9, 10, 11, 12, 21, 28, 55, 59, 79, 205, 250, 251, 252, 263, 264], "versu": 165, "vertic": [35, 36, 81], "vetec": [99, 263], "via": [31, 37, 55, 94, 98, 231, 244, 248, 249, 250, 252, 257, 264], "vice": 206, "view": [1, 168, 184, 244, 249, 251, 255], "viewport": 67, "vill": [205, 263], "violat": [244, 251], "virtual": [8, 31, 33, 59, 191, 250, 252, 263], "virtualradartarget": 32, "visibl": [32, 251, 253], "visit": [3, 249, 263], "visual": [7, 30, 36, 37, 53, 57, 59, 65, 86, 87, 88, 99, 101, 147, 157, 161, 165, 168, 173, 176, 212, 213, 224, 232, 248, 250, 253, 255, 257, 258, 259, 261], "visualis": 5, "visualiz": [7, 53, 59, 65, 68, 104, 105, 106, 107, 108, 127, 147, 157, 161, 223], "visualizableattribut": [7, 65, 68, 127, 147, 157, 223], "visualize_far_field_pattern": 176, "visualizu": [68, 168], "vit67": 263, "vital": 132, "viterbi": 263, "vlt": 68, "void": 251, "vol": [23, 80, 263], "volker": [36, 263], "volt": [209, 214, 216], "voltag": [208, 209, 210], "volum": [8, 23, 31, 80, 99, 185, 251, 253, 263], "von": [59, 263], "vote": 259, "vt": [59, 68, 87, 95], "vtc": [23, 99, 263], "w": [2, 3, 5, 67, 167, 172, 243, 254, 255, 258], "w_": 5, "w_1": 5, "w_k": 5, "wa": [3, 5, 25, 31, 35, 39, 52, 55, 56, 59, 65, 114, 116, 163, 170, 173, 189, 202, 225, 226, 238, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "waform": [137, 140], "wahe": [205, 263], "wai": [13, 18, 61, 62, 63, 65, 174, 250, 251], "wait": 84, "waiv": 251, "waiver": 251, "wall": 8, "want": [248, 251], "warn": [38, 65, 84, 253], "warranti": 251, "watt": [39, 48, 51, 53, 60, 98, 99, 118, 120, 169, 198, 199, 200, 201, 202, 203], "wave": [13, 23, 32, 33, 36, 81, 145, 146, 147, 148, 149, 154, 225, 241, 256], "waveform": [2, 3, 5, 8, 9, 10, 11, 12, 19, 20, 21, 22, 25, 28, 30, 35, 36, 45, 49, 50, 70, 81, 88, 97, 98, 99, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 163, 165, 166, 167, 168, 169, 170, 171, 191, 196, 200, 225, 232, 238, 248, 253, 254, 256, 257, 258, 259, 260, 261, 264], "waveform_chirp_fsk": 135, "waveform_configur": [104, 105, 106, 107, 108], "waveform_correlation_synchron": [135, 136], "waveform_single_carri": [30, 137, 138, 139, 140, 141], "wavelength": [2, 3, 5, 30, 36, 39, 174, 225, 255], "wavenumb": [2, 263], "wavform": [118, 120, 147], "we": [168, 169, 191, 232, 248, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "web": [244, 251], "websit": 244, "weight": [2, 3, 5, 33, 37, 83, 175, 179, 180, 181, 182, 254], "welcom": 249, "well": [4, 30, 33, 52, 71, 73, 88, 110, 122, 123, 124, 126, 130, 135, 138, 139, 140, 141, 156, 164, 176, 189, 244, 251, 256, 261], "were": [127, 148, 251], "werner": [99, 263], "wh": [167, 172], "what": [30, 251, 257, 258], "whatev": 251, "wheel": 250, "when": [5, 7, 9, 10, 11, 12, 14, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 58, 59, 65, 74, 113, 114, 115, 116, 130, 132, 169, 172, 174, 176, 191, 200, 237, 248, 250, 251, 253, 254, 255], "whenev": 36, "where": [2, 3, 5, 19, 32, 33, 36, 59, 64, 65, 71, 85, 90, 157, 167, 172, 195, 217, 218, 221, 225, 233, 242, 251, 254, 255], "wherea": 5, "whether": [53, 59, 90, 94, 163, 251, 255], "which": [13, 17, 19, 21, 22, 25, 28, 30, 31, 32, 33, 34, 37, 39, 41, 52, 54, 55, 59, 63, 64, 65, 67, 68, 70, 71, 81, 83, 84, 85, 86, 89, 90, 94, 95, 96, 100, 101, 105, 107, 108, 109, 111, 114, 116, 128, 131, 135, 136, 137, 140, 142, 148, 150, 151, 153, 154, 156, 164, 165, 173, 174, 186, 189, 191, 193, 196, 197, 198, 199, 200, 202, 204, 207, 208, 216, 219, 220, 221, 224, 225, 226, 229, 231, 238, 242, 244, 248, 251, 254, 255, 256, 257, 259, 260, 261], "while": [1, 5, 33, 51, 71, 97, 200, 248, 252, 258, 260], "white": [90, 200, 203, 204, 221, 225, 262], "whittak": 13, "who": [250, 251], "whole": [53, 59, 65, 71, 102, 109, 163, 164, 166, 190, 207, 248, 251], "whom": 251, "whose": [53, 59, 101, 102, 163, 164, 166, 190, 251], "why": 258, "wich": 225, "wide": [166, 251], "wideband": [23, 263], "widehat": 130, "widespread": 251, "width": 65, "wiesbeck": [99, 263], "wifi": 191, "wiki": 205, "wikipedia": 205, "wil": 208, "wille": 176, "window": [250, 251], "wipo": 251, "wireless": [0, 5, 13, 14, 15, 16, 21, 23, 30, 37, 57, 79, 112, 117, 118, 120, 125, 126, 129, 130, 132, 133, 189, 200, 205, 224, 231, 232, 248, 249, 256, 258, 263], "wise": [70, 76], "wish": 251, "within": [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 52, 55, 56, 58, 59, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 86, 89, 90, 94, 95, 104, 105, 106, 107, 108, 118, 120, 121, 125, 127, 128, 130, 132, 135, 137, 138, 139, 140, 141, 143, 145, 146, 147, 148, 149, 151, 153, 154, 156, 161, 163, 165, 166, 167, 168, 169, 173, 174, 175, 177, 178, 179, 180, 181, 182, 185, 188, 189, 190, 191, 192, 195, 213, 220, 222, 224, 225, 231, 232, 237, 238, 239, 244, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262], "without": [7, 37, 89, 109, 136, 191, 194, 225, 248, 251, 257], "won": [30, 191], "word": [59, 70, 71, 72, 76, 79, 145, 147, 148, 149, 216, 248, 260], "words_per_fram": 147, "work": [65, 248, 251, 254, 255, 264], "worker": [59, 258], "workflow": [252, 256, 258], "workload": [59, 258], "workspac": 257, "world": [2, 3, 5, 248, 261], "worldwid": 251, "would": [35, 109, 163, 165, 166, 167, 251, 259], "wrap": [15, 59], "wrapper": [1, 36, 48, 51, 69, 74, 75, 77, 78, 80, 109, 112, 178, 225], "write": [54, 59, 65, 231, 251], "written": [33, 244, 251], "wrong": 70, "www": [3, 7, 8, 9, 10, 11, 12, 21, 28, 69, 74, 75, 77, 78, 79, 80, 251, 263], "x": [1, 2, 3, 13, 15, 30, 36, 37, 59, 65, 67, 70, 76, 111, 128, 132, 135, 136, 137, 144, 145, 147, 148, 155, 174, 176, 183, 205, 207, 216, 217, 241, 243, 255], "x_": [70, 76], "x_1": [70, 76], "x_2": [70, 76], "x_m": [53, 59, 104, 105, 106, 107, 108, 163, 165, 166, 190], "xiao": [23, 263], "xpr_phase": 6, "xzb06": 263, "y": [1, 13, 15, 30, 36, 67, 70, 76, 174, 176, 183, 243, 254, 255], "y_": [70, 76], "y_1": [70, 76], "y_2": [70, 76], "y_axis_limit": 95, "y_k": [70, 76], "yahong": [23, 263], "yaw": 67, "ybo": 263, "ye": [110, 128, 134], "year": [132, 251, 263], "yet": [13, 55], "you": [65, 250, 251, 253, 258, 264], "your": [244, 248, 249, 250, 251, 252], "yourself": [251, 264], "yu": [23, 263], "z": [36, 67, 183, 255], "zar10": 263, "zarrifi": [5, 263], "zeeshan": [205, 263], "zenith": [1, 2, 3, 5, 7, 34, 36, 67, 157, 159, 184, 254], "zenith_angle_variation_vari": 7, "zenith_arrival_spread": 7, "zenith_departure_spread": 7, "zenith_of_arriv": 7, "zenith_of_departur": 7, "zenith_spread_sign": 7, "zero": [2, 7, 8, 9, 10, 11, 12, 13, 17, 25, 28, 29, 30, 32, 34, 35, 36, 37, 39, 44, 51, 55, 59, 64, 65, 71, 72, 81, 84, 85, 89, 90, 94, 98, 104, 105, 107, 108, 135, 136, 137, 138, 139, 140, 141, 144, 150, 153, 156, 157, 159, 161, 162, 167, 195, 196, 203, 205, 207, 209, 216, 218, 224, 225, 227, 230, 231, 238, 241, 256], "zeroforcingchannelequ": [133, 142, 150, 151, 156, 256, 257], "zeropad": 144, "zeros_lik": [25, 258], "zeta": [13, 36], "zf": 256, "zhe": 241, "zheng": [23, 263], "zip": 250, "zirath": [221, 263], "zoa": 7, "zod": 7, "zwick": [21, 99, 263], "\u00e5": [59, 263], "\u00fa": [59, 263]}, "titles": ["HermesPy API", "Beamformer", "Capon Beamformer", "Conventional Beamformer", "Beamforming", "Null Steering Beamformer", "Static CDL", "3GPP Cluster Delay Line Models", "Indoor Factory", "Indoor Office", "Rural Macrocells", "Urban Macrocells", "Urban Microcells", "Channel", "Channel Realization", "Channel Sample", "Link State", "Spatial Consistency", "Delay Channels", "Random Delay Channel", "Spatial Delay Channel", "Cost 259", "Exponential", "Multipath Fading", "Antenna Correlation", "Multipath Fading Channel", "Multipath Fading Realization", "Multipath Fading Sample", "5G TDL", "Ideal Channel", "Channel Modeling", "Quadriga", "Multi Target", "Radar Channels", "Single Target", "SionnaRT Channel", "Antenna Descriptions", "Channel State Information", "General Definitions", "Device Model", "Device Input", "Device Output", "Device Reception", "Device Transmission", "Mixing Operator", "Operation Result", "Operator", "Processed Device Input", "Receiver", "DSP Reception", "DSP Transmission", "Transmitter", "Drop", "Evaluators", "Executable", "Serialization", "Hooks", "Core", "Logarithmics", "PyMonte", "Extra Operators", "Pipeline", "Precoding", "Random Graph", "Wireless Scenario", "Signal", "State", "Coordinate System", "Visualization", "BCH Coding", "Interleaving", "Coding Pipeline", "Cyclic Redundancy Checks", "Error Correction", "Low Differential Parity Checks", "Polar Coding", "Repetition Coding", "Reed-Solomon Coding", "RSC Coding", "Scrambling", "Turbo Coding", "Audio Device", "Audio Scenario", "Antenna Calibration", "Delay Calibration", "Leakage Calibration", "Hardaware Loop", "Hardware Loop Plot", "Hardware Loop", "Physical Device", "Physical Device Dummy", "Physical Scenario Dummy", "Physical Scenario", "USRP System", "USRP Device", "Visualization", "JCAS", "Duplex JCAS Operator", "Matched Filtering", "OFDM Radar", "Bit Sources", "Evaluators", "Communication Evaluator", "&lt;no title&gt;", "Bit Error Rate", "Block Error Rate", "Error Vector Magnitude", "Frame Error Rate", "Throughput", "Frame Generation", "Communication", "Mapping", "Base Modem", "Reception", "Reception Frame", "Transmission", "Transmission Frame", "Duplex Modem", "Receiving Modem", "Simplex Link", "Transmitting Modem", "Communication Precoding", "Discrete Fourier Transform", "Maximal Ratio Combining", "Single Carrier Decoding", "Space-Time Block Codes", "Symbol Precoding", "Symbols", "Waveforms", "Channel Equalization", "Channel Estimation", "Pilot Symbol Sequence", "Synchronization", "Zero-Forcing", "&lt;no title&gt;", "C-FSK", "Correlation", "Single Carrier", "FMCW", "Raised Cosine", "Rectangular", "Root Raised Cosine", "Orthogonal", "Grid Element", "Resource", "Section", "Guard Section", "Waveform", "Pilot Section", "Symbol Section", "OCDM", "OFDM", "OFDM Synchronization", "OFDM Waveform", "Schmidl Cox Pilot", "Schmidl Cox Synchronization", "OTFS", "Radar Cube", "Max", "Point Detection", "Radar Detector", "Radar Point Cloud", "Threshold", "Detection Probability Evaluator", "Radar Evaluator", "Reiver Operating Characteristic", "Root Mean Square Error", "FMCW", "Sensing", "Radar", "Radar Reception", "Radar Transmission", "Radar Waveform", "Animation", "Antennas", "Antenna", "Antenna Arrays", "Antenna Port", "Custom Array", "Dipole", "Ideal Isotropic", "Linear", "Patch", "Uniform Array", "Device Focus", "Mutual Coupling", "Coupling", "Impedance Coupling", "Perfect Coupling", "Simulated Drop", "Evaluators", "Simulation", "Isolation", "Isolation", "Perfect Isolation", "Selective Leakage", "Specific Isolation", "Communication Noise Level", "EBN0", "ESN0", "Noise", "N0", "SNR", "AWGN Model", "AWGN Realization", "Radio-Frequency Chain", "A/D Conversion", "Analog Digital Converter", "Automatic Gain Control", "Constant Gain", "Gain Control Base", "Gain Control Type", "Quantizer Type", "Amplification", "Clipping Power Amplifier", "Custom Power Amplifier", "Power Amplifier", "Rapp Power Amplifier", "Saleh Power Amplifier", "Phase Noise", "No Phase Noise", "Oscillator Phase Noise", "Scenario Visualization", "Scenario Visualizer", "Simulation Scenario", "Devices", "Processed Input", "Device Output", "Receive Realization", "Device Reception", "Device Transmission", "Simulation", "Synchronization", "Random Trigger", "Sample Offset Trigger", "Static Trigger", "Time Offset Trigger", "Trigger Model", "Trigger Realization", "&lt;no title&gt;", "Tools", "Math Tools", "Resampling Routines", "Tile Figures", "For Developers", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Getting Started", "HermesPy", "Installation", "License", "Matlab", "Using Audio Equipment", "Implementing Beamformers", "Using Beamformers", "Implementing Channels", "Recording Datasets", "Implementing Evaluators", "Implementing FEC codings", "Implementing Precodings", "Receiver Operating Characteristics", "Implementing Communication Waveforms", "References", "Tutorials"], "titleterms": {"259": 21, "3gpp": 7, "5g": 28, "A": 206, "For": 244, "No": 220, "amplif": 213, "amplifi": [214, 215, 216, 217, 218], "analog": 207, "anim": 173, "antenna": [24, 36, 83, 174, 175, 176, 177], "api": 0, "architectur": 248, "arrai": [176, 178, 183], "audio": [81, 82, 253], "automat": 208, "awgn": [203, 204], "base": [112, 210], "bch": 69, "beamform": [1, 2, 3, 4, 5, 254, 255], "bit": [100, 104], "block": [105, 125], "c": 135, "calibr": [83, 84, 85], "capon": 2, "carrier": [124, 137], "cdl": 6, "chain": 205, "channel": [13, 14, 15, 18, 19, 20, 25, 29, 30, 33, 35, 37, 129, 130, 256], "characterist": [165, 261], "check": [72, 74, 244], "clip": 214, "cloud": 161, "cluster": 7, "code": [69, 71, 75, 76, 77, 78, 80, 125, 244, 259], "combin": 123, "commun": [102, 110, 121, 197, 262], "consist": 17, "constant": 209, "control": [208, 210, 211], "convent": 3, "convers": 206, "convert": 207, "coordin": 67, "core": 57, "correct": 73, "correl": [24, 136], "cosin": [139, 141], "cost": 21, "coupl": [185, 186, 187, 188], "cox": [154, 155], "cube": 157, "custom": [178, 215], "cyclic": 72, "d": 206, "dataset": 257, "decod": 124, "definit": 38, "delai": [7, 18, 19, 20, 84], "descript": 36, "detect": [159, 163], "detector": 160, "develop": 244, "devic": [39, 40, 41, 42, 43, 47, 81, 89, 90, 94, 184, 225, 227, 229, 230], "differenti": 74, "digit": 207, "dipol": 179, "discret": 122, "document": 244, "drop": [52, 189], "dsp": [49, 50], "dummi": [90, 91], "duplex": [97, 117], "ebn0": 198, "element": 143, "equal": 129, "equip": 253, "error": [73, 104, 105, 106, 107, 166], "esn0": 199, "estim": 130, "evalu": [53, 101, 102, 163, 164, 190, 258], "execut": 54, "exponenti": 22, "extra": 60, "factori": 8, "fade": [23, 25, 26, 27], "featur": 250, "fec": 259, "figur": 243, "filter": 98, "fmcw": [138, 167], "focu": 184, "forc": 133, "fourier": 122, "frame": [107, 109, 114, 116], "frequenc": 205, "from": 250, "fsk": 135, "gain": [208, 209, 210, 211], "gener": [38, 109], "get": 248, "graph": 63, "grid": 143, "guard": 146, "hardawar": 86, "hardwar": [87, 88, 248], "hermespi": [0, 248, 249], "hook": 56, "ideal": [29, 180], "imped": 187, "implement": [254, 256, 258, 259, 260, 262], "indoor": [8, 9], "inform": 37, "input": [40, 47, 226], "instal": 250, "interleav": 70, "isol": [192, 193, 194, 196], "isotrop": 180, "jca": [96, 97], "leakag": [85, 195], "level": 197, "licens": 251, "line": 7, "linear": 181, "link": [16, 119], "logarithm": 58, "loop": [86, 87, 88, 248], "low": 74, "macrocel": [10, 11], "magnitud": 106, "map": 111, "match": 98, "math": 241, "matlab": 252, "max": 158, "maxim": 123, "mean": 166, "microcel": 12, "mix": 44, "model": [7, 30, 39, 203, 237], "modem": [112, 117, 118, 120], "multi": 32, "multipath": [23, 25, 26, 27], "mutual": 185, "n0": 201, "nois": [197, 200, 219, 220, 221], "null": 5, "ocdm": 150, "ofdm": [99, 151, 152, 153], "offic": 9, "offset": [234, 236], "oper": [44, 45, 46, 60, 97, 165, 261], "option": 250, "orthogon": 142, "oscil": 221, "otf": 156, "output": [41, 227], "pariti": 74, "patch": 182, "perfect": [188, 194], "phase": [219, 220, 221], "physic": [89, 90, 91, 92], "pilot": [131, 148, 154], "pipelin": [61, 71], "plot": 87, "point": [159, 161], "polar": 75, "port": 177, "power": [214, 215, 216, 217, 218], "precod": [62, 121, 126, 260], "probabl": 163, "process": [47, 226], "properti": [138, 139, 140, 141], "puls": [138, 139, 140, 141], "pymont": 59, "pypi": 250, "quadriga": [31, 250], "quantiz": 212, "radar": [33, 99, 157, 160, 161, 164, 169, 170, 171, 172], "radio": 205, "rais": [139, 141], "random": [19, 63, 233], "rapp": 217, "rate": [104, 105, 107], "ratio": 123, "realiz": [14, 26, 204, 228, 238], "receiv": [48, 118, 228, 261], "recept": [42, 49, 113, 114, 170, 229], "record": 257, "rectangular": 140, "redund": 72, "reed": 77, "refer": 263, "reiver": 165, "repetit": 76, "resampl": 242, "resourc": 144, "result": 45, "root": [141, 166], "routin": 242, "rsc": 78, "rural": 10, "saleh": 218, "sampl": [15, 27, 234], "scenario": [64, 82, 91, 92, 222, 223, 224], "schmidl": [154, 155], "scrambl": 79, "section": [145, 146, 148, 149], "select": 195, "sens": 168, "sequenc": 131, "serial": 55, "signal": 65, "simplex": 119, "simul": [189, 191, 224, 231, 248], "singl": [34, 124, 137], "sionnart": 35, "snr": 202, "solomon": 77, "sourc": [100, 250], "space": 125, "spatial": [17, 20], "specif": 196, "squar": 166, "start": 248, "state": [16, 37, 66], "static": [6, 235], "steer": 5, "style": 244, "symbol": [126, 127, 131, 149], "synchron": [132, 152, 155, 232], "system": [67, 93], "target": [32, 34], "tdl": 28, "test": 244, "threshold": 162, "throughput": 108, "tile": 243, "time": [125, 236], "tool": [240, 241], "trajectori": 173, "transform": 122, "transmiss": [43, 50, 115, 116, 171, 230], "transmit": 120, "transmitt": 51, "trigger": [233, 234, 235, 236, 237, 238], "turbo": 80, "tutori": 264, "type": [173, 211, 212, 244], "uniform": 183, "unit": 244, "urban": [11, 12], "us": [253, 255], "usrp": [93, 94], "vector": 106, "visual": [68, 95, 222, 223], "waveform": [128, 147, 153, 172, 262], "wireless": 64, "zero": 133}})
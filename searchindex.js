Search.setIndex({"docnames": ["api/api", "api/beamforming", "api/beamforming.beamformer", "api/beamforming.capon", "api/beamforming.conventional", "api/bin", "api/bin.hermes", "api/channel", "api/channel.channel", "api/channel.cluster_delay_line_indoor_factory", "api/channel.cluster_delay_line_indoor_office", "api/channel.cluster_delay_line_rural_macrocells", "api/channel.cluster_delay_line_street_canyon", "api/channel.cluster_delay_line_urban_macrocells", "api/channel.cluster_delay_lines", "api/channel.multipath_fading_channel", "api/channel.multipath_fading_templates", "api/channel.quadriga", "api/channel.radar_channel", "api/core", "api/core.antennas", "api/core.channel_state_information", "api/core.definitions", "api/core.device", "api/core.executable", "api/core.factory", "api/core.monte_carlo", "api/core.pipeline", "api/core.random_node", "api/core.scenario", "api/core.signal_model", "api/fec", "api/fec.bch", "api/fec.block_interleaver", "api/fec.coding", "api/fec.crc", "api/fec.ldpc", "api/fec.polar", "api/fec.repetition", "api/fec.rs", "api/fec.rsc", "api/fec.scrambler", "api/fec.turbo", "api/hardware_loop", "api/hardware_loop.audio.device", "api/hardware_loop.audio.scenario", "api/hardware_loop.hardware_loop", "api/hardware_loop.physical_device", "api/hardware_loop.physical_device_dummy", "api/hardware_loop.scenario", "api/hardware_loop.usrp", "api/jcas", "api/jcas.matched_filtering", "api/modem", "api/modem.bits_source", "api/modem.evaluators", "api/modem.modem", "api/modem.symbols", "api/modem.waveform_correlation_synchronization", "api/modem.waveform_generator", "api/modem.waveform_generator_chirp_fsk", "api/modem.waveform_generator_ofdm", "api/modem.waveform_single_carrier", "api/precoding", "api/precoding.dft", "api/precoding.precoding", "api/precoding.ratio_combining", "api/precoding.single_carrier", "api/precoding.space_time_block_coding", "api/precoding.spatial_multiplexing", "api/precoding.stream_precoding", "api/precoding.symbol_precoding", "api/radar", "api/radar.cube", "api/radar.detection", "api/radar.evaluation", "api/radar.fmcw", "api/radar.radar", "api/simulation", "api/simulation.analog_digital_converter", "api/simulation.coupling", "api/simulation.coupling.impedance", "api/simulation.coupling.perfect", "api/simulation.isolation", "api/simulation.isolation.impedance", "api/simulation.isolation.perfect", "api/simulation.isolation.specific", "api/simulation.noise", "api/simulation.rf_chain", "api/simulation.rf_chain.leakage", "api/simulation.rf_chain.phase_noise", "api/simulation.rf_chain.power_amplifier", "api/simulation.simulated_device", "api/simulation.simulation", "api/tools", "api/tools.math", "api/tools.resampling", "api/tools.tile", "developer_hints", "examples/audio", "examples/chirp_fsk_lora", "examples/chirp_qam", "examples/examples", "examples/hardware_model", "examples/interference_ofdm_single_carrier", "examples/jcas", "examples/ofdm_5g", "examples/ofdm_single_carrier", "examples/operator_separation", "examples/uhd", "features", "getting_started", "index", "installation", "matlab", "notebooks/audio", "notebooks/beamformer", "notebooks/channel", "notebooks/evaluator", "notebooks/fec_coding", "notebooks/precoding", "notebooks/waveform", "references", "tutorials"], "filenames": ["api/api.rst", "api/beamforming.rst", "api/beamforming.beamformer.rst", "api/beamforming.capon.rst", "api/beamforming.conventional.rst", "api/bin.rst", "api/bin.hermes.rst", "api/channel.rst", "api/channel.channel.rst", "api/channel.cluster_delay_line_indoor_factory.rst", "api/channel.cluster_delay_line_indoor_office.rst", "api/channel.cluster_delay_line_rural_macrocells.rst", "api/channel.cluster_delay_line_street_canyon.rst", "api/channel.cluster_delay_line_urban_macrocells.rst", "api/channel.cluster_delay_lines.rst", "api/channel.multipath_fading_channel.rst", "api/channel.multipath_fading_templates.rst", "api/channel.quadriga.rst", "api/channel.radar_channel.rst", "api/core.rst", "api/core.antennas.rst", "api/core.channel_state_information.rst", "api/core.definitions.rst", "api/core.device.rst", "api/core.executable.rst", "api/core.factory.rst", "api/core.monte_carlo.rst", "api/core.pipeline.rst", "api/core.random_node.rst", "api/core.scenario.rst", "api/core.signal_model.rst", "api/fec.rst", "api/fec.bch.rst", "api/fec.block_interleaver.rst", "api/fec.coding.rst", "api/fec.crc.rst", "api/fec.ldpc.rst", "api/fec.polar.rst", "api/fec.repetition.rst", "api/fec.rs.rst", "api/fec.rsc.rst", "api/fec.scrambler.rst", "api/fec.turbo.rst", "api/hardware_loop.rst", "api/hardware_loop.audio.device.rst", "api/hardware_loop.audio.scenario.rst", "api/hardware_loop.hardware_loop.rst", "api/hardware_loop.physical_device.rst", "api/hardware_loop.physical_device_dummy.rst", "api/hardware_loop.scenario.rst", "api/hardware_loop.usrp.rst", "api/jcas.rst", "api/jcas.matched_filtering.rst", "api/modem.rst", "api/modem.bits_source.rst", "api/modem.evaluators.rst", "api/modem.modem.rst", "api/modem.symbols.rst", "api/modem.waveform_correlation_synchronization.rst", "api/modem.waveform_generator.rst", "api/modem.waveform_generator_chirp_fsk.rst", "api/modem.waveform_generator_ofdm.rst", "api/modem.waveform_single_carrier.rst", "api/precoding.rst", "api/precoding.dft.rst", "api/precoding.precoding.rst", "api/precoding.ratio_combining.rst", "api/precoding.single_carrier.rst", "api/precoding.space_time_block_coding.rst", "api/precoding.spatial_multiplexing.rst", "api/precoding.stream_precoding.rst", "api/precoding.symbol_precoding.rst", "api/radar.rst", "api/radar.cube.rst", "api/radar.detection.rst", "api/radar.evaluation.rst", "api/radar.fmcw.rst", "api/radar.radar.rst", "api/simulation.rst", "api/simulation.analog_digital_converter.rst", "api/simulation.coupling.rst", "api/simulation.coupling.impedance.rst", "api/simulation.coupling.perfect.rst", "api/simulation.isolation.rst", "api/simulation.isolation.impedance.rst", "api/simulation.isolation.perfect.rst", "api/simulation.isolation.specific.rst", "api/simulation.noise.rst", "api/simulation.rf_chain.rst", "api/simulation.rf_chain.leakage.rst", "api/simulation.rf_chain.phase_noise.rst", "api/simulation.rf_chain.power_amplifier.rst", "api/simulation.simulated_device.rst", "api/simulation.simulation.rst", "api/tools.rst", "api/tools.math.rst", "api/tools.resampling.rst", "api/tools.tile.rst", "developer_hints.rst", "examples/audio.rst", "examples/chirp_fsk_lora.rst", "examples/chirp_qam.rst", "examples/examples.rst", "examples/hardware_model.rst", "examples/interference_ofdm_single_carrier.rst", "examples/jcas.rst", "examples/ofdm_5g.rst", "examples/ofdm_single_carrier.rst", "examples/operator_separation.rst", "examples/uhd.rst", "features.rst", "getting_started.rst", "index.rst", "installation.rst", "matlab.rst", "notebooks/audio.ipynb", "notebooks/beamformer.ipynb", "notebooks/channel.ipynb", "notebooks/evaluator.ipynb", "notebooks/fec_coding.ipynb", "notebooks/precoding.ipynb", "notebooks/waveform.ipynb", "references.rst", "tutorials.rst"], "titles": ["HermesPy API", "Beamforming", "Beamformer", "Capon Beamformer", "Conventional Beamformer", "Entry Points", "Hermes Command Line Interface", "Channel Modeling", "Channel Modeling", "3GPP Cluster Delay Line Indoor Factory Model", "3GPP Cluster Delay Line Indoor Office Model", "3GPP Rural Macrocells Model", "3GPP Street Canyon (Urban Microcells) Model", "3GPP Urban Macrocells Model", "3GPP Cluster Delay Line Model", "Multipath Fading", "Multipath Fading Standard Templates", "Quadriga Channel Model", "Single-Target Radar Channel Modeling", "Core", "Antenna Configuration", "Channel State Information Model", "General Definitions", "Device Modeling", "Executable", "Serialization Factory", "PyMonte", "Pipeline", "Random Graph", "Wireless Scenario", "Signal Modeling", "Error Correction", "&lt;no title&gt;", "Interleaving", "Coding Pipeline", "Cyclic Redundancy Checks", "&lt;no title&gt;", "&lt;no title&gt;", "Repetition Coding", "&lt;no title&gt;", "&lt;no title&gt;", "Scrambling", "&lt;no title&gt;", "Hardware Loop", "Audio Device Binding", "Audio Device Scenario", "Hardware Loop", "Physical Devices", "Physical Device Dummy", "Physical Device Scenario", "UHD System", "JCAS", "Matched Filter JCAS", "Communication", "Bit Source", "Communication Evaluators", "Modem", "Communication Symbols", "Correlation-Based Waveform Synchronization", "Communication Waveform Base", "Chirp Frequency Shift Keying", "Orthogonal Frequency Division Multiplexing", "Filtered Single Carrier Waveforms", "Precoding", "Discrete Fourier Transform Precoding", "Precoding Configuration", "Maximum Ratio Combining", "Single Carrier Encoding", "Space-Time Block Coding", "Spatial Multiplexing", "Stream Precoding", "Symbol Precoding", "Sensing", "Radar Cube", "Radar Detection", "Radar Evaluation", "Frequency Modulated Continuous Waveform Radar", "Radar Device Operation", "Simulation", "Analog-to-Digital Converter", "Mutual Coupling", "Impedance Coupling", "Perfect Coupling", "Antenna Isolation Modeling", "Impedance Isolation", "Perfect Isolation", "Specific Isolation", "Noise Modeling", "Hardware Radio Frequency Chain Modeling", "Transmit-Receive Leakage Modeling", "Phase Noise Modeling", "Power Amplifier Modeling", "Simulated Devices", "Simulation", "Tools", "Math Tools", "Resampling Routines", "Tile Figures", "For Developers", "Audio Hardware Binding", "Chirp FSK LORA", "Chirp QAM", "Configuration Examples", "Hardware Modeling", "OFDM Interference", "JCAS", "OFDM 5G", "OFDM Single Carrier", "Operator Separation", "USRP Hardware Driver", "Features", "Getting Started", "HermesPy", "Installation", "Matlab", "Using Audio Equipment", "Implementing Beamformers", "Implementing Channels", "Implementing Evaluators", "Implementing FEC codings", "Implementing Precodings", "Implementing Communication Waveforms", "References", "Tutorials"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 23, 25, 26, 28, 29, 30, 33, 34, 35, 41, 44, 47, 48, 52, 53, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 90, 91, 92, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123], "section": [0, 18, 25, 26, 33, 34, 41, 58, 59, 60, 61, 62, 93, 98, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123], "describ": [0, 2, 6, 14, 15, 23, 33, 38, 41, 79, 91, 92, 111, 113, 117, 121], "all": [0, 2, 3, 4, 7, 8, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 29, 34, 38, 43, 49, 55, 56, 61, 72, 75, 78, 93, 111, 113, 114, 115, 116, 118, 119, 120, 121, 122], "part": [0, 59, 60, 61, 62, 79, 112], "applic": [0, 2, 50, 111, 116], "program": [0, 26, 111, 118, 120], "interfac": [0, 5, 17, 25, 102, 111, 112, 113, 114, 118, 119, 120], "consist": [0, 8, 15, 29, 31, 34, 43, 53, 72, 76, 111, 117, 118, 120], "self": [0, 18, 100, 105, 106, 107, 111, 116, 117, 118, 119, 120, 121], "titl": [0, 26, 30, 53, 54, 55, 57, 72, 73, 75, 97, 110, 111, 113, 115, 118, 120], "namespac": [0, 25], "featur": [0, 3, 4, 14, 25, 61, 65, 68, 71, 98, 111, 112, 113, 114, 116, 118, 119, 121], "multipl": [0, 15, 26, 29, 34, 53, 61, 65, 67, 68, 69, 71, 111, 112, 117, 118, 121], "sub": [0, 19, 25, 26, 33, 46, 61, 94, 104, 111], "modul": [0, 5, 6, 7, 14, 19, 25, 26, 31, 34, 41, 43, 51, 53, 55, 56, 59, 60, 61, 62, 65, 71, 72, 75, 78, 94, 97, 99, 100, 101, 104, 106, 107, 108, 109, 111, 112, 114, 115, 116, 117, 119, 120, 121, 122], "each": [0, 14, 15, 16, 17, 20, 23, 25, 26, 27, 29, 30, 46, 47, 49, 61, 62, 64, 65, 68, 76, 79, 88, 91, 93, 99, 100, 101, 104, 106, 107, 108, 109, 111, 117, 118, 119, 121, 123], "tackl": 0, "differ": [0, 15, 26, 30, 60, 61, 75, 100, 111, 115], "aspect": [0, 122], "signal": [0, 1, 2, 3, 4, 8, 15, 18, 19, 20, 22, 23, 29, 31, 44, 47, 48, 49, 52, 53, 56, 58, 59, 60, 61, 62, 65, 68, 70, 71, 72, 76, 77, 79, 80, 83, 87, 88, 89, 90, 91, 92, 93, 96, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 116, 118, 119, 120, 121, 122], "process": [0, 1, 2, 23, 25, 26, 29, 31, 33, 34, 47, 49, 55, 56, 65, 71, 73, 74, 75, 76, 77, 91, 101, 111, 113, 116, 118, 119, 120, 121, 122], "wireless": [0, 7, 8, 15, 19, 21, 41, 53, 56, 59, 61, 62, 63, 65, 71, 102, 111, 112, 117, 118, 122], "system": [0, 2, 3, 4, 5, 6, 8, 15, 20, 23, 25, 26, 27, 29, 41, 43, 45, 46, 54, 59, 74, 88, 91, 92, 93, 97, 99, 102, 103, 104, 109, 110, 111, 113, 114, 115, 117, 118, 122], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 38, 41, 43, 44, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 83, 87, 88, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123], "subpackag": 0, "mai": [0, 2, 8, 15, 20, 21, 23, 25, 26, 34, 46, 47, 48, 52, 56, 59, 61, 64, 65, 66, 67, 68, 69, 70, 71, 79, 91, 92, 98, 111, 112, 113, 115, 116, 119, 120, 121, 123], "have": [0, 8, 15, 18, 25, 26, 61, 79, 100, 101, 111, 113, 115, 121], "interdepend": [0, 19], "gener": [0, 2, 3, 4, 8, 14, 15, 16, 17, 19, 20, 21, 23, 25, 26, 27, 28, 29, 31, 33, 34, 41, 43, 46, 47, 48, 49, 50, 52, 54, 55, 56, 58, 59, 60, 61, 62, 65, 68, 70, 71, 74, 75, 76, 77, 79, 88, 90, 91, 93, 96, 98, 99, 100, 108, 109, 111, 115, 116, 117, 118, 119, 120, 121, 122], "root": [0, 14, 16, 28, 62, 75, 90, 95, 98, 106, 107, 110, 111, 115], "depend": [0, 8, 15, 18, 20, 21, 23, 26, 28, 77, 79, 88, 91, 98, 111, 113, 122], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 90, 91, 92, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123], "provid": [0, 1, 2, 7, 8, 15, 19, 25, 26, 30, 31, 34, 43, 51, 53, 57, 62, 63, 72, 78, 93, 96, 98, 102, 110, 111, 113, 114, 117, 122, 123], "core": [0, 8, 14, 15, 17, 18, 26, 27, 29, 48, 56, 110, 111, 117, 118, 121], "packag": [0, 1, 111, 113, 115, 118], "channel": [0, 10, 11, 12, 13, 14, 15, 16, 19, 20, 23, 25, 33, 34, 35, 38, 41, 44, 47, 48, 52, 56, 57, 59, 61, 62, 63, 65, 71, 75, 77, 78, 92, 93, 99, 100, 101, 104, 105, 106, 107, 108, 109, 112, 113, 115, 116, 118, 119, 120, 121, 122, 123], "model": [0, 2, 15, 16, 19, 20, 26, 29, 34, 47, 48, 49, 52, 56, 59, 60, 61, 62, 76, 77, 78, 79, 80, 81, 82, 85, 92, 93, 98, 100, 101, 102, 104, 105, 106, 107, 108, 111, 113, 117, 118, 120, 121, 122], "error": [0, 8, 20, 24, 25, 26, 33, 35, 55, 56, 75, 88, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 117, 118, 119, 122], "correct": [0, 35, 55, 56, 111, 112, 119, 122], "hardwar": [0, 44, 47, 48, 78, 89, 91, 92, 102, 108, 111, 112, 115, 118, 121], "loop": [0, 111, 115, 118], "jca": [0, 102, 110], "commun": [0, 15, 31, 33, 34, 44, 51, 52, 54, 56, 58, 60, 61, 62, 65, 75, 91, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 117, 119, 120, 122, 123], "precod": [0, 1, 2, 53, 56, 59, 60, 61, 66, 67, 68, 69, 104, 106, 107, 111, 118, 123], "beamform": [0, 77, 118, 123], "sens": [0, 1, 51, 52, 76, 77, 105, 111, 112, 117], "simul": [0, 6, 15, 19, 24, 25, 26, 27, 29, 46, 55, 58, 59, 60, 61, 62, 75, 76, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122], "entri": [0, 6, 23, 24, 26, 34, 58, 59, 61, 92], "point": [0, 1, 2, 3, 4, 6, 18, 20, 24, 26, 27, 29, 30, 46, 48, 55, 72, 74, 75, 77, 79, 91, 102, 111, 113, 114], "tool": [0, 62, 98, 112, 113, 114, 118], "hermespi": [1, 5, 6, 14, 19, 23, 24, 25, 26, 27, 29, 30, 43, 44, 46, 48, 56, 63, 77, 78, 93, 98, 102, 108, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "routin": [1, 6, 8, 10, 11, 12, 13, 14, 15, 17, 18, 24, 25, 26, 30, 33, 34, 35, 38, 41, 47, 54, 58, 59, 60, 61, 62, 65, 71, 94, 98, 107, 111, 114, 115, 116, 117, 118, 120, 121], "spatial": [1, 3, 7, 20, 63, 92, 104, 105, 106, 107, 110, 111, 116, 122], "mimo": [1, 2, 8, 15, 56, 57, 70, 106, 107, 118, 121, 122], "antenna": [1, 3, 4, 8, 15, 16, 18, 19, 23, 44, 48, 56, 65, 68, 71, 78, 80, 81, 82, 92, 93, 100, 106, 107, 111, 112, 116, 117, 118, 120, 122], "stream": [1, 2, 3, 4, 8, 21, 25, 30, 34, 44, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 80, 83, 93, 108, 111, 116, 118, 120, 121], "dure": [1, 2, 3, 4, 8, 10, 11, 12, 13, 14, 16, 18, 20, 21, 24, 25, 26, 27, 30, 33, 34, 35, 38, 41, 44, 46, 47, 50, 52, 56, 59, 61, 62, 65, 69, 70, 71, 76, 77, 79, 80, 87, 92, 93, 99, 106, 107, 109, 111, 113, 117, 118, 119, 120, 121], "transmiss": [1, 2, 7, 19, 20, 21, 23, 29, 33, 34, 35, 38, 41, 44, 47, 48, 52, 53, 56, 64, 65, 66, 67, 69, 70, 71, 77, 80, 88, 89, 100, 104, 108, 112, 115, 120, 121], "allow": [1, 8, 27, 29, 30, 47, 48, 59, 62, 102, 108, 119], "steer": [1, 2, 3, 4, 116], "power": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 18, 22, 23, 30, 47, 48, 53, 59, 60, 61, 62, 72, 73, 74, 76, 77, 78, 87, 92, 93, 94, 95, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 116, 118, 121, 122], "emit": [1, 3, 4, 8, 20, 23, 56, 77, 93, 99, 100, 106, 107, 108, 109, 111, 116], "an": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 23, 24, 25, 26, 27, 29, 30, 33, 34, 41, 44, 46, 47, 50, 51, 52, 55, 56, 59, 61, 64, 65, 66, 67, 68, 69, 71, 75, 76, 79, 88, 91, 92, 93, 95, 96, 101, 103, 104, 105, 106, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122], "arrai": [1, 2, 3, 4, 8, 14, 15, 16, 17, 18, 20, 23, 25, 26, 30, 41, 44, 48, 52, 55, 56, 57, 60, 75, 81, 82, 92, 95, 106, 107, 110, 116, 120], "toward": [1, 2, 3, 4, 20, 98, 116], "desir": [1, 75, 79, 95], "direct": [1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 20, 26, 61, 97, 116], "within": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 28, 29, 30, 33, 34, 35, 38, 41, 44, 46, 47, 56, 57, 59, 60, 61, 62, 65, 74, 76, 90, 91, 92, 93, 98, 100, 101, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121], "refer": [1, 3, 6, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 26, 33, 34, 35, 38, 41, 45, 46, 47, 50, 53, 55, 56, 57, 59, 60, 61, 62, 75, 91, 98, 101, 104, 105, 106, 107, 110, 111, 117], "focu": [1, 2, 3, 4, 111, 116], "recept": [1, 2, 19, 20, 23, 29, 33, 34, 35, 38, 41, 44, 47, 49, 53, 56, 61, 64, 65, 66, 67, 68, 69, 70, 71, 77, 80, 88, 89, 93, 111, 115, 120], "invers": [1, 3, 34, 62, 111, 116, 120], "can": [1, 2, 5, 6, 15, 23, 25, 26, 29, 34, 38, 61, 79, 97, 98, 102, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121], "us": [1, 2, 8, 15, 16, 17, 20, 23, 25, 26, 28, 29, 41, 47, 48, 49, 50, 54, 55, 56, 59, 60, 61, 62, 65, 68, 75, 76, 79, 88, 90, 93, 95, 97, 98, 104, 105, 106, 110, 111, 112, 113, 114, 116, 118, 119, 121, 123], "well": [1, 14, 31, 34, 43, 53, 64, 66, 67, 68, 69, 71, 72, 98, 105, 111], "order": [1, 6, 26, 30, 33, 34, 35, 41, 59, 60, 61, 62, 65, 71, 92, 98, 99, 100, 102, 104, 106, 107, 108, 109, 111, 113, 118, 121, 123], "receiv": [1, 2, 3, 4, 7, 8, 15, 18, 19, 20, 21, 23, 29, 33, 34, 35, 38, 41, 43, 44, 47, 48, 49, 51, 52, 53, 55, 56, 57, 58, 59, 61, 62, 65, 72, 75, 76, 77, 78, 80, 83, 88, 92, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 115, 116, 117, 118, 120, 121, 122], "By": [1, 2, 6, 15, 21, 23, 26, 28, 30, 34, 44, 48, 57, 59, 61, 62, 79, 90, 91, 92, 93, 111], "focus": [1, 2, 3, 4, 116], "dictionari": [1, 25, 116], "angl": [1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 30, 74, 91, 116], "interest": [1, 2, 3, 4, 20, 26, 112, 114, 116], "algorithm": [1, 2, 26, 35, 58, 61, 65, 70, 71, 74, 77, 105, 112, 116, 119, 122], "ma": 1, "creat": [1, 2, 6, 8, 14, 15, 17, 18, 20, 24, 25, 26, 27, 29, 30, 45, 46, 48, 50, 55, 57, 65, 68, 73, 75, 79, 91, 93, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121], "imag": [1, 73, 116], "": [1, 2, 3, 4, 6, 8, 14, 15, 18, 20, 21, 23, 25, 26, 29, 30, 44, 47, 48, 50, 52, 55, 56, 57, 60, 62, 73, 74, 75, 76, 77, 91, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 114, 115, 116, 118, 119, 120, 121, 122], "environ": [1, 6, 24, 26, 77, 98, 102, 111, 113, 114, 118], "probe": [1, 2, 3, 4], "focusmod": [1, 2], "beamformerbas": [1, 2], "transmitbeamform": [1, 2, 4, 77], "receivebeamform": [1, 2, 3, 4, 77, 116], "convent": [1, 2, 110, 122], "conventionalbeamform": [1, 4, 116], "capon": [1, 4, 110, 116, 122], "caponbeamform": [1, 3, 116], "split": [2, 19, 34], "prototyp": [2, 91, 116], "class": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 111, 116, 117, 118, 119, 120, 121, 122], "oper": [2, 4, 19, 23, 24, 26, 29, 31, 33, 34, 35, 38, 41, 44, 47, 48, 50, 51, 52, 56, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 79, 92, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121], "respect": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 21, 25, 26, 29, 33, 34, 35, 38, 41, 47, 57, 59, 61, 62, 65, 71, 83, 91, 111, 112, 114, 115, 116, 117, 119, 120], "thei": [2, 5, 15, 35, 56, 76, 111, 114, 115, 117, 118, 121], "ar": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 21, 24, 25, 26, 28, 30, 34, 38, 44, 54, 55, 56, 59, 60, 61, 62, 65, 68, 69, 75, 76, 79, 90, 91, 92, 93, 97, 98, 102, 104, 105, 106, 107, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121], "both": [2, 8, 15, 18, 23, 30, 41, 51, 56, 61, 70, 79, 98, 100, 105, 111, 112, 117, 118, 120], "deriv": [2, 26, 59], "from": [2, 3, 5, 6, 8, 14, 15, 17, 18, 20, 21, 23, 25, 26, 27, 29, 30, 33, 34, 46, 47, 48, 52, 54, 55, 56, 57, 59, 61, 65, 68, 74, 75, 77, 79, 80, 88, 91, 92, 93, 95, 98, 105, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123], "base": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 98, 105, 111, 112, 113, 117, 120, 121], "due": [2, 18, 23, 96, 112, 122], "fact": 2, "some": [2, 98, 111, 113, 120], "exclus": [2, 56], "case": [2, 3, 26, 47, 75, 91, 111, 117, 118], "should": [2, 6, 8, 15, 26, 30, 34, 47, 55, 59, 79, 87, 93, 96, 98, 111, 114, 117], "inherit": [2, 25, 34, 54, 55, 59, 75, 91, 116, 117, 119, 120], "exampl": [2, 6, 8, 55, 65, 69, 75, 98, 99, 100, 101, 103, 104, 106, 109, 110, 111, 114, 116, 123], "implement": [2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 15, 18, 24, 25, 26, 31, 34, 38, 41, 48, 51, 53, 54, 55, 58, 59, 61, 62, 70, 72, 75, 79, 80, 88, 91, 95, 98, 110, 111, 113, 114, 122, 123], "valu": [2, 14, 16, 20, 21, 22, 23, 24, 25, 26, 29, 30, 44, 53, 55, 57, 59, 60, 61, 62, 75, 79, 91, 95, 115, 121], "serializableenum": [2, 16, 19, 25, 61, 79], "mode": [2, 6, 21, 27, 29, 48, 93, 112], "spheric": [2, 3, 4, 18, 20, 74, 116], "0": [2, 3, 8, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 29, 30, 33, 38, 41, 47, 50, 52, 56, 57, 58, 60, 61, 62, 76, 77, 79, 87, 91, 92, 93, 95, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122], "coordin": [2, 3, 4, 18, 20, 23, 26, 74, 92, 95, 116], "e": [2, 7, 8, 14, 15, 16, 17, 18, 20, 21, 23, 26, 30, 33, 34, 41, 47, 59, 60, 61, 62, 75, 76, 79, 91, 93, 98, 99, 100, 104, 105, 106, 107, 109, 113, 122], "azimuth": [2, 3, 4, 9, 10, 11, 12, 13, 14, 18, 20, 74, 116], "zenith": [2, 3, 4, 9, 10, 11, 12, 13, 14, 18, 20, 74, 116], "radian": [2, 3, 4, 15, 18, 20, 74, 88], "horizont": [2, 20], "1": [2, 3, 4, 8, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 29, 33, 34, 38, 41, 44, 52, 56, 57, 59, 60, 61, 62, 76, 79, 88, 91, 92, 95, 96, 99, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122], "elev": [2, 4, 20], "cartesian": [2, 20, 23, 47, 74, 92], "2": [2, 4, 14, 15, 16, 18, 20, 21, 22, 24, 26, 29, 41, 57, 59, 60, 61, 62, 68, 79, 91, 95, 97, 99, 100, 103, 104, 105, 106, 107, 108, 109, 111, 116, 117, 118, 119, 120, 121, 122], "xyz": 2, "m": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 18, 20, 23, 26, 30, 33, 38, 52, 61, 74, 76, 77, 91, 92, 95, 96, 98, 100, 105, 108, 113, 116, 122], "devic": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 27, 29, 43, 51, 52, 53, 56, 72, 78, 80, 81, 82, 83, 85, 86, 90, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121], "3": [2, 14, 16, 18, 20, 21, 22, 23, 24, 38, 41, 61, 68, 92, 97, 99, 100, 101, 103, 104, 106, 107, 108, 109, 111, 113, 114, 116, 118, 119, 121, 122], "consid": [2, 15, 18, 20, 21, 23, 26, 28, 34, 47, 48, 52, 55, 56, 59, 60, 61, 62, 65, 75, 77, 79, 80, 83, 90, 92, 93, 100, 101, 103, 106, 107, 111, 117, 120], "peer": [2, 118, 122], "yaml_tag": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25, 31, 33, 34, 35, 38, 41, 43, 44, 45, 46, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93], "option": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 111], "str": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 24, 25, 26, 29, 30, 33, 34, 35, 38, 41, 44, 45, 46, 47, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 118], "yaml": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25, 33, 34, 35, 38, 41, 44, 45, 46, 50, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93, 102, 111, 112], "serial": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 30, 33, 34, 35, 38, 41, 44, 45, 46, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93], "tag": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 25, 33, 34, 35, 38, 41, 44, 45, 46, 50, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 81, 82, 85, 86, 87, 88, 90, 91, 92, 93], "property_blacklist": [2, 7, 16, 20, 25, 43, 44, 50, 51, 52, 53, 61, 62, 72, 77, 78, 79, 87, 92], "set": [2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 24, 25, 26, 28, 29, 44, 50, 52, 61, 62, 77, 79, 87, 91, 92, 93, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 117, 121], "properti": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 46, 47, 48, 50, 52, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 77, 79, 80, 81, 83, 86, 87, 88, 91, 92, 93, 111, 116, 118, 119, 120, 121], "ignor": [2, 16, 20, 25, 34, 44, 50, 52, 59, 60, 61, 62, 77, 79, 87, 92, 99, 106, 109], "serialized_attribut": [2, 7, 8, 15, 16, 18, 25, 53, 61, 78, 79, 91, 92], "object": [2, 8, 15, 16, 17, 18, 20, 21, 23, 25, 26, 28, 30, 41, 46, 47, 48, 55, 56, 57, 60, 61, 64, 65, 67, 68, 69, 70, 71, 73, 74, 75, 77, 79, 88, 91, 92, 93, 105, 111, 114, 118, 121], "attribut": [2, 8, 15, 16, 18, 25, 26, 46, 61, 79, 91], "none": [2, 4, 6, 7, 8, 14, 15, 16, 17, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 41, 44, 46, 47, 48, 49, 50, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 97, 116, 118], "abc": [2, 15, 23, 24, 26, 29, 34, 49, 54, 55, 56, 59, 61, 62, 65, 70, 71, 75, 80, 83, 89, 90], "beam": 2, "arg": [2, 6, 17, 23, 25, 26, 27, 29, 45, 46, 47, 48, 50, 56, 58, 60, 61, 62, 74, 92, 93, 116], "attach": [2, 15, 20, 23, 34, 48, 56, 59, 60, 61, 62, 65, 70, 71, 78, 92], "default": [2, 3, 6, 8, 15, 17, 18, 21, 23, 24, 25, 26, 27, 28, 29, 30, 34, 41, 44, 46, 47, 48, 56, 57, 59, 61, 62, 65, 73, 79, 88, 90, 91, 92, 93, 95, 111, 117, 121], "float": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 26, 29, 30, 33, 34, 44, 47, 48, 50, 52, 55, 56, 58, 59, 60, 61, 62, 65, 74, 75, 76, 77, 79, 80, 83, 87, 88, 91, 92, 93, 95, 96, 116, 117, 118, 121], "assign": [2, 26, 38, 111, 115, 121], "return": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 116, 117, 118, 119, 120, 121], "type": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 83, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 99, 104, 105, 106, 107, 109, 111, 118, 121], "handl": [2, 8, 15, 16, 17, 20, 23, 24, 25, 26, 27, 29, 34, 45, 46, 48, 50, 55, 56, 57, 59, 61, 62, 65, 68, 75, 79, 80, 83, 88, 92, 93], "transmitstreamencod": [2, 63, 70], "transmitt": [2, 7, 8, 15, 18, 19, 23, 29, 41, 47, 52, 56, 65, 77, 88, 93, 99, 100, 106, 107, 108, 109, 111, 117], "abstract": [2, 14, 15, 20, 23, 24, 25, 26, 34, 47, 54, 56, 59, 61, 65, 70, 71, 74, 77, 87, 89, 90, 111, 116, 119, 120, 121], "num_transmit_input_stream": [2, 4, 70], "int": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 46, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 75, 76, 79, 90, 93, 96, 116, 117, 119, 120, 121], "number": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 46, 47, 48, 49, 50, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 79, 80, 83, 90, 92, 93, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 116, 117, 118, 120, 121], "input": [2, 3, 4, 8, 15, 33, 34, 35, 38, 41, 46, 64, 65, 66, 67, 68, 69, 70, 78, 79, 88, 91, 95, 96, 115, 119, 120, 122], "requir": [2, 3, 4, 8, 14, 23, 24, 26, 30, 33, 34, 41, 43, 46, 47, 52, 54, 56, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 76, 77, 92, 97, 98, 99, 109, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122], "num_transmit_output_stream": [2, 4, 70], "output": [2, 3, 4, 6, 8, 15, 17, 23, 24, 26, 33, 34, 35, 38, 41, 55, 62, 64, 65, 66, 67, 68, 69, 70, 75, 79, 93, 96, 111, 115, 116, 117, 118, 119, 120, 121, 123], "num_transmit_focus_angl": [2, 4], "transmit": [2, 4, 8, 15, 18, 20, 21, 23, 29, 30, 33, 34, 35, 38, 41, 43, 44, 47, 48, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 68, 72, 76, 77, 78, 80, 83, 88, 91, 92, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 121, 122], "encode_stream": [2, 70], "encod": [2, 4, 25, 31, 33, 34, 35, 38, 41, 56, 61, 63, 64, 65, 66, 68, 69, 70, 71, 100, 101, 106, 107, 108, 110, 111, 119, 120, 121], "modifi": [2, 64, 66, 67, 68, 69, 70, 71, 111, 115, 116, 117, 118, 119, 120, 121], "paramet": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 38, 41, 44, 45, 46, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 117, 120], "access": [2, 8, 15, 16, 18, 20, 21, 26, 41, 56, 57, 59, 60, 61, 62, 65, 71, 88, 93, 112, 117, 122, 123], "configur": [2, 6, 8, 14, 15, 16, 18, 19, 23, 24, 25, 26, 29, 33, 34, 44, 46, 49, 53, 55, 56, 58, 59, 61, 62, 63, 70, 71, 75, 77, 80, 81, 82, 83, 85, 88, 92, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121], "rais": [2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 29, 30, 33, 34, 35, 38, 41, 44, 46, 47, 48, 50, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 74, 76, 77, 79, 80, 83, 87, 88, 91, 92, 93, 110, 111, 115, 117, 118], "runtimeerror": [2, 8, 15, 18, 23, 25, 27, 29, 30, 34, 48, 58, 59, 61, 65, 93, 117, 118], "If": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 29, 30, 33, 34, 35, 38, 41, 44, 46, 47, 48, 50, 52, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 74, 75, 76, 77, 79, 80, 83, 87, 88, 91, 92, 93, 97, 111, 113, 115], "current": [2, 5, 6, 7, 8, 15, 18, 21, 23, 29, 30, 47, 51, 52, 54, 55, 56, 59, 61, 62, 65, 68, 75, 77, 79, 92, 102, 111, 112, 118], "transmit_focu": 2, "tupl": [2, 8, 18, 20, 23, 25, 26, 46, 59, 61, 66, 91, 97, 121], "ndarrai": [2, 3, 4, 8, 14, 15, 16, 17, 18, 20, 21, 23, 26, 30, 33, 34, 35, 38, 41, 44, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 73, 74, 75, 76, 77, 79, 81, 86, 88, 91, 92, 93, 95, 96, 116, 117, 118, 119, 121], "numpi": [2, 3, 4, 15, 16, 18, 20, 21, 23, 26, 30, 33, 34, 35, 38, 41, 48, 54, 55, 56, 57, 61, 64, 75, 92, 116, 117, 118, 119, 120, 121], "certain": [2, 20, 34, 122], "target": [2, 7, 20, 75, 76, 105, 110, 112], "np": [2, 3, 4, 8, 14, 15, 17, 18, 20, 21, 23, 26, 30, 33, 34, 35, 38, 41, 44, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 74, 75, 76, 77, 79, 88, 91, 92, 93, 95, 96, 116, 117, 118, 119, 120, 121], "sampl": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 26, 30, 44, 46, 47, 48, 50, 52, 56, 58, 59, 60, 61, 62, 70, 73, 76, 77, 79, 91, 92, 93, 96, 100, 101, 103, 104, 105, 106, 107, 108, 111, 116, 117, 118, 119, 120, 121], "receivestreamdecod": [2, 63, 70], "characteris": 2, "its": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 20, 23, 25, 26, 34, 41, 48, 62, 77, 92, 105, 111, 112, 113, 116, 120], "n": [2, 3, 4, 9, 10, 11, 12, 13, 14, 18, 34, 35, 41, 59, 60, 61, 62, 96, 106, 108, 111, 113, 116, 119], "result": [2, 6, 20, 24, 25, 26, 27, 30, 33, 34, 55, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 74, 75, 77, 79, 80, 91, 93, 98, 111, 112, 113, 117, 118, 119, 120, 121], "support": [2, 5, 7, 8, 15, 16, 18, 22, 23, 59, 60, 61, 64, 66, 67, 68, 69, 71, 77, 79, 94, 95, 111, 113, 114, 117], "f": [2, 3, 4, 20, 91, 118, 119, 121, 122], "matrix": [2, 3, 4, 8, 15, 16, 20, 21, 23, 25, 26, 30, 57, 88, 92, 93, 96, 116], "t": [2, 3, 4, 6, 8, 14, 15, 17, 18, 20, 23, 30, 57, 61, 68, 91, 100, 116, 120, 122], "baseband": [2, 48, 76, 92, 116, 121], "mathbf": [2, 3, 4, 20, 33, 38, 116, 119], "x": [2, 3, 4, 8, 14, 15, 17, 18, 20, 21, 23, 26, 33, 38, 58, 59, 60, 61, 62, 79, 88, 91, 95, 97, 99, 104, 106, 107, 109, 117, 118, 119, 120, 121], "mathbb": [2, 3, 4, 20, 26, 91, 116], "c": [2, 3, 4, 7, 15, 16, 20, 30, 61, 91, 98, 113, 114, 116, 118, 122], "time": [2, 3, 4, 14, 15, 18, 20, 21, 26, 30, 38, 47, 52, 56, 57, 58, 59, 60, 61, 62, 63, 91, 99, 100, 101, 104, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122], "y": [2, 3, 4, 20, 33, 38, 97, 116], "mathcal": [2, 3, 4], "b": [2, 3, 4, 7, 15, 16, 95, 100, 122], "lbrace": [2, 3, 4, 33, 38, 91], "rbrace": [2, 3, 4, 33, 38, 91], "quad": 2, "text": [2, 25, 91, 102], "function": [2, 7, 19, 26, 27, 29, 43, 48, 51, 53, 61, 63, 72, 95, 110, 111, 114, 115, 119, 121], "compress": [2, 118], "while": [2, 23, 34, 47, 77, 111, 114, 118, 120], "num_receive_input_stream": [2, 3, 4, 70, 116], "dimens": [2, 3, 4, 18, 19, 20, 21, 23, 26, 41, 46, 48, 55, 57, 61, 75, 92, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111, 116, 117, 118, 119, 120, 121], "num_receive_output_stream": [2, 3, 4, 70, 116], "num_receive_focus_angl": [2, 3, 4, 116], "decode_stream": [2, 70], "recepept": [2, 70], "decod": [2, 3, 4, 25, 31, 33, 34, 35, 38, 41, 56, 64, 65, 66, 67, 68, 69, 70, 71, 111, 116, 119, 120, 122], "_decod": [2, 3, 4, 116], "carrier_frequ": [2, 3, 4, 18, 20, 23, 30, 43, 44, 48, 50, 78, 92, 100, 104, 105, 106, 107, 108, 109, 116, 119], "method": [2, 3, 4, 24, 25, 26, 34, 61, 62, 95, 113, 116, 117, 118, 120, 121, 122], "call": [2, 3, 4, 26, 91, 111, 114, 115, 116, 117, 118, 120], "subroutin": [2, 3, 4, 91, 116], "first": [2, 3, 4, 15, 23, 26, 44, 48, 57, 58, 59, 61, 62, 92, 93, 98, 104, 108, 109, 115, 117, 119], "being": [2, 3, 4, 6, 23, 27, 33, 46, 62, 111, 114, 116, 118], "second": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 23, 26, 29, 30, 47, 48, 52, 55, 56, 57, 59, 60, 61, 62, 76, 77, 91, 92, 93, 96, 100, 104, 106, 107, 108, 111, 116, 117, 118, 119, 120, 121, 122], "assum": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 23, 26, 48, 57, 61, 62, 92, 93, 105, 106, 107, 111, 114, 116, 119], "carrier": [2, 3, 4, 23, 30, 44, 50, 53, 59, 61, 63, 92, 100, 102, 103, 104, 105, 106, 110, 111, 115, 116, 122], "central": [2, 3, 4, 23, 26, 30, 44, 50, 92], "frequenc": [2, 3, 4, 8, 14, 15, 16, 20, 21, 23, 30, 44, 48, 50, 53, 59, 62, 68, 72, 78, 91, 92, 93, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 122], "f_": [2, 3, 4, 20], "mathrm": [2, 3, 4, 9, 10, 11, 12, 13, 14, 20, 26, 34, 35, 38, 44, 76, 77, 91, 115, 116], "arriv": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 20, 48, 92, 93], "A": [2, 3, 4, 7, 8, 15, 16, 17, 20, 21, 23, 25, 26, 29, 30, 33, 34, 35, 38, 41, 45, 46, 47, 50, 52, 54, 56, 57, 59, 61, 62, 64, 65, 68, 71, 73, 74, 75, 79, 88, 91, 92, 93, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 109, 111, 122, 123], "three": [2, 3, 4, 20, 23, 47, 57, 74, 92, 113, 116, 120], "dimension": [2, 3, 4, 8, 14, 15, 16, 17, 18, 20, 23, 47, 48, 57, 65, 67, 69, 71, 74, 92, 117], "repres": [2, 3, 4, 15, 16, 17, 18, 20, 23, 25, 26, 33, 34, 35, 38, 41, 44, 46, 47, 54, 55, 56, 57, 61, 65, 68, 71, 73, 75, 79, 91, 92, 93, 99, 104, 106, 107, 109, 111, 118, 119, 120, 121], "magnitud": [2, 3, 4], "third": [2, 3, 4, 117], "contain": [2, 3, 4, 5, 6, 15, 20, 21, 25, 26, 30, 34, 41, 48, 56, 59, 60, 61, 62, 74, 75, 92, 93, 94, 111, 113, 122], "amount": [2, 3, 4, 20, 111], "receive_focu": 2, "focus_point": 2, "focus_mod": 2, "two": [2, 4, 9, 10, 11, 12, 13, 14, 15, 16, 48, 54, 55, 56, 57, 59, 60, 75, 81, 82, 91, 92, 93, 108, 111, 112, 115, 118, 120], "expect": [2, 25, 26, 34, 47, 54, 59, 115, 117, 120], "request": [2, 21, 23, 34, 111, 112], "floatingerror": [2, 19, 23, 47, 52, 56, 77, 80, 83], "yet": [2, 18, 23, 56, 118], "specifi": [2, 6, 14, 15, 16, 17, 20, 23, 25, 26, 28, 47, 61, 77, 79, 80, 83, 93, 97, 106, 107, 113, 116, 120], "doe": [2, 9, 10, 11, 12, 13, 14, 23, 25, 26, 27, 29, 33, 34, 35, 38, 41, 48, 77, 80, 83, 111, 114], "match": [2, 26, 34, 51, 57, 80, 83, 110], "probe_focus_point": 2, "represnt": 2, "index": [2, 23, 26, 38, 65, 93, 98, 113, 118], "valueerror": [2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 29, 30, 33, 34, 35, 38, 41, 44, 46, 47, 48, 50, 52, 56, 57, 58, 60, 61, 62, 65, 74, 76, 77, 79, 80, 83, 87, 88, 91, 92, 93], "On": [2, 16, 23, 26, 44, 50, 62, 74, 92, 93, 117, 122], "invalid": [2, 16, 21, 26], "argument": [2, 16, 20, 26, 30, 44, 46, 60, 91], "plot_receive_pattern": 2, "visual": [2, 20, 21, 26, 30, 55, 73, 75, 79, 91, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 115, 118, 119], "instanc": [2, 8, 16, 17, 20, 23, 24, 25, 26, 30, 34, 46, 54, 55, 56, 61, 62, 65, 68, 75, 79, 88, 91, 93, 111, 114, 117], "characterist": [2, 3, 4, 20, 62, 75, 79, 91, 110, 116], "imping": [2, 8, 20, 57, 93, 116], "which": [2, 8, 14, 15, 17, 18, 21, 23, 24, 25, 26, 30, 33, 34, 44, 46, 47, 48, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 75, 79, 87, 90, 91, 92, 93, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 111, 116, 119, 120], "plot": [2, 6, 20, 21, 26, 30, 46, 53, 55, 57, 62, 72, 73, 75, 78, 79, 91, 93, 111, 115, 116, 117, 118, 119, 120, 121], "sourc": [2, 3, 4, 6, 20, 53, 56, 62, 79, 91, 98, 111, 112, 114, 116, 122], "theta": [2, 3, 4, 20, 116], "phi": [2, 3, 4, 20, 91, 116], "figur": [2, 20, 26, 30, 47, 55, 57, 62, 73, 75, 79, 91, 94, 118], "matplotlib": [2, 20, 24, 26, 30, 57, 62, 75, 79, 91, 97, 111, 117, 118, 120, 121], "classmethod": [2, 16, 17, 20, 21, 23, 25, 26, 30, 46, 56, 57, 61, 65, 68, 74, 79, 88, 93], "plotreceivepattern": [2, 116], "array_topologi": 2, "sensor": [2, 3, 4, 18, 20, 23, 92, 116], "topologi": [2, 20, 23, 44, 50, 78, 92], "8": [2, 3, 58, 60, 61, 62, 100, 104, 111, 115, 117, 120, 121, 122], "uniform": [2, 20, 59, 62, 79, 106, 107], "load": [3, 25, 114], "kwarg": [3, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 23, 27, 29, 30, 44, 45, 46, 47, 48, 50, 52, 56, 58, 60, 61, 62, 91, 92, 93, 97, 116], "serializ": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 25, 26, 33, 34, 35, 38, 41, 44, 45, 46, 50, 52, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 79, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93], "also": [3, 4, 8, 18, 48, 61, 64, 91, 92, 101, 104, 111, 113, 116], "minimum": [3, 8, 23, 26, 61, 62, 100, 101, 103, 104, 105, 106, 107, 108, 111, 116], "varianc": [3, 47, 87, 116], "distortionless": [3, 91, 116], "respons": [3, 4, 8, 14, 15, 17, 18, 20, 21, 79, 110, 115, 116, 117], "mvdr": [3, 116], "estim": [3, 4, 18, 23, 26, 47, 52, 56, 57, 59, 60, 61, 62, 72, 75, 76, 77, 99, 105, 106, 107, 109, 110, 111, 116, 117, 118, 120, 122], "hat": [3, 4, 116], "p": [3, 4, 15, 26, 41, 116, 122], "where": [3, 4, 8, 14, 15, 17, 18, 20, 23, 26, 29, 30, 34, 48, 61, 91, 92, 96, 111, 116], "let": [3, 4, 33, 38, 44, 111, 116, 118, 119, 120, 121], "discret": [3, 4, 21, 30, 59, 60, 61, 62, 63, 110, 111, 116], "acquir": [3, 4, 116], "arrari": [3, 4, 116], "r": [3, 20, 26, 33, 34, 41, 91, 106, 111, 116, 119, 122], "left": [3, 20, 26, 33, 34, 38, 91, 111], "mathsf": [3, 4, 116], "h": [3, 4, 6, 20, 26, 97, 116, 122], "lambda": 3, "right": [3, 20, 26, 33, 34, 38, 75, 91, 111, 118, 120], "correl": [3, 7, 15, 16, 53, 60, 61, 62, 100, 116, 122], "factor": [3, 9, 10, 11, 12, 13, 14, 15, 20, 59, 62, 91, 100, 101, 104, 111, 115], "_": [3, 4, 20, 26, 61, 91, 111, 115, 116, 118, 119, 121], "far": [3, 4, 20, 62, 116], "field": [3, 4, 15, 20, 25, 116, 122], "small": [3, 4, 116], "rel": [3, 4, 26, 46, 58, 62, 76, 111, 116], "bandwidth": [3, 4, 44, 47, 53, 59, 60, 61, 62, 72, 76, 100, 101, 104, 105, 108, 111, 116, 121], "Then": [3, 4, 116], "defin": [3, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 20, 25, 26, 33, 34, 43, 59, 60, 61, 62, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 116, 118, 120, 121], "frac": [3, 20, 26, 33, 34, 35, 38, 91, 111, 116, 119], "w": [3, 4, 76, 77, 97, 116], "weight": [3, 4, 21, 116], "so": [3, 4, 14, 20, 91, 96, 114, 115, 116, 119, 120], "equat": [3, 4, 18, 33, 34, 35, 38, 41, 91, 95, 116, 119], "diagon": [3, 111], "covari": [3, 7, 15, 16, 116], "coeffici": 3, "zero": [3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 23, 26, 29, 30, 34, 35, 44, 47, 48, 50, 52, 58, 59, 60, 61, 62, 74, 76, 79, 87, 91, 92, 93, 99, 103, 104, 107, 109, 110, 111, 117], "robust": [3, 61, 122], "rank": 3, "defici": 3, "For": [3, 8, 9, 14, 15, 17, 18, 26, 27, 29, 44, 47, 59, 62, 65, 69, 76, 91, 93, 97, 111, 112, 113, 115, 116, 121], "smaller": [3, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 23, 26, 27, 29, 30, 34, 35, 38, 47, 52, 58, 60, 62, 74, 76, 87, 91, 92, 93, 96], "than": [3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 23, 25, 26, 27, 29, 30, 33, 34, 35, 38, 44, 47, 50, 58, 61, 62, 76, 79, 87, 88, 91, 92, 93, 96, 97], "j": [3, 20, 91, 122], "high": [3, 7, 16, 41, 122], "resolut": [3, 8, 14, 15, 17, 18, 20, 52, 76, 79, 122], "wavenumb": [3, 122], "spectrum": [3, 15, 122], "analysi": [3, 4, 122], "proceed": [3, 122], "ieee": [3, 15, 20, 41, 61, 88, 91, 112, 122], "57": [3, 106, 122], "1408": [3, 122], "1418": [3, 122], "1969": [3, 122], "doi": [3, 15, 20, 26, 41, 59, 61, 88, 91, 112, 122], "10": [3, 15, 20, 26, 30, 41, 47, 59, 61, 76, 88, 91, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122], "1109": [3, 15, 20, 41, 61, 88, 91, 112, 122], "proc": [3, 122], "7278": [3, 122], "refererd": 4, "delai": [4, 7, 8, 11, 12, 13, 15, 16, 17, 18, 21, 30, 47, 96, 100, 106, 107, 108, 110, 117, 122], "sum": [4, 15, 59, 60, 61, 62, 75, 118, 122], "bartlett": [4, 122], "known": [4, 41, 111, 116], "maxim": [4, 18, 44, 47, 48, 50, 52, 105], "singl": [4, 7, 8, 15, 20, 21, 23, 25, 26, 29, 33, 34, 35, 38, 41, 47, 53, 55, 56, 57, 59, 60, 61, 63, 74, 75, 76, 77, 91, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121], "_encod": 4, "focus_angl": 4, "departur": [4, 9, 10, 11, 12, 13, 14], "periodogram": [4, 122], "continu": [4, 62, 72, 110, 122], "spectra": [4, 122], "biometrika": [4, 122], "37": [4, 120, 122], "16": [4, 14, 59, 61, 62, 100, 101, 103, 104, 105, 107, 108, 111, 117, 119, 120, 121, 122], "1950": [4, 122], "url": [4, 14, 41, 91, 122], "http": [4, 14, 41, 88, 91, 97, 122], "www": [4, 14, 41, 122], "jstor": [4, 122], "org": [4, 14, 41, 88, 122], "stabl": [4, 122], "2332141": [4, 122], "visit": [4, 122], "2022": [4, 112, 118, 122], "06": [4, 76, 122], "28": [4, 14, 111, 119, 122], "binari": [5, 26, 75, 113, 121, 122], "definit": [5, 15, 19, 111, 112], "execut": [5, 6, 19, 25, 26, 27, 34, 46, 65, 75, 93, 98, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123], "launch": [5, 6, 26, 93, 98, 99, 102, 109, 111, 116, 117, 118, 119, 120, 121], "command": [5, 102, 112, 113], "line": [5, 7, 11, 12, 13, 15, 16, 102, 110, 112, 113, 118], "ani": [5, 6, 15, 16, 18, 23, 25, 26, 28, 46, 47, 58, 60, 61, 62, 75, 91, 102, 111, 112, 113, 114, 120], "herm": [5, 17, 25, 44, 98, 102, 111, 113, 114, 117, 118, 119, 120, 121], "primari": 6, "In": [6, 14, 15, 23, 26, 33, 34, 35, 38, 41, 56, 59, 60, 61, 62, 65, 71, 91, 98, 100, 101, 102, 103, 104, 106, 111, 113, 117, 118, 122, 123], "conveni": [6, 25, 27, 29, 48, 56, 102, 121], "make": [6, 26, 59, 111, 113], "sure": [6, 113], "virtual": [6, 26, 100, 106, 107, 108, 113, 114], "python": [6, 98, 102, 111, 112, 113, 114, 118], "you": [6, 113, 115, 118, 123], "instal": [6, 98, 102, 111, 114, 116, 119, 121], "activ": [6, 7, 8, 15, 93, 102, 113, 114], "conda": [6, 113, 114], "venv": [6, 113], "window": [6, 111, 113], "linux": [6, 111, 113], "envnam": [6, 113, 114], "script": [6, 111, 114], "bat": 6, "bin": [6, 21, 30, 75, 76, 77, 113], "termin": [6, 7, 16, 100, 105, 111, 113, 118], "usual": [6, 26, 33, 35, 41, 74, 111], "indic": [6, 9, 10, 11, 12, 13, 14, 20, 23, 25, 26, 28, 44, 48, 55, 57, 58, 59, 60, 61, 62, 65, 69, 73, 74, 75, 77, 92, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 115, 117, 118, 121], "front": 6, "your": [6, 98, 102, 111, 112, 113, 114], "afterward": [6, 102, 113], "o": [6, 111, 122], "output_dir": 6, "file": [6, 25, 26, 29, 46, 54, 75, 93, 98, 102, 111, 112, 113, 114, 118, 123], "scenario": [6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 23, 25, 27, 43, 46, 48, 50, 55, 59, 60, 61, 62, 78, 92, 93, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 116, 117, 118, 119, 121], "repositori": [6, 98, 111, 113, 114, 123], "avail": [6, 18, 23, 24, 26, 30, 44, 54, 56, 59, 61, 105, 106, 107, 111, 121], "path": [6, 8, 14, 15, 17, 18, 24, 25, 26, 29, 54, 62, 102, 111, 113, 114], "yml": [6, 25, 111], "descript": [6, 14, 26, 31, 56, 61, 111], "help": [6, 112], "displai": [6, 111, 123], "directori": [6, 24, 25, 93, 98, 111, 113, 114], "style": [6, 24, 26, 102, 111], "run": [6, 24, 26, 27, 29, 43, 46, 50, 78, 93, 98, 102, 111, 115, 116, 117, 118, 119, 120, 121, 123], "test": [6, 48, 59, 94, 97], "No": [6, 12, 13, 14, 15, 26, 61, 90, 105, 122], "artifact": [6, 19, 24, 26, 53, 55, 72, 75, 93, 118], "save": [6, 24, 26, 102, 111], "folder": [6, 25, 111], "wa": [6, 15, 23, 26, 28, 30, 56, 77, 102, 115, 116, 117, 118, 119, 120, 121], "new": [6, 8, 14, 15, 17, 18, 20, 21, 23, 25, 26, 27, 29, 30, 34, 41, 45, 46, 48, 50, 54, 57, 61, 65, 68, 74, 79, 91, 93, 98, 102, 110, 111, 113, 114, 116, 117, 118, 119, 120, 121], "work": [6, 111, 116, 123], "via": [6, 21, 25, 52, 98, 111, 113, 114, 123], "list": [6, 8, 20, 23, 25, 26, 29, 34, 44, 46, 48, 49, 52, 55, 56, 58, 59, 61, 65, 74, 75, 92, 93, 110, 118, 122, 123], "vector": [6, 18, 20, 23, 26, 30, 33, 34, 35, 38, 41, 44, 47, 54, 58, 59, 60, 61, 62, 74, 91, 92, 95, 116], "interpret": [6, 47, 113], "link": [7, 14, 21, 23, 25, 34, 41, 48, 53, 56, 92, 99, 100, 109, 111, 112, 115, 117, 118, 122, 123], "between": [7, 9, 10, 11, 12, 13, 14, 20, 21, 26, 33, 34, 41, 47, 55, 56, 58, 60, 61, 62, 65, 69, 71, 75, 79, 81, 82, 83, 85, 86, 89, 93, 95, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 117, 118, 120, 122], "physic": [7, 8, 23, 41, 43, 46, 100, 101, 103, 104, 105, 106, 107, 108, 111, 117, 122], "level": [7, 18, 26, 31, 70, 79, 106, 107, 111, 112, 117, 121, 122], "impulse_response_interpol": [7, 8, 12, 13, 15, 18], "sync_offset_low": [7, 8], "sync_offset_high": [7, 8], "gain": [7, 8, 15, 20, 78, 79, 91, 100, 103, 105, 108, 111, 118, 120], "num_input": [7, 8], "num_output": [7, 8], "propag": [7, 8, 14, 15, 17, 18, 20, 21, 62, 63, 78, 91, 92, 93, 111, 117, 119, 122], "impulse_respons": [7, 8, 14, 15, 17, 18, 21, 117], "min_sampling_r": [7, 8], "follow": [7, 15, 25, 58, 61, 62, 68, 79, 91, 101, 102, 103, 111, 113, 118, 119, 120, 122], "statist": [7, 14, 15, 16, 122], "multipath": [7, 110, 118], "fade": [7, 100, 108, 110, 122], "antennacorrel": [7, 15, 16], "customantennacorrel": [7, 15], "multipathfadingchannel": [7, 15, 16], "delay_resolution_error": [7, 15], "interpolate_sign": [7, 15], "los_gain": [7, 15], "power_profil": [7, 15, 100, 108], "rice_factor": [7, 15, 100, 108], "doppler_frequ": [7, 15, 16], "los_doppler_frequ": [7, 15, 16], "max_delai": [7, 15, 47], "num_resolvable_path": [7, 15], "num_sinusoid": [7, 15, 16], "los_angl": [7, 15, 16], "interpolation_filt": [7, 15], "alpha_correl": [7, 15, 100], "beta_correl": [7, 15, 100], "standard": [7, 9, 10, 11, 12, 13, 14, 25, 26, 34, 41, 100, 122], "templat": 7, "devicetyp": [7, 16, 19, 23, 27, 29, 93], "base_st": [7, 16, 100, 105, 111], "correlationtyp": [7, 16], "low": [7, 16, 100, 110, 116, 119, 122], "medium": [7, 16, 41, 100, 122], "medium_a": [7, 16], "standardantennacorrel": [7, 16], "device_typ": [7, 16, 100], "cost256typ": [7, 16], "urban": [7, 11, 14, 16, 110], "rural": [7, 14, 16, 110], "hilli": [7, 16, 94, 95], "multipathfadingcost256": [7, 16, 110], "model_typ": [7, 16, 105, 106, 107], "to_yaml": [7, 16, 17, 20, 25, 53, 61, 65, 68, 78, 79, 88, 93], "tdltype": [7, 16, 105, 106, 107], "d": [7, 9, 10, 11, 12, 13, 14, 15, 16, 20, 59, 61, 116, 118, 122], "multipathfading5gtdl": [7, 16, 110], "rms_delai": [7, 16, 106, 107], "multipathfadingexponenti": [7, 16, 110], "tap_interv": [7, 16], "3gpp": [7, 16, 41, 68, 100, 110, 122], "cluster": [7, 11, 12, 13, 110], "delaynorm": [7, 10, 11, 12, 13, 14], "tof": [7, 14], "clusterdelaylinebas": [7, 9, 10, 11, 12, 13, 14], "delay_norm": [7, 10, 11, 12, 13, 14], "line_of_sight": [7, 9, 10, 11, 12, 13, 14], "delay_spread_mean": [7, 9, 10, 11, 12, 13, 14], "delay_spread_std": [7, 9, 10, 11, 12, 13, 14], "aod_spread_mean": [7, 9, 10, 11, 12, 13, 14], "aod_spread_std": [7, 9, 10, 11, 12, 13, 14], "aoa_spread_mean": [7, 9, 10, 11, 12, 13, 14], "aoa_spread_std": [7, 9, 10, 11, 12, 13, 14], "zoa_spread_mean": [7, 9, 10, 11, 12, 13, 14], "zoa_spread_std": [7, 9, 10, 11, 12, 13, 14], "zod_spread_mean": [7, 9, 10, 11, 12, 13, 14], "zod_spread_std": [7, 9, 10, 11, 12, 13, 14], "zod_offset": [7, 9, 10, 11, 12, 13, 14], "rice_factor_mean": [7, 9, 10, 11, 12, 13, 14], "rice_factor_std": [7, 9, 10, 11, 12, 13, 14], "delay_sc": [7, 9, 10, 11, 12, 13, 14], "cross_polarization_power_mean": [7, 9, 10, 11, 12, 13, 14], "cross_polarization_power_std": [7, 9, 10, 11, 12, 13, 14], "num_clust": [7, 9, 10, 11, 12, 13, 14], "num_rai": [7, 9, 10, 11, 12, 13, 14], "cluster_delay_spread": [7, 9, 10, 11, 12, 13, 14], "cluster_aod_spread": [7, 9, 10, 11, 12, 13, 14], "cluster_aoa_spread": [7, 9, 10, 11, 12, 13, 14], "cluster_zoa_spread": [7, 9, 10, 11, 12, 13, 14], "cluster_shadowing_std": [7, 9, 10, 11, 12, 13, 14], "clusterdelaylin": [7, 14], "indoor": [7, 14, 15, 110, 122], "factori": [7, 14, 19, 110], "indoorfactorybas": [7, 9], "volum": [7, 9, 15, 115, 122], "surfac": [7, 9, 111], "indoorfactorylineofsight": [7, 9, 14], "indoorfactorynolineofsight": [7, 9, 14], "offic": [7, 14, 110], "indoorofficelineofsight": [7, 10, 14], "indoorofficenolineofsight": [7, 10, 14], "macrocel": [7, 14, 110], "ruralmacrocellslineofsight": [7, 11, 14], "ruralmacrocellsnolineofsight": [7, 11, 14], "ruralmacrocellsoutsidetoinsid": [7, 11, 14], "street": [7, 14, 110], "canyon": [7, 110], "microcel": [7, 110], "streetcanyonlineofsight": [7, 12, 14], "urbanmicrocellsnolineofsight": [7, 12], "streetcanyonnolineofsight": [7, 12, 14], "streetcanyonoutsidetoinsid": [7, 12, 14], "urbanmacrocellslineofsight": [7, 13, 14], "urbanmacrocellsnolineofsightbas": [7, 13], "urbanmacrocellsnolineofsight": [7, 13, 14], "urbanmacrocellsoutsidetoinsid": [7, 13, 14], "radar": [7, 52, 72, 105, 110, 111, 116], "radarchannel": [7, 18, 75, 105, 116], "target_exist": [7, 18], "attenu": [7, 18, 47], "target_rang": [7, 18, 105, 116], "target_veloc": [7, 18], "radar_cross_sect": [7, 18, 105, 116], "target_azimuth": [7, 18], "target_zenith": [7, 18], "losses_db": [7, 18], "ground_truth": [7, 18, 75], "quadriga": [7, 110], "quadrigachannel": [7, 17], "yaml_matrix": [7, 17], "from_yaml": [7, 17, 20, 25, 43, 46, 53, 61, 65, 68, 78, 79, 93], "true": [8, 14, 17, 18, 23, 25, 26, 30, 34, 46, 47, 48, 59, 61, 62, 73, 75, 92, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 117, 118, 120], "seed": [8, 23, 28, 29, 31, 41, 47, 48, 49, 50, 54, 56, 87, 90, 93, 111, 115], "randomnod": [8, 19, 23, 28, 29, 34, 54, 56, 87, 90, 92], "ideal": [8, 14, 15, 17, 18, 20, 21, 23, 47, 48, 53, 59, 61, 62, 81, 82, 92, 101, 103, 106, 107, 111, 115, 117, 118], "distort": [8, 20, 21, 52, 56, 88, 91, 111], "less": [8, 20, 33, 56, 60, 61, 79, 88, 91], "It": [8, 15, 19, 23, 31, 43, 53, 56, 65, 71, 72, 79, 98, 106, 111, 112, 117, 121], "serv": [8, 114], "other": [8, 26, 33, 34, 35, 38, 41, 56, 91, 99, 100, 104, 106, 107, 108, 109, 118], "addit": [8, 15, 18, 21, 23, 25, 27, 29, 30, 47, 48, 56, 57, 87, 98, 108, 110, 111, 113, 120, 121], "number_rx_antenna": [8, 14, 15, 17, 18], "number_tx_antenna": [8, 14, 15, 17, 18], "random": [8, 15, 18, 19, 23, 26, 29, 35, 41, 47, 48, 49, 50, 54, 56, 61, 87, 90, 93, 117, 119, 121], "given": [8, 15, 23, 25, 26, 65, 75, 77, 79, 95, 100, 102, 111, 116, 118, 119], "rnd": [8, 15], "need": [8, 15, 17, 113, 118], "rate": [8, 14, 15, 17, 18, 23, 30, 31, 33, 34, 35, 38, 41, 44, 47, 48, 50, 52, 55, 59, 60, 61, 62, 65, 69, 76, 77, 92, 96, 100, 101, 103, 104, 105, 106, 107, 110, 111, 115, 117, 119, 121, 122], "same": [8, 15, 18, 26, 61, 79, 88, 104, 116], "sampling_r": [8, 14, 15, 17, 18, 23, 30, 43, 44, 47, 48, 50, 51, 52, 53, 56, 59, 60, 61, 62, 72, 76, 77, 78, 92, 96, 117, 121], "simulateddevic": [8, 15, 48, 78, 80, 81, 82, 83, 85, 92, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111], "connect": [8, 47], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 18, 23, 25, 26, 28, 29, 30, 34, 46, 47, 48, 59, 60, 61, 62, 73, 75, 91, 92, 93], "flag": [8, 15, 21, 24, 25, 29, 34, 47, 53, 57, 59, 60, 91, 92], "synchron": [8, 49, 53, 59, 60, 61, 62, 99, 109, 110, 115, 121, 122], "maximum": [8, 14, 15, 17, 18, 23, 26, 29, 47, 52, 61, 63, 73, 74, 76, 79, 91, 110, 116, 117, 118, 119, 120, 121], "impuls": [8, 14, 15, 17, 18, 20, 21, 115, 117], "interpol": [8, 15, 73, 96], "initi": [8, 15, 16, 17, 21, 23, 25, 26, 28, 29, 30, 41, 45, 47, 48, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 75, 90, 91, 92, 93, 100, 111, 114, 115, 116, 119, 121], "pseudo": [8, 23, 28, 29, 41, 47, 48, 49, 50, 54, 56, 61, 90, 93, 121], "modem": [8, 15, 17, 21, 23, 29, 31, 34, 53, 54, 55, 59, 61, 62, 65, 70, 71, 75, 91, 92, 93, 99, 101, 103, 104, 105, 106, 107, 108, 109, 111, 115, 117, 118, 119, 120, 121], "alreadi": [8, 15, 23, 26, 27, 29, 46, 48, 93, 111, 113, 120, 121], "realist": [8, 20, 112], "one": [8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 21, 23, 25, 26, 27, 30, 33, 38, 58, 59, 60, 61, 62, 65, 69, 71, 75, 76, 79, 88, 91, 93, 99, 104, 106, 107, 109, 111, 112, 113, 118, 121], "feed": [8, 21, 91], "actual": [8, 20, 26, 111, 116, 121], "shadow": [8, 9, 10, 11, 12, 13, 14], "num_stream": [8, 30, 53, 57, 58, 59, 61], "hi": 8, "emerg": [8, 21], "forward": [8, 31, 56, 119, 122], "backward": 8, "radio": [8, 23, 30, 43, 48, 78, 91, 92, 93, 103, 109, 110, 111, 112, 118], "band": [8, 18, 23, 30, 41, 44, 47, 48, 50, 52, 56, 58, 59, 60, 61, 62, 65, 70, 71, 73, 77, 92, 93, 100, 106, 107, 108, 111, 120, 121, 122], "over": [8, 20, 21, 23, 26, 29, 30, 33, 43, 44, 47, 48, 49, 52, 53, 54, 55, 56, 61, 75, 77, 83, 89, 92, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 115, 117, 118, 120, 121, 122], "ones": [8, 117], "convert": [8, 21, 23, 26, 28, 30, 44, 48, 50, 74, 75, 78, 92, 95, 110, 115, 121], "channelstateinform": [8, 19, 21, 23, 56, 59, 61, 120, 121], "union": [8, 16, 18, 24, 25, 26, 30, 44, 48, 57, 79, 92, 93], "device_alpha": [8, 100, 101, 103, 104, 106, 107, 108, 111], "associ": 8, "device_beta": [8, 104], "forwards_recept": 8, "onto": [8, 20, 30, 57, 59, 60, 61, 62, 93, 116], "after": [8, 21, 23, 26, 29, 30, 34, 35, 47, 48, 49, 56, 58, 61, 64, 65, 66, 67, 68, 69, 70, 73, 75, 76, 89, 91, 92, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111, 114, 116, 117, 118, 119, 120, 121], "backwards_recept": 8, "csi": [8, 23, 53, 56, 61], "state": [8, 14, 15, 17, 18, 19, 23, 25, 26, 29, 30, 41, 47, 52, 53, 55, 56, 57, 59, 61, 62, 65, 75, 77, 88, 92, 106, 117, 120], "static": [8, 21, 24, 25, 26, 47, 61, 77, 111, 112, 115, 116, 117, 118, 119, 120, 121], "specif": [8, 9, 10, 11, 12, 13, 14, 18, 23, 26, 31, 41, 43, 59, 61, 72, 78, 83, 93, 96, 110, 111, 112, 114, 115, 120, 121, 122], "offset": [8, 9, 10, 11, 12, 13, 14, 41, 60, 61, 88, 97, 100, 108], "propagated_sign": 8, "num_sampl": [8, 14, 15, 17, 18, 21, 26, 30, 43, 47, 53, 58, 59, 61, 78, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111, 116, 117, 119, 121], "note": [8, 14, 15, 17, 18, 28, 47, 79, 87, 111, 113, 114, 115], "tap": [8, 14, 15, 16, 17, 18, 20, 21, 100, 110, 122], "4": [8, 14, 15, 16, 17, 18, 24, 41, 62, 68, 91, 97, 99, 101, 103, 105, 106, 107, 111, 115, 116, 117, 118, 119, 120, 121, 122], "size": [8, 14, 15, 17, 18, 26, 33, 34, 35, 38, 41, 61, 68, 100, 101, 108, 111, 119], "l": [8, 14, 15, 17, 18, 26, 34, 59, 60, 61, 62, 99, 105, 109, 122], "minim": [8, 14, 18, 59, 60, 61, 62, 74, 98, 111, 114, 122], "adequ": [8, 59, 60, 61, 62], "hz": [8, 15, 20, 23, 30, 44, 47, 48, 50, 52, 59, 60, 61, 62, 76, 77, 92, 96, 99, 100, 104, 106, 107, 108, 109, 121], "sever": [9, 10, 11, 12, 13, 19, 29, 55, 61, 75, 102, 111, 114, 116, 121], "hall": 9, "m3": 9, "total": 9, "area": [9, 16, 97], "m2": 9, "wall": 9, "floor": [9, 47], "ceil": 9, "equal": [9, 18, 20, 23, 30, 33, 34, 35, 38, 41, 52, 56, 59, 60, 61, 62, 74, 76, 93, 99, 101, 104, 106, 107, 109, 110, 111, 112, 117, 121], "preset": [9, 10, 11, 12, 13], "indoorfactorylo": 9, "sight": [9, 10, 11, 12, 13, 14, 15, 16], "lo": [9, 10, 11, 12, 13, 14], "mean": [9, 10, 11, 12, 13, 14, 16, 26, 48, 61, 62, 75, 92, 95, 106, 107, 112, 118, 119], "spread": [9, 10, 11, 12, 13, 14, 100, 106], "realiz": [9, 10, 11, 12, 13, 14, 15, 26, 118], "mu_": [9, 10, 11, 12, 13, 14], "lgd": [9, 10, 11, 12, 13, 14], "deviat": [9, 10, 11, 12, 13, 14], "sigma_": [9, 10, 11, 12, 13, 14], "asd": [9, 10, 11, 12, 13, 14], "lgasd": [9, 10, 11, 12, 13, 14], "arriav": [9, 10, 11, 12, 13, 14], "asa": [9, 10, 11, 12, 13, 14], "lgasa": [9, 10, 11, 12, 13, 14], "zsa": [9, 10, 11, 12, 13, 14], "lgzsa": [9, 10, 11, 12, 13, 14], "zod": [9, 10, 11, 12, 13, 14], "lgzsd": [9, 10, 11, 12, 13, 14], "degre": [9, 10, 11, 12, 13, 14], "lgzod": [9, 10, 11, 12, 13, 14], "rice": [9, 10, 11, 12, 13, 14, 15], "distribut": [9, 10, 11, 12, 13, 14, 15, 16, 26, 33, 67, 68, 69, 95, 111, 113, 118, 121], "k": [9, 10, 11, 12, 13, 14, 15, 20, 33, 34, 38, 59, 60, 61, 62, 68, 119, 122], "mu_k": [9, 10, 11, 12, 13, 14], "db": [9, 10, 11, 12, 13, 14, 18, 25, 95, 100, 101, 103, 104, 105, 106, 107, 108, 111], "sigma_k": [9, 10, 11, 12, 13, 14], "scale": [9, 10, 11, 12, 13, 14, 15, 26, 30, 79, 95], "proportion": [9, 10, 11, 12, 13, 14], "r_": [9, 10, 11, 12, 13, 14, 35], "tau": [9, 10, 11, 12, 13, 14], "cross": [9, 10, 11, 12, 13, 14, 15, 18, 26, 105], "polar": [9, 10, 11, 12, 13, 14, 20, 110, 122], "xpr": [9, 10, 11, 12, 13, 14], "rai": [9, 10, 11, 12, 13, 14, 26, 93, 118, 122], "per": [9, 10, 11, 12, 13, 14, 26, 33, 35, 38, 47, 55, 57, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 76, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 116], "individu": [9, 10, 11, 12, 13, 14, 15, 26, 30, 52, 56, 61, 65, 99, 106, 107, 109, 111, 112], "c_": [9, 10, 11, 12, 13, 14], "zeta": [9, 10, 11, 12, 13, 14], "indoorfactorynlo": 9, "normal": [10, 11, 12, 13, 14, 23, 73, 91, 92, 117, 121], "appli": [10, 11, 12, 13, 14, 26, 30, 47, 61, 62, 64, 76, 77, 79, 80, 113, 115, 116, 122], "indoorofficelo": 10, "indoorofficenlo": 10, "rmalo": 11, "rmao2i": 11, "streetcanyonlo": 12, "share": [12, 13, 49], "streetcanyonnlo": 12, "streetcanyono2i": 12, "umalo": 13, "umanlo": 13, "uma02i": 13, "tudi": [14, 122], "5": [14, 15, 16, 41, 56, 59, 88, 104, 105, 106, 107, 111, 116, 117, 118, 119, 120, 121, 122], "100": [14, 93, 101, 104, 105, 106, 107, 111, 117, 118, 120, 121, 122], "ghz": [14, 41, 104, 122], "comprehens": 14, "involv": 14, "pleas": [14, 102, 111, 112, 113, 114], "document": [14, 26, 55, 75, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121], "abstrat": 14, "full": [14, 20, 25, 56, 61, 65, 71, 110, 111, 114, 119], "customiz": [14, 15, 111], "compliant": [14, 34, 98], "benchmark": [14, 44], "Of": [14, 111, 121], "outsid": 14, "To": [14, 113, 117, 120], "insid": 14, "undefin": [14, 77], "canyhon": 14, "pre": [14, 58, 112, 113], "mix": [14, 23, 30, 48, 76, 92], "determinist": [14, 54], "inform": [14, 17, 19, 20, 23, 24, 25, 26, 29, 30, 41, 44, 46, 47, 52, 53, 55, 56, 57, 61, 65, 68, 77, 79, 93, 98, 105, 106, 111, 112, 115, 117, 118, 120, 121, 122], "posit": [14, 15, 18, 20, 23, 33, 41, 44, 61, 72, 74, 79, 92, 93, 95], "orient": [14, 20, 23, 44, 78, 92, 95, 111], "sinc": [14, 15, 59, 79, 111, 116, 119, 120, 121], "specular": [14, 15], "compon": [14, 15, 16, 20, 61, 83, 99, 106, 107, 109], "enum": [14, 21, 22, 23, 24, 25, 26, 57, 77, 95], "flight": [14, 52, 117], "onli": [14, 18, 25, 34, 35, 41, 47, 57, 59, 60, 61, 62, 75, 79, 88, 93, 111, 114, 115, 116, 117, 118, 120], "relev": [14, 57], "debug": [14, 118], "purpos": [14, 48, 59, 116, 119, 120], "7": [14, 41, 111, 117, 120, 122], "14": [14, 60, 115, 116, 117, 118, 120], "38": 14, "21": [14, 119], "41": 14, "73": 14, "34": [14, 118, 120], "9": [14, 16, 58, 59, 60, 61, 62, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 122], "12": [14, 15, 20, 61, 106, 115, 117, 118, 119, 120, 122], "20": [14, 100, 101, 103, 104, 105, 106, 107, 108, 111, 117, 118, 119, 120, 121, 122], "5e": [14, 76], "09": 14, "17": [14, 41, 119], "delay_spread": 14, "squar": [14, 15, 16, 61, 62, 73, 75, 95, 96, 99, 106, 107, 109, 110], "tsg": [14, 122], "ran": [14, 122], "2020": [14, 122], "version": [14, 41, 88, 113, 114, 122, 123], "releas": [14, 41, 110, 113, 122], "etsi": [14, 41, 122], "deliv": [14, 41, 122], "etsi_tr": [14, 122], "138900_138999": [14, 122], "138901": [14, 122], "01": [14, 100, 101, 104, 105, 106, 107, 108, 111, 117, 121, 122], "00_60": [14, 41, 122], "tr_138901v160100p": [14, 122], "pdf": [14, 41, 62, 79, 91, 122], "upon": 15, "unknown": [15, 23, 26, 47, 92, 118], "postiv": 15, "defint": 15, "customcorrel": 15, "stochast": 15, "param": 15, "signific": 15, "power_delay_profil": 15, "averag": [15, 23, 59, 60, 61, 62, 118, 121], "linear": [15, 21, 23, 25, 26, 62, 74, 79, 89, 91, 92, 93, 95, 96, 101, 111, 118, 119, 122], "must": [15, 25, 26, 41, 46, 59, 79, 98, 116, 120], "element": [15, 20, 21, 23, 26, 44, 47, 48, 53, 61, 92, 93, 99, 104, 106, 107, 109, 117, 118, 120], "k_factor_ric": 15, "ricean": 15, "variant": 15, "auto": 15, "drop": [15, 18, 24, 27, 29, 46, 93, 99, 106, 109, 118], "independ": [15, 26, 34, 91, 122], "among": [15, 38], "tx_cov_matrix": 15, "rx_cov_matrix": 15, "side": [15, 58, 59, 61, 88, 92, 93, 111], "hermitian": 15, "matric": [15, 93], "rayleigh": [15, 100, 108, 122], "uncorrel": 15, "scatter": [15, 20], "jake": 15, "doppler": [15, 16, 18, 76, 77], "approach": [15, 51, 111], "xiao": [15, 122], "et": [15, 20, 26, 55, 59, 75, 88, 112], "al": [15, 20, 26, 59, 88, 112], "sinusoid": [15, 16, 122], "phase": [15, 16, 18, 20, 62, 78, 88, 91, 103, 110, 117, 122], "interv": [15, 16, 26, 59, 60, 61, 62, 76], "kroneck": 15, "yu": [15, 122], "loss": [15, 18, 120], "balanc": 15, "random_gener": 15, "sequenc": [15, 25, 41, 53, 54, 57, 59, 60, 61, 62, 76, 79, 121], "shift": [15, 16, 53, 62, 76, 77, 96, 110, 117, 121], "length": [15, 21, 30, 33, 34, 35, 38, 41, 47, 52, 56, 59, 60, 61, 62, 91, 106], "ident": [15, 26, 41, 46, 55, 56, 59, 75, 91, 108], "multipathfad": [15, 100, 108], "profil": [15, 73], "aoa": 15, "filter": [15, 30, 47, 51, 53, 58, 104, 110, 115], "resolv": [15, 26, 46, 98, 122], "chengshan": [15, 122], "yahong": [15, 122], "rosa": [15, 122], "zheng": [15, 122], "norman": [15, 122], "beaulieu": [15, 122], "novel": [15, 122], "rician": [15, 122], "transact": [15, 20, 61, 88, 91, 122], "3667": [15, 122], "3679": [15, 122], "2006": [15, 122], "twc": [15, 122], "256990": [15, 122], "kai": [15, 20, 122], "bengtsson": [15, 122], "ottersten": [15, 122], "mcnamara": [15, 122], "karlsson": [15, 122], "beach": [15, 122], "wideband": [15, 122], "nlo": [15, 122], "vehicular": [15, 122], "technologi": [15, 59, 122], "confer": [15, 122], "55th": [15, 122], "vtc": [15, 122], "spring": [15, 110, 122], "2002": [15, 122], "cat": [15, 122], "02ch37367": [15, 122], "370": [15, 122], "374": [15, 122], "vol": [15, 122], "1002729": [15, 122], "station": [16, 105, 111], "mobil": [16, 112], "3874": 16, "5g": [16, 102, 105, 107, 110], "standardcorrel": [16, 100], "valuerror": 16, "unsupport": [16, 23], "convers": [16, 21, 25, 26, 55, 75, 79, 95, 103, 110], "cost256": [16, 110], "terrain": 16, "represent": [16, 17, 20, 23, 25, 26, 46, 55, 56, 61, 65, 68, 73, 75, 77, 79, 88, 92, 93, 100, 106, 107, 108, 121], "node": [16, 17, 20, 25, 26, 28, 46, 54, 61, 65, 68, 79, 88, 90, 93], "saferepresent": [16, 17, 20, 25, 61, 65, 68, 88, 93], "valid": [16, 17, 20, 23, 25, 61, 65, 68, 79, 88, 92, 93, 115], "code": [16, 17, 20, 25, 31, 33, 35, 41, 56, 61, 62, 63, 65, 70, 71, 79, 88, 91, 93, 102, 106, 110, 111, 112, 113, 120, 121, 122, 123], "get": [16, 17, 20, 23, 25, 55, 61, 65, 68, 69, 75, 79, 88, 93, 100, 101, 108, 110, 112, 118, 120], "pass": [16, 17, 20, 25, 61, 65, 68, 79, 88, 93, 98, 122], "down": [16, 17, 20, 25, 41, 61, 65, 68, 79, 88, 93, 111, 115], "tree": [16, 17, 20, 25, 61, 65, 68, 79, 88, 93], "mappingnod": [16, 20, 61, 79], "tdl": [16, 105, 106, 107], "combin": [16, 26, 34, 52, 63, 110, 113], "5gtdl": [16, 105, 106, 107], "exponenti": [16, 110], "map": [17, 25, 53, 54, 59, 60, 61, 62, 65, 71, 100, 101, 106, 107, 108, 111, 112, 120, 121], "quadrigainterfac": 17, "fit": 17, "softwar": [17, 43, 109, 110, 111, 118], "architectur": 17, "consisd": 17, "constructor": [17, 20, 25, 46, 61, 65, 68, 79, 93], "recal": [17, 20, 21, 23, 25, 30, 46, 47, 56, 57, 61, 65, 68, 79, 93], "safeconstructor": [17, 20, 25, 46, 61, 65, 68, 93], "extract": [17, 20, 25, 26, 46, 55, 61, 65, 68, 74, 75, 79, 93, 111, 113, 118], "newli": [17, 24, 26, 46, 65, 68, 79, 93, 113, 116, 117, 118, 119, 120, 121], "intern": [17, 21, 30, 41, 59, 60, 61, 62, 91, 115, 118, 122], "veloc": [18, 23, 43, 44, 47, 50, 72, 73, 74, 76, 77, 78, 92, 106], "monostat": 18, "reflector": [18, 110], "presenc": 18, "interfer": [18, 47, 61, 62, 101, 102, 105, 106, 107, 110, 111, 112], "leakag": [18, 78, 83, 85, 86], "constant": 18, "calcul": [18, 26, 75, 79, 95], "accord": [18, 30, 88, 91, 111], "rang": [18, 30, 52, 73, 74, 76, 77, 79, 105], "taken": [18, 88, 113], "account": [18, 65, 71], "move": 18, "chang": [18, 21, 29, 111], "reflect": [18, 111], "ob": 18, "clutter": 18, "todo": 18, "add": [18, 20, 23, 26, 27, 29, 46, 48, 61, 74, 78, 87, 88, 90, 93, 111, 117, 118, 120], "literatur": 18, "absolut": [18, 21], "distanc": [18, 30, 74, 75, 105], "meter": 18, "either": [18, 44, 79, 111, 113], "rc": 18, "locat": [18, 20, 25, 26, 46, 47, 57, 61, 98, 105, 111, 113, 121], "exist": [18, 25, 26, 27, 29, 46, 48, 50, 93, 98, 113, 114], "fals": [18, 25, 26, 29, 30, 46, 75, 91, 92, 93, 99, 104, 106, 107, 109, 111, 118, 119], "nois": [18, 22, 23, 30, 47, 48, 75, 77, 78, 79, 88, 92, 93, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 119, 121, 122], "atmospher": 18, "cabl": [18, 47, 115], "3d": 18, "more": [18, 25, 26, 79, 88, 97, 111, 115, 118], "perceiv": 18, "coordiant": [18, 74], "carthesian": [18, 20], "most": [18, 21, 23, 33, 38, 41, 48, 56, 77, 98, 111, 113, 117, 118, 119, 123], "recent": [18, 21, 23, 48, 56, 77, 118, 123], "detect": [18, 25, 26, 35, 52, 57, 58, 59, 60, 61, 62, 72, 75, 76, 77, 105, 110, 112, 113, 115, 118], "ground": [18, 75], "truth": [18, 75], "basic": [19, 31, 38, 54, 95, 111, 117, 119], "pymont": [19, 55, 75], "consolemod": [19, 26, 93], "artifacttempl": [19, 26, 55, 75], "evalu": [19, 26, 46, 53, 72, 79, 91, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 119, 120, 121, 122, 123], "evaluationtempl": [19, 26, 55, 75], "evaluationresult": [19, 26, 55, 75, 118], "processedscalarevaluationresult": [19, 26, 75], "scalarevaluationresult": [19, 26, 75], "montecarlosampl": [19, 26], "gridsect": [19, 26], "actorrunresult": [19, 26], "samplegrid": [19, 26], "montecarloactor": [19, 26], "montecarloresult": [19, 26, 93, 118], "griddimens": [19, 26, 46, 55, 75, 118], "registereddimens": [19, 26], "montecarlo": [19, 26, 93], "verbos": [19, 24, 93], "serializablearrai": [19, 25], "hdfserializ": [19, 21, 23, 25, 30, 57], "snrtype": [19, 22, 23, 48, 77, 92, 93], "slottyp": [19, 23], "operatortyp": [19, 23], "operationresult": [19, 23], "devicetransmiss": [19, 23], "devicerecept": [19, 23], "secondslottyp": [19, 23], "mixingoper": [19, 23], "operatorslot": [19, 23], "transmitterslot": [19, 23], "receiverslot": [19, 23], "unsupportedslot": [19, 23], "duplexoper": [19, 23, 56, 77], "pipelin": [19, 26, 31, 46, 93, 121], "graph": [19, 30, 57, 111], "scenariomod": [19, 29], "scenariotyp": [19, 27, 29], "channelstateformat": [19, 21], "channelstatedimens": [19, 21], "idealantenna": [19, 20, 106, 107, 118], "patchantenna": [19, 20], "dipol": [19, 20], "antennaarraybas": [19, 20, 23, 44], "uniformarrai": [19, 20, 23, 106, 107, 118], "antennaarrai": [19, 20], "po": 20, "belong": [20, 23, 26, 46, 61], "local": [20, 23, 92, 98, 118], "begin": [20, 61, 62, 101, 111, 116, 119, 123], "pmatrix": 20, "v": [20, 122], "end": [20, 62, 113, 116, 119], "wave": [20, 117], "vertic": 20, "plot_polar": 20, "angle_resolut": 20, "180": [20, 59, 122], "plot_gain": 20, "theoret": [20, 59, 60, 61, 62, 111], "sqrt": 20, "unit": [20, 23, 59, 60, 61, 62, 73, 77, 121], "everi": [20, 25, 54, 111], "patch": [20, 47, 110, 111, 115], "jaeckel": [20, 122], "further": [20, 41, 45, 50, 56, 91, 112, 113], "half": [20, 44], "wavelength": [20, 23, 44, 50, 92], "co": 20, "pi": [20, 117], "sin": 20, "dipoleantenna": 20, "num_antenna": [20, 23, 43, 44, 56, 92, 116, 117], "num_transmit_antenna": 20, "num_receive_antenna": 20, "math": [20, 94], "plot_topologi": 20, "plt": [20, 26, 30, 47, 57, 73, 79, 91, 111, 117, 118, 120, 121], "cartesian_respons": 20, "lvert": 20, "rvert_2": 20, "gg": 20, "th": [20, 26, 34], "q": [20, 35, 88, 95, 103, 110], "_m": [20, 26], "respond": 20, "a_": 20, "electromagnet": [20, 23, 29, 112, 117, 121], "waveform": [20, 23, 33, 43, 44, 52, 53, 56, 60, 61, 65, 71, 72, 77, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 120, 123], "center": [20, 30, 48, 92, 99, 100, 106, 107, 108, 109, 111], "therefor": [20, 26, 33, 34, 35, 41, 111, 113], "a_1": 20, "a_2": 20, "dot": [20, 33, 38], "interc": [20, 33, 38], "complex": [20, 30, 44, 52, 56, 57, 58, 59, 60, 61, 62, 65, 71, 79, 91, 111, 112, 115, 116, 117, 118, 120, 121], "horizontal_respons": 20, "planar": 20, "spherical_respons": [20, 116], "space": [20, 25, 30, 61, 63, 99, 100, 106, 107, 109, 110], "anntenna": 20, "pragma": 20, "cover": 20, "z": 20, "arbitrari": [20, 25, 26, 34, 44, 54, 55, 58, 59, 62, 75, 111], "unequ": 20, "customarrai": 20, "horizaont": 20, "add_antenna": 20, "ad": [20, 23, 26, 27, 29, 34, 46, 48, 50, 61, 65, 69, 74, 87, 90, 92, 93, 103, 111, 114, 117, 121], "remove_antenna": 20, "remov": [20, 23, 65, 69, 118], "de": [20, 21, 23, 25, 30, 46, 56, 57, 61, 91, 122], "stephan": [20, 122], "borner": [20, 122], "lar": [20, 122], "thiel": [20, 122], "volker": [20, 122], "jungnickel": [20, 122], "geometr": [20, 122], "rotat": [20, 122], "60": [20, 117, 118, 119, 120, 122], "5966": [20, 122], "5977": [20, 122], "2012": [20, 122], "2214017": [20, 122], "format": [21, 25, 26, 75, 106], "frequency_select": 21, "select": [21, 26, 44, 55, 61, 75, 111, 114, 119], "receive_stream": 21, "transmit_stream": 21, "state_format": 21, "num_delay_tap": 21, "num_frequency_bin": 21, "__state_format": 21, "__state": 21, "tensor": [21, 117], "num_receive_stream": [21, 53, 56], "num_transmit_stream": [21, 53, 56, 57], "state_inform": 21, "domain": [21, 30, 57, 58, 59, 61, 99, 104, 106, 107, 109, 111, 115, 117, 120, 121], "fourier": [21, 63, 110, 111], "__num_delay_tap": 21, "recov": 21, "4th": 21, "__num_frequency_bin": 21, "set_stat": 21, "to_impulse_respons": 21, "fft": [21, 61, 64, 76], "to_frequency_select": 21, "num_bin": 21, "without": [21, 47, 58, 85, 102], "pad": [21, 34, 61], "perform": [21, 23, 26, 55, 61, 65, 75, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 116, 118, 120], "num_symbol": [21, 53, 57, 59, 61], "symbol": [21, 22, 33, 53, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 112, 115, 117, 118, 120, 121, 122], "coo": 21, "transform": [21, 63, 96, 110, 111, 115], "spars": [21, 74], "n_rx": 21, "n_tx": [21, 68], "n_out": 21, "n_in": 21, "timestamp": [21, 30, 53, 56, 60], "ha": [21, 23, 26, 56, 61, 62, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 118, 119, 120], "been": [21, 23, 26, 56, 113, 114, 115, 116, 119], "data": [21, 25, 26, 27, 29, 30, 33, 34, 35, 38, 41, 53, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 77, 79, 93, 99, 100, 104, 106, 107, 108, 109, 111, 117, 118, 119, 120, 121], "befor": [21, 56, 64, 66, 67, 68, 69, 71, 79, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 118], "non": [21, 25, 26, 59, 101, 103, 111, 122], "received_stream": 21, "iter": [21, 26, 44, 47, 57], "slice": 21, "concaten": [21, 57], "append": [21, 26, 30, 35, 47, 57], "axi": [21, 26, 61, 73, 79, 91, 99, 104, 106, 107, 109, 118, 119, 120, 121], "along": [21, 61], "linear_st": 21, "append_linear": 21, "reciproc": 21, "comput": [21, 23, 26, 30, 34, 56, 77, 83, 116, 118, 121, 122], "from_hdf": [21, 23, 25, 30, 53, 56, 57], "group": [21, 23, 25, 30, 56, 57, 122], "hdf5": [21, 23, 25, 30, 56, 57], "to_hdf": [21, 23, 25, 30, 53, 56, 57], "dump": [21, 23, 25, 30, 47, 56, 57, 93, 111], "ratio": [22, 23, 48, 58, 60, 61, 62, 63, 77, 79, 92, 93, 95, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 119], "ebn0": [22, 100, 101, 103, 104, 105, 106, 107, 108, 111], "bit": [22, 31, 33, 34, 35, 38, 41, 53, 55, 56, 59, 60, 61, 62, 65, 71, 79, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 119, 120, 121], "energi": [22, 30, 43, 47, 59, 60, 61, 62, 72, 76, 77, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111, 121], "esn0": 22, "pn0": [22, 92, 93], "en0": 22, "custom": [22, 47, 59, 61, 91, 110, 111, 112, 118, 120], "snr": [22, 23, 48, 61, 77, 78, 92, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111, 117, 119, 120, 121], "except": [23, 26, 118], "fail": [23, 25], "slot": [23, 52, 56, 65, 69, 77, 106, 111, 121], "alia": [23, 29, 47, 49, 58, 59, 60, 65], "typevar": [23, 27, 29, 47, 49, 58, 65], "bound": [23, 26, 27, 29, 47, 49, 58, 65, 122], "broadcast": [23, 91, 122], "them": [23, 34, 35, 47, 56, 111, 119, 123], "captur": [23, 116, 119, 121], "bind": [23, 43, 45, 49, 56, 102, 110, 113], "slot_index": 23, "boolean": [23, 26, 28, 59, 60, 61], "frame_dur": [23, 43, 47, 53, 55, 56, 59, 60, 61, 72, 76, 77], "durat": [23, 29, 30, 47, 52, 53, 55, 56, 58, 60, 61, 62, 76, 77, 93, 99, 100, 101, 104, 106, 107, 108, 109, 111], "frame": [23, 29, 33, 34, 47, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 76, 77, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 118, 120, 121], "prefer": [23, 47, 52, 77], "operator_transmiss": 23, "operatortransmiss": 23, "num_operator_transmiss": 23, "operator_recept": 23, "operatorrecept": 23, "prior": [23, 98], "num_operator_recept": 23, "we": [23, 100, 101, 103, 104, 105, 106, 111, 113, 115, 116, 117, 118, 119, 120, 121], "shall": [23, 47], "referenc": 23, "pull": [23, 47, 52, 56, 77, 113], "underli": [23, 26, 47, 52, 55, 56, 75, 77], "cach": [23, 26, 47, 48, 56, 92], "cache_recept": 23, "noise_pow": [23, 30, 53, 56, 72, 77], "strength": [23, 56, 77], "snr_type": [23, 48, 56, 77, 78, 92, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111], "operator_index": 23, "regist": [23, 25, 26, 29, 34, 41, 46, 47, 50, 65, 77, 93, 113], "check": [23, 26, 29, 31, 110, 122], "registr": [23, 29], "statu": [23, 29, 118], "num_oper": [23, 29], "max_sampling_r": [23, 43, 44, 47, 48, 50], "min_frame_dur": 23, "mininum": 23, "requri": 23, "least": [23, 61, 62, 99, 106, 109, 110, 115], "min_num_samples_per_fram": 23, "collect": [23, 26, 55, 56, 75, 93, 94, 111, 118], "last": [23, 26, 34, 57, 59, 110, 118, 122], "infer": [23, 47, 59, 77, 105, 111], "add_transmiss": 23, "get_transmiss": 23, "clear_cach": [23, 47, 48, 92], "clear": [23, 47, 48, 92], "get_recept": 23, "act": [23, 56, 111], "basi": [23, 78, 110, 118], "watt": 23, "quaternion": [23, 92], "omnidirect": [23, 111], "mx3": [23, 92], "larger": [23, 61, 62, 92, 97], "greater": [23, 26, 44, 50, 58, 59, 60, 61, 62, 92, 93], "antenna_posit": 23, "global": [23, 26, 122], "max_frame_dur": 23, "max_dur": 23, "emiss": [23, 44, 50, 92], "rf": [23, 44, 48, 50, 52, 56, 83, 85, 86, 88, 92, 100, 101, 103, 106, 107, 108, 111, 122], "neg": [23, 25, 26, 44, 47, 50, 59, 79, 92, 96], "emmiss": 23, "analog": [23, 44, 50, 78, 92, 103, 110], "digit": [23, 44, 47, 50, 78, 91, 92, 103, 110, 122], "notimplementederror": [23, 30, 47, 64, 66, 67, 68, 69, 71, 92], "enabl": [23, 26, 30, 31, 34, 46, 47, 48, 49, 59, 62, 73, 91, 92, 93, 99, 108, 109, 111, 112, 113, 118], "received_sign": [23, 118], "noth": 23, "duplex": [23, 111], "behaviour": [24, 26, 34, 48, 79, 91, 92, 93, 111, 117, 118], "info": [24, 93], "warn": [24, 47, 115], "results_dir": [24, 93], "consol": [24, 26, 55, 75], "up": [24, 26, 41, 111, 113, 115], "default_results_dir": 24, "store": [24, 26, 29, 46, 75, 111, 118], "color": 24, "scheme": [24, 33, 34, 35, 38, 61, 62, 111, 119, 120], "style_context": [24, 118], "context": [24, 25, 111, 121], "manag": [24, 25, 31, 34, 45, 49, 50, 56], "contextmanag": 24, "write": [24, 26], "main": [25, 94], "mutabl": 25, "automat": [25, 47, 79, 98, 103, 113, 115, 116, 117, 118, 119, 120, 121], "As": [25, 111, 112, 113, 114, 115, 116, 119, 120], "easi": [25, 59, 113], "to_fil": 25, "again": 25, "just": 25, "easili": [25, 112, 118], "from_fil": 25, "initializationwrapp": 25, "dict": 25, "enumer": [25, 116], "bytes_or_buff": 25, "string": [25, 26, 46, 55, 75], "expos": 25, "buffer": 25, "handler": 25, "otherwis": [25, 92], "__str__": [25, 118], "repr": 25, "sy": 25, "getdefaultencod": 25, "strict": 25, "like": [25, 114, 118], "structur": [25, 53, 61, 99, 104, 106, 107, 109, 111, 116, 117, 118, 120], "addition": [25, 113, 120, 121], "annot": [25, 26, 55, 75], "integ": [25, 30, 34, 121], "grid": [25, 26, 46, 55, 61, 75, 93, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 116, 117, 118, 119, 120, 121], "set_arrai": 25, "deserialized_data": 25, "deseri": 25, "helper": [25, 111], "extens": [25, 98, 113, 120], "cfg": 25, "recogn": 25, "filenam": 25, "clean": 25, "disabl": [25, 26, 29, 34, 46, 93, 111, 117], "deactiv": [25, 120], "done": [25, 33], "registered_class": 25, "registered_tag": 25, "read": [25, 61], "filesystem": [25, 47], "from_path": 25, "config": [25, 111], "from_fold": 25, "recurs": [25, 34, 110, 113], "follow_link": 25, "to_fold": 25, "from_str": 25, "to_str": 25, "representererror": 25, "unregist": 25, "from_stream": 25, "textiobas": 25, "constructorerror": 25, "pars": 25, "to_stream": 25, "serializbl": 25, "stand": [26, 112], "alon": [26, 112], "effici": [26, 118, 122], "flexibl": [26, 61], "mont": [26, 100, 101, 103, 104, 105, 106, 107, 108, 111, 112, 117, 118, 120, 122], "carlo": [26, 100, 101, 103, 104, 105, 106, 107, 108, 111, 112, 117, 118, 120, 122], "wrap": 26, "project": [26, 57, 98, 111, 112], "pickl": 26, "becom": [26, 111, 118], "campaign": [26, 111, 116, 117, 118, 119, 120, 121], "sweep": [26, 46, 76, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111, 117, 118, 120], "settabl": [26, 111], "investig": [26, 46, 55, 75, 111, 112, 118, 119], "treat": 26, "potenti": 26, "multidimension": [26, 63, 65, 71], "drawn": 26, "m_": 26, "min": [26, 91], "max": [26, 74], "abort": 26, "prematur": [26, 55, 75, 100, 101, 103, 104, 105, 106, 107, 108, 111], "reach": 26, "confid": [26, 100, 101, 103, 104, 105, 106, 107, 108, 111], "threshold": [26, 53, 58, 60, 61, 62, 74, 75, 105], "bayer": [26, 122], "detail": [26, 41, 45, 50, 55, 56, 61, 64, 75, 91, 111, 118], "workload": [26, 111, 118], "previou": [26, 111], "flowchart": [26, 111], "spawn": 26, "actor": [26, 106, 116, 117, 118, 119, 120, 121], "resourc": [26, 53, 61, 99, 104, 106, 107, 109, 117, 118, 120], "cpu": [26, 118], "control": [26, 41, 46, 47, 79, 103, 105, 114, 118, 121, 122], "schedul": [26, 122], "task": 26, "complet": [26, 114], "print": [26, 119, 121], "runtim": [26, 46, 59, 113, 117, 118], "interact": [26, 93, 118], "refresh": 26, "shell": 26, "silent": [26, 47], "exept": 26, "persist": 26, "word": [26, 33, 34, 35, 38, 41, 56, 61, 91, 99, 100, 104, 106, 107, 108, 109, 120], "sort": [26, 29, 58, 59, 61, 79], "howev": [26, 98, 104, 111], "encourag": 26, "scalar": [26, 55, 59, 75], "to_scalar": [26, 53, 55, 72, 75, 118], "content": [26, 55, 75, 115], "stop": [26, 29, 55, 75, 100, 101, 103, 104, 105, 106, 107, 108, 111, 122], "criteria": [26, 55, 75, 122], "imposs": [26, 55, 75], "AT": [26, 55, 75], "numer": [26, 114, 122], "common": [26, 55, 75, 111, 117, 120], "copi": [26, 30, 53, 57, 102, 113, 119, 120], "final": [26, 75, 118], "step": [26, 31, 33, 34, 35, 41, 56, 65, 66, 67, 69, 71, 79, 91, 113, 116, 119, 121, 123], "render": [26, 75, 98, 111, 118], "to_arrai": [26, 72, 75, 118], "raw": [26, 53, 57, 59, 60, 61, 62, 73, 75, 77, 120, 121], "scalar_result": [26, 75], "plot_surfac": [26, 72, 75], "section_artifact": 26, "x_m": [26, 55, 75], "form": [26, 34, 53, 56, 111, 121], "onc": [26, 111, 118], "report": [26, 34, 112, 113], "confidence_level": 26, "suggest": [26, 54, 111], "toler": [26, 34, 100, 101, 103, 104, 105, 106, 107, 108, 111], "tol": 26, "bar": [26, 97], "sum_": [26, 59, 60, 61, 62], "suffici": [26, 34], "delta": [26, 79], "leq": 26, "upper": 26, "limit": [26, 44, 61, 62, 106, 122], "rtype": [26, 55, 75, 79], "abbrevi": [26, 53, 55, 72, 75, 118], "short": [26, 55, 75, 111], "label": [26, 55, 75, 79], "ax": [26, 30, 55, 57, 75, 79, 91], "long": [26, 41, 55, 75], "lower": [26, 111], "diverg": 26, "plot_scal": [26, 100, 101, 103, 104, 105, 106, 107, 108, 111], "accept": 26, "identifi": [26, 44], "generate_result": [26, 53, 55, 72, 75, 118], "whole": [26, 30, 34, 55, 61, 75, 111, 112], "whose": [26, 55, 75], "grid_sect": 26, "sample_index": 26, "num_artifact": 26, "artifact_scalar": 26, "num_evalu": [26, 43, 46], "add_sampl": 26, "probabl": [26, 75, 105, 118], "confidence_statu": 26, "thershold": 26, "conid": 26, "messag": [26, 122], "grid_configur": 26, "argument_tupl": 26, "catch_except": 26, "mo": 26, "essenti": [26, 57, 120], "worker": [26, 118], "privat": 26, "catch": 26, "_ray_trace_ctx": [26, 93], "stage_identifi": 26, "stage": [26, 56, 120], "here": [26, 115, 116, 117, 118, 119, 120, 121, 123], "stage_executor": 26, "callback": 26, "callabl": 26, "sample_grid": 26, "performance_tim": 26, "swept": [26, 76], "do": [26, 33, 35, 41, 57, 99, 106, 109, 111, 113, 118], "suppli": 26, "save_to_matlab": [26, 111], "matlab": [26, 111, 113], "evaluation_result": 26, "considered_object": 26, "sample_point": [26, 46], "num_sample_point": 26, "configure_point": 26, "point_index": 26, "first_impact": 26, "impact": 26, "last_impact": 26, "getter": 26, "significantli": 26, "increas": 26, "computation": [26, 111], "demand": [26, 106, 116, 119], "re": [26, 30, 118, 120], "reduc": [26, 111], "name": [26, 55, 75, 111, 114, 120, 121], "manipul": 26, "is_regist": 26, "question": [26, 65, 97], "setter": 26, "descriptor": 26, "obtain": [26, 112], "delet": 26, "decor": 26, "investigated_object": 26, "min_num_sampl": [26, 100, 101, 103, 104, 105, 106, 107, 108, 111, 119, 121], "num_actor": [26, 93, 106, 116, 119, 121], "console_mod": [26, 93], "section_block_s": 26, "database_cach": 26, "ray_address": [26, 93], "cpus_per_actor": 26, "runtime_env": 26, "montecarloevalu": 26, "dedic": [26, 27, 56, 93, 100, 108, 111, 116, 117, 118, 119, 120, 121], "block": [26, 33, 34, 35, 38, 41, 55, 57, 61, 63, 100, 101, 106, 108, 110, 111, 119], "hard": [26, 54, 59, 60, 61, 62, 121], "drive": [26, 102], "zodb": 26, "databas": 26, "address": [26, 50, 93, 117], "head": [26, 93], "machin": [26, 93], "reserv": 26, "One": [26, 27, 62, 111], "host": [26, 50, 114, 115], "occur": [26, 27, 65, 71, 111], "new_dimens": [26, 43, 46, 111, 117, 118, 119, 120, 121], "imens": [26, 46], "add_dimens": [26, 43, 46], "add_evalu": [26, 43, 46, 111, 117, 118, 119, 120, 121], "max_num_sampl": 26, "christian": [26, 122], "\u00e5": [26, 122], "kon": [26, 122], "hoel": [26, 122], "erik": [26, 122], "von": [26, 122], "schwerin": [26, 122], "ra": [26, 122], "\u00fa": [26, 122], "tempon": [26, 122], "asymptot": [26, 122], "optim": [26, 118, 121, 122], "siam": [26, 122], "journal": [26, 59, 122], "scientif": [26, 122], "36": [26, 68, 104, 122], "a869": [26, 122], "a885": [26, 122], "2014": [26, 122], "1137": [26, 122], "130911433": [26, 122], "num_drop": [27, 78, 93, 99, 109], "consecut": 27, "trigger": [27, 43, 44, 46, 47, 48, 49, 50, 93, 99, 109, 115], "add_devic": [27, 29, 43, 50, 78, 93], "exst": 27, "creation": [27, 29, 48, 113], "new_devic": [27, 29, 43, 45, 48, 50, 78, 93, 111, 114, 116, 117, 118, 119, 120, 121], "mother_nod": [28, 90], "mother": [28, 90], "is_random_root": 28, "is_root": 28, "random_moth": [28, 44, 87], "child": 28, "intenum": 29, "record": 29, "dataset": 29, "replai": [29, 43, 46], "simultan": [29, 88, 122], "device_regist": 29, "num_devic": 29, "num_receiv": 29, "num_transmitt": 29, "drop_dur": [29, 93], "overrid": 29, "start": [29, 102, 110, 112, 114], "permit": 29, "playback": 29, "session": 29, "transmit_oper": [29, 78, 93], "transmit_devic": [29, 78, 93], "receive_devic": [29, 43, 49, 78, 93], "receive_oper": [29, 78, 93], "__sampl": 30, "mxt": 30, "uniformli": 30, "__sampling_r": 30, "__carrier_frequ": 30, "superimpos": 30, "filter_ord": 30, "resampl": [30, 94], "supoperosit": 30, "empti": [30, 61, 93, 116, 118], "pipe": 30, "through": 30, "init": 30, "aliasing_filt": 30, "anti": 30, "alias": 30, "downsampl": 30, "added_sign": 30, "dynam": 30, "superposit": [30, 93, 111], "allowd": 30, "frequci": 30, "legend": 30, "were": [30, 57], "append_sampl": 30, "don": [30, 57, 120], "align": 30, "append_stream": [30, 53, 57], "to_interleav": 30, "data_typ": 30, "int16": 30, "interleav": [30, 31, 110], "stretch": [30, 62, 76], "Will": [30, 97], "doubl": 30, "from_interleav": 30, "interleaved_sampl": 30, "chain": [31, 34, 48, 56, 65, 78, 83, 85, 86, 89, 92, 101, 103, 110, 111, 112, 113, 116, 120], "bit_block_s": [31, 33, 34, 35, 38, 41, 100, 101, 108, 111, 119], "code_block_s": [31, 33, 34, 35, 38, 41, 119], "encodermanag": [31, 34, 56], "allow_pad": [31, 34], "allow_trunc": [31, 34], "add_encod": [31, 34, 111, 119], "required_num_data_bit": [31, 34], "blockinterleav": [31, 33], "block_siz": [31, 33, 106, 107], "interleave_block": [31, 33], "cyclic": [31, 53, 61, 104, 106, 107, 110], "redund": [31, 33, 38, 41, 100, 101, 108, 110, 111], "cyclicredundancycheck": [31, 35], "check_block_s": [31, 35], "repetit": [31, 53, 59, 61, 62, 76, 99, 100, 101, 104, 106, 107, 108, 109, 110, 111, 119], "repetitionencod": [31, 38, 111], "scrambl": [31, 110], "pseudorandomgener": [31, 41], "generate_sequ": [31, 41], "reset": [31, 41], "scrambler3gpp": [31, 41], "scrambler80211a": [31, 41], "term": [33, 62], "exchang": [33, 41, 55, 99, 109, 111, 117, 122], "wrong": 33, "decis": [33, 111], "demodul": [33, 53, 59, 60, 61, 62, 93, 111, 115, 120, 121], "introduc": [33, 34, 35, 41, 55, 75, 98, 110, 111, 113, 117], "wise": [33, 38], "fashion": [33, 111], "divid": [33, 55, 62], "k_n": [33, 34, 35, 38, 41], "tild": [33, 38, 116], "x_1": [33, 38], "x_2": [33, 38], "x_": [33, 38], "y_1": [33, 38], "y_2": [33, 38], "y_": [33, 38], "y_k": [33, 38], "cdot": [33, 34, 38, 91], "mod": [33, 38], "l_n": [33, 34, 35, 38, 41], "encoded_bit": [33, 34, 35, 38, 41, 53, 56], "achiev": [33, 34, 35, 38, 59, 111, 114, 119, 122], "relat": [33, 34, 111], "r_n": [33, 34, 38], "concept": [34, 55, 75, 108, 111, 117, 118, 122], "subsequ": [34, 65, 71, 111], "sequenti": [34, 65, 99, 109, 111, 113], "revers": [34, 120], "k_": 34, "m_n": 34, "lceil": 34, "rceil": 34, "exactli": [34, 41], "necessari": [34, 106], "simplif": 34, "basemodem": [34, 53, 56, 59, 65], "truncat": 34, "data_bit": [34, 59, 60, 61, 62, 121], "num_code_bit": 34, "next": [34, 41, 111, 120], "num_data_bit": 34, "plain": 34, "might": [34, 96, 106, 120], "cut": [34, 91], "bigger": [34, 96], "produc": 34, "crc": 35, "occurr": 35, "mock": [35, 47, 110], "checksum": 35, "repeat": [38, 59, 61, 100, 101, 108, 111, 119, 121], "32": [38, 104, 120], "lead": [38, 111], "even": [38, 79, 111], "mask": [41, 53, 61], "prevent": [41, 58], "init_sequ": 41, "1600": 41, "31": [41, 121], "gold": 41, "gernat": 41, "impli": 41, "revert": 41, "queue": 41, "back": [41, 48, 111, 113, 121], "origin": [41, 74], "rng": [41, 121], "scrambler": 41, "see": [41, 64, 91, 98, 112], "technic": 41, "scrambler_3gpp": 41, "802": [41, 122], "11a": [41, 122], "scrambler_80211a": 41, "soft": 41, "07": [41, 122], "2018": [41, 88, 122], "15": [41, 115, 118, 122], "etsi_t": [41, 122], "138200_138299": [41, 122], "138211": [41, 122], "02": [41, 121, 122], "ts_138211v150200p": [41, 122], "telecommun": [41, 122], "lan": [41, 122], "man": [41, 122], "art": [41, 59, 122], "11": [41, 91, 115, 117, 118, 120, 122], "mac": [41, 122], "layer": [41, 117, 122], "phy": [41, 122], "speed": [41, 100, 122], "std": [41, 122], "1999": [41, 122], "ieeestd": [41, 122], "90606": [41, 122], "real": [43, 47, 79, 115, 118], "setup": [43, 98, 113, 115], "usrp": [43, 50, 102, 110], "univers": [43, 109], "peripher": 43, "hardwareloop": [43, 46, 99, 109], "manual_trigg": [43, 46, 99, 109], "plot_inform": [43, 46], "staticoper": [43, 47], "silenttransmitt": [43, 47], "signaltransmitt": [43, 47], "powerreceiv": [43, 47], "signalreceiv": [43, 47], "physicaldevic": [43, 44, 47, 48, 50], "calibration_delai": [43, 47], "adaptive_sampl": [43, 47], "lowpass_filt": [43, 47], "lowpass_bandwidth": [43, 47], "max_receive_delai": [43, 47, 99, 115], "estimate_noise_pow": [43, 47], "calibr": [43, 47], "load_calibr": [43, 47], "physicaldevicetyp": [43, 47, 49], "physicalscenario": [43, 45, 48, 49, 50], "physicalscenariotyp": [43, 46, 49], "dummi": 43, "physicaldevicedummi": [43, 48], "physicalscenariodummi": [43, 48], "uhd": [43, 45, 110], "usrpsystem": [43, 50, 109], "usrpdevic": [43, 50], "ip": [43, 50, 109], "port": [43, 50, 109], "tx_gain": [43, 50], "rx_gain": [43, 50], "audio": [43, 102, 110, 123], "sound": [43, 45, 91, 115, 122], "card": [43, 45, 115], "audiodeviceantenna": [43, 44], "audiodevic": [43, 44, 45, 99, 115], "playback_devic": [43, 44, 99], "record_devic": [43, 44, 99], "playback_channel": [43, 44, 99], "record_channel": [43, 44, 99], "audioscenario": [43, 45], "offer": [44, 118], "afford": 44, "consum": 44, "grade": 44, "effect": [44, 91, 103, 111, 117, 118, 120, 121, 122], "typic": [44, 111], "44": 44, "khz": [44, 115], "48": 44, "48000": 44, "rock": 44, "samplin": [44, 47, 48, 50], "phyical": 45, "audiosystem": [45, 99], "keyboard": 46, "user": [46, 59, 99, 102, 109, 111, 112, 113, 114, 118, 120], "manual": [46, 98, 99, 109, 113], "file_loc": 46, "compens": [47, 62, 97, 101, 111], "adapt": [47, 88, 111, 122], "lowpass": 47, "determin": [47, 79], "1000": [47, 61, 100, 101, 103, 107, 108, 111, 119], "unbias": 47, "calibration_fil": 47, "num_iter": 47, "wait": 47, "possibl": [47, 65, 71, 114], "Be": 47, "care": 47, "idl": 47, "regard": 47, "phyiscal": 47, "demonstr": [48, 108, 116, 117, 118, 119, 120], "alwai": [48, 56, 116, 121], "rf_chain": [48, 78, 92, 98, 101, 103, 111], "rfchain": [48, 78, 88, 92, 101, 103, 111], "amplif": [48, 91, 92], "adc": [48, 76, 78, 79, 92, 103], "analogdigitalconvert": [48, 78, 79, 92], "isol": [48, 78, 88, 92, 110, 111, 122], "perfect": [48, 78, 80, 83, 92, 110], "coupl": [48, 78, 92, 110], "mutual": [48, 78, 81, 82, 92, 110], "device_sign": [48, 92], "infinit": [48, 79, 92, 93], "leaking_sign": [48, 92], "leak": [48, 78, 83, 89, 92], "baseband_sign": [48, 59, 60, 61, 62, 92], "server": 50, "5555": [50, 109], "700000000": 50, "internet": 50, "protocol": [50, 112], "remot": 50, "adress": 50, "joint": [51, 52, 105], "exemplari": 51, "jcastransmiss": [51, 52], "jcasrecept": [51, 52], "matchedfilterjca": [51, 52, 105], "range_resolut": [51, 52, 72, 76], "max_rang": [51, 52, 72, 76, 105], "communicationtransmiss": [52, 53, 56], "radartransmiss": [52, 72, 77], "communicationtransmissionfram": [52, 53, 56], "communicationrecept": [52, 53, 56], "radarrecept": [52, 72, 77], "communicationreceptionfram": [52, 53, 56], "duplexmodem": [52, 53, 56, 111, 115, 117, 119, 120, 121], "enviro": 52, "correlatiom": 52, "impair": [52, 56, 88], "encoded_symbol": [53, 56, 120], "num_fram": [53, 56], "decoded_sign": [53, 56], "decoded_symbol": [53, 56, 120], "equalized_symbol": [53, 56, 115], "decoded_bit": [53, 56], "transmitting_devic": [53, 56, 100, 118], "receiving_devic": [53, 56, 100, 118], "encoder_manag": [53, 56, 111, 119], "waveform_gener": [53, 56, 59, 60, 61, 62, 105, 111, 115, 117, 118, 119, 120, 121], "num_data_bits_per_fram": [53, 56], "transmittingmodem": [53, 55, 56, 111], "bits_sourc": [53, 56], "transmit_stream_cod": [53, 56], "receivingmodem": [53, 55, 56, 111], "receive_stream_cod": [53, 56], "simplexlink": [53, 56, 100, 118], "bitssourc": [53, 54, 56], "generate_bit": [53, 54], "randombitssourc": [53, 54], "streambitssourc": [53, 54], "symboltyp": [53, 57], "pilot": [53, 57, 58, 59, 60, 61, 62, 104], "num_block": [53, 57], "append_symbol": [53, 57], "plot_constel": [53, 57, 111, 115, 121], "statedsymbol": [53, 57, 59, 61, 62, 64, 66, 67, 68, 69, 71, 120], "channelestim": [53, 59, 61, 62, 110], "estimate_channel": [53, 59, 61, 62], "idealchannelestim": [53, 59, 61, 62, 110], "channelequ": [53, 59, 61, 62, 110], "equalize_channel": [53, 59, 61, 62], "zeroforcingchannelequ": [53, 59, 61, 62], "waveformgener": [53, 56, 59, 60, 61, 62, 121], "symbol_typ": [53, 59, 60], "samples_in_fram": [53, 59, 60, 61, 62, 121], "oversampling_factor": [53, 59, 62, 101, 103, 105, 111, 115, 119, 121], "modulation_ord": [53, 59, 60, 61, 62, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111, 115, 119, 121], "bits_per_symbol": [53, 59, 60], "bits_per_fram": [53, 55, 59, 60, 61, 62, 121], "symbols_per_fram": [53, 59, 60, 61, 62, 121], "bit_energi": [53, 59, 60, 61, 62, 121], "symbol_energi": [53, 59, 60, 61, 62, 121], "unmap": [53, 59, 60, 61, 62, 120, 121], "equalize_symbol": [53, 59], "data_r": [53, 59], "channel_estim": [53, 59, 99, 101, 105, 106, 107, 109, 111, 115, 117], "channel_equ": [53, 59, 99, 101, 105, 106, 107, 109, 111, 115, 117], "symbol_precoding_support": [53, 59, 60], "pilotwaveformgener": [53, 58, 59, 60, 61], "pilot_sign": [53, 59, 60, 61, 62], "pilotsymbolsequ": [53, 59, 62], "uniformpilotsymbolsequ": [53, 59], "custompilotsymbolsequ": [53, 59], "mappedpilotsymbolsequ": [53, 59], "configurablepilotwaveform": [53, 59, 62], "pilot_symbol_sequ": [53, 59, 62], "repeat_pilot_symbol_sequ": [53, 59, 62], "pilot_symbol": [53, 59], "communicationevalu": [53, 55], "transmitting_modem": [53, 55, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111], "receiving_modem": [53, 55, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 111], "biterrorartifact": [53, 55], "biterrorevalu": [53, 55, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 119, 120, 121], "blockerrorartifact": [53, 55], "blockerrorevalu": [53, 55, 110], "frameerrorartifact": [53, 55], "frameerrorevalu": [53, 55, 110], "throughputartifact": [53, 55], "throughputevalu": [53, 55, 100, 110, 111], "filteredsinglecarrierwaveform": [53, 62], "symbol_r": [53, 62, 101, 103, 104, 105, 111, 115, 119], "num_preamble_symbol": [53, 62, 101, 103, 104, 105, 111, 115, 119], "num_postamble_symbol": [53, 62], "num_pilot_sampl": [53, 62], "num_guard_sampl": [53, 62], "guard_interv": [53, 60, 62, 100, 101, 103, 104, 105, 108, 111], "pilot_r": [53, 62, 101, 103, 104, 105, 111, 115], "num_data_symbol": [53, 62, 101, 103, 104, 105, 111, 115, 119], "plot_filter_correl": [53, 62], "plot_filt": [53, 62], "singlecarriersynchron": [53, 62], "singlecarriercorrelationsynchron": [53, 62, 115], "singlecarrierchannelestim": [53, 62], "singlecarrieridealchannelestim": [53, 62], "singlecarrierleastsquareschannelestim": [53, 62, 115], "singlecarrierchannelequ": [53, 62], "singlecarrierzeroforcingchannelequ": [53, 62, 115], "singlecarrierminimummeansquarechannelequ": [53, 62], "rolledoffsinglecarrierwaveform": [53, 62], "filter_length": [53, 62], "relative_bandwidth": [53, 62], "roll_off": [53, 62, 104, 111], "rootraisedcosinewaveform": [53, 62, 111, 115, 119], "raisedcosinewaveform": [53, 62], "rectangularwaveform": [53, 62], "fmcwwaveform": [53, 62], "chirp_dur": [53, 60, 62, 72, 76, 100, 108], "chirp_slop": [53, 62], "chirp": [53, 62, 76, 102, 104, 108, 110, 111], "kei": [53, 62, 111, 121], "chirpfskwaveform": [53, 60], "chirp_bandwidth": [53, 60, 100, 108], "freq_differ": [53, 60, 100, 108], "num_pilot_chirp": [53, 60], "num_data_chirp": [53, 60, 100, 108], "samples_in_chirp": [53, 60], "chirps_in_fram": [53, 60], "chirp_tim": [53, 60], "chirpfsksynchron": [53, 60], "chirpfskcorrelationsynchron": [53, 60], "orthogon": [53, 110], "divis": [53, 110], "multiplex": [53, 63, 106, 107, 110], "elementtyp": [53, 61, 99, 104, 106, 107, 109, 117, 118, 120], "null": [53, 61, 75, 99, 106, 109], "prefixtyp": [53, 61, 104, 106, 107], "zeropad": [53, 61], "frameel": [53, 61, 99, 104, 106, 107, 109, 117, 118, 120], "frameresourc": [53, 61, 117, 118, 120], "prefix_typ": [53, 61, 104, 106, 107], "prefix_ratio": [53, 61, 99, 104, 106, 107, 109], "num_subcarri": [53, 61, 99, 104, 106, 107, 109], "num_refer": [53, 61], "framesect": [53, 61], "num_repetit": [53, 61, 99, 104, 106, 107, 109], "num_word": [53, 61], "resource_mask": [53, 61], "place_symbol": [53, 61], "pick_symbol": [53, 61], "framesymbolsect": [53, 61, 117, 118, 120], "pattern": [53, 61, 99, 104, 106, 107, 109, 117, 118, 120], "frameguardsect": [53, 61], "ofdmwaveform": [53, 61, 117, 118, 120], "dc_suppress": [53, 61, 99, 104, 106, 107, 109], "add_resourc": [53, 61], "add_sect": [53, 61], "pilot_sect": [53, 61], "subcarrier_spac": [53, 61, 99, 104, 106, 107, 109], "words_per_fram": [53, 61], "references_per_fram": [53, 61], "reference_based_channel_estim": [53, 61], "pilotsect": [53, 61], "pilot_el": [53, 61], "schmidlcoxpilotsect": [53, 61], "ofdmsynchron": [53, 61], "ofdmcorrelationsynchron": [53, 61], "schmidlcoxsynchron": [53, 61], "referenceposit": [53, 61], "ideal_preambl": [53, 61], "ideal_midambl": [53, 61], "ideal_postambl": [53, 61], "ofdmidealchannelestim": [53, 61, 117], "reference_posit": [53, 61], "ofdmleastsquareschannelestim": [53, 61], "ofdmchannelequ": [53, 61, 117], "ofdmzeroforcingchannelequ": [53, 61, 117], "ofdmminimummeansquarechannelequ": [53, 61], "pgt": [53, 58], "correlationsynchron": [53, 58, 60, 61, 62], "guard_ratio": [53, 58, 60, 61, 62], "turn": [54, 115], "There": [54, 113], "num_bit": 54, "randombit": 54, "introduct": [55, 75, 111], "compar": [55, 116], "multipli": 55, "rather": [55, 75, 117], "straightforward": [55, 75], "separ": [55, 75, 79, 92, 101, 102, 111], "modem_alpha": [55, 101, 103, 104, 106, 107, 108, 111], "modem_beta": [55, 104, 108], "communication_evalu": 55, "communication_artifact": 55, "throughput": [55, 100, 110, 111, 118], "frame_error": 55, "fec": [56, 111, 123], "symbolprecod": [56, 63, 64, 66, 67, 69, 71, 120], "transmitstreamcod": [56, 63, 70], "receivestreamcod": [56, 63, 70], "tranmsit": 56, "unspecifi": 56, "randomli": 56, "txmodem": 56, "rxmodem": 56, "simulatn": 56, "simplex": [56, 100, 118], "somewher": 57, "plane": [57, 59, 121], "seri": [57, 120], "denot": [57, 91, 110, 117], "deep": 57, "constel": [57, 62, 111, 115, 121], "pyplot": [57, 111, 117, 118, 120, 121], "four": [57, 111, 117, 118, 120, 121], "clock": [58, 60, 62], "equival": [58, 87, 95, 113, 121], "kc76": [58, 122], "guard": [58, 59, 60, 61, 62, 99, 104, 106, 107, 109], "pilotcorrel": [58, 61], "anoth": 58, "span": 58, "waveformtyp": 59, "nasir": [59, 122], "overview": [59, 110, 111, 122], "tghe": 59, "nochannelestim": 59, "informaion": 59, "noequal": [59, 61], "stated_symbol": 59, "forc": [59, 61, 62, 99, 104, 107, 109, 110, 117], "zeroforc": 59, "oversampl": [59, 62, 115], "dat": [59, 60, 61, 62], "unitless": [59, 60, 61, 62], "data_symbol": [59, 60, 61, 62, 121], "singular": [59, 60, 61, 62], "accordingli": 59, "0j": 59, "viabl": 59, "spot": [59, 111], "Not": 59, "advis": 59, "product": 59, "freeli": [59, 111], "chose": [59, 111], "pskqammap": [59, 62], "symbol_sequ": 59, "repeat_symbol_sequ": 59, "ali": [59, 122], "salman": [59, 122], "durrani": [59, 122], "hani": [59, 122], "mehrpouyan": [59, 122], "steven": [59, 122], "blostein": [59, 122], "rodnei": [59, 122], "kennedi": [59, 122], "survei": [59, 122], "classif": [59, 122], "research": [59, 112, 122], "year": [59, 122], "eurasip": [59, 122], "network": [59, 122], "2016": [59, 122], "1186": [59, 122], "s13638": [59, 122], "016": [59, 122], "0670": [59, 122], "1e": [60, 101, 103, 104, 105, 106, 107, 111, 116, 118], "08": [60, 118], "1000000000": 60, "50": [60, 100, 103, 108, 116, 117, 118, 119, 120], "adjac": 60, "chirpfsk": [60, 100, 108], "neighbour": 60, "fsk": [60, 102, 110], "ofdm": [61, 91, 99, 102, 109, 110, 117, 118, 120, 122], "prefix": 61, "AND": 61, "occupi": 61, "subcarri": [61, 99, 104, 106, 107, 109], "num_element_typ": 61, "reference_symbol": 61, "palc": 61, "includ": [61, 78, 79], "1200": [61, 104, 117, 118, 120], "ul": 61, "dl": [61, 106], "sc": [61, 62, 101, 103, 104, 105, 111], "fdma": 61, "bpsk": 61, "qpsk": 61, "64": [61, 104, 115], "256": [61, 100, 106, 107, 108], "qam": [61, 62, 102, 104, 110, 111], "free": 61, "deploi": [61, 112], "suppress": 61, "symbol_grid": 61, "alloc": 61, "distinguish": [61, 111], "sometim": 61, "waveformgeneratorofdm": 61, "subsymbol": [61, 99, 106, 109], "schmidl": [61, 99, 109, 122], "cox": [61, 99, 109, 122], "schmidlcoxpilot": [61, 99, 109], "equz": 61, "schmidlcox": [61, 99, 109], "channel_st": [61, 111], "referencposit": 61, "serializt": 61, "zf": [61, 62, 99, 104, 105, 106, 107, 109, 117], "psk": [61, 62, 106, 111, 121], "mmse": [61, 62, 101, 110, 111], "inf": [61, 79, 91, 93, 100, 108, 122], "45": [61, 120, 122], "1613": [61, 122], "1621": [61, 122], "1997": [61, 122], "26": [61, 122], "650240": [61, 122], "cosin": [62, 110, 111, 115], "roll": [62, 104], "off": [62, 91, 104], "psk_qam_map": 62, "llr": 62, "isi": 62, "fmcw": [62, 72, 76, 105, 110, 116], "awgn": [62, 78, 87, 101, 104, 111, 117, 120, 121], "amplitud": [62, 79, 88, 91, 94, 95, 103, 121], "preambl": [62, 104, 111], "postambl": 62, "waform": 62, "convolut": [62, 110, 122], "shape": [62, 88, 116, 118], "longer": 62, "puls": [62, 76, 104, 115], "inter": 62, "how": [62, 97, 111, 115], "overlap": [62, 101, 111], "mdulat": 62, "png": [62, 79, 91], "hire": [62, 79, 91], "rootraisedcosin": [62, 101, 103, 104, 111], "raisedcosin": 62, "rectangular": [62, 110], "slope": [62, 72, 76], "precodertyp": [63, 65], "dft": [63, 64, 99, 106, 107, 109, 110], "singlecarri": [63, 67, 106, 107], "spatialmultiplex": [63, 69, 118], "maximumratiocombin": [63, 66, 68], "spacetimeblockcod": [63, 68], "fft_norm": 64, "norm": 64, "num_input_stream": [64, 65, 66, 67, 68, 69, 70, 120], "num_output_stream": [64, 65, 66, 67, 68, 69, 70, 120], "meant": [65, 71], "required_num_output_stream": [65, 120], "required_num_input_stream": [65, 120], "fraction": [65, 69], "intermedi": [65, 71], "multi": [65, 71, 112], "__modem": 65, "__precod": 65, "required_output": 65, "queri": [65, 97, 115, 116], "required_input": 65, "pop_precod": [65, 120], "mrc": 66, "symbol_stream": 66, "stream_respons": 66, "stream_nois": 66, "take": [67, 69, 119], "cool": 68, "stbc": 68, "211": 68, "sec": 68, "6": [68, 99, 101, 103, 104, 105, 106, 109, 111, 115, 117, 119, 120, 121], "sm": [69, 106], "transmitcod": 70, "receivecod": 70, "symbolcod": [71, 106, 107], "radarwaveform": [72, 76, 77], "ping": [72, 76, 77], "range_bin": [72, 73, 76, 77], "velocity_bin": [72, 73, 76, 77], "cube": [72, 74, 75, 77], "cloud": [72, 74, 77], "transmit_beamform": [72, 77], "receive_beamform": [72, 77, 116], "detector": [72, 75, 77, 105], "radarcub": [72, 73, 74, 77], "angle_bin": [72, 73], "plot_rang": [72, 73], "plot_range_veloc": [72, 73], "normalize_pow": [72, 73], "pointdetect": [72, 74], "fromspher": [72, 74], "radarpointcloud": [72, 74, 77], "num_point": [72, 74], "add_point": [72, 74], "radardetector": [72, 74, 77], "thresholddetector": [72, 74], "min_pow": [72, 74, 105], "maxdetector": [72, 74], "radarevalu": [72, 75], "receiving_radar": [72, 75], "radar_channel": [72, 75, 105], "detectionprobartifact": [72, 75], "detectionprobabilityevalu": [72, 75], "detectionprobevalu": [72, 75], "rocartifact": [72, 75], "h0_valu": [72, 75], "h1_valu": [72, 75], "rocevalu": [72, 75], "data_h0": [72, 75], "data_h1": [72, 75], "rocevaluationresult": [72, 75], "receiveroperatingcharacterist": [72, 75, 110], "receiving_radar_null_hypothesi": [72, 75], "rootmeansquareartifact": [72, 75], "num_error": [72, 75], "cummul": [72, 75], "rootmeansquareevalu": [72, 75], "rootmeansquareerrorresult": [72, 75], "rootmeansquareerror": [72, 75, 110], "num_chirp": [72, 76], "adc_sampling_r": [72, 76], "doppler_resolut": [72, 76], "pulse_rep_interv": [72, 76], "max_veloc": [72, 76], "minmal": 74, "versu": 75, "alarm": 75, "radar_evalu": 75, "present": [75, 97], "when": [75, 92, 113, 115], "abov": [75, 91, 111], "roc": 75, "measur": 75, "hypothesi": 75, "h0": 75, "altern": 75, "h1": 75, "cube_h0": 75, "cube_h1": 75, "detection_prob": 75, "false_alarm_prob": 75, "characteristc": 75, "num_threshold": 75, "101": 75, "els": 75, "curv": [75, 91], "errro": 75, "pcl": 75, "squre": 75, "100000000": 76, "unmodul": [76, 101, 111], "under": [76, 98, 113], "input_sign": [76, 79, 88, 91], "depth": [76, 77, 102], "radial": [76, 77], "valueerorr": 76, "wh": 77, "mono": 77, "simulationscenario": [78, 93], "departing_channel": [78, 93], "arriving_channel": [78, 93], "set_channel": [78, 93, 116, 117], "simulationrunn": [78, 93], "plot_result": [78, 93, 100, 101, 103, 104, 105, 106, 107, 108, 111], "dump_result": [78, 93], "operator_separ": [78, 92, 108], "gaincontroltyp": [78, 79], "max_amplitud": [78, 79], "rms_amplitud": [78, 79], "multiply_sign": [78, 79], "divide_sign": [78, 79], "automaticgaincontrol": [78, 79, 103], "agc_typ": [78, 79], "backoff": [78, 79], "quantizertyp": [78, 79], "mid_ris": [78, 79, 103], "mid_tread": [78, 79], "num_quantization_bit": [78, 79], "num_quantization_level": [78, 79], "quantizer_typ": [78, 79, 103], "plot_quant": [78, 79], "amplitude_imbal": [78, 88, 103], "phase_offset": [78, 88, 103], "add_iq_imbal": [78, 88], "power_amplifi": [78, 88, 98, 101, 103, 111], "phase_nois": [78, 88], "linearleakag": [78, 89], "amplifi": [78, 98, 101, 103, 110, 111, 122], "poweramplifi": [78, 88, 91], "adjust_pow": [78, 91], "saturation_amplitud": [78, 91], "send": [78, 91], "clippingpoweramplifi": [78, 91], "rapppoweramplifi": [78, 91], "smoothness_factor": [78, 91, 101, 111], "salehpoweramplifi": [78, 91], "phase_alpha": [78, 91], "phase_beta": [78, 91], "amplitude_alpha": [78, 91], "amplitude_beta": [78, 91], "custompoweramplifi": [78, 91], "phasenois": [78, 88, 90], "add_nois": [78, 90], "nophasenois": [78, 90], "perfectcoupl": [78, 80, 82], "imped": [78, 80, 83, 110], "impedancecoupl": [78, 80, 81], "transmit_correl": [78, 80, 81], "receive_correl": [78, 80, 81], "transmit_imped": [78, 80, 81], "receive_imped": [78, 80, 81], "matching_imped": [78, 80, 81], "perfectisol": [78, 83, 85], "specificisol": [78, 83, 86], "quantiz": [79, 103], "automatig": 79, "adjust": [79, 91, 97], "appropri": 79, "fix": 79, "baserepresent": 79, "rm": [79, 106], "agc": 79, "wil": 79, "plu": 79, "imaginari": 79, "greatest": 79, "quantiti": 79, "roundtripconstructor": 79, "scalarnod": 79, "jitter": 79, "symmetr": [79, 111, 122], "still": 79, "quantizationtyp": 79, "around": [79, 118], "input_sampl": 79, "fig_ax": 79, "depict": [79, 91], "staircas": 79, "charaterist": 79, "white": [87, 111, 121], "gaussian": [87, 111, 121], "variabl": [87, 113, 121], "kiayani": [88, 122], "tx_power": 88, "pa": [88, 110], "imbal": [88, 103, 110], "notat": 88, "en": 88, "wikipedia": 88, "wiki": 88, "iq_imbal": 88, "deterior": 88, "no_antenna": 88, "no_sampl": 88, "pase": 88, "adnan": [88, 122], "muhammad": [88, 122], "zeeshan": [88, 122], "wahe": [88, 122], "lauri": [88, 122], "anttila": [88, 122], "mahmoud": [88, 122], "abdelaziz": [88, 122], "dani": [88, 122], "korpi": [88, 122], "vill": [88, 122], "syrj\u00e4l\u00e4": [88, 122], "marko": [88, 122], "kosunen": [88, 122], "kari": [88, 122], "stadiu": [88, 122], "jussi": [88, 122], "ryyn\u00e4nen": [88, 122], "mikko": [88, 122], "valkama": [88, 122], "nonlinear": [88, 91, 122], "cancel": [88, 122], "improv": [88, 113, 122], "microwav": [88, 122], "theori": [88, 111, 122], "techniqu": [88, 122], "66": [88, 122], "2299": [88, 122], "2312": [88, 122], "tmtt": [88, 122], "2017": [88, 122], "2786729": [88, 122], "invari": 91, "memoryless": [91, 122], "satur": 91, "s_": 91, "sat": [91, 122], "overwritten": 91, "volt": 91, "clip": [91, 110], "preserv": 91, "rapp": [91, 101, 103, 110, 111, 122], "2p_": 91, "p_": 91, "geq": 91, "smooth": [91, 101, 111], "saleh": [91, 110, 122], "alpha_": 91, "beta_": 91, "alpha": [91, 108], "beta": 91, "ch": [91, 122], "hpa": [91, 122], "dpsk": [91, 122], "european": [91, 122], "conf": [91, 122], "comm": [91, 122], "22": [91, 122], "24": [91, 106, 117, 118, 120, 121, 122], "91": [91, 122], "lieg": [91, 122], "belgium": [91, 122], "179": [91, 122], "184": [91, 122], "1991": [91, 122], "elib": [91, 122], "dlr": [91, 122], "33776": [91, 122], "twt": [91, 122], "29": [91, 122], "1715": [91, 116, 122], "1720": [91, 118, 122], "novemb": [91, 122], "1981": [91, 122], "tcom": [91, 122], "1094911": [91, 122], "proper": [92, 111, 113, 115], "metric": 93, "mxm": 93, "active_onli": 93, "depart": 93, "transmitter_index": 93, "receiver_index": 93, "transmitted_sign": 93, "lose": 94, "variou": [94, 98], "dbconversiontyp": [94, 95], "db2lin": [94, 95], "lin2db": [94, 95], "marcum_q": [94, 95], "rotation_matrix": [94, 95], "transform_vector": [94, 95], "transform_coordin": [94, 95], "rms_valu": [94, 95], "delay_resampling_matrix": [94, 96], "tile": [94, 119], "screen_geometri": [94, 97], "set_figure_geometri": [94, 97], "tile_figur": [94, 97], "db_val": 95, "conversion_typ": 95, "val": 95, "marcum": 95, "q_m": 95, "relationship": 95, "chi": 95, "approxim": [95, 117], "num_samples_in": 96, "num_samples_out": 96, "mxn": 96, "necessarili": 96, "curtesi": 97, "stackoverflow": 97, "com": [97, 122], "61503168": 97, "evenli": 97, "screen": 97, "monitor": 97, "fig": [97, 118], "backend": 97, "col": 97, "row": 97, "screen_rect": 97, "tile_offset": 97, "now": [97, 102, 111, 115, 116, 117, 118, 119, 121], "qt": 97, "tk": 97, "import": [97, 111, 115, 116, 117, 118, 119, 120, 121], "qt5agg": 97, "tkagg": 97, "shown": 97, "geometri": 97, "pixel": 97, "screeninfo": 97, "height": 97, "n_fig": 97, "hint": [98, 120], "intend": [98, 113], "contribut": [98, 112], "chanc": 98, "regress": 98, "autom": [98, 111], "unittest": 98, "discov": 98, "unit_test": 98, "enforc": 98, "pep8": 98, "flake8": 98, "complianc": 98, "violat": 98, "black": 98, "preprocessor": 98, "choic": [98, 113], "pip": [98, 113, 116, 119, 121], "sphinx": 98, "pypi": 98, "docssourc": 98, "api": [98, 110, 111, 117, 118, 123], "directli": [98, 111, 112, 123], "insert": 98, "autodoc": 98, "found": [98, 111], "py": [98, 114, 116, 117, 118, 119, 120, 121], "setuptool": 98, "build": [98, 113], "build_sphinx": 98, "html": 98, "websit": 98, "view": 98, "open": [98, 112, 113, 122], "web": 98, "browser": 98, "desktop": 99, "soundcard": [99, 110], "establish": [99, 100, 109], "siso": [99, 109, 115, 117], "30e3": [99, 106, 109], "dc": [99, 106, 107, 109], "4096": [99, 106, 109], "communict": [99, 106, 109], "0703125": [99, 104, 106, 107, 109], "600": [99, 106, 109], "2100": [99, 106, 109], "078125": [99, 104, 106, 107, 109], "35": [99, 106, 109], "677083e": [99, 106, 109], "similar": [100, 111], "500khz": 100, "sf": 100, "correspond": 100, "delta_f": 100, "1953": [100, 108], "125hz": 100, "bw": 100, "512": 100, "uncod": [100, 101, 104, 111], "log2": [100, 121], "15625": 100, "kbp": 100, "160": 100, "865mhz": 100, "10m": [100, 106], "865e6": [100, 106, 107, 108], "interfernc": 100, "500e3": [100, 108], "512e": [100, 108], "125": [100, 108, 111], "paus": [100, 104, 108], "log": [100, 101, 103, 104, 105, 106, 107, 108, 111], "finish": [100, 101, 103, 104, 105, 106, 107, 108, 111, 116, 117, 118, 119, 120, 121], "mhz": [101, 104, 111], "nyquist": [101, 111], "yield": [101, 111], "400": [101, 111], "mbp": [101, 104, 111], "mu": [101, 111], "interchirp": [101, 111], "100e6": [101, 103, 105, 111], "1e6": [101, 103, 104, 105, 111, 119], "post": [101, 111], "80": [101, 111, 117, 118, 119, 120], "chapter": [102, 111], "hermspi": 102, "knowledg": 102, "instead": [102, 111, 114], "instruct": [102, 123], "suit": [102, 111], "enter": [102, 111], "download": [102, 113, 123], "give": [102, 111], "own": [102, 112], "lora": [102, 110], "driver": [102, 110], "mid": 103, "riser": 103, "10000": 103, "numerologi": 104, "lte": 104, "501": 104, "5e9": 104, "501e9": 104, "90": [104, 117, 118, 119, 120], "15e3": [104, 107], "2048": [104, 115], "200": 104, "2e": [104, 105, 107], "simulatan": 105, "backscatt": 105, "downl": 105, "commuic": 105, "vicin": 105, "1e9": [105, 109], "1ghz": 105, "1m": 105, "5m2": 105, "base_station_oper": 105, "operat": 105, "terminal_oper": 105, "downlink": [105, 111], "tdd": 106, "ddddffuddddffu": 106, "30khz": 106, "2400": 106, "ldpc": [106, 107, 122], "2x2": 106, "3ghz": 106, "isotrop": [106, 107], "10e": [106, 107], "10cm": [106, 107], "apart": [106, 107], "interconnect": [106, 107, 118], "quit": 106, "memori": 106, "128": [107, 115], "comparison": [108, 122], "192": 109, "168": 109, "189": 109, "132": 109, "steadili": 110, "expand": [110, 111, 112, 123], "latest": [110, 113], "offici": [110, 112, 113, 114, 123], "bold": 110, "bi": 110, "anual": 110, "fall": [110, 113], "reundanc": 110, "differenti": 110, "pariti": [110, 122], "reed": [110, 122], "solomon": [110, 122], "systemat": 110, "turbo": [110, 122], "alamouti": 110, "am": 110, "pm": 110, "anlog": 110, "charactersit": 110, "rmse": 110, "equip": [110, 123], "properli": [111, 114, 121], "integr": [111, 114], "plug": [111, 112, 117], "rough": 111, "quickli": 111, "accustom": [111, 118, 120], "aim": [111, 112], "strictli": 111, "nativ": [111, 112, 113, 115], "entiti": 111, "character": 111, "verif": 111, "scope": 111, "unlimit": 111, "assumpt": 111, "meta": 111, "about": 111, "submit": 111, "These": 111, "modular": [111, 112], "interchang": 111, "much": 111, "easier": 111, "outlin": [111, 115, 116, 119], "util": [111, 113], "40": [111, 117, 118, 119, 120], "show": [111, 117, 118, 120], "snippet": 111, "statement": [111, 113], "our": [111, 116, 117, 118, 119, 120, 121], "13": [111, 115, 118, 122], "highlight": [111, 121], "philosophi": 111, "behind": 111, "those": [111, 116], "simpl": 111, "cours": [111, 121], "multitud": 111, "beyond": 111, "consult": 111, "sink": 111, "tx_devic": 111, "rx_devic": 111, "tx_oper": 111, "rx_oper": 111, "rx_signal": 111, "seem": 111, "somewhat": 111, "glanc": 111, "almost": [111, 114], "ship": 111, "noiseless": 111, "diagram": 111, "stem": [111, 118], "consequ": [111, 118], "consider": 111, "noisi": 111, "said": [111, 116], "clearli": [111, 115], "visibl": [111, 115], "fundament": [111, 117], "commonli": 111, "parametr": 111, "seemingli": 111, "streamlin": [111, 113], "multicor": [111, 118], "Its": 111, "usag": 111, "surround": 111, "frequent": 111, "conduct": 111, "ber": [111, 115, 117, 120], "42": [111, 115, 120, 121], "mat": 111, "importantli": 111, "exploit": 111, "simpli": [111, 113, 118], "major": [111, 119], "vote": [111, 119], "higher": [111, 115], "capabilit": 111, "But": [111, 119], "sweet": 111, "tradeoff": 111, "intefer": 111, "snr_dimens": 111, "25": [111, 122], "0625": 111, "rep_dimens": 111, "engin": [111, 112, 113, 114, 122], "out": 111, "uniqu": 111, "100ghz": 111, "github": [111, 112, 113, 114], "welcom": 112, "heterogen": 112, "semi": 112, "driven": 112, "mechan": 112, "rat": 112, "student": 112, "cite": 112, "adler": [112, 122], "issu": [112, 113], "contact": 112, "maintain": 112, "holist": 112, "framework": [112, 116, 122], "kpi": 112, "testb": 112, "compact": 112, "librari": [112, 118], "design": 112, "jan": [112, 122], "tobia": [112, 122], "kronauer": [112, 122], "andr\u00e9": [112, 122], "noll": [112, 122], "barreto": [112, 122], "6g": [112, 122], "120256": [112, 122], "120273": [112, 122], "3222063": [112, 122], "wai": 113, "built": [113, 118], "wheel": 113, "clone": 113, "scratch": 113, "recommend": 113, "who": 113, "extend": [113, 122], "maco": 113, "newest": 113, "env": [113, 114, 118], "action": 113, "plan": 113, "omit": 113, "replac": [113, 114, 117], "develop": [113, 114, 120, 121], "mathod": 113, "reason": 113, "unabl": 113, "lf": 113, "git": 113, "repo": 113, "cd": 113, "submodul": [113, 122], "cmake": 113, "studio": 113, "alter": [113, 120], "edit": 113, "remain": 113, "extern": 113, "preliminari": 113, "octav": 113, "oct2pi": 113, "abl": 113, "setx": 113, "cli": 113, "zip": 113, "archiv": 113, "hermes_quadriga": 113, "quadriga_src": 113, "search": 113, "userspac": 113, "inexperienc": 113, "experi": 113, "everyon": 113, "especi": [114, 115], "disciplin": 114, "mathwork": 114, "popular": 114, "languang": 114, "esenti": [114, 117], "workflow": [114, 117, 118], "pyenv": 114, "executionmod": 114, "outofprocess": 114, "ex": 114, "look": 114, "someth": 114, "usernam": 114, "simulation_modul": 114, "importlib": 114, "import_modul": 114, "anyon": 114, "thank": 114, "roberto": 114, "bomfin": 114, "courtesi": 114, "jupyt": [115, 116, 117, 118, 119, 120, 121, 123], "notebook": [115, 116, 117, 118, 119, 120, 121, 123], "onlin": [115, 116, 117, 118, 119, 120, 121, 123], "hardawar": 115, "precis": 115, "diretli": 115, "hardware_loop": 115, "lokal": 115, "query_devic": 115, "underyl": 115, "sounddevic": 115, "1e4": 115, "hilbert": 115, "envelop": 115, "fetch": 115, "speaker": 115, "inspect": [115, 116, 117, 118, 119, 120, 121], "portion": 115, "equl": 115, "assess": 115, "cap69": [116, 122], "logic": 116, "def": [116, 117, 118, 119, 120, 121], "__init__": [116, 118], "sample_covari": 116, "linalg": 116, "inv": 116, "conj": 116, "ey": 116, "dtype": [116, 117, 118, 121], "array_respons": 116, "beamformed_sampl": 116, "newaxi": [116, 121], "And": 116, "coventionalbeamform": 116, "10ghz": [116, 119], "10e9": [116, 119], "veri": [116, 118, 119], "monte_carlo": [116, 117, 118, 119, 120, 121], "1735": 116, "55": [116, 122], "27": [116, 117, 118], "1875": 116, "essenc": 117, "capabl": 117, "radiat": 117, "radat": 117, "straightfoward": 117, "phaseshiftchannel": 117, "phase_shift": 117, "exp": 117, "2j": 117, "_rng": 117, "fourth": 117, "linspac": [117, 118, 119, 120], "endpoint": [117, 118, 120], "54": [117, 118], "1691": 117, "1100": [117, 118, 120], "1711": 117, "00": [117, 118, 119, 120, 121], "70": [117, 118, 119, 120], "30": [117, 118, 119, 120, 121], "18": [117, 120, 122], "1852": 117, "hilight": [117, 120], "roughli": 117, "tfrac": 117, "stub": 117, "96": 117, "arguabl": [118, 119], "grasp": 118, "ll": 118, "Such": 118, "could": 118, "insight": 118, "powerartifact": 118, "2f": 118, "powerevalu": 118, "subplot": 118, "suptitl": 118, "arang": [118, 121], "len": 118, "set_xlabel": 118, "set_ylabel": 118, "summed_pow": 118, "keepdim": [118, 119], "powerevaluationresult": 118, "section_coord": 118, "ndindex": 118, "_plot_multidim": 118, "powerestim": 118, "__devic": 118, "what": 118, "think": 118, "why": 118, "answer": 118, "simulaten": 118, "programm": 118, "parallel": 118, "sent": 118, "embarassingli": 118, "blazingli": 118, "fast": [118, 122], "observ": [118, 121], "power_estim": 118, "1740": 118, "43": 118, "1881": 118, "funtion": 118, "thread": 118, "23": 118, "626": 118, "813": 118, "print_log": 118, "lt": 118, "_multithreadedrendezv": 118, "rpc": 118, "statuscod": 118, "debug_error_str": 118, "ipv4": 118, "127": 118, "49322": 118, "grpc_messag": 118, "grpc_statu": 118, "created_tim": 118, "08t22": 118, "621707663": 118, "gt": 118, "ray_listen_error_messag": 118, "traceback": 118, "stealth": 118, "appdata": 118, "python3912": 118, "lib": 118, "980": 118, "_bootstrap_inn": 118, "630": 118, "import_thread": 118, "76": 118, "importthread": 118, "621687705": 118, "917": 118, "_target": 118, "_arg": 118, "_kwarg": 118, "site": 118, "_privat": 118, "1824": 118, "listen_error_messag": 118, "error_data": 118, "gcs_error_subscrib": 118, "poll": 118, "gcs_pubsub": 118, "317": 118, "_poll_lock": 118, "timeout": 118, "249": 118, "fut": 118, "grpc": 118, "_channel": 118, "744": 118, "621122805": 118, "would": 119, "3k": 119, "decid": 119, "repetitioncod": 119, "reshap": [119, 121], "astyp": [119, 121], "randint": 119, "error_cod": 119, "flip": [119, 120], "corrected_data": 119, "3333333333333333": 119, "39": 119, "capaign": 119, "1672": [119, 120, 121], "20000": 119, "1692": [119, 120, 121], "49": 119, "1832": [119, 120, 121], "u": 119, "At": 120, "coher": 120, "tutori": [120, 121], "exercis": 120, "jump": 120, "prose": 120, "symbolflipp": 120, "incom": 120, "stadedsymbol": 120, "counterpart": 120, "carri": 120, "reli": 120, "46": 120, "complementari": 121, "invert": 121, "communc": 121, "sake": 121, "simplic": 121, "skip": 121, "ask": 121, "mention": 121, "amplitudeshiftkei": 121, "symbols_candid": 121, "symbol_indic": 121, "packbit": 121, "bitord": 121, "littl": 121, "flatten": 121, "symbol_index_estim": 121, "round": 121, "ab": 121, "uint8": 121, "unpackbit": 121, "baseband_sampl": 121, "explain": 121, "circl": 121, "symbol_pow": 121, "chosen": 121, "practic": 121, "instanti": 121, "default_rng": 121, "instantiant": 121, "mapped_symbol": 121, "baseband_transmiss": 121, "baseband_recept": 121, "received_symbol": 121, "500": 121, "77": 121, "publish": 122, "review": 122, "etsi18": 122, "akb22": 122, "ari09": 122, "erdal": 122, "arikan": 122, "construct": 122, "capac": 122, "3051": 122, "3073": 122, "2009": 122, "tit": 122, "2021379": 122, "bcjr74": 122, "bahl": 122, "cock": 122, "jelinek": 122, "raviv": 122, "corresp": 122, "284": 122, "287": 122, "1974": 122, "1055186": 122, "bar50": 122, "bhvst14": 122, "bgt93": 122, "berrou": 122, "glavieux": 122, "thitimajshima": 122, "Near": 122, "shannon": 122, "icc": 122, "93": 122, "1064": 122, "1070": 122, "1993": 122, "397441": 122, "brc60": 122, "bose": 122, "dwijendra": 122, "chaudhuri": 122, "68": 122, "79": 122, "1960": 122, "chleonardon": 122, "19": 122, "cassagn": 122, "hartmann": 122, "l\u00e9onardon": 122, "he": 122, "leroux": 122, "tajan": 122, "aumag": 122, "barthou": 122, "tonnelli": 122, "pignoli": 122, "le": 122, "gal": 122, "j\u00e9go": 122, "aff3ct": 122, "toolbox": 122, "elsevi": 122, "softwarex": 122, "100345": 122, "octob": 122, "2019": 122, "sciencedirect": 122, "scienc": 122, "articl": 122, "pii": 122, "s2352711019300457": 122, "1016": 122, "softx": 122, "cb06": 122, "chorti": 122, "brook": 122, "spectral": 122, "oscil": 122, "law": 122, "circuit": 122, "regular": 122, "paper": 122, "53": 122, "1989": 122, "tcsi": 122, "881182": 122, "cb07": 122, "arsenia": 122, "mike": 122, "infin": 122, "2007": 122, "acoust": 122, "speech": 122, "icassp": 122, "iii": 122, "1005": 122, "1008": 122, "366852": 122, "gal63": 122, "robert": 122, "g": 122, "gallag": 122, "densiti": 122, "1963": 122, "iee99": 122, "jbtj12": 122, "kwa": 122, "knapp": 122, "carter": 122, "320": 122, "327": 122, "1976": 122, "tassp": 122, "1162830": 122, "ndm": 122, "ncmf18": 122, "nimr": 122, "chafii": 122, "matth": 122, "fettwei": 122, "gfdm": 122, "otf": 122, "globecom": 122, "glocom": 122, "8647704": 122, "rap91": 122, "rs60": 122, "polynomi": 122, "finit": 122, "societi": 122, "industri": 122, "mathemat": 122, "300": 122, "304": 122, "0108018": 122, "arxiv": 122, "sal81": 122, "sc97": 122, "slg04": 122, "sharon": 122, "litsyn": 122, "goldberg": 122, "2004": 122, "23rd": 122, "electr": 122, "electron": 122, "israel": 122, "223": 122, "226": 122, "eeei": 122, "1361130": 122, "tv15": 122, "ido": 122, "tal": 122, "alexand": 122, "vardi": 122, "61": 122, "2213": 122, "2226": 122, "2015": 122, "2410251": 122, "vit67": 122, "viterbi": 122, "optimum": 122, "260": 122, "269": 122, "april": 122, "1967": 122, "1054010": 122, "xzb06": 122, "ybo": 122, "3gpptran04": 122, "gpp": 122, "tr": 122, "943": 122, "v6": 122, "eploy": 122, "yourself": 123, "googl": 123, "colab": 123}, "objects": {"hermespy.beamforming": [[2, 0, 0, "-", "beamformer"], [3, 0, 0, "-", "capon"], [4, 0, 0, "-", "conventional"]], "hermespy.beamforming.beamformer": [[2, 1, 1, "", "BeamformerBase"], [2, 1, 1, "", "FocusMode"], [2, 1, 1, "", "ReceiveBeamformer"], [2, 1, 1, "", "TransmitBeamformer"]], "hermespy.beamforming.beamformer.BeamformerBase": [[2, 2, 1, "", "operator"]], "hermespy.beamforming.beamformer.FocusMode": [[2, 3, 1, "", "CARTESIAN"], [2, 3, 1, "", "DEVICE"], [2, 3, 1, "", "HORIZONTAL"], [2, 3, 1, "", "SPHERICAL"], [2, 3, 1, "", "property_blacklist"], [2, 3, 1, "", "serialized_attributes"], [2, 3, 1, "", "yaml_tag"]], "hermespy.beamforming.beamformer.ReceiveBeamformer": [[2, 4, 1, "", "PlotReceivePattern"], [2, 4, 1, "", "_decode"], [2, 4, 1, "", "decode_streams"], [2, 2, 1, "", "num_receive_focus_angles"], [2, 2, 1, "", "num_receive_input_streams"], [2, 2, 1, "", "num_receive_output_streams"], [2, 4, 1, "", "plot_receive_pattern"], [2, 2, 1, "", "precoding"], [2, 4, 1, "", "probe"], [2, 2, 1, "", "probe_focus_points"], [2, 4, 1, "", "receive"], [2, 2, 1, "", "receive_focus"]], "hermespy.beamforming.beamformer.TransmitBeamformer": [[2, 4, 1, "", "encode_streams"], [2, 2, 1, "", "num_transmit_focus_angles"], [2, 2, 1, "", "num_transmit_input_streams"], [2, 2, 1, "", "num_transmit_output_streams"], [2, 2, 1, "", "precoding"], [2, 4, 1, "", "transmit"], [2, 2, 1, "", "transmit_focus"]], "hermespy.beamforming.capon": [[3, 1, 1, "", "CaponBeamformer"]], "hermespy.beamforming.capon.CaponBeamformer": [[3, 4, 1, "", "_decode"], [3, 2, 1, "", "loading"], [3, 2, 1, "", "num_receive_focus_angles"], [3, 2, 1, "", "num_receive_input_streams"], [3, 2, 1, "", "num_receive_output_streams"], [3, 3, 1, "", "yaml_tag"]], "hermespy.beamforming.conventional": [[4, 1, 1, "", "ConventionalBeamformer"]], "hermespy.beamforming.conventional.ConventionalBeamformer": [[4, 4, 1, "", "_decode"], [4, 4, 1, "", "_encode"], [4, 2, 1, "", "num_receive_focus_angles"], [4, 2, 1, "", "num_receive_input_streams"], [4, 2, 1, "", "num_receive_output_streams"], [4, 2, 1, "", "num_transmit_focus_angles"], [4, 2, 1, "", "num_transmit_input_streams"], [4, 2, 1, "", "num_transmit_output_streams"], [4, 3, 1, "", "yaml_tag"]], "hermespy.bin": [[6, 0, 0, "-", "hermes"]], "hermespy.bin.hermes": [[6, 5, 1, "", "hermes"]], "hermespy.channel": [[8, 0, 0, "-", "channel"], [9, 0, 0, "-", "cluster_delay_line_indoor_factory"], [10, 0, 0, "-", "cluster_delay_line_indoor_office"], [11, 0, 0, "-", "cluster_delay_line_rural_macrocells"], [12, 0, 0, "-", "cluster_delay_line_street_canyon"], [13, 0, 0, "-", "cluster_delay_line_urban_macrocells"], [14, 0, 0, "-", "cluster_delay_lines"], [15, 0, 0, "-", "multipath_fading_channel"], [16, 0, 0, "-", "multipath_fading_templates"], [17, 0, 0, "-", "quadriga_channel"], [18, 0, 0, "-", "radar_channel"]], "hermespy.channel.channel": [[8, 1, 1, "", "Channel"]], "hermespy.channel.channel.Channel": [[8, 4, 1, "", "Propagate"], [8, 2, 1, "", "active"], [8, 2, 1, "", "gain"], [8, 4, 1, "", "impulse_response"], [8, 3, 1, "", "impulse_response_interpolation"], [8, 2, 1, "", "min_sampling_rate"], [8, 2, 1, "", "num_inputs"], [8, 2, 1, "", "num_outputs"], [8, 4, 1, "", "propagate"], [8, 2, 1, "", "receiver"], [8, 3, 1, "", "serialized_attributes"], [8, 2, 1, "", "sync_offset_high"], [8, 2, 1, "", "sync_offset_low"], [8, 2, 1, "", "transmitter"], [8, 3, 1, "", "yaml_tag"]], "hermespy.channel.cluster_delay_line_indoor_factory": [[9, 1, 1, "", "IndoorFactoryBase"], [9, 1, 1, "", "IndoorFactoryLineOfSight"], [9, 1, 1, "", "IndoorFactoryNoLineOfSight"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase": [[9, 2, 1, "", "surface"], [9, 2, 1, "", "volume"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight": [[9, 2, 1, "", "aoa_spread_mean"], [9, 2, 1, "", "aoa_spread_std"], [9, 2, 1, "", "aod_spread_mean"], [9, 2, 1, "", "aod_spread_std"], [9, 2, 1, "", "cluster_aoa_spread"], [9, 2, 1, "", "cluster_aod_spread"], [9, 2, 1, "", "cluster_delay_spread"], [9, 2, 1, "", "cluster_shadowing_std"], [9, 2, 1, "", "cluster_zoa_spread"], [9, 2, 1, "", "cross_polarization_power_mean"], [9, 2, 1, "", "cross_polarization_power_std"], [9, 2, 1, "", "delay_scaling"], [9, 2, 1, "", "delay_spread_mean"], [9, 2, 1, "", "delay_spread_std"], [9, 2, 1, "", "line_of_sight"], [9, 2, 1, "", "num_clusters"], [9, 2, 1, "", "num_rays"], [9, 2, 1, "", "rice_factor_mean"], [9, 2, 1, "", "rice_factor_std"], [9, 3, 1, "", "yaml_tag"], [9, 2, 1, "", "zoa_spread_mean"], [9, 2, 1, "", "zoa_spread_std"], [9, 2, 1, "", "zod_offset"], [9, 2, 1, "", "zod_spread_mean"], [9, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight": [[9, 2, 1, "", "aoa_spread_mean"], [9, 2, 1, "", "aoa_spread_std"], [9, 2, 1, "", "aod_spread_mean"], [9, 2, 1, "", "aod_spread_std"], [9, 2, 1, "", "cluster_aoa_spread"], [9, 2, 1, "", "cluster_aod_spread"], [9, 2, 1, "", "cluster_delay_spread"], [9, 2, 1, "", "cluster_shadowing_std"], [9, 2, 1, "", "cluster_zoa_spread"], [9, 2, 1, "", "cross_polarization_power_mean"], [9, 2, 1, "", "cross_polarization_power_std"], [9, 2, 1, "", "delay_scaling"], [9, 2, 1, "", "delay_spread_mean"], [9, 2, 1, "", "delay_spread_std"], [9, 2, 1, "", "line_of_sight"], [9, 2, 1, "", "num_clusters"], [9, 2, 1, "", "num_rays"], [9, 2, 1, "", "rice_factor_mean"], [9, 2, 1, "", "rice_factor_std"], [9, 3, 1, "", "yaml_tag"], [9, 2, 1, "", "zoa_spread_mean"], [9, 2, 1, "", "zoa_spread_std"], [9, 2, 1, "", "zod_offset"], [9, 2, 1, "", "zod_spread_mean"], [9, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office": [[10, 1, 1, "", "IndoorOfficeLineOfSight"], [10, 1, 1, "", "IndoorOfficeNoLineOfSight"]], "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight": [[10, 2, 1, "", "aoa_spread_mean"], [10, 2, 1, "", "aoa_spread_std"], [10, 2, 1, "", "aod_spread_mean"], [10, 2, 1, "", "aod_spread_std"], [10, 2, 1, "", "cluster_aoa_spread"], [10, 2, 1, "", "cluster_aod_spread"], [10, 2, 1, "", "cluster_delay_spread"], [10, 2, 1, "", "cluster_shadowing_std"], [10, 2, 1, "", "cluster_zoa_spread"], [10, 2, 1, "", "cross_polarization_power_mean"], [10, 2, 1, "", "cross_polarization_power_std"], [10, 3, 1, "", "delay_normalization"], [10, 2, 1, "", "delay_scaling"], [10, 2, 1, "", "delay_spread_mean"], [10, 2, 1, "", "delay_spread_std"], [10, 2, 1, "", "line_of_sight"], [10, 2, 1, "", "num_clusters"], [10, 2, 1, "", "num_rays"], [10, 2, 1, "", "rice_factor_mean"], [10, 2, 1, "", "rice_factor_std"], [10, 3, 1, "", "yaml_tag"], [10, 2, 1, "", "zoa_spread_mean"], [10, 2, 1, "", "zoa_spread_std"], [10, 2, 1, "", "zod_offset"], [10, 2, 1, "", "zod_spread_mean"], [10, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight": [[10, 2, 1, "", "aoa_spread_mean"], [10, 2, 1, "", "aoa_spread_std"], [10, 2, 1, "", "aod_spread_mean"], [10, 2, 1, "", "aod_spread_std"], [10, 2, 1, "", "cluster_aoa_spread"], [10, 2, 1, "", "cluster_aod_spread"], [10, 2, 1, "", "cluster_delay_spread"], [10, 2, 1, "", "cluster_shadowing_std"], [10, 2, 1, "", "cluster_zoa_spread"], [10, 2, 1, "", "cross_polarization_power_mean"], [10, 2, 1, "", "cross_polarization_power_std"], [10, 3, 1, "", "delay_normalization"], [10, 2, 1, "", "delay_scaling"], [10, 2, 1, "", "delay_spread_mean"], [10, 2, 1, "", "delay_spread_std"], [10, 2, 1, "", "line_of_sight"], [10, 2, 1, "", "num_clusters"], [10, 2, 1, "", "num_rays"], [10, 2, 1, "", "rice_factor_mean"], [10, 2, 1, "", "rice_factor_std"], [10, 3, 1, "", "yaml_tag"], [10, 2, 1, "", "zoa_spread_mean"], [10, 2, 1, "", "zoa_spread_std"], [10, 2, 1, "", "zod_offset"], [10, 2, 1, "", "zod_spread_mean"], [10, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells": [[11, 1, 1, "", "RuralMacrocellsLineOfSight"], [11, 1, 1, "", "RuralMacrocellsNoLineOfSight"], [11, 1, 1, "", "RuralMacrocellsOutsideToInside"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight": [[11, 2, 1, "", "aoa_spread_mean"], [11, 2, 1, "", "aoa_spread_std"], [11, 2, 1, "", "aod_spread_mean"], [11, 2, 1, "", "aod_spread_std"], [11, 2, 1, "", "cluster_aoa_spread"], [11, 2, 1, "", "cluster_aod_spread"], [11, 2, 1, "", "cluster_delay_spread"], [11, 2, 1, "", "cluster_shadowing_std"], [11, 2, 1, "", "cluster_zoa_spread"], [11, 2, 1, "", "cross_polarization_power_mean"], [11, 2, 1, "", "cross_polarization_power_std"], [11, 3, 1, "", "delay_normalization"], [11, 2, 1, "", "delay_scaling"], [11, 2, 1, "", "delay_spread_mean"], [11, 2, 1, "", "delay_spread_std"], [11, 2, 1, "", "line_of_sight"], [11, 2, 1, "", "num_clusters"], [11, 2, 1, "", "num_rays"], [11, 2, 1, "", "rice_factor_mean"], [11, 2, 1, "", "rice_factor_std"], [11, 3, 1, "", "yaml_tag"], [11, 2, 1, "", "zoa_spread_mean"], [11, 2, 1, "", "zoa_spread_std"], [11, 2, 1, "", "zod_offset"], [11, 2, 1, "", "zod_spread_mean"], [11, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight": [[11, 2, 1, "", "aoa_spread_mean"], [11, 2, 1, "", "aoa_spread_std"], [11, 2, 1, "", "aod_spread_mean"], [11, 2, 1, "", "aod_spread_std"], [11, 2, 1, "", "cluster_aoa_spread"], [11, 2, 1, "", "cluster_aod_spread"], [11, 2, 1, "", "cluster_delay_spread"], [11, 2, 1, "", "cluster_shadowing_std"], [11, 2, 1, "", "cluster_zoa_spread"], [11, 2, 1, "", "cross_polarization_power_mean"], [11, 2, 1, "", "cross_polarization_power_std"], [11, 3, 1, "", "delay_normalization"], [11, 2, 1, "", "delay_scaling"], [11, 2, 1, "", "delay_spread_mean"], [11, 2, 1, "", "delay_spread_std"], [11, 2, 1, "", "line_of_sight"], [11, 2, 1, "", "num_clusters"], [11, 2, 1, "", "num_rays"], [11, 2, 1, "", "rice_factor_mean"], [11, 2, 1, "", "rice_factor_std"], [11, 3, 1, "", "yaml_tag"], [11, 2, 1, "", "zoa_spread_mean"], [11, 2, 1, "", "zoa_spread_std"], [11, 2, 1, "", "zod_offset"], [11, 2, 1, "", "zod_spread_mean"], [11, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside": [[11, 2, 1, "", "aoa_spread_mean"], [11, 2, 1, "", "aoa_spread_std"], [11, 2, 1, "", "aod_spread_mean"], [11, 2, 1, "", "aod_spread_std"], [11, 2, 1, "", "cluster_aoa_spread"], [11, 2, 1, "", "cluster_aod_spread"], [11, 2, 1, "", "cluster_delay_spread"], [11, 2, 1, "", "cluster_shadowing_std"], [11, 2, 1, "", "cluster_zoa_spread"], [11, 2, 1, "", "cross_polarization_power_mean"], [11, 2, 1, "", "cross_polarization_power_std"], [11, 3, 1, "", "delay_normalization"], [11, 2, 1, "", "delay_scaling"], [11, 2, 1, "", "delay_spread_mean"], [11, 2, 1, "", "delay_spread_std"], [11, 2, 1, "", "line_of_sight"], [11, 2, 1, "", "num_clusters"], [11, 2, 1, "", "num_rays"], [11, 2, 1, "", "rice_factor_mean"], [11, 2, 1, "", "rice_factor_std"], [11, 3, 1, "", "yaml_tag"], [11, 2, 1, "", "zoa_spread_mean"], [11, 2, 1, "", "zoa_spread_std"], [11, 2, 1, "", "zod_offset"], [11, 2, 1, "", "zod_spread_mean"], [11, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon": [[12, 1, 1, "", "StreetCanyonLineOfSight"], [12, 1, 1, "", "StreetCanyonNoLineOfSight"], [12, 1, 1, "", "StreetCanyonOutsideToInside"], [12, 1, 1, "", "UrbanMicroCellsNoLineOfSight"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight": [[12, 2, 1, "", "aoa_spread_mean"], [12, 2, 1, "", "aoa_spread_std"], [12, 2, 1, "", "aod_spread_mean"], [12, 2, 1, "", "aod_spread_std"], [12, 2, 1, "", "cluster_aoa_spread"], [12, 2, 1, "", "cluster_aod_spread"], [12, 2, 1, "", "cluster_delay_spread"], [12, 2, 1, "", "cluster_shadowing_std"], [12, 2, 1, "", "cluster_zoa_spread"], [12, 2, 1, "", "cross_polarization_power_mean"], [12, 2, 1, "", "cross_polarization_power_std"], [12, 3, 1, "", "delay_normalization"], [12, 2, 1, "", "delay_scaling"], [12, 2, 1, "", "delay_spread_mean"], [12, 2, 1, "", "delay_spread_std"], [12, 2, 1, "", "line_of_sight"], [12, 2, 1, "", "num_clusters"], [12, 2, 1, "", "num_rays"], [12, 2, 1, "", "rice_factor_mean"], [12, 2, 1, "", "rice_factor_std"], [12, 3, 1, "", "yaml_tag"], [12, 2, 1, "", "zoa_spread_mean"], [12, 2, 1, "", "zoa_spread_std"], [12, 2, 1, "", "zod_offset"], [12, 2, 1, "", "zod_spread_mean"], [12, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight": [[12, 2, 1, "", "aoa_spread_mean"], [12, 2, 1, "", "aoa_spread_std"], [12, 2, 1, "", "aod_spread_mean"], [12, 2, 1, "", "aod_spread_std"], [12, 2, 1, "", "cluster_aoa_spread"], [12, 2, 1, "", "cluster_aod_spread"], [12, 2, 1, "", "cluster_delay_spread"], [12, 2, 1, "", "cluster_shadowing_std"], [12, 2, 1, "", "cluster_zoa_spread"], [12, 2, 1, "", "cross_polarization_power_mean"], [12, 2, 1, "", "cross_polarization_power_std"], [12, 3, 1, "", "delay_normalization"], [12, 2, 1, "", "delay_scaling"], [12, 2, 1, "", "delay_spread_mean"], [12, 2, 1, "", "delay_spread_std"], [12, 3, 1, "", "impulse_response_interpolation"], [12, 2, 1, "", "line_of_sight"], [12, 2, 1, "", "num_clusters"], [12, 2, 1, "", "num_rays"], [12, 2, 1, "", "rice_factor_mean"], [12, 2, 1, "", "rice_factor_std"], [12, 3, 1, "", "yaml_tag"], [12, 2, 1, "", "zoa_spread_mean"], [12, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside": [[12, 2, 1, "", "aoa_spread_mean"], [12, 2, 1, "", "aoa_spread_std"], [12, 2, 1, "", "aod_spread_mean"], [12, 2, 1, "", "aod_spread_std"], [12, 2, 1, "", "cluster_aoa_spread"], [12, 2, 1, "", "cluster_aod_spread"], [12, 2, 1, "", "cluster_delay_spread"], [12, 2, 1, "", "cluster_shadowing_std"], [12, 2, 1, "", "cluster_zoa_spread"], [12, 2, 1, "", "cross_polarization_power_mean"], [12, 2, 1, "", "cross_polarization_power_std"], [12, 3, 1, "", "delay_normalization"], [12, 2, 1, "", "delay_scaling"], [12, 2, 1, "", "delay_spread_mean"], [12, 2, 1, "", "delay_spread_std"], [12, 3, 1, "", "impulse_response_interpolation"], [12, 2, 1, "", "line_of_sight"], [12, 2, 1, "", "num_clusters"], [12, 2, 1, "", "num_rays"], [12, 2, 1, "", "rice_factor_mean"], [12, 2, 1, "", "rice_factor_std"], [12, 3, 1, "", "yaml_tag"], [12, 2, 1, "", "zoa_spread_mean"], [12, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight": [[12, 3, 1, "", "delay_normalization"], [12, 2, 1, "", "zod_offset"], [12, 2, 1, "", "zod_spread_mean"], [12, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells": [[13, 1, 1, "", "UrbanMacrocellsLineOfSight"], [13, 1, 1, "", "UrbanMacrocellsNoLineOfSight"], [13, 1, 1, "", "UrbanMacrocellsNoLineOfSightBase"], [13, 1, 1, "", "UrbanMacrocellsOutsideToInside"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight": [[13, 2, 1, "", "aoa_spread_mean"], [13, 2, 1, "", "aoa_spread_std"], [13, 2, 1, "", "aod_spread_mean"], [13, 2, 1, "", "aod_spread_std"], [13, 2, 1, "", "cluster_aoa_spread"], [13, 2, 1, "", "cluster_aod_spread"], [13, 2, 1, "", "cluster_delay_spread"], [13, 2, 1, "", "cluster_shadowing_std"], [13, 2, 1, "", "cluster_zoa_spread"], [13, 2, 1, "", "cross_polarization_power_mean"], [13, 2, 1, "", "cross_polarization_power_std"], [13, 3, 1, "", "delay_normalization"], [13, 2, 1, "", "delay_scaling"], [13, 2, 1, "", "delay_spread_mean"], [13, 2, 1, "", "delay_spread_std"], [13, 2, 1, "", "line_of_sight"], [13, 2, 1, "", "num_clusters"], [13, 2, 1, "", "num_rays"], [13, 2, 1, "", "rice_factor_mean"], [13, 2, 1, "", "rice_factor_std"], [13, 3, 1, "", "yaml_tag"], [13, 2, 1, "", "zoa_spread_mean"], [13, 2, 1, "", "zoa_spread_std"], [13, 2, 1, "", "zod_offset"], [13, 2, 1, "", "zod_spread_mean"], [13, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight": [[13, 2, 1, "", "aoa_spread_mean"], [13, 2, 1, "", "aoa_spread_std"], [13, 2, 1, "", "aod_spread_mean"], [13, 2, 1, "", "aod_spread_std"], [13, 2, 1, "", "cluster_aoa_spread"], [13, 2, 1, "", "cluster_aod_spread"], [13, 2, 1, "", "cluster_delay_spread"], [13, 2, 1, "", "cluster_shadowing_std"], [13, 2, 1, "", "cluster_zoa_spread"], [13, 2, 1, "", "cross_polarization_power_mean"], [13, 2, 1, "", "cross_polarization_power_std"], [13, 3, 1, "", "delay_normalization"], [13, 2, 1, "", "delay_scaling"], [13, 2, 1, "", "delay_spread_mean"], [13, 2, 1, "", "delay_spread_std"], [13, 3, 1, "", "impulse_response_interpolation"], [13, 2, 1, "", "line_of_sight"], [13, 2, 1, "", "num_clusters"], [13, 2, 1, "", "num_rays"], [13, 2, 1, "", "rice_factor_mean"], [13, 2, 1, "", "rice_factor_std"], [13, 3, 1, "", "yaml_tag"], [13, 2, 1, "", "zoa_spread_mean"], [13, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase": [[13, 3, 1, "", "delay_normalization"], [13, 2, 1, "", "zod_offset"], [13, 2, 1, "", "zod_spread_mean"], [13, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside": [[13, 2, 1, "", "aoa_spread_mean"], [13, 2, 1, "", "aoa_spread_std"], [13, 2, 1, "", "aod_spread_mean"], [13, 2, 1, "", "aod_spread_std"], [13, 2, 1, "", "cluster_aoa_spread"], [13, 2, 1, "", "cluster_aod_spread"], [13, 2, 1, "", "cluster_delay_spread"], [13, 2, 1, "", "cluster_shadowing_std"], [13, 2, 1, "", "cluster_zoa_spread"], [13, 2, 1, "", "cross_polarization_power_mean"], [13, 2, 1, "", "cross_polarization_power_std"], [13, 3, 1, "", "delay_normalization"], [13, 2, 1, "", "delay_scaling"], [13, 2, 1, "", "delay_spread_mean"], [13, 2, 1, "", "delay_spread_std"], [13, 3, 1, "", "impulse_response_interpolation"], [13, 2, 1, "", "line_of_sight"], [13, 2, 1, "", "num_clusters"], [13, 2, 1, "", "num_rays"], [13, 2, 1, "", "rice_factor_mean"], [13, 2, 1, "", "rice_factor_std"], [13, 3, 1, "", "yaml_tag"], [13, 2, 1, "", "zoa_spread_mean"], [13, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_lines": [[14, 1, 1, "", "ClusterDelayLine"], [14, 1, 1, "", "ClusterDelayLineBase"], [14, 1, 1, "", "DelayNormalization"]], "hermespy.channel.cluster_delay_lines.ClusterDelayLine": [[14, 2, 1, "", "aoa_spread_mean"], [14, 2, 1, "", "aoa_spread_std"], [14, 2, 1, "", "aod_spread_mean"], [14, 2, 1, "", "aod_spread_std"], [14, 2, 1, "", "cluster_aoa_spread"], [14, 2, 1, "", "cluster_aod_spread"], [14, 2, 1, "", "cluster_delay_spread"], [14, 2, 1, "", "cluster_shadowing_std"], [14, 2, 1, "", "cluster_zoa_spread"], [14, 2, 1, "", "cross_polarization_power_mean"], [14, 2, 1, "", "cross_polarization_power_std"], [14, 2, 1, "", "delay_scaling"], [14, 2, 1, "", "delay_spread_mean"], [14, 2, 1, "", "delay_spread_std"], [14, 2, 1, "", "line_of_sight"], [14, 2, 1, "", "num_clusters"], [14, 2, 1, "", "num_rays"], [14, 2, 1, "", "rice_factor_mean"], [14, 2, 1, "", "rice_factor_std"], [14, 3, 1, "", "yaml_tag"], [14, 2, 1, "", "zoa_spread_mean"], [14, 2, 1, "", "zoa_spread_std"], [14, 2, 1, "", "zod_offset"], [14, 2, 1, "", "zod_spread_mean"], [14, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase": [[14, 2, 1, "", "aoa_spread_mean"], [14, 2, 1, "", "aoa_spread_std"], [14, 2, 1, "", "aod_spread_mean"], [14, 2, 1, "", "aod_spread_std"], [14, 2, 1, "", "cluster_aoa_spread"], [14, 2, 1, "", "cluster_aod_spread"], [14, 2, 1, "", "cluster_delay_spread"], [14, 2, 1, "", "cluster_shadowing_std"], [14, 2, 1, "", "cluster_zoa_spread"], [14, 2, 1, "", "cross_polarization_power_mean"], [14, 2, 1, "", "cross_polarization_power_std"], [14, 3, 1, "", "delay_normalization"], [14, 2, 1, "", "delay_scaling"], [14, 2, 1, "", "delay_spread_mean"], [14, 2, 1, "", "delay_spread_std"], [14, 4, 1, "", "impulse_response"], [14, 2, 1, "", "line_of_sight"], [14, 2, 1, "", "num_clusters"], [14, 2, 1, "", "num_rays"], [14, 2, 1, "", "rice_factor_mean"], [14, 2, 1, "", "rice_factor_std"], [14, 2, 1, "", "zoa_spread_mean"], [14, 2, 1, "", "zoa_spread_std"], [14, 2, 1, "", "zod_offset"], [14, 2, 1, "", "zod_spread_mean"], [14, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_lines.DelayNormalization": [[14, 3, 1, "", "NONE"], [14, 3, 1, "", "TOF"], [14, 3, 1, "", "ZERO"]], "hermespy.channel.multipath_fading_channel": [[15, 1, 1, "", "AntennaCorrelation"], [15, 1, 1, "", "CustomAntennaCorrelation"], [15, 1, 1, "", "MultipathFadingChannel"]], "hermespy.channel.multipath_fading_channel.AntennaCorrelation": [[15, 2, 1, "", "channel"], [15, 2, 1, "", "covariance"], [15, 2, 1, "", "device"]], "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation": [[15, 2, 1, "", "covariance"], [15, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_channel.MultipathFadingChannel": [[15, 2, 1, "", "alpha_correlation"], [15, 2, 1, "", "beta_correlation"], [15, 3, 1, "", "delay_resolution_error"], [15, 2, 1, "", "delays"], [15, 2, 1, "", "doppler_frequency"], [15, 4, 1, "", "impulse_response"], [15, 3, 1, "", "interpolate_signals"], [15, 4, 1, "", "interpolation_filter"], [15, 2, 1, "", "los_angle"], [15, 2, 1, "", "los_doppler_frequency"], [15, 3, 1, "", "los_gains"], [15, 2, 1, "", "max_delay"], [15, 2, 1, "", "num_resolvable_paths"], [15, 2, 1, "", "num_sinusoids"], [15, 2, 1, "", "power_profile"], [15, 2, 1, "", "receiver"], [15, 2, 1, "", "rice_factors"], [15, 3, 1, "", "serialized_attributes"], [15, 2, 1, "", "transmitter"], [15, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates": [[16, 1, 1, "", "CorrelationType"], [16, 1, 1, "", "Cost256Type"], [16, 1, 1, "", "DeviceType"], [16, 1, 1, "", "MultipathFading5GTDL"], [16, 1, 1, "", "MultipathFadingCost256"], [16, 1, 1, "", "MultipathFadingExponential"], [16, 1, 1, "", "StandardAntennaCorrelation"], [16, 1, 1, "", "TDLType"]], "hermespy.channel.multipath_fading_templates.CorrelationType": [[16, 3, 1, "", "HIGH"], [16, 3, 1, "", "LOW"], [16, 3, 1, "", "MEDIUM"], [16, 3, 1, "", "MEDIUM_A"], [16, 3, 1, "", "property_blacklist"], [16, 3, 1, "", "serialized_attributes"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.Cost256Type": [[16, 3, 1, "", "HILLY"], [16, 3, 1, "", "RURAL"], [16, 3, 1, "", "URBAN"], [16, 3, 1, "", "property_blacklist"], [16, 3, 1, "", "serialized_attributes"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.DeviceType": [[16, 3, 1, "", "BASE_STATION"], [16, 3, 1, "", "TERMINAL"], [16, 3, 1, "", "property_blacklist"], [16, 3, 1, "", "serialized_attributes"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL": [[16, 2, 1, "", "model_type"], [16, 2, 1, "", "rms_delay"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.MultipathFadingCost256": [[16, 2, 1, "", "model_type"], [16, 4, 1, "", "to_yaml"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.MultipathFadingExponential": [[16, 2, 1, "", "rms_delay"], [16, 2, 1, "", "tap_interval"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation": [[16, 2, 1, "", "correlation"], [16, 2, 1, "", "covariance"], [16, 2, 1, "", "device_type"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.TDLType": [[16, 3, 1, "", "A"], [16, 3, 1, "", "B"], [16, 3, 1, "", "C"], [16, 3, 1, "", "D"], [16, 3, 1, "", "E"], [16, 3, 1, "", "property_blacklist"], [16, 3, 1, "", "serialized_attributes"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.quadriga_channel": [[17, 1, 1, "", "QuadrigaChannel"]], "hermespy.channel.quadriga_channel.QuadrigaChannel": [[17, 4, 1, "", "from_yaml"], [17, 4, 1, "", "impulse_response"], [17, 4, 1, "", "to_yaml"], [17, 3, 1, "", "yaml_matrix"], [17, 3, 1, "", "yaml_tag"]], "hermespy.channel.radar_channel": [[18, 1, 1, "", "RadarChannel"]], "hermespy.channel.radar_channel.RadarChannel": [[18, 3, 1, "", "attenuate"], [18, 2, 1, "", "ground_truth"], [18, 4, 1, "", "impulse_response"], [18, 2, 1, "", "losses_db"], [18, 2, 1, "", "radar_cross_section"], [18, 3, 1, "", "serialized_attributes"], [18, 2, 1, "", "target_azimuth"], [18, 3, 1, "", "target_exists"], [18, 2, 1, "", "target_range"], [18, 2, 1, "", "target_velocity"], [18, 2, 1, "", "target_zenith"], [18, 3, 1, "", "yaml_tag"]], "hermespy.core": [[20, 0, 0, "-", "antennas"], [21, 0, 0, "-", "channel_state_information"], [22, 0, 0, "-", "definitions"], [23, 0, 0, "-", "device"], [24, 0, 0, "-", "executable"], [25, 0, 0, "-", "factory"], [26, 0, 0, "-", "monte_carlo"], [27, 0, 0, "-", "pipeline"], [28, 0, 0, "-", "random_node"], [29, 0, 0, "-", "scenario"], [30, 0, 0, "-", "signal_model"]], "hermespy.core.antennas": [[20, 1, 1, "", "Antenna"], [20, 1, 1, "", "AntennaArray"], [20, 1, 1, "", "AntennaArrayBase"], [20, 1, 1, "", "Dipole"], [20, 1, 1, "", "IdealAntenna"], [20, 1, 1, "", "PatchAntenna"], [20, 1, 1, "", "UniformArray"]], "hermespy.core.antennas.Antenna": [[20, 2, 1, "", "array"], [20, 4, 1, "", "plot_gain"], [20, 4, 1, "", "plot_polarization"], [20, 4, 1, "", "polarization"], [20, 2, 1, "", "pos"], [20, 3, 1, "", "property_blacklist"], [20, 4, 1, "", "receive"], [20, 4, 1, "", "transmit"], [20, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.AntennaArray": [[20, 4, 1, "", "add_antenna"], [20, 2, 1, "", "antennas"], [20, 4, 1, "", "from_yaml"], [20, 2, 1, "", "num_antennas"], [20, 2, 1, "", "orientations"], [20, 4, 1, "", "polarization"], [20, 2, 1, "", "positions"], [20, 4, 1, "", "remove_antenna"], [20, 4, 1, "", "to_yaml"], [20, 2, 1, "", "topology"], [20, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.AntennaArrayBase": [[20, 4, 1, "", "cartesian_response"], [20, 4, 1, "", "horizontal_response"], [20, 2, 1, "", "num_antennas"], [20, 2, 1, "", "num_receive_antennas"], [20, 2, 1, "", "num_transmit_antennas"], [20, 4, 1, "", "plot_topology"], [20, 4, 1, "", "polarization"], [20, 4, 1, "", "spherical_response"], [20, 2, 1, "", "topology"]], "hermespy.core.antennas.Dipole": [[20, 4, 1, "", "polarization"], [20, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.IdealAntenna": [[20, 4, 1, "", "polarization"], [20, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.PatchAntenna": [[20, 4, 1, "", "polarization"], [20, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.UniformArray": [[20, 2, 1, "", "antenna"], [20, 2, 1, "", "dimensions"], [20, 2, 1, "", "num_antennas"], [20, 4, 1, "", "polarization"], [20, 3, 1, "", "property_blacklist"], [20, 2, 1, "", "spacing"], [20, 2, 1, "", "topology"], [20, 3, 1, "", "yaml_tag"]], "hermespy.core.channel_state_information": [[21, 1, 1, "", "ChannelStateDimension"], [21, 1, 1, "", "ChannelStateFormat"], [21, 1, 1, "", "ChannelStateInformation"]], "hermespy.core.channel_state_information.ChannelStateDimension": [[21, 3, 1, "", "INFORMATION"], [21, 3, 1, "", "RECEIVE_STREAMS"], [21, 3, 1, "", "SAMPLES"], [21, 3, 1, "", "TRANSMIT_STREAMS"]], "hermespy.core.channel_state_information.ChannelStateFormat": [[21, 3, 1, "", "FREQUENCY_SELECTIVITY"], [21, 3, 1, "", "IMPULSE_RESPONSE"]], "hermespy.core.channel_state_information.ChannelStateInformation": [[21, 4, 1, "", "Ideal"], [21, 3, 1, "", "__num_delay_taps"], [21, 3, 1, "", "__num_frequency_bins"], [21, 3, 1, "", "__state"], [21, 3, 1, "", "__state_format"], [21, 4, 1, "", "append"], [21, 4, 1, "", "append_linear"], [21, 4, 1, "", "concatenate"], [21, 4, 1, "", "from_HDF"], [21, 2, 1, "", "linear"], [21, 2, 1, "", "num_delay_taps"], [21, 2, 1, "", "num_receive_streams"], [21, 2, 1, "", "num_samples"], [21, 2, 1, "", "num_symbols"], [21, 2, 1, "", "num_transmit_streams"], [21, 4, 1, "", "plot"], [21, 4, 1, "", "received_streams"], [21, 4, 1, "", "reciprocal"], [21, 4, 1, "", "samples"], [21, 4, 1, "", "set_state"], [21, 2, 1, "", "state"], [21, 2, 1, "", "state_format"], [21, 4, 1, "", "to_HDF"], [21, 4, 1, "", "to_frequency_selectivity"], [21, 4, 1, "", "to_impulse_response"]], "hermespy.core.definitions": [[22, 1, 1, "", "SNRType"]], "hermespy.core.definitions.SNRType": [[22, 3, 1, "", "CUSTOM"], [22, 3, 1, "", "EBN0"], [22, 3, 1, "", "EN0"], [22, 3, 1, "", "ESN0"], [22, 3, 1, "", "PN0"]], "hermespy.core.device": [[23, 1, 1, "", "Device"], [23, 1, 1, "", "DeviceReception"], [23, 1, 1, "", "DeviceTransmission"], [23, 6, 1, "", "DeviceType"], [23, 1, 1, "", "DuplexOperator"], [23, 7, 1, "", "FloatingError"], [23, 1, 1, "", "MixingOperator"], [23, 1, 1, "", "OperationResult"], [23, 1, 1, "", "Operator"], [23, 1, 1, "", "OperatorSlot"], [23, 6, 1, "", "OperatorType"], [23, 1, 1, "", "Receiver"], [23, 1, 1, "", "ReceiverSlot"], [23, 1, 1, "", "Reception"], [23, 6, 1, "", "SecondSlotType"], [23, 6, 1, "", "SlotType"], [23, 1, 1, "", "Transmission"], [23, 1, 1, "", "Transmitter"], [23, 1, 1, "", "TransmitterSlot"], [23, 1, 1, "", "UnsupportedSlot"]], "hermespy.core.device.Device": [[23, 2, 1, "", "antenna_positions"], [23, 3, 1, "", "antennas"], [23, 2, 1, "", "carrier_frequency"], [23, 2, 1, "", "max_frame_duration"], [23, 2, 1, "", "num_antennas"], [23, 2, 1, "", "orientation"], [23, 2, 1, "", "position"], [23, 2, 1, "", "power"], [23, 4, 1, "", "receive"], [23, 2, 1, "", "received_signal"], [23, 3, 1, "", "receivers"], [23, 2, 1, "", "sampling_rate"], [23, 2, 1, "", "snr"], [23, 2, 1, "", "topology"], [23, 4, 1, "", "transmit"], [23, 3, 1, "", "transmitters"], [23, 2, 1, "", "velocity"], [23, 2, 1, "", "wavelength"]], "hermespy.core.device.DeviceReception": [[23, 2, 1, "", "csi"], [23, 4, 1, "", "from_HDF"], [23, 2, 1, "", "num_operator_receptions"], [23, 2, 1, "", "operator_receptions"], [23, 4, 1, "", "to_HDF"]], "hermespy.core.device.DeviceTransmission": [[23, 4, 1, "", "from_HDF"], [23, 2, 1, "", "num_operator_transmissions"], [23, 2, 1, "", "operator_transmissions"], [23, 4, 1, "", "to_HDF"]], "hermespy.core.device.DuplexOperator": [[23, 2, 1, "", "csi"], [23, 2, 1, "", "device"], [23, 2, 1, "", "frame_duration"], [23, 2, 1, "", "noise_power"], [23, 4, 1, "", "receive"], [23, 2, 1, "", "sampling_rate"], [23, 2, 1, "", "slot"], [23, 4, 1, "", "transmit"]], "hermespy.core.device.MixingOperator": [[23, 2, 1, "", "carrier_frequency"]], "hermespy.core.device.OperationResult": [[23, 4, 1, "", "from_HDF"], [23, 3, 1, "", "signal"], [23, 4, 1, "", "to_HDF"]], "hermespy.core.device.Operator": [[23, 2, 1, "", "attached"], [23, 4, 1, "", "bind"], [23, 2, 1, "", "device"], [23, 2, 1, "", "frame_duration"], [23, 2, 1, "", "sampling_rate"], [23, 2, 1, "", "slot"], [23, 2, 1, "", "slot_index"]], "hermespy.core.device.OperatorSlot": [[23, 4, 1, "", "add"], [23, 2, 1, "", "device"], [23, 2, 1, "", "max_sampling_rate"], [23, 2, 1, "", "min_frame_duration"], [23, 2, 1, "", "min_num_samples_per_frame"], [23, 2, 1, "", "num_operators"], [23, 4, 1, "", "operator_index"], [23, 4, 1, "", "registered"], [23, 4, 1, "", "remove"]], "hermespy.core.device.Receiver": [[23, 4, 1, "", "cache_reception"], [23, 2, 1, "", "csi"], [23, 4, 1, "", "noise_power"], [23, 4, 1, "", "receive"], [23, 2, 1, "", "reference"], [23, 2, 1, "", "signal"], [23, 2, 1, "", "slot"]], "hermespy.core.device.ReceiverSlot": [[23, 4, 1, "", "get_receptions"]], "hermespy.core.device.Reception": [[23, 3, 1, "", "signal"]], "hermespy.core.device.Transmission": [[23, 3, 1, "", "signal"]], "hermespy.core.device.Transmitter": [[23, 2, 1, "", "slot"], [23, 4, 1, "", "transmit"]], "hermespy.core.device.TransmitterSlot": [[23, 4, 1, "", "add"], [23, 4, 1, "", "add_transmission"], [23, 4, 1, "", "clear_cache"], [23, 4, 1, "", "get_transmissions"]], "hermespy.core.device.UnsupportedSlot": [[23, 4, 1, "", "add"]], "hermespy.core.executable": [[24, 1, 1, "", "Executable"], [24, 1, 1, "", "Verbosity"]], "hermespy.core.executable.Executable": [[24, 2, 1, "", "console"], [24, 4, 1, "", "default_results_dir"], [24, 4, 1, "", "execute"], [24, 2, 1, "", "results_dir"], [24, 4, 1, "", "run"], [24, 2, 1, "", "style"], [24, 4, 1, "", "style_context"], [24, 2, 1, "", "verbosity"]], "hermespy.core.executable.Verbosity": [[24, 3, 1, "", "ALL"], [24, 3, 1, "", "ERROR"], [24, 3, 1, "", "INFO"], [24, 3, 1, "", "NONE"], [24, 3, 1, "", "WARNING"]], "hermespy.core.factory": [[25, 1, 1, "", "Factory"], [25, 1, 1, "", "HDFSerializable"], [25, 1, 1, "", "Serializable"], [25, 1, 1, "", "SerializableArray"], [25, 1, 1, "", "SerializableEnum"]], "hermespy.core.factory.Factory": [[25, 2, 1, "", "clean"], [25, 3, 1, "", "extensions"], [25, 4, 1, "", "from_file"], [25, 4, 1, "", "from_folder"], [25, 4, 1, "", "from_path"], [25, 4, 1, "", "from_str"], [25, 4, 1, "", "from_stream"], [25, 4, 1, "", "load"], [25, 2, 1, "", "registered_classes"], [25, 2, 1, "", "registered_tags"], [25, 4, 1, "", "to_file"], [25, 4, 1, "", "to_folder"], [25, 4, 1, "", "to_str"], [25, 4, 1, "", "to_stream"]], "hermespy.core.factory.HDFSerializable": [[25, 4, 1, "", "from_HDF"], [25, 4, 1, "", "to_HDF"]], "hermespy.core.factory.Serializable": [[25, 4, 1, "", "InitializationWrapper"], [25, 4, 1, "", "from_yaml"], [25, 3, 1, "", "property_blacklist"], [25, 3, 1, "", "serialized_attributes"], [25, 4, 1, "", "to_yaml"], [25, 3, 1, "", "yaml_tag"]], "hermespy.core.factory.SerializableArray": [[25, 4, 1, "", "Set_Array"]], "hermespy.core.factory.SerializableEnum": [[25, 3, 1, "", "property_blacklist"], [25, 3, 1, "", "serialized_attributes"], [25, 2, 1, "", "yaml_tag"]], "hermespy.core.monte_carlo": [[26, 1, 1, "", "ActorRunResult"], [26, 1, 1, "", "Artifact"], [26, 1, 1, "", "ArtifactTemplate"], [26, 1, 1, "", "ConsoleMode"], [26, 1, 1, "", "Evaluation"], [26, 1, 1, "", "EvaluationResult"], [26, 1, 1, "", "EvaluationTemplate"], [26, 1, 1, "", "Evaluator"], [26, 1, 1, "", "GridDimension"], [26, 1, 1, "", "GridSection"], [26, 1, 1, "", "MonteCarlo"], [26, 1, 1, "", "MonteCarloActor"], [26, 1, 1, "", "MonteCarloResult"], [26, 1, 1, "", "MonteCarloSample"], [26, 1, 1, "", "ProcessedScalarEvaluationResult"], [26, 1, 1, "", "RegisteredDimension"], [26, 1, 1, "", "SampleGrid"], [26, 1, 1, "", "ScalarEvaluationResult"], [26, 5, 1, "", "dimension"]], "hermespy.core.monte_carlo.Artifact": [[26, 4, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.ArtifactTemplate": [[26, 2, 1, "", "artifact"], [26, 4, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.ConsoleMode": [[26, 3, 1, "", "INTERACTIVE"], [26, 3, 1, "", "LINEAR"], [26, 3, 1, "", "SILENT"]], "hermespy.core.monte_carlo.Evaluation": [[26, 4, 1, "", "artifact"]], "hermespy.core.monte_carlo.EvaluationResult": [[26, 4, 1, "", "plot"], [26, 4, 1, "", "to_array"]], "hermespy.core.monte_carlo.EvaluationTemplate": [[26, 3, 1, "", "evaluation"]], "hermespy.core.monte_carlo.Evaluator": [[26, 2, 1, "", "abbreviation"], [26, 2, 1, "", "confidence"], [26, 4, 1, "", "evaluate"], [26, 4, 1, "", "generate_result"], [26, 2, 1, "", "plot_scale"], [26, 2, 1, "", "title"], [26, 2, 1, "", "tolerance"]], "hermespy.core.monte_carlo.GridDimension": [[26, 4, 1, "", "configure_point"], [26, 2, 1, "", "considered_objects"], [26, 2, 1, "", "first_impact"], [26, 2, 1, "", "last_impact"], [26, 2, 1, "", "num_sample_points"], [26, 2, 1, "", "plot_scale"], [26, 2, 1, "", "sample_points"], [26, 2, 1, "", "title"]], "hermespy.core.monte_carlo.GridSection": [[26, 4, 1, "", "add_samples"], [26, 4, 1, "", "confidence_status"], [26, 2, 1, "", "confidences"], [26, 2, 1, "", "coordinates"], [26, 2, 1, "", "num_samples"], [26, 2, 1, "", "samples"], [26, 2, 1, "", "scalars"]], "hermespy.core.monte_carlo.MonteCarlo": [[26, 4, 1, "", "add_dimension"], [26, 4, 1, "", "add_evaluator"], [26, 3, 1, "", "catch_exceptions"], [26, 2, 1, "", "console"], [26, 2, 1, "", "cpus_per_actor"], [26, 2, 1, "", "investigated_object"], [26, 2, 1, "", "max_num_samples"], [26, 2, 1, "", "min_num_samples"], [26, 4, 1, "", "new_dimension"], [26, 2, 1, "", "num_actors"], [26, 2, 1, "", "num_samples"], [26, 3, 1, "", "runtime_env"], [26, 2, 1, "", "section_block_size"], [26, 4, 1, "", "simulate"]], "hermespy.core.monte_carlo.MonteCarloActor": [[26, 3, 1, "", "catch_exceptions"], [26, 4, 1, "", "run"], [26, 4, 1, "", "stage_executors"], [26, 4, 1, "", "stage_identifiers"]], "hermespy.core.monte_carlo.MonteCarloResult": [[26, 2, 1, "", "evaluation_results"], [26, 2, 1, "", "performance_time"], [26, 4, 1, "", "plot"], [26, 4, 1, "", "save_to_matlab"]], "hermespy.core.monte_carlo.MonteCarloSample": [[26, 2, 1, "", "artifact_scalars"], [26, 2, 1, "", "artifacts"], [26, 2, 1, "", "grid_section"], [26, 2, 1, "", "num_artifacts"], [26, 2, 1, "", "sample_index"]], "hermespy.core.monte_carlo.ProcessedScalarEvaluationResult": [[26, 4, 1, "", "plot"], [26, 3, 1, "", "plot_surface"], [26, 4, 1, "", "to_array"]], "hermespy.core.monte_carlo.RegisteredDimension": [[26, 4, 1, "", "deleter"], [26, 2, 1, "", "first_impact"], [26, 4, 1, "", "is_registered"], [26, 2, 1, "", "last_impact"], [26, 4, 1, "", "setter"]], "hermespy.core.monte_carlo.ScalarEvaluationResult": [[26, 3, 1, "", "plot_surface"]], "hermespy.core.pipeline": [[27, 1, 1, "", "Pipeline"]], "hermespy.core.pipeline.Pipeline": [[27, 4, 1, "", "add_device"], [27, 4, 1, "", "new_device"], [27, 2, 1, "", "num_drops"], [27, 2, 1, "", "scenario"]], "hermespy.core.random_node": [[28, 1, 1, "", "RandomNode"]], "hermespy.core.random_node.RandomNode": [[28, 2, 1, "", "is_random_root"], [28, 2, 1, "", "random_mother"], [28, 2, 1, "", "seed"]], "hermespy.core.scenario": [[29, 1, 1, "", "Scenario"], [29, 1, 1, "", "ScenarioMode"], [29, 6, 1, "", "ScenarioType"]], "hermespy.core.scenario.Scenario": [[29, 4, 1, "", "add_device"], [29, 4, 1, "", "device_registered"], [29, 2, 1, "", "devices"], [29, 4, 1, "", "drop"], [29, 2, 1, "", "drop_duration"], [29, 2, 1, "", "mode"], [29, 4, 1, "", "new_device"], [29, 2, 1, "", "num_devices"], [29, 2, 1, "", "num_operators"], [29, 2, 1, "", "num_receivers"], [29, 2, 1, "", "num_transmitters"], [29, 2, 1, "", "operators"], [29, 4, 1, "", "receive_devices"], [29, 4, 1, "", "receive_operators"], [29, 2, 1, "", "receivers"], [29, 4, 1, "", "record"], [29, 4, 1, "", "replay"], [29, 4, 1, "", "stop"], [29, 4, 1, "", "transmit_devices"], [29, 4, 1, "", "transmit_operators"], [29, 2, 1, "", "transmitters"]], "hermespy.core.scenario.ScenarioMode": [[29, 3, 1, "", "DEFAULT"], [29, 3, 1, "", "RECORD"], [29, 3, 1, "", "REPLAY"]], "hermespy.core.signal_model": [[30, 1, 1, "", "Signal"]], "hermespy.core.signal_model.Signal": [[30, 3, 1, "", "__carrier_frequency"], [30, 3, 1, "", "__samples"], [30, 3, 1, "", "__sampling_rate"], [30, 4, 1, "", "append_samples"], [30, 4, 1, "", "append_streams"], [30, 2, 1, "", "carrier_frequency"], [30, 4, 1, "", "copy"], [30, 3, 1, "", "delay"], [30, 2, 1, "", "duration"], [30, 4, 1, "", "empty"], [30, 2, 1, "", "energy"], [30, 3, 1, "", "filter_order"], [30, 2, 1, "", "frequencies"], [30, 4, 1, "", "from_HDF"], [30, 4, 1, "", "from_interleaved"], [30, 2, 1, "", "noise_power"], [30, 2, 1, "", "num_samples"], [30, 2, 1, "", "num_streams"], [30, 4, 1, "", "plot"], [30, 2, 1, "", "power"], [30, 4, 1, "", "resample"], [30, 2, 1, "", "samples"], [30, 2, 1, "", "sampling_rate"], [30, 4, 1, "", "superimpose"], [30, 2, 1, "", "timestamps"], [30, 4, 1, "", "to_HDF"], [30, 4, 1, "", "to_interleaved"]], "hermespy.fec": [[33, 0, 0, "-", "block_interleaver"], [34, 0, 0, "-", "coding"], [35, 0, 0, "-", "cyclic_redundancy_check"], [38, 0, 0, "-", "repetition_encoder"], [41, 0, 0, "-", "scrambler"]], "hermespy.fec.block_interleaver": [[33, 1, 1, "", "BlockInterleaver"]], "hermespy.fec.block_interleaver.BlockInterleaver": [[33, 2, 1, "", "bit_block_size"], [33, 2, 1, "", "block_size"], [33, 2, 1, "", "code_block_size"], [33, 4, 1, "", "decode"], [33, 4, 1, "", "encode"], [33, 2, 1, "", "interleave_blocks"], [33, 2, 1, "", "rate"], [33, 3, 1, "", "yaml_tag"]], "hermespy.fec.coding": [[34, 1, 1, "", "Encoder"], [34, 1, 1, "", "EncoderManager"]], "hermespy.fec.coding.Encoder": [[34, 2, 1, "", "bit_block_size"], [34, 2, 1, "", "code_block_size"], [34, 4, 1, "", "decode"], [34, 3, 1, "", "enabled"], [34, 4, 1, "", "encode"], [34, 2, 1, "", "manager"], [34, 2, 1, "", "rate"], [34, 3, 1, "", "yaml_tag"]], "hermespy.fec.coding.EncoderManager": [[34, 4, 1, "", "add_encoder"], [34, 3, 1, "", "allow_padding"], [34, 3, 1, "", "allow_truncating"], [34, 2, 1, "", "bit_block_size"], [34, 2, 1, "", "code_block_size"], [34, 4, 1, "", "decode"], [34, 4, 1, "", "encode"], [34, 2, 1, "", "encoders"], [34, 2, 1, "", "modem"], [34, 2, 1, "", "rate"], [34, 4, 1, "", "required_num_data_bits"], [34, 3, 1, "", "yaml_tag"]], "hermespy.fec.cyclic_redundancy_check": [[35, 1, 1, "", "CyclicRedundancyCheck"]], "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck": [[35, 2, 1, "", "bit_block_size"], [35, 2, 1, "", "check_block_size"], [35, 2, 1, "", "code_block_size"], [35, 4, 1, "", "decode"], [35, 4, 1, "", "encode"], [35, 3, 1, "", "yaml_tag"]], "hermespy.fec.repetition_encoder": [[38, 1, 1, "", "RepetitionEncoder"]], "hermespy.fec.repetition_encoder.RepetitionEncoder": [[38, 2, 1, "", "bit_block_size"], [38, 2, 1, "", "code_block_size"], [38, 4, 1, "", "decode"], [38, 4, 1, "", "encode"], [38, 2, 1, "", "repetitions"], [38, 3, 1, "", "yaml_tag"]], "hermespy.fec.scrambler": [[41, 1, 1, "", "PseudoRandomGenerator"], [41, 1, 1, "", "Scrambler3GPP"], [41, 1, 1, "", "Scrambler80211a"]], "hermespy.fec.scrambler.PseudoRandomGenerator": [[41, 4, 1, "", "generate"], [41, 4, 1, "", "generate_sequence"], [41, 4, 1, "", "reset"]], "hermespy.fec.scrambler.Scrambler3GPP": [[41, 2, 1, "", "bit_block_size"], [41, 2, 1, "", "code_block_size"], [41, 4, 1, "", "decode"], [41, 4, 1, "", "encode"], [41, 3, 1, "", "yaml_tag"]], "hermespy.fec.scrambler.Scrambler80211a": [[41, 2, 1, "", "bit_block_size"], [41, 2, 1, "", "code_block_size"], [41, 4, 1, "", "decode"], [41, 4, 1, "", "encode"], [41, 2, 1, "", "seed"], [41, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.audio": [[44, 0, 0, "-", "device"], [45, 0, 0, "-", "scenario"]], "hermespy.hardware_loop.audio.device": [[44, 1, 1, "", "AudioDevice"], [44, 1, 1, "", "AudioDeviceAntennas"]], "hermespy.hardware_loop.audio.device.AudioDevice": [[44, 2, 1, "", "carrier_frequency"], [44, 2, 1, "", "max_sampling_rate"], [44, 2, 1, "", "playback_channels"], [44, 2, 1, "", "playback_device"], [44, 3, 1, "", "property_blacklist"], [44, 2, 1, "", "record_channels"], [44, 2, 1, "", "record_device"], [44, 2, 1, "", "sampling_rate"], [44, 4, 1, "", "trigger"], [44, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.audio.device.AudioDeviceAntennas": [[44, 2, 1, "", "num_antennas"]], "hermespy.hardware_loop.audio.scenario": [[45, 1, 1, "", "AudioScenario"]], "hermespy.hardware_loop.audio.scenario.AudioScenario": [[45, 4, 1, "", "new_device"], [45, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop": [[46, 0, 0, "-", "hardware_loop"], [47, 0, 0, "-", "physical_device"], [48, 0, 0, "-", "physical_device_dummy"], [49, 0, 0, "-", "scenario"]], "hermespy.hardware_loop.hardware_loop": [[46, 1, 1, "", "HardwareLoop"]], "hermespy.hardware_loop.hardware_loop.HardwareLoop": [[46, 4, 1, "", "add_dimension"], [46, 4, 1, "", "add_evaluator"], [46, 4, 1, "", "from_yaml"], [46, 3, 1, "", "manual_triggering"], [46, 4, 1, "", "new_dimension"], [46, 2, 1, "", "num_evaluators"], [46, 3, 1, "", "plot_information"], [46, 4, 1, "", "replay"], [46, 4, 1, "", "run"], [46, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.physical_device": [[47, 1, 1, "", "PhysicalDevice"], [47, 6, 1, "", "PhysicalDeviceType"], [47, 1, 1, "", "PowerReceiver"], [47, 1, 1, "", "SignalReceiver"], [47, 1, 1, "", "SignalTransmitter"], [47, 1, 1, "", "SilentTransmitter"], [47, 1, 1, "", "StaticOperator"]], "hermespy.hardware_loop.physical_device.PhysicalDevice": [[47, 2, 1, "", "adaptive_sampling"], [47, 4, 1, "", "calibrate"], [47, 2, 1, "", "calibration_delay"], [47, 4, 1, "", "estimate_noise_power"], [47, 4, 1, "", "load_calibration"], [47, 2, 1, "", "lowpass_bandwidth"], [47, 2, 1, "", "lowpass_filter"], [47, 2, 1, "", "max_receive_delay"], [47, 2, 1, "", "max_sampling_rate"], [47, 4, 1, "", "receive"], [47, 4, 1, "", "transmit"], [47, 4, 1, "", "trigger"], [47, 2, 1, "", "velocity"]], "hermespy.hardware_loop.physical_device.PowerReceiver": [[47, 2, 1, "", "energy"], [47, 2, 1, "", "frame_duration"], [47, 4, 1, "", "receive"], [47, 2, 1, "", "sampling_rate"]], "hermespy.hardware_loop.physical_device.SignalReceiver": [[47, 2, 1, "", "energy"], [47, 4, 1, "", "receive"]], "hermespy.hardware_loop.physical_device.SignalTransmitter": [[47, 4, 1, "", "transmit"]], "hermespy.hardware_loop.physical_device.SilentTransmitter": [[47, 4, 1, "", "transmit"]], "hermespy.hardware_loop.physical_device.StaticOperator": [[47, 2, 1, "", "frame_duration"], [47, 2, 1, "", "num_samples"], [47, 2, 1, "", "sampling_rate"]], "hermespy.hardware_loop.physical_device_dummy": [[48, 1, 1, "", "PhysicalDeviceDummy"], [48, 1, 1, "", "PhysicalScenarioDummy"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy": [[48, 2, 1, "", "max_sampling_rate"], [48, 4, 1, "", "receive"], [48, 4, 1, "", "transmit"], [48, 4, 1, "", "trigger"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy": [[48, 4, 1, "", "new_device"]], "hermespy.hardware_loop.scenario": [[49, 1, 1, "", "PhysicalScenario"], [49, 6, 1, "", "PhysicalScenarioType"]], "hermespy.hardware_loop.scenario.PhysicalScenario": [[49, 4, 1, "", "receive_devices"]], "hermespy.hardware_loop.uhd": [[50, 0, 0, "-", "system"], [50, 0, 0, "-", "usrp"]], "hermespy.hardware_loop.uhd.system": [[50, 1, 1, "", "UsrpSystem"]], "hermespy.hardware_loop.uhd.system.UsrpSystem": [[50, 4, 1, "", "add_device"], [50, 4, 1, "", "new_device"], [50, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.uhd.usrp": [[50, 1, 1, "", "UsrpDevice"]], "hermespy.hardware_loop.uhd.usrp.UsrpDevice": [[50, 2, 1, "", "carrier_frequency"], [50, 2, 1, "", "ip"], [50, 2, 1, "", "max_sampling_rate"], [50, 2, 1, "", "port"], [50, 3, 1, "", "property_blacklist"], [50, 2, 1, "", "rx_gain"], [50, 2, 1, "", "sampling_rate"], [50, 4, 1, "", "trigger"], [50, 2, 1, "", "tx_gain"], [50, 3, 1, "", "yaml_tag"]], "hermespy.jcas": [[52, 0, 0, "-", "matched_filtering"]], "hermespy.jcas.matched_filtering": [[52, 1, 1, "", "JCASReception"], [52, 1, 1, "", "JCASTransmission"], [52, 1, 1, "", "MatchedFilterJcas"]], "hermespy.jcas.matched_filtering.JCASReception": [[52, 3, 1, "", "frames"]], "hermespy.jcas.matched_filtering.JCASTransmission": [[52, 3, 1, "", "frames"]], "hermespy.jcas.matched_filtering.MatchedFilterJcas": [[52, 2, 1, "", "max_range"], [52, 3, 1, "", "property_blacklist"], [52, 2, 1, "", "range_resolution"], [52, 4, 1, "", "receive"], [52, 2, 1, "", "sampling_rate"], [52, 4, 1, "", "transmit"], [52, 3, 1, "", "yaml_tag"]], "hermespy.modem": [[54, 0, 0, "-", "bits_source"], [55, 0, 0, "-", "evaluators"], [56, 0, 0, "-", "modem"], [57, 0, 0, "-", "symbols"], [58, 0, 0, "-", "waveform_correlation_synchronization"], [59, 0, 0, "-", "waveform_generator"], [60, 0, 0, "-", "waveform_generator_chirp_fsk"], [61, 0, 0, "-", "waveform_generator_ofdm"], [62, 0, 0, "-", "waveform_single_carrier"]], "hermespy.modem.bits_source": [[54, 1, 1, "", "BitsSource"], [54, 1, 1, "", "RandomBitsSource"], [54, 1, 1, "", "StreamBitsSource"]], "hermespy.modem.bits_source.BitsSource": [[54, 4, 1, "", "generate_bits"]], "hermespy.modem.bits_source.RandomBitsSource": [[54, 4, 1, "", "generate_bits"], [54, 3, 1, "", "yaml_tag"]], "hermespy.modem.bits_source.StreamBitsSource": [[54, 4, 1, "", "generate_bits"]], "hermespy.modem.evaluators": [[55, 1, 1, "", "BitErrorArtifact"], [55, 1, 1, "", "BitErrorEvaluation"], [55, 1, 1, "", "BitErrorEvaluator"], [55, 1, 1, "", "BlockErrorArtifact"], [55, 1, 1, "", "BlockErrorEvaluation"], [55, 1, 1, "", "BlockErrorEvaluator"], [55, 1, 1, "", "CommunicationEvaluator"], [55, 1, 1, "", "FrameErrorArtifact"], [55, 1, 1, "", "FrameErrorEvaluation"], [55, 1, 1, "", "FrameErrorEvaluator"], [55, 1, 1, "", "ThroughputArtifact"], [55, 1, 1, "", "ThroughputEvaluation"], [55, 1, 1, "", "ThroughputEvaluator"]], "hermespy.modem.evaluators.BitErrorArtifact": [[55, 4, 1, "", "to_scalar"]], "hermespy.modem.evaluators.BitErrorEvaluation": [[55, 4, 1, "", "artifact"], [55, 3, 1, "", "evaluation"], [55, 4, 1, "", "plot"]], "hermespy.modem.evaluators.BitErrorEvaluator": [[55, 2, 1, "", "abbreviation"], [55, 4, 1, "", "evaluate"], [55, 2, 1, "", "title"], [55, 3, 1, "", "yaml_tag"]], "hermespy.modem.evaluators.BlockErrorArtifact": [[55, 4, 1, "", "to_scalar"]], "hermespy.modem.evaluators.BlockErrorEvaluation": [[55, 4, 1, "", "artifact"], [55, 3, 1, "", "evaluation"], [55, 4, 1, "", "plot"]], "hermespy.modem.evaluators.BlockErrorEvaluator": [[55, 2, 1, "", "abbreviation"], [55, 4, 1, "", "evaluate"], [55, 2, 1, "", "title"], [55, 3, 1, "", "yaml_tag"]], "hermespy.modem.evaluators.CommunicationEvaluator": [[55, 4, 1, "", "generate_result"], [55, 2, 1, "", "receiving_modem"], [55, 2, 1, "", "transmitting_modem"]], "hermespy.modem.evaluators.FrameErrorArtifact": [[55, 4, 1, "", "to_scalar"]], "hermespy.modem.evaluators.FrameErrorEvaluation": [[55, 4, 1, "", "artifact"], [55, 3, 1, "", "evaluation"], [55, 4, 1, "", "plot"]], "hermespy.modem.evaluators.FrameErrorEvaluator": [[55, 2, 1, "", "abbreviation"], [55, 4, 1, "", "evaluate"], [55, 2, 1, "", "title"], [55, 3, 1, "", "yaml_tag"]], "hermespy.modem.evaluators.ThroughputArtifact": [[55, 4, 1, "", "to_scalar"]], "hermespy.modem.evaluators.ThroughputEvaluation": [[55, 4, 1, "", "artifact"]], "hermespy.modem.evaluators.ThroughputEvaluator": [[55, 2, 1, "", "abbreviation"], [55, 4, 1, "", "evaluate"], [55, 2, 1, "", "title"], [55, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem": [[56, 1, 1, "", "BaseModem"], [56, 1, 1, "", "CommunicationReception"], [56, 1, 1, "", "CommunicationReceptionFrame"], [56, 1, 1, "", "CommunicationTransmission"], [56, 1, 1, "", "CommunicationTransmissionFrame"], [56, 1, 1, "", "DuplexModem"], [56, 1, 1, "", "ReceivingModem"], [56, 1, 1, "", "SimplexLink"], [56, 1, 1, "", "TransmittingModem"]], "hermespy.modem.modem.BaseModem": [[56, 2, 1, "", "csi"], [56, 2, 1, "", "encoder_manager"], [56, 2, 1, "", "frame_duration"], [56, 4, 1, "", "noise_power"], [56, 2, 1, "", "num_data_bits_per_frame"], [56, 2, 1, "", "num_receive_streams"], [56, 2, 1, "", "num_transmit_streams"], [56, 2, 1, "", "precoding"], [56, 2, 1, "", "receiving_device"], [56, 2, 1, "", "sampling_rate"], [56, 2, 1, "", "transmitting_device"], [56, 2, 1, "", "waveform_generator"]], "hermespy.modem.modem.CommunicationReception": [[56, 2, 1, "", "bits"], [56, 2, 1, "", "encoded_bits"], [56, 2, 1, "", "equalized_symbols"], [56, 3, 1, "", "frames"], [56, 4, 1, "", "from_HDF"], [56, 2, 1, "", "num_frames"], [56, 2, 1, "", "symbols"], [56, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.CommunicationReceptionFrame": [[56, 3, 1, "", "csi"], [56, 3, 1, "", "decoded_bits"], [56, 3, 1, "", "decoded_signal"], [56, 3, 1, "", "decoded_symbols"], [56, 3, 1, "", "encoded_bits"], [56, 3, 1, "", "equalized_symbols"], [56, 4, 1, "", "from_HDF"], [56, 3, 1, "", "signal"], [56, 3, 1, "", "symbols"], [56, 3, 1, "", "timestamp"], [56, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.CommunicationTransmission": [[56, 2, 1, "", "bits"], [56, 3, 1, "", "frames"], [56, 4, 1, "", "from_HDF"], [56, 2, 1, "", "num_frames"], [56, 2, 1, "", "symbols"], [56, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.CommunicationTransmissionFrame": [[56, 3, 1, "", "bits"], [56, 3, 1, "", "encoded_bits"], [56, 3, 1, "", "encoded_symbols"], [56, 4, 1, "", "from_HDF"], [56, 3, 1, "", "signal"], [56, 3, 1, "", "symbols"], [56, 3, 1, "", "timestamp"], [56, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.DuplexModem": [[56, 2, 1, "", "csi"], [56, 2, 1, "", "device"], [56, 2, 1, "", "receiving_device"], [56, 2, 1, "", "transmitting_device"], [56, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem.ReceivingModem": [[56, 2, 1, "", "csi"], [56, 4, 1, "", "receive"], [56, 2, 1, "", "receive_stream_coding"], [56, 2, 1, "", "receiving_device"], [56, 2, 1, "", "reception"], [56, 2, 1, "", "transmit_stream_coding"], [56, 2, 1, "", "transmitting_device"], [56, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem.SimplexLink": [[56, 2, 1, "", "receiving_device"], [56, 2, 1, "", "transmitting_device"], [56, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem.TransmittingModem": [[56, 2, 1, "", "bits_source"], [56, 2, 1, "", "receiving_device"], [56, 2, 1, "", "transmission"], [56, 4, 1, "", "transmit"], [56, 2, 1, "", "transmit_stream_coding"], [56, 2, 1, "", "transmitting_device"], [56, 3, 1, "", "yaml_tag"]], "hermespy.modem.symbols": [[57, 1, 1, "", "StatedSymbols"], [57, 1, 1, "", "Symbol"], [57, 1, 1, "", "SymbolType"], [57, 1, 1, "", "Symbols"]], "hermespy.modem.symbols.StatedSymbols": [[57, 4, 1, "", "copy"], [57, 4, 1, "", "from_HDF"], [57, 2, 1, "", "num_transmit_streams"], [57, 2, 1, "", "states"], [57, 4, 1, "", "to_HDF"]], "hermespy.modem.symbols.Symbol": [[57, 3, 1, "", "flag"], [57, 3, 1, "", "value"]], "hermespy.modem.symbols.SymbolType": [[57, 3, 1, "", "DATA"], [57, 3, 1, "", "PILOT"], [57, 3, 1, "", "REFERENCE"]], "hermespy.modem.symbols.Symbols": [[57, 4, 1, "", "append_stream"], [57, 4, 1, "", "append_symbols"], [57, 4, 1, "", "copy"], [57, 4, 1, "", "from_HDF"], [57, 2, 1, "", "num_blocks"], [57, 2, 1, "", "num_streams"], [57, 2, 1, "", "num_symbols"], [57, 4, 1, "", "plot_constellation"], [57, 2, 1, "", "raw"], [57, 4, 1, "", "to_HDF"]], "hermespy.modem.waveform_correlation_synchronization": [[58, 1, 1, "", "CorrelationSynchronization"], [58, 6, 1, "", "PGT"]], "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization": [[58, 2, 1, "", "guard_ratio"], [58, 4, 1, "", "synchronize"], [58, 2, 1, "", "threshold"], [58, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator": [[59, 1, 1, "", "ChannelEqualization"], [59, 1, 1, "", "ChannelEstimation"], [59, 1, 1, "", "ConfigurablePilotWaveform"], [59, 1, 1, "", "CustomPilotSymbolSequence"], [59, 1, 1, "", "IdealChannelEstimation"], [59, 1, 1, "", "MappedPilotSymbolSequence"], [59, 1, 1, "", "PilotSymbolSequence"], [59, 1, 1, "", "PilotWaveformGenerator"], [59, 1, 1, "", "Synchronization"], [59, 1, 1, "", "UniformPilotSymbolSequence"], [59, 1, 1, "", "WaveformGenerator"], [59, 1, 1, "", "ZeroForcingChannelEqualization"]], "hermespy.modem.waveform_generator.ChannelEqualization": [[59, 4, 1, "", "equalize_channel"], [59, 2, 1, "", "waveform_generator"], [59, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator.ChannelEstimation": [[59, 4, 1, "", "estimate_channel"], [59, 2, 1, "", "waveform_generator"], [59, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator.ConfigurablePilotWaveform": [[59, 3, 1, "", "pilot_symbol_sequence"], [59, 4, 1, "", "pilot_symbols"], [59, 3, 1, "", "repeat_pilot_symbol_sequence"]], "hermespy.modem.waveform_generator.CustomPilotSymbolSequence": [[59, 2, 1, "", "sequence"]], "hermespy.modem.waveform_generator.IdealChannelEstimation": [[59, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator.PilotSymbolSequence": [[59, 2, 1, "", "sequence"]], "hermespy.modem.waveform_generator.PilotWaveformGenerator": [[59, 2, 1, "", "pilot_signal"]], "hermespy.modem.waveform_generator.Synchronization": [[59, 4, 1, "", "synchronize"], [59, 2, 1, "", "waveform_generator"], [59, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator.UniformPilotSymbolSequence": [[59, 2, 1, "", "sequence"]], "hermespy.modem.waveform_generator.WaveformGenerator": [[59, 2, 1, "", "bandwidth"], [59, 2, 1, "", "bit_energy"], [59, 2, 1, "", "bits_per_frame"], [59, 2, 1, "", "bits_per_symbol"], [59, 2, 1, "", "channel_equalization"], [59, 2, 1, "", "channel_estimation"], [59, 2, 1, "", "data_rate"], [59, 4, 1, "", "demodulate"], [59, 4, 1, "", "equalize_symbols"], [59, 4, 1, "", "estimate_channel"], [59, 2, 1, "", "frame_duration"], [59, 4, 1, "", "map"], [59, 2, 1, "", "modem"], [59, 4, 1, "", "modulate"], [59, 2, 1, "", "modulation_order"], [59, 2, 1, "", "oversampling_factor"], [59, 2, 1, "", "power"], [59, 2, 1, "", "samples_in_frame"], [59, 2, 1, "", "sampling_rate"], [59, 2, 1, "", "symbol_energy"], [59, 2, 1, "", "symbol_precoding_support"], [59, 3, 1, "", "symbol_type"], [59, 2, 1, "", "symbols_per_frame"], [59, 2, 1, "", "synchronization"], [59, 4, 1, "", "unmap"]], "hermespy.modem.waveform_generator.ZeroForcingChannelEqualization": [[59, 4, 1, "", "equalize_channel"], [59, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_chirp_fsk": [[60, 1, 1, "", "ChirpFSKCorrelationSynchronization"], [60, 1, 1, "", "ChirpFSKSynchronization"], [60, 1, 1, "", "ChirpFSKWaveform"]], "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKCorrelationSynchronization": [[60, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKSynchronization": [[60, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform": [[60, 2, 1, "", "bandwidth"], [60, 2, 1, "", "bit_energy"], [60, 2, 1, "", "bits_per_frame"], [60, 2, 1, "", "bits_per_symbol"], [60, 2, 1, "", "chirp_bandwidth"], [60, 2, 1, "", "chirp_duration"], [60, 2, 1, "", "chirp_time"], [60, 2, 1, "", "chirps_in_frame"], [60, 4, 1, "", "demodulate"], [60, 2, 1, "", "frame_duration"], [60, 2, 1, "", "freq_difference"], [60, 2, 1, "", "guard_interval"], [60, 4, 1, "", "map"], [60, 4, 1, "", "modulate"], [60, 2, 1, "", "modulation_order"], [60, 2, 1, "", "num_data_chirps"], [60, 2, 1, "", "num_pilot_chirps"], [60, 2, 1, "", "pilot_signal"], [60, 2, 1, "", "power"], [60, 2, 1, "", "samples_in_chirp"], [60, 2, 1, "", "samples_in_frame"], [60, 2, 1, "", "sampling_rate"], [60, 2, 1, "", "symbol_energy"], [60, 2, 1, "", "symbol_precoding_support"], [60, 3, 1, "", "symbol_type"], [60, 2, 1, "", "symbols_per_frame"], [60, 4, 1, "", "unmap"], [60, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm": [[61, 1, 1, "", "ElementType"], [61, 1, 1, "", "FrameElement"], [61, 1, 1, "", "FrameGuardSection"], [61, 1, 1, "", "FrameResource"], [61, 1, 1, "", "FrameSection"], [61, 1, 1, "", "FrameSymbolSection"], [61, 1, 1, "", "OFDMChannelEqualization"], [61, 1, 1, "", "OFDMCorrelationSynchronization"], [61, 1, 1, "", "OFDMIdealChannelEstimation"], [61, 1, 1, "", "OFDMLeastSquaresChannelEstimation"], [61, 1, 1, "", "OFDMMinimumMeanSquareChannelEqualization"], [61, 1, 1, "", "OFDMSynchronization"], [61, 1, 1, "", "OFDMWaveform"], [61, 1, 1, "", "OFDMZeroForcingChannelEqualization"], [61, 1, 1, "", "PilotSection"], [61, 1, 1, "", "PrefixType"], [61, 1, 1, "", "ReferencePosition"], [61, 1, 1, "", "SchmidlCoxPilotSection"], [61, 1, 1, "", "SchmidlCoxSynchronization"]], "hermespy.modem.waveform_generator_ofdm.ElementType": [[61, 3, 1, "", "DATA"], [61, 3, 1, "", "NULL"], [61, 3, 1, "", "REFERENCE"], [61, 3, 1, "", "property_blacklist"], [61, 3, 1, "", "serialized_attributes"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.FrameElement": [[61, 3, 1, "", "repetitions"], [61, 3, 1, "", "serialized_attributes"], [61, 3, 1, "", "type"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.FrameGuardSection": [[61, 4, 1, "", "demodulate"], [61, 2, 1, "", "duration"], [61, 4, 1, "", "modulate"], [61, 2, 1, "", "num_samples"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.FrameResource": [[61, 3, 1, "", "elements"], [61, 2, 1, "", "mask"], [61, 2, 1, "", "num_references"], [61, 2, 1, "", "num_subcarriers"], [61, 2, 1, "", "num_symbols"], [61, 2, 1, "", "prefix_ratio"], [61, 3, 1, "", "prefix_type"], [61, 2, 1, "", "repetitions"], [61, 3, 1, "", "serialized_attributes"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.FrameSection": [[61, 4, 1, "", "demodulate"], [61, 2, 1, "", "frame"], [61, 4, 1, "", "modulate"], [61, 2, 1, "", "num_references"], [61, 2, 1, "", "num_repetitions"], [61, 2, 1, "", "num_samples"], [61, 2, 1, "", "num_subcarriers"], [61, 2, 1, "", "num_symbols"], [61, 2, 1, "", "num_words"], [61, 4, 1, "", "pick_symbols"], [61, 4, 1, "", "place_symbols"], [61, 2, 1, "", "resource_mask"]], "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection": [[61, 4, 1, "", "demodulate"], [61, 4, 1, "", "modulate"], [61, 2, 1, "", "num_references"], [61, 2, 1, "", "num_samples"], [61, 2, 1, "", "num_subcarriers"], [61, 2, 1, "", "num_symbols"], [61, 2, 1, "", "num_words"], [61, 3, 1, "", "pattern"], [61, 2, 1, "", "resource_mask"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.OFDMChannelEqualization": [[61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.OFDMCorrelationSynchronization": [[61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.OFDMIdealChannelEstimation": [[61, 4, 1, "", "estimate_channel"], [61, 3, 1, "", "reference_position"], [61, 3, 1, "", "serialized_attributes"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.OFDMLeastSquaresChannelEstimation": [[61, 4, 1, "", "estimate_channel"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.OFDMMinimumMeanSquareChannelEqualization": [[61, 4, 1, "", "equalize_channel"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.OFDMWaveform": [[61, 4, 1, "", "add_resource"], [61, 4, 1, "", "add_section"], [61, 2, 1, "", "bandwidth"], [61, 2, 1, "", "bit_energy"], [61, 2, 1, "", "bits_per_frame"], [61, 3, 1, "", "dc_suppression"], [61, 4, 1, "", "demodulate"], [61, 2, 1, "", "frame_duration"], [61, 4, 1, "", "map"], [61, 4, 1, "", "modulate"], [61, 2, 1, "", "modulation_order"], [61, 2, 1, "", "num_subcarriers"], [61, 2, 1, "", "pilot_section"], [61, 2, 1, "", "pilot_signal"], [61, 2, 1, "", "power"], [61, 4, 1, "", "reference_based_channel_estimation"], [61, 2, 1, "", "references_per_frame"], [61, 2, 1, "", "resources"], [61, 2, 1, "", "samples_in_frame"], [61, 2, 1, "", "sampling_rate"], [61, 2, 1, "", "structure"], [61, 2, 1, "", "subcarrier_spacing"], [61, 2, 1, "", "symbol_energy"], [61, 2, 1, "", "symbols_per_frame"], [61, 4, 1, "", "unmap"], [61, 2, 1, "", "words_per_frame"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.OFDMZeroForcingChannelEqualization": [[61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.PilotSection": [[61, 4, 1, "", "demodulate"], [61, 4, 1, "", "from_yaml"], [61, 4, 1, "", "modulate"], [61, 2, 1, "", "num_samples"], [61, 2, 1, "", "pilot_elements"], [61, 4, 1, "", "to_yaml"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.PrefixType": [[61, 3, 1, "", "CYCLIC"], [61, 3, 1, "", "NONE"], [61, 3, 1, "", "ZEROPAD"], [61, 3, 1, "", "property_blacklist"], [61, 3, 1, "", "serialized_attributes"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.ReferencePosition": [[61, 3, 1, "", "IDEAL"], [61, 3, 1, "", "IDEAL_MIDAMBLE"], [61, 3, 1, "", "IDEAL_POSTAMBLE"], [61, 3, 1, "", "IDEAL_PREAMBLE"], [61, 3, 1, "", "property_blacklist"], [61, 3, 1, "", "serialized_attributes"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.SchmidlCoxPilotSection": [[61, 4, 1, "", "demodulate"], [61, 2, 1, "", "num_samples"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_generator_ofdm.SchmidlCoxSynchronization": [[61, 4, 1, "", "synchronize"], [61, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier": [[62, 1, 1, "", "FMCWWaveform"], [62, 1, 1, "", "FilteredSingleCarrierWaveform"], [62, 1, 1, "", "RaisedCosineWaveform"], [62, 1, 1, "", "RectangularWaveform"], [62, 1, 1, "", "RolledOffSingleCarrierWaveform"], [62, 1, 1, "", "RootRaisedCosineWaveform"], [62, 1, 1, "", "SingleCarrierChannelEqualization"], [62, 1, 1, "", "SingleCarrierChannelEstimation"], [62, 1, 1, "", "SingleCarrierCorrelationSynchronization"], [62, 1, 1, "", "SingleCarrierIdealChannelEstimation"], [62, 1, 1, "", "SingleCarrierLeastSquaresChannelEstimation"], [62, 1, 1, "", "SingleCarrierMinimumMeanSquareChannelEqualization"], [62, 1, 1, "", "SingleCarrierSynchronization"], [62, 1, 1, "", "SingleCarrierZeroForcingChannelEqualization"]], "hermespy.modem.waveform_single_carrier.FMCWWaveform": [[62, 2, 1, "", "bandwidth"], [62, 2, 1, "", "chirp_duration"], [62, 2, 1, "", "chirp_slope"], [62, 3, 1, "", "property_blacklist"], [62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform": [[62, 2, 1, "", "bit_energy"], [62, 2, 1, "", "bits_per_frame"], [62, 4, 1, "", "demodulate"], [62, 2, 1, "", "guard_interval"], [62, 4, 1, "", "map"], [62, 4, 1, "", "modulate"], [62, 2, 1, "", "modulation_order"], [62, 2, 1, "", "num_data_symbols"], [62, 2, 1, "", "num_guard_samples"], [62, 2, 1, "", "num_pilot_samples"], [62, 2, 1, "", "num_postamble_symbols"], [62, 2, 1, "", "num_preamble_symbols"], [62, 2, 1, "", "pilot_rate"], [62, 2, 1, "", "pilot_signal"], [62, 4, 1, "", "plot_filter"], [62, 4, 1, "", "plot_filter_correlation"], [62, 2, 1, "", "power"], [62, 2, 1, "", "samples_in_frame"], [62, 2, 1, "", "sampling_rate"], [62, 2, 1, "", "symbol_energy"], [62, 2, 1, "", "symbol_rate"], [62, 2, 1, "", "symbols_per_frame"], [62, 4, 1, "", "unmap"]], "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform": [[62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.RectangularWaveform": [[62, 2, 1, "", "bandwidth"], [62, 2, 1, "", "relative_bandwidth"], [62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform": [[62, 2, 1, "", "bandwidth"], [62, 2, 1, "", "filter_length"], [62, 2, 1, "", "relative_bandwidth"], [62, 2, 1, "", "roll_off"]], "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform": [[62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierCorrelationSynchronization": [[62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation": [[62, 4, 1, "", "estimate_channel"], [62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation": [[62, 4, 1, "", "estimate_channel"], [62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization": [[62, 4, 1, "", "equalize_channel"], [62, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierZeroForcingChannelEqualization": [[62, 3, 1, "", "yaml_tag"]], "hermespy.precoding": [[64, 0, 0, "-", "dft"], [65, 0, 0, "-", "precoding"], [66, 0, 0, "-", "ratio_combining"], [67, 0, 0, "-", "single_carrier"], [68, 0, 0, "-", "space_time_block_coding"], [69, 0, 0, "-", "spatial_multiplexing"], [70, 0, 0, "-", "stream_precoding"], [71, 0, 0, "-", "symbol_precoding"]], "hermespy.precoding.dft": [[64, 1, 1, "", "DFT"]], "hermespy.precoding.dft.DFT": [[64, 4, 1, "", "decode"], [64, 4, 1, "", "encode"], [64, 2, 1, "", "num_input_streams"], [64, 2, 1, "", "num_output_streams"], [64, 3, 1, "", "yaml_tag"]], "hermespy.precoding.precoding": [[65, 1, 1, "", "Precoder"], [65, 6, 1, "", "PrecoderType"], [65, 1, 1, "", "Precoding"]], "hermespy.precoding.precoding.Precoder": [[65, 2, 1, "", "num_input_streams"], [65, 2, 1, "", "num_output_streams"], [65, 2, 1, "", "precoding"], [65, 2, 1, "", "rate"], [65, 2, 1, "", "required_num_input_streams"], [65, 2, 1, "", "required_num_output_streams"], [65, 3, 1, "", "yaml_tag"]], "hermespy.precoding.precoding.Precoding": [[65, 3, 1, "", "__modem"], [65, 3, 1, "", "__precoders"], [65, 4, 1, "", "from_yaml"], [65, 2, 1, "", "modem"], [65, 2, 1, "", "num_input_streams"], [65, 2, 1, "", "num_output_streams"], [65, 4, 1, "", "pop_precoder"], [65, 2, 1, "", "rate"], [65, 4, 1, "", "required_inputs"], [65, 4, 1, "", "required_outputs"], [65, 4, 1, "", "to_yaml"]], "hermespy.precoding.ratio_combining": [[66, 1, 1, "", "MaximumRatioCombining"]], "hermespy.precoding.ratio_combining.MaximumRatioCombining": [[66, 4, 1, "", "decode"], [66, 4, 1, "", "encode"], [66, 2, 1, "", "num_input_streams"], [66, 2, 1, "", "num_output_streams"], [66, 3, 1, "", "yaml_tag"]], "hermespy.precoding.single_carrier": [[67, 1, 1, "", "SingleCarrier"]], "hermespy.precoding.single_carrier.SingleCarrier": [[67, 4, 1, "", "decode"], [67, 4, 1, "", "encode"], [67, 2, 1, "", "num_input_streams"], [67, 2, 1, "", "num_output_streams"], [67, 3, 1, "", "yaml_tag"]], "hermespy.precoding.space_time_block_coding": [[68, 1, 1, "", "SpaceTimeBlockCoding"]], "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding": [[68, 4, 1, "", "decode"], [68, 4, 1, "", "encode"], [68, 4, 1, "", "from_yaml"], [68, 2, 1, "", "num_input_streams"], [68, 2, 1, "", "num_output_streams"], [68, 4, 1, "", "to_yaml"], [68, 3, 1, "", "yaml_tag"]], "hermespy.precoding.spatial_multiplexing": [[69, 1, 1, "", "SpatialMultiplexing"]], "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing": [[69, 4, 1, "", "decode"], [69, 4, 1, "", "encode"], [69, 2, 1, "", "num_input_streams"], [69, 2, 1, "", "num_output_streams"], [69, 2, 1, "", "rate"], [69, 3, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding": [[70, 1, 1, "", "ReceiveStreamCoding"], [70, 1, 1, "", "ReceiveStreamDecoder"], [70, 1, 1, "", "TransmitStreamCoding"], [70, 1, 1, "", "TransmitStreamEncoder"]], "hermespy.precoding.stream_precoding.ReceiveStreamCoding": [[70, 4, 1, "", "decode"], [70, 3, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding.ReceiveStreamDecoder": [[70, 4, 1, "", "decode_streams"], [70, 2, 1, "", "num_input_streams"], [70, 2, 1, "", "num_output_streams"], [70, 2, 1, "", "num_receive_input_streams"], [70, 2, 1, "", "num_receive_output_streams"], [70, 3, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding.TransmitStreamCoding": [[70, 4, 1, "", "encode"], [70, 3, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding.TransmitStreamEncoder": [[70, 4, 1, "", "encode_streams"], [70, 2, 1, "", "num_input_streams"], [70, 2, 1, "", "num_output_streams"], [70, 2, 1, "", "num_transmit_input_streams"], [70, 2, 1, "", "num_transmit_output_streams"], [70, 3, 1, "", "yaml_tag"]], "hermespy.precoding.symbol_precoding": [[71, 1, 1, "", "SymbolPrecoder"], [71, 1, 1, "", "SymbolPrecoding"]], "hermespy.precoding.symbol_precoding.SymbolPrecoder": [[71, 4, 1, "", "decode"], [71, 4, 1, "", "encode"], [71, 3, 1, "", "yaml_tag"]], "hermespy.precoding.symbol_precoding.SymbolPrecoding": [[71, 4, 1, "", "decode"], [71, 4, 1, "", "encode"], [71, 3, 1, "", "yaml_tag"]], "hermespy.radar": [[73, 0, 0, "-", "cube"], [74, 0, 0, "-", "detection"], [75, 0, 0, "-", "evaluators"], [76, 0, 0, "-", "fmcw"], [77, 0, 0, "-", "radar"]], "hermespy.radar.cube": [[73, 1, 1, "", "RadarCube"]], "hermespy.radar.cube.RadarCube": [[73, 3, 1, "", "angle_bins"], [73, 3, 1, "", "data"], [73, 4, 1, "", "normalize_power"], [73, 4, 1, "", "plot_range"], [73, 4, 1, "", "plot_range_velocity"], [73, 3, 1, "", "range_bins"], [73, 3, 1, "", "velocity_bins"]], "hermespy.radar.detection": [[74, 1, 1, "", "MaxDetector"], [74, 1, 1, "", "PointDetection"], [74, 1, 1, "", "RadarDetector"], [74, 1, 1, "", "RadarPointCloud"], [74, 1, 1, "", "ThresholdDetector"]], "hermespy.radar.detection.MaxDetector": [[74, 4, 1, "", "detect"], [74, 3, 1, "", "yaml_tag"]], "hermespy.radar.detection.PointDetection": [[74, 4, 1, "", "FromSpherical"], [74, 2, 1, "", "position"], [74, 2, 1, "", "power"], [74, 2, 1, "", "velocity"]], "hermespy.radar.detection.RadarDetector": [[74, 4, 1, "", "detect"]], "hermespy.radar.detection.RadarPointCloud": [[74, 4, 1, "", "add_point"], [74, 2, 1, "", "num_points"], [74, 3, 1, "", "points"]], "hermespy.radar.detection.ThresholdDetector": [[74, 4, 1, "", "detect"], [74, 2, 1, "", "min_power"], [74, 3, 1, "", "yaml_tag"]], "hermespy.radar.evaluators": [[75, 1, 1, "", "DetectionProbArtifact"], [75, 1, 1, "", "DetectionProbEvaluator"], [75, 1, 1, "", "DetectionProbabilityEvaluation"], [75, 1, 1, "", "RadarEvaluator"], [75, 1, 1, "", "ReceiverOperatingCharacteristic"], [75, 1, 1, "", "RocArtifact"], [75, 1, 1, "", "RocEvaluation"], [75, 1, 1, "", "RocEvaluationResult"], [75, 1, 1, "", "RootMeanSquareArtifact"], [75, 1, 1, "", "RootMeanSquareError"], [75, 1, 1, "", "RootMeanSquareErrorResult"], [75, 1, 1, "", "RootMeanSquareEvaluation"]], "hermespy.radar.evaluators.DetectionProbArtifact": [[75, 4, 1, "", "to_scalar"]], "hermespy.radar.evaluators.DetectionProbEvaluator": [[75, 2, 1, "", "abbreviation"], [75, 4, 1, "", "evaluate"], [75, 4, 1, "", "generate_result"], [75, 2, 1, "", "title"], [75, 3, 1, "", "yaml_tag"]], "hermespy.radar.evaluators.DetectionProbabilityEvaluation": [[75, 4, 1, "", "artifact"], [75, 3, 1, "", "evaluation"]], "hermespy.radar.evaluators.RadarEvaluator": [[75, 4, 1, "", "generate_result"], [75, 2, 1, "", "radar_channel"], [75, 2, 1, "", "receiving_radar"]], "hermespy.radar.evaluators.ReceiverOperatingCharacteristic": [[75, 2, 1, "", "abbreviation"], [75, 4, 1, "", "evaluate"], [75, 4, 1, "", "generate_result"], [75, 2, 1, "", "receiving_radar_null_hypothesis"], [75, 2, 1, "", "title"], [75, 3, 1, "", "yaml_tag"]], "hermespy.radar.evaluators.RocArtifact": [[75, 2, 1, "", "h0_value"], [75, 2, 1, "", "h1_value"]], "hermespy.radar.evaluators.RocEvaluation": [[75, 4, 1, "", "artifact"], [75, 3, 1, "", "data_h0"], [75, 3, 1, "", "data_h1"]], "hermespy.radar.evaluators.RocEvaluationResult": [[75, 4, 1, "", "plot"], [75, 4, 1, "", "to_array"]], "hermespy.radar.evaluators.RootMeanSquareArtifact": [[75, 3, 1, "", "cummulation"], [75, 3, 1, "", "num_errors"], [75, 4, 1, "", "to_scalar"]], "hermespy.radar.evaluators.RootMeanSquareError": [[75, 2, 1, "", "abbreviation"], [75, 4, 1, "", "evaluate"], [75, 4, 1, "", "generate_result"], [75, 2, 1, "", "title"]], "hermespy.radar.evaluators.RootMeanSquareErrorResult": [[75, 3, 1, "", "plot_surface"]], "hermespy.radar.evaluators.RootMeanSquareEvaluation": [[75, 4, 1, "", "artifact"]], "hermespy.radar.fmcw": [[76, 1, 1, "", "FMCW"]], "hermespy.radar.fmcw.FMCW": [[76, 2, 1, "", "adc_sampling_rate"], [76, 2, 1, "", "bandwidth"], [76, 2, 1, "", "chirp_duration"], [76, 2, 1, "", "doppler_resolution"], [76, 2, 1, "", "energy"], [76, 4, 1, "", "estimate"], [76, 2, 1, "", "frame_duration"], [76, 2, 1, "", "max_range"], [76, 2, 1, "", "max_velocity"], [76, 2, 1, "", "num_chirps"], [76, 4, 1, "", "ping"], [76, 2, 1, "", "power"], [76, 2, 1, "", "pulse_rep_interval"], [76, 2, 1, "", "range_bins"], [76, 2, 1, "", "range_resolution"], [76, 2, 1, "", "sampling_rate"], [76, 2, 1, "", "slope"], [76, 2, 1, "", "velocity_bins"], [76, 3, 1, "", "yaml_tag"]], "hermespy.radar.radar": [[77, 1, 1, "", "Radar"], [77, 1, 1, "", "RadarReception"], [77, 1, 1, "", "RadarTransmission"], [77, 1, 1, "", "RadarWaveform"]], "hermespy.radar.radar.Radar": [[77, 2, 1, "", "cloud"], [77, 2, 1, "", "cube"], [77, 2, 1, "", "detector"], [77, 2, 1, "", "frame_duration"], [77, 4, 1, "", "noise_power"], [77, 3, 1, "", "property_blacklist"], [77, 4, 1, "", "receive"], [77, 2, 1, "", "receive_beamformer"], [77, 2, 1, "", "sampling_rate"], [77, 4, 1, "", "transmit"], [77, 2, 1, "", "transmit_beamformer"], [77, 2, 1, "", "waveform"], [77, 3, 1, "", "yaml_tag"]], "hermespy.radar.radar.RadarReception": [[77, 3, 1, "", "cloud"], [77, 3, 1, "", "cube"]], "hermespy.radar.radar.RadarTransmission": [[77, 3, 1, "", "signal"]], "hermespy.radar.radar.RadarWaveform": [[77, 2, 1, "", "energy"], [77, 4, 1, "", "estimate"], [77, 4, 1, "", "ping"], [77, 2, 1, "", "power"], [77, 2, 1, "", "range_bins"], [77, 2, 1, "", "sampling_rate"], [77, 2, 1, "", "velocity_bins"]], "hermespy.simulation": [[79, 0, 0, "-", "analog_digital_converter"], [92, 0, 0, "-", "simulated_device"], [93, 0, 0, "-", "simulation"]], "hermespy.simulation.analog_digital_converter": [[79, 1, 1, "", "AnalogDigitalConverter"], [79, 1, 1, "", "AutomaticGainControl"], [79, 1, 1, "", "Gain"], [79, 1, 1, "", "GainControlType"], [79, 1, 1, "", "QuantizerType"]], "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter": [[79, 4, 1, "", "convert"], [79, 3, 1, "", "gain"], [79, 2, 1, "", "num_quantization_bits"], [79, 2, 1, "", "num_quantization_levels"], [79, 4, 1, "", "plot_quantizer"], [79, 2, 1, "", "quantizer_type"], [79, 3, 1, "", "yaml_tag"]], "hermespy.simulation.analog_digital_converter.AutomaticGainControl": [[79, 2, 1, "", "agc_type"], [79, 2, 1, "", "backoff"], [79, 4, 1, "", "from_yaml"], [79, 4, 1, "", "multiply_signal"], [79, 4, 1, "", "to_yaml"], [79, 3, 1, "", "yaml_tag"]], "hermespy.simulation.analog_digital_converter.Gain": [[79, 4, 1, "", "divide_signal"], [79, 2, 1, "", "gain"], [79, 4, 1, "", "multiply_signal"], [79, 4, 1, "", "to_yaml"], [79, 3, 1, "", "yaml_tag"]], "hermespy.simulation.analog_digital_converter.GainControlType": [[79, 3, 1, "", "MAX_AMPLITUDE"], [79, 3, 1, "", "NONE"], [79, 3, 1, "", "RMS_AMPLITUDE"], [79, 3, 1, "", "property_blacklist"], [79, 3, 1, "", "serialized_attributes"], [79, 3, 1, "", "yaml_tag"]], "hermespy.simulation.analog_digital_converter.QuantizerType": [[79, 3, 1, "", "MID_RISER"], [79, 3, 1, "", "MID_TREAD"], [79, 3, 1, "", "property_blacklist"], [79, 3, 1, "", "serialized_attributes"], [79, 3, 1, "", "yaml_tag"]], "hermespy.simulation.coupling": [[80, 0, 0, "-", "coupling"], [81, 0, 0, "-", "impedance"], [82, 0, 0, "-", "perfect"]], "hermespy.simulation.coupling.coupling": [[80, 1, 1, "", "Coupling"]], "hermespy.simulation.coupling.coupling.Coupling": [[80, 2, 1, "", "device"], [80, 4, 1, "", "receive"], [80, 4, 1, "", "transmit"]], "hermespy.simulation.coupling.impedance": [[81, 1, 1, "", "ImpedanceCoupling"]], "hermespy.simulation.coupling.impedance.ImpedanceCoupling": [[81, 2, 1, "", "matching_impedance"], [81, 2, 1, "", "receive_correlation"], [81, 2, 1, "", "receive_impedance"], [81, 2, 1, "", "transmit_correlation"], [81, 2, 1, "", "transmit_impedance"], [81, 3, 1, "", "yaml_tag"]], "hermespy.simulation.coupling.perfect": [[82, 1, 1, "", "PerfectCoupling"]], "hermespy.simulation.coupling.perfect.PerfectCoupling": [[82, 3, 1, "", "yaml_tag"]], "hermespy.simulation.isolation": [[84, 0, 0, "-", "impedance"], [83, 0, 0, "-", "isolation"], [85, 0, 0, "-", "perfect"], [86, 0, 0, "-", "specific"]], "hermespy.simulation.isolation.isolation": [[83, 1, 1, "", "Isolation"]], "hermespy.simulation.isolation.isolation.Isolation": [[83, 2, 1, "", "device"], [83, 4, 1, "", "leak"]], "hermespy.simulation.isolation.perfect": [[85, 1, 1, "", "PerfectIsolation"]], "hermespy.simulation.isolation.perfect.PerfectIsolation": [[85, 3, 1, "", "yaml_tag"]], "hermespy.simulation.isolation.specific": [[86, 1, 1, "", "SpecificIsolation"]], "hermespy.simulation.isolation.specific.SpecificIsolation": [[86, 2, 1, "", "isolation"], [86, 3, 1, "", "yaml_tag"]], "hermespy.simulation.noise": [[87, 0, 0, "-", "noise"]], "hermespy.simulation.noise.noise": [[87, 1, 1, "", "AWGN"], [87, 1, 1, "", "Noise"]], "hermespy.simulation.noise.noise.AWGN": [[87, 4, 1, "", "add"], [87, 3, 1, "", "property_blacklist"], [87, 3, 1, "", "yaml_tag"]], "hermespy.simulation.noise.noise.Noise": [[87, 4, 1, "", "add"], [87, 2, 1, "", "power"]], "hermespy.simulation.rf_chain": [[89, 0, 0, "-", "leakage"], [90, 0, 0, "-", "phase_noise"], [91, 0, 0, "-", "power_amplifier"], [88, 0, 0, "-", "rf_chain"]], "hermespy.simulation.rf_chain.leakage": [[89, 1, 1, "", "Leakage"], [89, 1, 1, "", "LinearLeakage"]], "hermespy.simulation.rf_chain.leakage.Leakage": [[89, 4, 1, "", "receive"], [89, 4, 1, "", "transmit"]], "hermespy.simulation.rf_chain.phase_noise": [[90, 1, 1, "", "NoPhaseNoise"], [90, 1, 1, "", "PhaseNoise"]], "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise": [[90, 4, 1, "", "add_noise"], [90, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.phase_noise.PhaseNoise": [[90, 4, 1, "", "add_noise"]], "hermespy.simulation.rf_chain.power_amplifier": [[91, 1, 1, "", "ClippingPowerAmplifier"], [91, 1, 1, "", "CustomPowerAmplifier"], [91, 1, 1, "", "PowerAmplifier"], [91, 1, 1, "", "RappPowerAmplifier"], [91, 1, 1, "", "SalehPowerAmplifier"]], "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier": [[91, 3, 1, "", "adjust_power"], [91, 4, 1, "", "model"], [91, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier": [[91, 2, 1, "", "gain"], [91, 2, 1, "", "input"], [91, 4, 1, "", "model"], [91, 2, 1, "", "phase"], [91, 3, 1, "", "serialized_attributes"], [91, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier": [[91, 3, 1, "", "adjust_power"], [91, 4, 1, "", "model"], [91, 4, 1, "", "plot"], [91, 2, 1, "", "saturation_amplitude"], [91, 4, 1, "", "send"], [91, 3, 1, "", "serialized_attributes"], [91, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier": [[91, 3, 1, "", "adjust_power"], [91, 4, 1, "", "model"], [91, 2, 1, "", "smoothness_factor"], [91, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier": [[91, 2, 1, "", "amplitude_alpha"], [91, 2, 1, "", "amplitude_beta"], [91, 4, 1, "", "model"], [91, 3, 1, "", "phase_alpha"], [91, 3, 1, "", "phase_beta"], [91, 3, 1, "", "serialized_attributes"], [91, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.rf_chain": [[88, 1, 1, "", "RfChain"]], "hermespy.simulation.rf_chain.rf_chain.RfChain": [[88, 4, 1, "", "add_iq_imbalance"], [88, 2, 1, "", "amplitude_imbalance"], [88, 2, 1, "", "phase_noise"], [88, 2, 1, "", "phase_offset"], [88, 2, 1, "", "power_amplifier"], [88, 4, 1, "", "receive"], [88, 4, 1, "", "to_yaml"], [88, 4, 1, "", "transmit"], [88, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulated_device": [[92, 1, 1, "", "SimulatedDevice"]], "hermespy.simulation.simulated_device.SimulatedDevice": [[92, 3, 1, "", "adc"], [92, 2, 1, "", "attached"], [92, 2, 1, "", "carrier_frequency"], [92, 2, 1, "", "coupling"], [92, 2, 1, "", "isolation"], [92, 2, 1, "", "noise"], [92, 2, 1, "", "operator_separation"], [92, 2, 1, "", "orientation"], [92, 3, 1, "", "property_blacklist"], [92, 4, 1, "", "receive"], [92, 3, 1, "", "rf_chain"], [92, 2, 1, "", "sampling_rate"], [92, 2, 1, "", "scenario"], [92, 3, 1, "", "serialized_attribute"], [92, 2, 1, "", "snr"], [92, 2, 1, "", "topology"], [92, 4, 1, "", "transmit"], [92, 2, 1, "", "velocity"], [92, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulation": [[93, 1, 1, "", "Simulation"], [93, 1, 1, "", "SimulationRunner"], [93, 1, 1, "", "SimulationScenario"]], "hermespy.simulation.simulation.Simulation": [[93, 3, 1, "", "dump_results"], [93, 4, 1, "", "from_yaml"], [93, 2, 1, "", "num_drops"], [93, 2, 1, "", "num_samples"], [93, 3, 1, "", "plot_results"], [93, 4, 1, "", "run"], [93, 4, 1, "", "to_yaml"], [93, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulation.SimulationRunner": [[93, 4, 1, "", "propagate"], [93, 4, 1, "", "receive_devices"], [93, 4, 1, "", "receive_operators"], [93, 4, 1, "", "transmit_devices"], [93, 4, 1, "", "transmit_operators"]], "hermespy.simulation.simulation.SimulationScenario": [[93, 4, 1, "", "add_device"], [93, 4, 1, "", "arriving_channels"], [93, 4, 1, "", "channel"], [93, 2, 1, "", "channels"], [93, 4, 1, "", "departing_channels"], [93, 4, 1, "", "new_device"], [93, 4, 1, "", "propagate"], [93, 4, 1, "", "receive_devices"], [93, 4, 1, "", "set_channel"], [93, 2, 1, "", "snr"], [93, 2, 1, "", "snr_type"]], "hermespy.tools": [[95, 0, 0, "-", "math"], [96, 0, 0, "-", "resampling"], [97, 0, 0, "-", "tile"]], "hermespy.tools.math": [[95, 1, 1, "", "DbConversionType"], [95, 5, 1, "", "db2lin"], [95, 5, 1, "", "lin2db"], [95, 5, 1, "", "marcum_q"], [95, 5, 1, "", "rms_value"], [95, 5, 1, "", "rotation_matrix"], [95, 5, 1, "", "transform_coordinates"], [95, 5, 1, "", "transform_vector"]], "hermespy.tools.math.DbConversionType": [[95, 3, 1, "", "AMPLITUDE"], [95, 3, 1, "", "HILLY"], [95, 3, 1, "", "POWER"]], "hermespy.tools.resampling": [[96, 5, 1, "", "delay_resampling_matrix"]], "hermespy.tools.tile": [[97, 5, 1, "", "screen_geometry"], [97, 5, 1, "", "set_figure_geometry"], [97, 5, 1, "", "test"], [97, 5, 1, "", "tile_figures"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"hermespi": [0, 111, 112], "api": 0, "beamform": [1, 2, 3, 4, 110, 116], "modul": [1, 63, 76, 110], "content": [1, 63], "capon": 3, "convent": 4, "entri": 5, "point": 5, "herm": 6, "command": [6, 111], "line": [6, 9, 10, 14, 111], "interfac": [6, 110], "cli": 6, "argument": 6, "option": 6, "channel": [7, 8, 17, 18, 21, 110, 111, 117], "model": [7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 21, 23, 30, 83, 87, 88, 89, 90, 91, 103, 110], "3gpp": [9, 10, 11, 12, 13, 14], "cluster": [9, 10, 14], "delai": [9, 10, 14], "indoor": [9, 10], "factori": [9, 25], "offic": 10, "rural": 11, "macrocel": [11, 13], "street": 12, "canyon": 12, "urban": [12, 13], "microcel": 12, "multipath": [15, 16], "fade": [15, 16], "standard": 16, "templat": 16, "quadriga": [17, 113], "singl": [18, 62, 67, 107], "target": 18, "radar": [18, 73, 74, 75, 76, 77], "core": 19, "antenna": [20, 83, 110], "configur": [20, 65, 102], "state": 21, "inform": 21, "gener": 22, "definit": 22, "devic": [23, 44, 45, 47, 48, 49, 50, 77, 92], "execut": 24, "serial": 25, "pymont": 26, "pipelin": [27, 34], "random": 28, "graph": 28, "wireless": 29, "scenario": [29, 45, 49], "signal": 30, "error": [31, 110], "correct": [31, 110], "interleav": 33, "code": [34, 38, 68, 98, 119], "cyclic": 35, "redund": 35, "check": 35, "repetit": 38, "scrambl": 41, "hardwar": [43, 46, 88, 99, 103, 109, 110], "loop": [43, 46], "audio": [44, 45, 99, 115], "bind": [44, 99], "physic": [47, 48, 49], "dummi": 48, "uhd": 50, "system": 50, "jca": [51, 52, 105], "match": 52, "filter": [52, 62], "commun": [53, 55, 57, 59, 110, 121], "bit": 54, "sourc": [54, 113], "evalu": [55, 75, 118], "modem": 56, "symbol": [57, 71], "correl": 58, "base": [58, 59], "waveform": [58, 59, 62, 76, 121], "synchron": 58, "chirp": [60, 100, 101], "frequenc": [60, 61, 76, 88], "shift": 60, "kei": [60, 110], "orthogon": 61, "divis": 61, "multiplex": [61, 69], "carrier": [62, 67, 107], "precod": [63, 64, 65, 70, 71, 110, 120], "discret": 64, "fourier": 64, "transform": 64, "maximum": 66, "ratio": 66, "combin": 66, "encod": 67, "space": 68, "time": 68, "block": 68, "spatial": 69, "stream": 70, "sens": [72, 110], "cube": 73, "detect": 74, "continu": 76, "oper": [77, 108], "simul": [78, 92, 93, 111], "analog": 79, "digit": 79, "convert": 79, "mutual": 80, "coupl": [80, 81, 82], "imped": [81, 84], "perfect": [82, 85], "isol": [83, 84, 85, 86], "specif": 86, "nois": [87, 90], "radio": 88, "chain": 88, "transmit": 89, "receiv": [89, 110], "leakag": 89, "phase": 90, "power": 91, "amplifi": 91, "tool": [94, 95, 111], "math": 95, "resampl": 96, "routin": [96, 113], "tile": 97, "figur": 97, "For": 98, "develop": 98, "unit": 98, "test": 98, "style": 98, "document": 98, "fsk": 100, "lora": 100, "qam": 101, "exampl": 102, "ofdm": [104, 106, 107], "interfer": 104, "5g": 106, "separ": 108, "usrp": 109, "driver": 109, "featur": 110, "forward": 110, "algorithm": 110, "multi": 110, "perform": 110, "indic": 110, "get": 111, "start": 111, "architectur": 111, "matrix": 111, "librari": 111, "transmiss": 111, "first": 111, "step": 111, "instal": 113, "from": 113, "pypi": 113, "matlab": 114, "us": 115, "equip": 115, "implement": [116, 117, 118, 119, 120, 121], "fec": 119, "refer": 122, "tutori": 123}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"HermesPy API": [[0, "hermespy-api"]], "Beamforming": [[1, "beamforming"], [110, "id1"]], "Module Content:": [[1, null], [63, null]], "Beamformer": [[2, "beamformer"]], "Capon Beamformer": [[3, "capon-beamformer"]], "Conventional Beamformer": [[4, "conventional-beamformer"]], "Entry Points": [[5, "entry-points"]], "Hermes Command Line Interface": [[6, "hermes-command-line-interface"]], "CLI Argument Options": [[6, "id1"]], "Channel Modeling": [[7, "channel-modeling"], [8, "channel-modeling"]], "3GPP Cluster Delay Line Indoor Factory Model": [[9, "gpp-cluster-delay-line-indoor-factory-model"]], "3GPP Cluster Delay Line Indoor Office Model": [[10, "gpp-cluster-delay-line-indoor-office-model"]], "3GPP Rural Macrocells Model": [[11, "gpp-rural-macrocells-model"]], "3GPP Street Canyon (Urban Microcells) Model": [[12, "gpp-street-canyon-urban-microcells-model"]], "3GPP Urban Macrocells Model": [[13, "gpp-urban-macrocells-model"]], "3GPP Cluster Delay Line Model": [[14, "gpp-cluster-delay-line-model"]], "Multipath Fading": [[15, "multipath-fading"]], "Multipath Fading Standard Templates": [[16, "multipath-fading-standard-templates"]], "Quadriga Channel Model": [[17, "quadriga-channel-model"]], "Single-Target Radar Channel Modeling": [[18, "single-target-radar-channel-modeling"]], "Core": [[19, "core"]], "Antenna Configuration": [[20, "antenna-configuration"]], "Channel State Information Model": [[21, "channel-state-information-model"]], "General Definitions": [[22, "general-definitions"]], "Device Modeling": [[23, "device-modeling"]], "Executable": [[24, "executable"]], "Serialization Factory": [[25, "serialization-factory"]], "PyMonte": [[26, "pymonte"]], "Pipeline": [[27, "pipeline"]], "Random Graph": [[28, "random-graph"]], "Wireless Scenario": [[29, "wireless-scenario"]], "Signal Modeling": [[30, "signal-modeling"]], "Error Correction": [[31, "error-correction"]], "Interleaving": [[33, "interleaving"]], "Coding Pipeline": [[34, "coding-pipeline"]], "Cyclic Redundancy Checks": [[35, "cyclic-redundancy-checks"]], "Repetition Coding": [[38, "repetition-coding"]], "Scrambling": [[41, "scrambling"]], "Hardware Loop": [[43, "hardware-loop"], [46, "hardware-loop"]], "Audio Device Binding": [[44, "audio-device-binding"]], "Audio Device Scenario": [[45, "audio-device-scenario"]], "Physical Devices": [[47, "physical-devices"]], "Physical Device Dummy": [[48, "physical-device-dummy"]], "Physical Device Scenario": [[49, "physical-device-scenario"]], "UHD System": [[50, "uhd-system"]], "UHD Device": [[50, "uhd-device"]], "JCAS": [[51, "jcas"], [105, "jcas"]], "Matched Filter JCAS": [[52, "matched-filter-jcas"]], "Communication": [[53, "communication"]], "Bit Source": [[54, "bit-source"]], "Communication Evaluators": [[55, "communication-evaluators"]], "Modem": [[56, "modem"]], "Communication Symbols": [[57, "communication-symbols"]], "Correlation-Based Waveform Synchronization": [[58, "correlation-based-waveform-synchronization"]], "Communication Waveform Base": [[59, "communication-waveform-base"]], "Chirp Frequency Shift Keying": [[60, "chirp-frequency-shift-keying"]], "Orthogonal Frequency Division Multiplexing": [[61, "orthogonal-frequency-division-multiplexing"]], "Filtered Single Carrier Waveforms": [[62, "filtered-single-carrier-waveforms"]], "Precoding": [[63, "precoding"]], "Discrete Fourier Transform Precoding": [[64, "discrete-fourier-transform-precoding"]], "Precoding Configuration": [[65, "precoding-configuration"]], "Maximum Ratio Combining": [[66, "maximum-ratio-combining"]], "Single Carrier Encoding": [[67, "single-carrier-encoding"]], "Space-Time Block Coding": [[68, "space-time-block-coding"]], "Spatial Multiplexing": [[69, "spatial-multiplexing"]], "Stream Precoding": [[70, "stream-precoding"]], "Symbol Precoding": [[71, "symbol-precoding"]], "Sensing": [[72, "sensing"]], "Radar Cube": [[73, "radar-cube"]], "Radar Detection": [[74, "radar-detection"]], "Radar Evaluation": [[75, "radar-evaluation"]], "Frequency Modulated Continuous Waveform Radar": [[76, "frequency-modulated-continuous-waveform-radar"]], "Radar Device Operation": [[77, "radar-device-operation"]], "Simulation": [[78, "simulation"], [93, "simulation"]], "Analog-to-Digital Converter": [[79, "analog-to-digital-converter"]], "Mutual Coupling": [[80, "mutual-coupling"]], "Impedance Coupling": [[81, "impedance-coupling"]], "Perfect Coupling": [[82, "perfect-coupling"]], "Antenna Isolation Modeling": [[83, "antenna-isolation-modeling"]], "Impedance Isolation": [[84, "impedance-isolation"]], "Perfect Isolation": [[85, "perfect-isolation"]], "Specific Isolation": [[86, "specific-isolation"]], "Noise Modeling": [[87, "noise-modeling"]], "Hardware Radio Frequency Chain Modeling": [[88, "hardware-radio-frequency-chain-modeling"]], "Transmit-Receive Leakage Modeling": [[89, "transmit-receive-leakage-modeling"]], "Phase Noise Modeling": [[90, "phase-noise-modeling"]], "Power Amplifier Modeling": [[91, "power-amplifier-modeling"]], "Simulated Devices": [[92, "simulated-devices"]], "Tools": [[94, "tools"]], "Math Tools": [[95, "math-tools"]], "Resampling Routines": [[96, "resampling-routines"]], "Tile Figures": [[97, "tile-figures"]], "For Developers": [[98, "for-developers"]], "Unit Testing": [[98, "unit-testing"]], "Coding Style": [[98, "coding-style"]], "Documentation": [[98, "documentation"]], "Audio Hardware Binding": [[99, "audio-hardware-binding"]], "Chirp FSK LORA": [[100, "chirp-fsk-lora"]], "Chirp QAM": [[101, "chirp-qam"]], "Configuration Examples": [[102, "configuration-examples"]], "Hardware Modeling": [[103, "hardware-modeling"]], "OFDM Interference": [[104, "ofdm-interference"]], "OFDM 5G": [[106, "ofdm-5g"]], "OFDM Single Carrier": [[107, "ofdm-single-carrier"]], "Operator Separation": [[108, "operator-separation"]], "USRP Hardware Driver": [[109, "usrp-hardware-driver"]], "Features": [[110, "features"]], "Forward Error Correction": [[110, "id2"]], "Channel Models": [[110, "id3"]], "Communication Modulation": [[110, "id4"]], "Communication Receiver Algorithms": [[110, "id5"]], "Sensing Modulation": [[110, "id6"]], "Multi Antenna Algorithms": [[110, "id7"]], "Precodings": [[110, "id8"]], "Hardware Models": [[110, "id9"]], "Key Performance Indicators": [[110, "id10"]], "Hardware Interfaces": [[110, "id11"]], "Getting Started": [[111, "getting-started"]], "HermesPy Architecture": [[111, "hermespy-architecture"]], "Channel Matrix": [[111, "id1"]], "Library": [[111, "library"]], "Transmissions": [[111, "transmissions"]], "Simulations": [[111, "simulations"]], "Command Line Tool": [[111, "command-line-tool"]], "First Steps": [[111, "first-steps"]], "HermesPy": [[112, "hermespy"]], "Installation": [[113, "installation"]], "Install from PyPi": [[113, "install-from-pypi"]], "Install from Source": [[113, "install-from-source"]], "Install Quadriga": [[113, "install-quadriga"]], "Installation Routine": [[113, "installation-routine"]], "Matlab": [[114, "matlab"]], "Using Audio Equipment": [[115, "Using-Audio-Equipment"]], "Implementing Beamformers": [[116, "Implementing-Beamformers"]], "Implementing Channels": [[117, "Implementing-Channels"]], "Implementing Evaluators": [[118, "Implementing-Evaluators"]], "Implementing FEC codings": [[119, "Implementing-FEC-codings"]], "Implementing Precodings": [[120, "Implementing-Precodings"]], "Implementing Communication Waveforms": [[121, "Implementing-Communication-Waveforms"]], "References": [[122, "references"]], "Tutorials": [[123, "tutorials"]]}, "indexentries": {"beamformerbase (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.BeamformerBase"]], "cartesian (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.CARTESIAN"]], "device (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.DEVICE"]], "focusmode (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.FocusMode"]], "horizontal (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.HORIZONTAL"]], "plotreceivepattern() (receivebeamformer class method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.PlotReceivePattern"]], "receivebeamformer (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer"]], "spherical (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.SPHERICAL"]], "transmitbeamformer (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer"]], "_decode() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer._decode"]], "decode_streams() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.decode_streams"]], "encode_streams() (transmitbeamformer method)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.encode_streams"]], "hermespy.beamforming.beamformer": [[2, "module-hermespy.beamforming.beamformer"]], "module": [[2, "module-hermespy.beamforming.beamformer"], [3, "module-hermespy.beamforming.capon"], [4, "module-hermespy.beamforming.conventional"], [6, "module-hermespy.bin.hermes"], [8, "module-hermespy.channel.channel"], [9, "module-hermespy.channel.cluster_delay_line_indoor_factory"], [10, "module-hermespy.channel.cluster_delay_line_indoor_office"], [11, "module-hermespy.channel.cluster_delay_line_rural_macrocells"], [12, "module-hermespy.channel.cluster_delay_line_street_canyon"], [13, "module-hermespy.channel.cluster_delay_line_urban_macrocells"], [14, "module-hermespy.channel.cluster_delay_lines"], [15, "module-hermespy.channel.multipath_fading_channel"], [16, "module-hermespy.channel.multipath_fading_templates"], [17, "module-hermespy.channel.quadriga_channel"], [18, "module-hermespy.channel.radar_channel"], [20, "module-hermespy.core.antennas"], [21, "module-hermespy.core.channel_state_information"], [22, "module-hermespy.core.definitions"], [23, "module-hermespy.core.device"], [24, "module-hermespy.core.executable"], [25, "module-hermespy.core.factory"], [26, "module-hermespy.core.monte_carlo"], [27, "module-hermespy.core.pipeline"], [28, "module-hermespy.core.random_node"], [29, "module-hermespy.core.scenario"], [30, "module-hermespy.core.signal_model"], [33, "module-hermespy.fec.block_interleaver"], [34, "module-hermespy.fec.coding"], [35, "module-hermespy.fec.cyclic_redundancy_check"], [38, "module-hermespy.fec.repetition_encoder"], [41, "module-hermespy.fec.scrambler"], [44, "module-hermespy.hardware_loop.audio.device"], [45, "module-hermespy.hardware_loop.audio.scenario"], [46, "module-hermespy.hardware_loop.hardware_loop"], [47, "module-hermespy.hardware_loop.physical_device"], [48, "module-hermespy.hardware_loop.physical_device_dummy"], [49, "module-hermespy.hardware_loop.scenario"], [50, "module-hermespy.hardware_loop.uhd.system"], [50, "module-hermespy.hardware_loop.uhd.usrp"], [52, "module-hermespy.jcas.matched_filtering"], [54, "module-hermespy.modem.bits_source"], [55, "module-hermespy.modem.evaluators"], [56, "module-hermespy.modem.modem"], [57, "module-hermespy.modem.symbols"], [58, "module-hermespy.modem.waveform_correlation_synchronization"], [59, "module-hermespy.modem.waveform_generator"], [60, "module-hermespy.modem.waveform_generator_chirp_fsk"], [61, "module-hermespy.modem.waveform_generator_ofdm"], [62, "module-hermespy.modem.waveform_single_carrier"], [64, "module-hermespy.precoding.dft"], [65, "module-hermespy.precoding.precoding"], [66, "module-hermespy.precoding.ratio_combining"], [67, "module-hermespy.precoding.single_carrier"], [68, "module-hermespy.precoding.space_time_block_coding"], [69, "module-hermespy.precoding.spatial_multiplexing"], [70, "module-hermespy.precoding.stream_precoding"], [71, "module-hermespy.precoding.symbol_precoding"], [73, "module-hermespy.radar.cube"], [74, "module-hermespy.radar.detection"], [75, "module-hermespy.radar.evaluators"], [76, "module-hermespy.radar.fmcw"], [77, "module-hermespy.radar.radar"], [79, "module-hermespy.simulation.analog_digital_converter"], [80, "module-hermespy.simulation.coupling.coupling"], [81, "module-hermespy.simulation.coupling.impedance"], [82, "module-hermespy.simulation.coupling.perfect"], [83, "module-hermespy.simulation.isolation.isolation"], [84, "module-hermespy.simulation.isolation.impedance"], [85, "module-hermespy.simulation.isolation.perfect"], [86, "module-hermespy.simulation.isolation.specific"], [87, "module-hermespy.simulation.noise.noise"], [88, "module-hermespy.simulation.rf_chain.rf_chain"], [89, "module-hermespy.simulation.rf_chain.leakage"], [90, "module-hermespy.simulation.rf_chain.phase_noise"], [91, "module-hermespy.simulation.rf_chain.power_amplifier"], [92, "module-hermespy.simulation.simulated_device"], [93, "module-hermespy.simulation.simulation"], [95, "module-hermespy.tools.math"], [96, "module-hermespy.tools.resampling"], [97, "module-hermespy.tools.tile"]], "num_receive_focus_angles (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_focus_angles"]], "num_receive_input_streams (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_input_streams"]], "num_receive_output_streams (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_output_streams"]], "num_transmit_focus_angles (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_focus_angles"]], "num_transmit_input_streams (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_input_streams"]], "num_transmit_output_streams (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_output_streams"]], "operator (beamformerbase property)": [[2, "hermespy.beamforming.beamformer.BeamformerBase.operator"]], "plot_receive_pattern() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.plot_receive_pattern"]], "precoding (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.precoding"]], "precoding (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.precoding"]], "probe() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe"]], "probe_focus_points (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe_focus_points"]], "property_blacklist (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.property_blacklist"]], "receive() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.receive"]], "receive_focus (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.receive_focus"]], "serialized_attributes (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.serialized_attributes"]], "transmit() (transmitbeamformer method)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.transmit"]], "transmit_focus (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.transmit_focus"]], "yaml_tag (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.yaml_tag"]], "caponbeamformer (class in hermespy.beamforming.capon)": [[3, "hermespy.beamforming.capon.CaponBeamformer"]], "_decode() (caponbeamformer method)": [[3, "hermespy.beamforming.capon.CaponBeamformer._decode"]], "hermespy.beamforming.capon": [[3, "module-hermespy.beamforming.capon"]], "loading (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.loading"]], "num_receive_focus_angles (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_focus_angles"]], "num_receive_input_streams (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_input_streams"]], "num_receive_output_streams (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_output_streams"]], "yaml_tag (caponbeamformer attribute)": [[3, "hermespy.beamforming.capon.CaponBeamformer.yaml_tag"]], "conventionalbeamformer (class in hermespy.beamforming.conventional)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer"]], "_decode() (conventionalbeamformer method)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer._decode"]], "_encode() (conventionalbeamformer method)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer._encode"]], "hermespy.beamforming.conventional": [[4, "module-hermespy.beamforming.conventional"]], "num_receive_focus_angles (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_focus_angles"]], "num_receive_input_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_input_streams"]], "num_receive_output_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_output_streams"]], "num_transmit_focus_angles (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_focus_angles"]], "num_transmit_input_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_input_streams"]], "num_transmit_output_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_output_streams"]], "yaml_tag (conventionalbeamformer attribute)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.yaml_tag"]], "hermes() (in module hermespy.bin.hermes)": [[6, "hermespy.bin.hermes.hermes"]], "hermespy.bin.hermes": [[6, "module-hermespy.bin.hermes"]], "channel (class in hermespy.channel.channel)": [[8, "hermespy.channel.channel.Channel"]], "propagate() (channel static method)": [[8, "hermespy.channel.channel.Channel.Propagate"]], "active (channel property)": [[8, "hermespy.channel.channel.Channel.active"]], "gain (channel property)": [[8, "hermespy.channel.channel.Channel.gain"]], "hermespy.channel.channel": [[8, "module-hermespy.channel.channel"]], "impulse_response() (channel method)": [[8, "hermespy.channel.channel.Channel.impulse_response"]], "impulse_response_interpolation (channel attribute)": [[8, "hermespy.channel.channel.Channel.impulse_response_interpolation"]], "min_sampling_rate (channel property)": [[8, "hermespy.channel.channel.Channel.min_sampling_rate"]], "num_inputs (channel property)": [[8, "hermespy.channel.channel.Channel.num_inputs"]], "num_outputs (channel property)": [[8, "hermespy.channel.channel.Channel.num_outputs"]], "propagate() (channel method)": [[8, "hermespy.channel.channel.Channel.propagate"]], "receiver (channel property)": [[8, "hermespy.channel.channel.Channel.receiver"]], "serialized_attributes (channel attribute)": [[8, "hermespy.channel.channel.Channel.serialized_attributes"]], "sync_offset_high (channel property)": [[8, "hermespy.channel.channel.Channel.sync_offset_high"]], "sync_offset_low (channel property)": [[8, "hermespy.channel.channel.Channel.sync_offset_low"]], "transmitter (channel property)": [[8, "hermespy.channel.channel.Channel.transmitter"]], "yaml_tag (channel attribute)": [[8, "hermespy.channel.channel.Channel.yaml_tag"]], "indoorfactorybase (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase"]], "indoorfactorylineofsight (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight"]], "indoorfactorynolineofsight (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight"]], "aoa_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aoa_spread_std"]], "aoa_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aod_spread_mean"]], "aod_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aod_spread_std"]], "aod_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_scaling"]], "delay_scaling (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_scaling"]], "delay_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_spread_mean"]], "delay_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_spread_std"]], "delay_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_factory": [[9, "module-hermespy.channel.cluster_delay_line_indoor_factory"]], "line_of_sight (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.line_of_sight"]], "line_of_sight (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.line_of_sight"]], "num_clusters (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.num_clusters"]], "num_clusters (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.num_clusters"]], "num_rays (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.num_rays"]], "num_rays (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.num_rays"]], "rice_factor_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.rice_factor_mean"]], "rice_factor_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.rice_factor_std"]], "rice_factor_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.rice_factor_std"]], "surface (indoorfactorybase property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase.surface"]], "volume (indoorfactorybase property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase.volume"]], "yaml_tag (indoorfactorylineofsight attribute)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.yaml_tag"]], "yaml_tag (indoorfactorynolineofsight attribute)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.yaml_tag"]], "zoa_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zoa_spread_std"]], "zoa_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zoa_spread_std"]], "zod_offset (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_offset"]], "zod_offset (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_offset"]], "zod_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_spread_mean"]], "zod_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_spread_std"]], "zod_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_spread_std"]], "indoorofficelineofsight (class in hermespy.channel.cluster_delay_line_indoor_office)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight"]], "indoorofficenolineofsight (class in hermespy.channel.cluster_delay_line_indoor_office)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight"]], "aoa_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aoa_spread_std"]], "aoa_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aod_spread_mean"]], "aod_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aod_spread_std"]], "aod_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cross_polarization_power_std"]], "delay_normalization (indoorofficelineofsight attribute)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_normalization"]], "delay_normalization (indoorofficenolineofsight attribute)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_normalization"]], "delay_scaling (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_scaling"]], "delay_scaling (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_scaling"]], "delay_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_spread_mean"]], "delay_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_spread_std"]], "delay_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office": [[10, "module-hermespy.channel.cluster_delay_line_indoor_office"]], "line_of_sight (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.line_of_sight"]], "line_of_sight (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.line_of_sight"]], "num_clusters (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.num_clusters"]], "num_clusters (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.num_clusters"]], "num_rays (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.num_rays"]], "num_rays (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.num_rays"]], "rice_factor_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.rice_factor_mean"]], "rice_factor_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.rice_factor_std"]], "rice_factor_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.rice_factor_std"]], "yaml_tag (indoorofficelineofsight attribute)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.yaml_tag"]], "yaml_tag (indoorofficenolineofsight attribute)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.yaml_tag"]], "zoa_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zoa_spread_std"]], "zoa_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zoa_spread_std"]], "zod_offset (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_offset"]], "zod_offset (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_offset"]], "zod_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_spread_mean"]], "zod_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_spread_std"]], "zod_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_spread_std"]], "ruralmacrocellslineofsight (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight"]], "ruralmacrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight"]], "ruralmacrocellsoutsidetoinside (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside"]], "aoa_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aoa_spread_std"]], "aoa_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aoa_spread_std"]], "aoa_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aoa_spread_std"]], "aod_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aod_spread_mean"]], "aod_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aod_spread_mean"]], "aod_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aod_spread_mean"]], "aod_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aod_spread_std"]], "aod_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aod_spread_std"]], "aod_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cross_polarization_power_std"]], "delay_normalization (ruralmacrocellslineofsight attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_normalization"]], "delay_normalization (ruralmacrocellsnolineofsight attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_normalization"]], "delay_normalization (ruralmacrocellsoutsidetoinside attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_normalization"]], "delay_scaling (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_scaling"]], "delay_scaling (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_scaling"]], "delay_scaling (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_scaling"]], "delay_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_spread_mean"]], "delay_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_spread_mean"]], "delay_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_spread_mean"]], "delay_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_spread_std"]], "delay_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_spread_std"]], "delay_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells": [[11, "module-hermespy.channel.cluster_delay_line_rural_macrocells"]], "line_of_sight (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.line_of_sight"]], "line_of_sight (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.line_of_sight"]], "line_of_sight (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.line_of_sight"]], "num_clusters (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.num_clusters"]], "num_clusters (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.num_clusters"]], "num_clusters (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.num_clusters"]], "num_rays (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.num_rays"]], "num_rays (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.num_rays"]], "num_rays (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.num_rays"]], "rice_factor_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.rice_factor_mean"]], "rice_factor_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.rice_factor_mean"]], "rice_factor_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.rice_factor_mean"]], "rice_factor_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.rice_factor_std"]], "rice_factor_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.rice_factor_std"]], "rice_factor_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.rice_factor_std"]], "yaml_tag (ruralmacrocellslineofsight attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.yaml_tag"]], "yaml_tag (ruralmacrocellsnolineofsight attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.yaml_tag"]], "yaml_tag (ruralmacrocellsoutsidetoinside attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.yaml_tag"]], "zoa_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zoa_spread_std"]], "zoa_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zoa_spread_std"]], "zoa_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zoa_spread_std"]], "zod_offset (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_offset"]], "zod_offset (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_offset"]], "zod_offset (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_offset"]], "zod_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_spread_mean"]], "zod_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_spread_mean"]], "zod_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_spread_mean"]], "zod_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_spread_std"]], "zod_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_spread_std"]], "zod_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_spread_std"]], "streetcanyonlineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight"]], "streetcanyonnolineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight"]], "streetcanyonoutsidetoinside (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside"]], "urbanmicrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight"]], "aoa_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aoa_spread_std"]], "aoa_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aoa_spread_std"]], "aoa_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aoa_spread_std"]], "aod_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aod_spread_mean"]], "aod_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aod_spread_mean"]], "aod_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aod_spread_mean"]], "aod_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aod_spread_std"]], "aod_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aod_spread_std"]], "aod_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cross_polarization_power_std"]], "delay_normalization (streetcanyonlineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_normalization"]], "delay_normalization (streetcanyonnolineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_normalization"]], "delay_normalization (streetcanyonoutsidetoinside attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_normalization"]], "delay_normalization (urbanmicrocellsnolineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight.delay_normalization"]], "delay_scaling (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_scaling"]], "delay_scaling (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_scaling"]], "delay_scaling (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_scaling"]], "delay_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_spread_mean"]], "delay_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_spread_mean"]], "delay_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_spread_mean"]], "delay_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_spread_std"]], "delay_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_spread_std"]], "delay_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon": [[12, "module-hermespy.channel.cluster_delay_line_street_canyon"]], "impulse_response_interpolation (streetcanyonnolineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.impulse_response_interpolation"]], "impulse_response_interpolation (streetcanyonoutsidetoinside attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.impulse_response_interpolation"]], "line_of_sight (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.line_of_sight"]], "line_of_sight (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.line_of_sight"]], "line_of_sight (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.line_of_sight"]], "num_clusters (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.num_clusters"]], "num_clusters (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.num_clusters"]], "num_clusters (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.num_clusters"]], "num_rays (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.num_rays"]], "num_rays (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.num_rays"]], "num_rays (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.num_rays"]], "rice_factor_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.rice_factor_mean"]], "rice_factor_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.rice_factor_mean"]], "rice_factor_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.rice_factor_mean"]], "rice_factor_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.rice_factor_std"]], "rice_factor_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.rice_factor_std"]], "rice_factor_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.rice_factor_std"]], "yaml_tag (streetcanyonlineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.yaml_tag"]], "yaml_tag (streetcanyonnolineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.yaml_tag"]], "yaml_tag (streetcanyonoutsidetoinside attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.yaml_tag"]], "zoa_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zoa_spread_std"]], "zoa_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.zoa_spread_std"]], "zoa_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.zoa_spread_std"]], "zod_offset (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_offset"]], "zod_offset (urbanmicrocellsnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight.zod_offset"]], "zod_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_spread_mean"]], "zod_spread_mean (urbanmicrocellsnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight.zod_spread_mean"]], "zod_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_spread_std"]], "zod_spread_std (urbanmicrocellsnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight.zod_spread_std"]], "urbanmacrocellslineofsight (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight"]], "urbanmacrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight"]], "urbanmacrocellsnolineofsightbase (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase"]], "urbanmacrocellsoutsidetoinside (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside"]], "aoa_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aoa_spread_std"]], "aoa_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aoa_spread_std"]], "aoa_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aoa_spread_std"]], "aod_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aod_spread_mean"]], "aod_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aod_spread_mean"]], "aod_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aod_spread_mean"]], "aod_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aod_spread_std"]], "aod_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aod_spread_std"]], "aod_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cross_polarization_power_std"]], "delay_normalization (urbanmacrocellslineofsight attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_normalization"]], "delay_normalization (urbanmacrocellsnolineofsight attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_normalization"]], "delay_normalization (urbanmacrocellsnolineofsightbase attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase.delay_normalization"]], "delay_normalization (urbanmacrocellsoutsidetoinside attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_normalization"]], "delay_scaling (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_scaling"]], "delay_scaling (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_scaling"]], "delay_scaling (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_scaling"]], "delay_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_spread_mean"]], "delay_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_spread_mean"]], "delay_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_spread_mean"]], "delay_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_spread_std"]], "delay_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_spread_std"]], "delay_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells": [[13, "module-hermespy.channel.cluster_delay_line_urban_macrocells"]], "impulse_response_interpolation (urbanmacrocellsnolineofsight attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.impulse_response_interpolation"]], "impulse_response_interpolation (urbanmacrocellsoutsidetoinside attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.impulse_response_interpolation"]], "line_of_sight (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.line_of_sight"]], "line_of_sight (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.line_of_sight"]], "line_of_sight (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.line_of_sight"]], "num_clusters (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.num_clusters"]], "num_clusters (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.num_clusters"]], "num_clusters (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.num_clusters"]], "num_rays (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.num_rays"]], "num_rays (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.num_rays"]], "num_rays (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.num_rays"]], "rice_factor_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.rice_factor_mean"]], "rice_factor_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.rice_factor_mean"]], "rice_factor_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.rice_factor_mean"]], "rice_factor_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.rice_factor_std"]], "rice_factor_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.rice_factor_std"]], "rice_factor_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.rice_factor_std"]], "yaml_tag (urbanmacrocellslineofsight attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.yaml_tag"]], "yaml_tag (urbanmacrocellsnolineofsight attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.yaml_tag"]], "yaml_tag (urbanmacrocellsoutsidetoinside attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.yaml_tag"]], "zoa_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zoa_spread_std"]], "zoa_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.zoa_spread_std"]], "zoa_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.zoa_spread_std"]], "zod_offset (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_offset"]], "zod_offset (urbanmacrocellsnolineofsightbase property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase.zod_offset"]], "zod_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_spread_mean"]], "zod_spread_mean (urbanmacrocellsnolineofsightbase property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase.zod_spread_mean"]], "zod_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_spread_std"]], "zod_spread_std (urbanmacrocellsnolineofsightbase property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase.zod_spread_std"]], "clusterdelayline (class in hermespy.channel.cluster_delay_lines)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine"]], "clusterdelaylinebase (class in hermespy.channel.cluster_delay_lines)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase"]], "delaynormalization (class in hermespy.channel.cluster_delay_lines)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization"]], "none (delaynormalization attribute)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization.NONE"]], "tof (delaynormalization attribute)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization.TOF"]], "zero (delaynormalization attribute)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization.ZERO"]], "aoa_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aoa_spread_mean"]], "aoa_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aoa_spread_mean"]], "aoa_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aoa_spread_std"]], "aoa_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aoa_spread_std"]], "aod_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aod_spread_mean"]], "aod_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aod_spread_mean"]], "aod_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aod_spread_std"]], "aod_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aod_spread_std"]], "cluster_aoa_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_aoa_spread"]], "cluster_aoa_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_aoa_spread"]], "cluster_aod_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_aod_spread"]], "cluster_aod_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_aod_spread"]], "cluster_delay_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_delay_spread"]], "cluster_delay_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_delay_spread"]], "cluster_shadowing_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_shadowing_std"]], "cluster_shadowing_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_shadowing_std"]], "cluster_zoa_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_zoa_spread"]], "cluster_zoa_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_zoa_spread"]], "cross_polarization_power_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cross_polarization_power_mean"]], "cross_polarization_power_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cross_polarization_power_mean"]], "cross_polarization_power_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cross_polarization_power_std"]], "cross_polarization_power_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cross_polarization_power_std"]], "delay_normalization (clusterdelaylinebase attribute)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_normalization"]], "delay_scaling (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_scaling"]], "delay_scaling (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_scaling"]], "delay_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_spread_mean"]], "delay_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_spread_mean"]], "delay_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_spread_std"]], "delay_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_spread_std"]], "hermespy.channel.cluster_delay_lines": [[14, "module-hermespy.channel.cluster_delay_lines"]], "impulse_response() (clusterdelaylinebase method)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.impulse_response"]], "line_of_sight (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.line_of_sight"]], "line_of_sight (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.line_of_sight"]], "num_clusters (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.num_clusters"]], "num_clusters (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.num_clusters"]], "num_rays (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.num_rays"]], "num_rays (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.num_rays"]], "rice_factor_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.rice_factor_mean"]], "rice_factor_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.rice_factor_mean"]], "rice_factor_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.rice_factor_std"]], "rice_factor_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.rice_factor_std"]], "yaml_tag (clusterdelayline attribute)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.yaml_tag"]], "zoa_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zoa_spread_mean"]], "zoa_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zoa_spread_mean"]], "zoa_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zoa_spread_std"]], "zoa_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zoa_spread_std"]], "zod_offset (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_offset"]], "zod_offset (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_offset"]], "zod_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_spread_mean"]], "zod_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_spread_mean"]], "zod_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_spread_std"]], "zod_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_spread_std"]], "antennacorrelation (class in hermespy.channel.multipath_fading_channel)": [[15, "hermespy.channel.multipath_fading_channel.AntennaCorrelation"]], "customantennacorrelation (class in hermespy.channel.multipath_fading_channel)": [[15, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation"]], "multipathfadingchannel (class in hermespy.channel.multipath_fading_channel)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel"]], "alpha_correlation (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.alpha_correlation"]], "beta_correlation (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.beta_correlation"]], "channel (antennacorrelation property)": [[15, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.channel"]], "covariance (antennacorrelation property)": [[15, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.covariance"]], "covariance (customantennacorrelation property)": [[15, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation.covariance"]], "delay_resolution_error (multipathfadingchannel attribute)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.delay_resolution_error"]], "delays (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.delays"]], "device (antennacorrelation property)": [[15, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.device"]], "doppler_frequency (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.doppler_frequency"]], "hermespy.channel.multipath_fading_channel": [[15, "module-hermespy.channel.multipath_fading_channel"]], "impulse_response() (multipathfadingchannel method)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.impulse_response"]], "interpolate_signals (multipathfadingchannel attribute)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.interpolate_signals"]], "interpolation_filter() (multipathfadingchannel method)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.interpolation_filter"]], "los_angle (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_angle"]], "los_doppler_frequency (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_doppler_frequency"]], "los_gains (multipathfadingchannel attribute)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_gains"]], "max_delay (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.max_delay"]], "num_resolvable_paths (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.num_resolvable_paths"]], "num_sinusoids (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.num_sinusoids"]], "power_profile (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.power_profile"]], "receiver (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.receiver"]], "rice_factors (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.rice_factors"]], "serialized_attributes (multipathfadingchannel attribute)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.serialized_attributes"]], "transmitter (multipathfadingchannel property)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.transmitter"]], "yaml_tag (customantennacorrelation attribute)": [[15, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation.yaml_tag"]], "yaml_tag (multipathfadingchannel attribute)": [[15, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.yaml_tag"]], "a (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.A"]], "b (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.B"]], "base_station (devicetype attribute)": [[16, "hermespy.channel.multipath_fading_templates.DeviceType.BASE_STATION"]], "c (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.C"]], "correlationtype (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType"]], "cost256type (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.Cost256Type"]], "d (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.D"]], "devicetype (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.DeviceType"]], "e (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.E"]], "high (correlationtype attribute)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType.HIGH"]], "hilly (cost256type attribute)": [[16, "hermespy.channel.multipath_fading_templates.Cost256Type.HILLY"]], "low (correlationtype attribute)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType.LOW"]], "medium (correlationtype attribute)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType.MEDIUM"]], "medium_a (correlationtype attribute)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType.MEDIUM_A"]], "multipathfading5gtdl (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL"]], "multipathfadingcost256 (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256"]], "multipathfadingexponential (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential"]], "rural (cost256type attribute)": [[16, "hermespy.channel.multipath_fading_templates.Cost256Type.RURAL"]], "standardantennacorrelation (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation"]], "tdltype (class in hermespy.channel.multipath_fading_templates)": [[16, "hermespy.channel.multipath_fading_templates.TDLType"]], "terminal (devicetype attribute)": [[16, "hermespy.channel.multipath_fading_templates.DeviceType.TERMINAL"]], "urban (cost256type attribute)": [[16, "hermespy.channel.multipath_fading_templates.Cost256Type.URBAN"]], "correlation (standardantennacorrelation property)": [[16, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.correlation"]], "covariance (standardantennacorrelation property)": [[16, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.covariance"]], "device_type (standardantennacorrelation property)": [[16, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.device_type"]], "hermespy.channel.multipath_fading_templates": [[16, "module-hermespy.channel.multipath_fading_templates"]], "model_type (multipathfading5gtdl property)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.model_type"]], "model_type (multipathfadingcost256 property)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256.model_type"]], "property_blacklist (correlationtype attribute)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType.property_blacklist"]], "property_blacklist (cost256type attribute)": [[16, "hermespy.channel.multipath_fading_templates.Cost256Type.property_blacklist"]], "property_blacklist (devicetype attribute)": [[16, "hermespy.channel.multipath_fading_templates.DeviceType.property_blacklist"]], "property_blacklist (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.property_blacklist"]], "rms_delay (multipathfading5gtdl property)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.rms_delay"]], "rms_delay (multipathfadingexponential property)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.rms_delay"]], "serialized_attributes (correlationtype attribute)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType.serialized_attributes"]], "serialized_attributes (cost256type attribute)": [[16, "hermespy.channel.multipath_fading_templates.Cost256Type.serialized_attributes"]], "serialized_attributes (devicetype attribute)": [[16, "hermespy.channel.multipath_fading_templates.DeviceType.serialized_attributes"]], "serialized_attributes (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.serialized_attributes"]], "tap_interval (multipathfadingexponential property)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.tap_interval"]], "to_yaml() (multipathfadingcost256 class method)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256.to_yaml"]], "yaml_tag (correlationtype attribute)": [[16, "hermespy.channel.multipath_fading_templates.CorrelationType.yaml_tag"]], "yaml_tag (cost256type attribute)": [[16, "hermespy.channel.multipath_fading_templates.Cost256Type.yaml_tag"]], "yaml_tag (devicetype attribute)": [[16, "hermespy.channel.multipath_fading_templates.DeviceType.yaml_tag"]], "yaml_tag (multipathfading5gtdl attribute)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.yaml_tag"]], "yaml_tag (multipathfadingcost256 attribute)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256.yaml_tag"]], "yaml_tag (multipathfadingexponential attribute)": [[16, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.yaml_tag"]], "yaml_tag (standardantennacorrelation attribute)": [[16, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.yaml_tag"]], "yaml_tag (tdltype attribute)": [[16, "hermespy.channel.multipath_fading_templates.TDLType.yaml_tag"]], "quadrigachannel (class in hermespy.channel.quadriga_channel)": [[17, "hermespy.channel.quadriga_channel.QuadrigaChannel"]], "from_yaml() (quadrigachannel class method)": [[17, "hermespy.channel.quadriga_channel.QuadrigaChannel.from_yaml"]], "hermespy.channel.quadriga_channel": [[17, "module-hermespy.channel.quadriga_channel"]], "impulse_response() (quadrigachannel method)": [[17, "hermespy.channel.quadriga_channel.QuadrigaChannel.impulse_response"]], "to_yaml() (quadrigachannel class method)": [[17, "hermespy.channel.quadriga_channel.QuadrigaChannel.to_yaml"]], "yaml_matrix (quadrigachannel attribute)": [[17, "hermespy.channel.quadriga_channel.QuadrigaChannel.yaml_matrix"]], "yaml_tag (quadrigachannel attribute)": [[17, "hermespy.channel.quadriga_channel.QuadrigaChannel.yaml_tag"]], "radarchannel (class in hermespy.channel.radar_channel)": [[18, "hermespy.channel.radar_channel.RadarChannel"]], "attenuate (radarchannel attribute)": [[18, "hermespy.channel.radar_channel.RadarChannel.attenuate"]], "ground_truth (radarchannel property)": [[18, "hermespy.channel.radar_channel.RadarChannel.ground_truth"]], "hermespy.channel.radar_channel": [[18, "module-hermespy.channel.radar_channel"]], "impulse_response() (radarchannel method)": [[18, "hermespy.channel.radar_channel.RadarChannel.impulse_response"]], "losses_db (radarchannel property)": [[18, "hermespy.channel.radar_channel.RadarChannel.losses_db"]], "radar_cross_section (radarchannel property)": [[18, "hermespy.channel.radar_channel.RadarChannel.radar_cross_section"]], "serialized_attributes (radarchannel attribute)": [[18, "hermespy.channel.radar_channel.RadarChannel.serialized_attributes"]], "target_azimuth (radarchannel property)": [[18, "hermespy.channel.radar_channel.RadarChannel.target_azimuth"]], "target_exists (radarchannel attribute)": [[18, "hermespy.channel.radar_channel.RadarChannel.target_exists"]], "target_range (radarchannel property)": [[18, "hermespy.channel.radar_channel.RadarChannel.target_range"]], "target_velocity (radarchannel property)": [[18, "hermespy.channel.radar_channel.RadarChannel.target_velocity"]], "target_zenith (radarchannel property)": [[18, "hermespy.channel.radar_channel.RadarChannel.target_zenith"]], "yaml_tag (radarchannel attribute)": [[18, "hermespy.channel.radar_channel.RadarChannel.yaml_tag"]], "antenna (class in hermespy.core.antennas)": [[20, "hermespy.core.antennas.Antenna"]], "antennaarray (class in hermespy.core.antennas)": [[20, "hermespy.core.antennas.AntennaArray"]], "antennaarraybase (class in hermespy.core.antennas)": [[20, "hermespy.core.antennas.AntennaArrayBase"]], "dipole (class in hermespy.core.antennas)": [[20, "hermespy.core.antennas.Dipole"]], "idealantenna (class in hermespy.core.antennas)": [[20, "hermespy.core.antennas.IdealAntenna"]], "patchantenna (class in hermespy.core.antennas)": [[20, "hermespy.core.antennas.PatchAntenna"]], "uniformarray (class in hermespy.core.antennas)": [[20, "hermespy.core.antennas.UniformArray"]], "add_antenna() (antennaarray method)": [[20, "hermespy.core.antennas.AntennaArray.add_antenna"]], "antenna (uniformarray property)": [[20, "hermespy.core.antennas.UniformArray.antenna"]], "antennas (antennaarray property)": [[20, "hermespy.core.antennas.AntennaArray.antennas"]], "array (antenna property)": [[20, "hermespy.core.antennas.Antenna.array"]], "cartesian_response() (antennaarraybase method)": [[20, "hermespy.core.antennas.AntennaArrayBase.cartesian_response"]], "dimensions (uniformarray property)": [[20, "hermespy.core.antennas.UniformArray.dimensions"]], "from_yaml() (antennaarray class method)": [[20, "hermespy.core.antennas.AntennaArray.from_yaml"]], "hermespy.core.antennas": [[20, "module-hermespy.core.antennas"]], "horizontal_response() (antennaarraybase method)": [[20, "hermespy.core.antennas.AntennaArrayBase.horizontal_response"]], "num_antennas (antennaarray property)": [[20, "hermespy.core.antennas.AntennaArray.num_antennas"]], "num_antennas (antennaarraybase property)": [[20, "hermespy.core.antennas.AntennaArrayBase.num_antennas"]], "num_antennas (uniformarray property)": [[20, "hermespy.core.antennas.UniformArray.num_antennas"]], "num_receive_antennas (antennaarraybase property)": [[20, "hermespy.core.antennas.AntennaArrayBase.num_receive_antennas"]], "num_transmit_antennas (antennaarraybase property)": [[20, "hermespy.core.antennas.AntennaArrayBase.num_transmit_antennas"]], "orientations (antennaarray property)": [[20, "hermespy.core.antennas.AntennaArray.orientations"]], "plot_gain() (antenna method)": [[20, "hermespy.core.antennas.Antenna.plot_gain"]], "plot_polarization() (antenna method)": [[20, "hermespy.core.antennas.Antenna.plot_polarization"]], "plot_topology() (antennaarraybase method)": [[20, "hermespy.core.antennas.AntennaArrayBase.plot_topology"]], "polarization() (antenna method)": [[20, "hermespy.core.antennas.Antenna.polarization"]], "polarization() (antennaarray method)": [[20, "hermespy.core.antennas.AntennaArray.polarization"]], "polarization() (antennaarraybase method)": [[20, "hermespy.core.antennas.AntennaArrayBase.polarization"]], "polarization() (dipole method)": [[20, "hermespy.core.antennas.Dipole.polarization"]], "polarization() (idealantenna method)": [[20, "hermespy.core.antennas.IdealAntenna.polarization"]], "polarization() (patchantenna method)": [[20, "hermespy.core.antennas.PatchAntenna.polarization"]], "polarization() (uniformarray method)": [[20, "hermespy.core.antennas.UniformArray.polarization"]], "pos (antenna property)": [[20, "hermespy.core.antennas.Antenna.pos"]], "positions (antennaarray property)": [[20, "hermespy.core.antennas.AntennaArray.positions"]], "property_blacklist (antenna attribute)": [[20, "hermespy.core.antennas.Antenna.property_blacklist"]], "property_blacklist (uniformarray attribute)": [[20, "hermespy.core.antennas.UniformArray.property_blacklist"]], "receive() (antenna method)": [[20, "hermespy.core.antennas.Antenna.receive"]], "remove_antenna() (antennaarray method)": [[20, "hermespy.core.antennas.AntennaArray.remove_antenna"]], "spacing (uniformarray property)": [[20, "hermespy.core.antennas.UniformArray.spacing"]], "spherical_response() (antennaarraybase method)": [[20, "hermespy.core.antennas.AntennaArrayBase.spherical_response"]], "to_yaml() (antennaarray class method)": [[20, "hermespy.core.antennas.AntennaArray.to_yaml"]], "topology (antennaarray property)": [[20, "hermespy.core.antennas.AntennaArray.topology"]], "topology (antennaarraybase property)": [[20, "hermespy.core.antennas.AntennaArrayBase.topology"]], "topology (uniformarray property)": [[20, "hermespy.core.antennas.UniformArray.topology"]], "transmit() (antenna method)": [[20, "hermespy.core.antennas.Antenna.transmit"]], "yaml_tag (antenna attribute)": [[20, "hermespy.core.antennas.Antenna.yaml_tag"]], "yaml_tag (antennaarray attribute)": [[20, "hermespy.core.antennas.AntennaArray.yaml_tag"]], "yaml_tag (dipole attribute)": [[20, "hermespy.core.antennas.Dipole.yaml_tag"]], "yaml_tag (idealantenna attribute)": [[20, "hermespy.core.antennas.IdealAntenna.yaml_tag"]], "yaml_tag (patchantenna attribute)": [[20, "hermespy.core.antennas.PatchAntenna.yaml_tag"]], "yaml_tag (uniformarray attribute)": [[20, "hermespy.core.antennas.UniformArray.yaml_tag"]], "channelstatedimension (class in hermespy.core.channel_state_information)": [[21, "hermespy.core.channel_state_information.ChannelStateDimension"]], "channelstateformat (class in hermespy.core.channel_state_information)": [[21, "hermespy.core.channel_state_information.ChannelStateFormat"]], "channelstateinformation (class in hermespy.core.channel_state_information)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation"]], "frequency_selectivity (channelstateformat attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateFormat.FREQUENCY_SELECTIVITY"]], "impulse_response (channelstateformat attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateFormat.IMPULSE_RESPONSE"]], "information (channelstatedimension attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateDimension.INFORMATION"]], "ideal() (channelstateinformation static method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.Ideal"]], "receive_streams (channelstatedimension attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateDimension.RECEIVE_STREAMS"]], "samples (channelstatedimension attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateDimension.SAMPLES"]], "transmit_streams (channelstatedimension attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateDimension.TRANSMIT_STREAMS"]], "__num_delay_taps (channelstateinformation attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.__num_delay_taps"]], "__num_frequency_bins (channelstateinformation attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.__num_frequency_bins"]], "__state (channelstateinformation attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.__state"]], "__state_format (channelstateinformation attribute)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.__state_format"]], "append() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.append"]], "append_linear() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.append_linear"]], "concatenate() (channelstateinformation static method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.concatenate"]], "from_hdf() (channelstateinformation class method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.from_HDF"]], "hermespy.core.channel_state_information": [[21, "module-hermespy.core.channel_state_information"]], "linear (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.linear"]], "num_delay_taps (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.num_delay_taps"]], "num_receive_streams (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.num_receive_streams"]], "num_samples (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.num_samples"]], "num_symbols (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.num_symbols"]], "num_transmit_streams (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.num_transmit_streams"]], "plot() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.plot"]], "received_streams() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.received_streams"]], "reciprocal() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.reciprocal"]], "samples() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.samples"]], "set_state() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.set_state"]], "state (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.state"]], "state_format (channelstateinformation property)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.state_format"]], "to_hdf() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.to_HDF"]], "to_frequency_selectivity() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.to_frequency_selectivity"]], "to_impulse_response() (channelstateinformation method)": [[21, "hermespy.core.channel_state_information.ChannelStateInformation.to_impulse_response"]], "custom (snrtype attribute)": [[22, "hermespy.core.definitions.SNRType.CUSTOM"]], "ebn0 (snrtype attribute)": [[22, "hermespy.core.definitions.SNRType.EBN0"]], "en0 (snrtype attribute)": [[22, "hermespy.core.definitions.SNRType.EN0"]], "esn0 (snrtype attribute)": [[22, "hermespy.core.definitions.SNRType.ESN0"]], "pn0 (snrtype attribute)": [[22, "hermespy.core.definitions.SNRType.PN0"]], "snrtype (class in hermespy.core.definitions)": [[22, "hermespy.core.definitions.SNRType"]], "hermespy.core.definitions": [[22, "module-hermespy.core.definitions"]], "device (class in hermespy.core.device)": [[23, "hermespy.core.device.Device"]], "devicereception (class in hermespy.core.device)": [[23, "hermespy.core.device.DeviceReception"]], "devicetransmission (class in hermespy.core.device)": [[23, "hermespy.core.device.DeviceTransmission"]], "devicetype (in module hermespy.core.device)": [[23, "hermespy.core.device.DeviceType"]], "duplexoperator (class in hermespy.core.device)": [[23, "hermespy.core.device.DuplexOperator"]], "floatingerror": [[23, "hermespy.core.device.FloatingError"]], "mixingoperator (class in hermespy.core.device)": [[23, "hermespy.core.device.MixingOperator"]], "operationresult (class in hermespy.core.device)": [[23, "hermespy.core.device.OperationResult"]], "operator (class in hermespy.core.device)": [[23, "hermespy.core.device.Operator"]], "operatorslot (class in hermespy.core.device)": [[23, "hermespy.core.device.OperatorSlot"]], "operatortype (in module hermespy.core.device)": [[23, "hermespy.core.device.OperatorType"]], "receiver (class in hermespy.core.device)": [[23, "hermespy.core.device.Receiver"]], "receiverslot (class in hermespy.core.device)": [[23, "hermespy.core.device.ReceiverSlot"]], "reception (class in hermespy.core.device)": [[23, "hermespy.core.device.Reception"]], "secondslottype (in module hermespy.core.device)": [[23, "hermespy.core.device.SecondSlotType"]], "slottype (in module hermespy.core.device)": [[23, "hermespy.core.device.SlotType"]], "transmission (class in hermespy.core.device)": [[23, "hermespy.core.device.Transmission"]], "transmitter (class in hermespy.core.device)": [[23, "hermespy.core.device.Transmitter"]], "transmitterslot (class in hermespy.core.device)": [[23, "hermespy.core.device.TransmitterSlot"]], "unsupportedslot (class in hermespy.core.device)": [[23, "hermespy.core.device.UnsupportedSlot"]], "add() (operatorslot method)": [[23, "hermespy.core.device.OperatorSlot.add"]], "add() (transmitterslot method)": [[23, "hermespy.core.device.TransmitterSlot.add"]], "add() (unsupportedslot method)": [[23, "hermespy.core.device.UnsupportedSlot.add"]], "add_transmission() (transmitterslot method)": [[23, "hermespy.core.device.TransmitterSlot.add_transmission"]], "antenna_positions (device property)": [[23, "hermespy.core.device.Device.antenna_positions"]], "antennas (device attribute)": [[23, "hermespy.core.device.Device.antennas"]], "attached (operator property)": [[23, "hermespy.core.device.Operator.attached"]], "bind() (operator method)": [[23, "hermespy.core.device.Operator.bind"]], "cache_reception() (receiver method)": [[23, "hermespy.core.device.Receiver.cache_reception"]], "carrier_frequency (device property)": [[23, "hermespy.core.device.Device.carrier_frequency"]], "carrier_frequency (mixingoperator property)": [[23, "hermespy.core.device.MixingOperator.carrier_frequency"]], "clear_cache() (transmitterslot method)": [[23, "hermespy.core.device.TransmitterSlot.clear_cache"]], "csi (devicereception property)": [[23, "hermespy.core.device.DeviceReception.csi"]], "csi (duplexoperator property)": [[23, "hermespy.core.device.DuplexOperator.csi"]], "csi (receiver property)": [[23, "hermespy.core.device.Receiver.csi"]], "device (duplexoperator property)": [[23, "hermespy.core.device.DuplexOperator.device"]], "device (operator property)": [[23, "hermespy.core.device.Operator.device"]], "device (operatorslot property)": [[23, "hermespy.core.device.OperatorSlot.device"]], "frame_duration (duplexoperator property)": [[23, "hermespy.core.device.DuplexOperator.frame_duration"]], "frame_duration (operator property)": [[23, "hermespy.core.device.Operator.frame_duration"]], "from_hdf() (devicereception class method)": [[23, "hermespy.core.device.DeviceReception.from_HDF"]], "from_hdf() (devicetransmission class method)": [[23, "hermespy.core.device.DeviceTransmission.from_HDF"]], "from_hdf() (operationresult class method)": [[23, "hermespy.core.device.OperationResult.from_HDF"]], "get_receptions() (receiverslot method)": [[23, "hermespy.core.device.ReceiverSlot.get_receptions"]], "get_transmissions() (transmitterslot method)": [[23, "hermespy.core.device.TransmitterSlot.get_transmissions"]], "hermespy.core.device": [[23, "module-hermespy.core.device"]], "max_frame_duration (device property)": [[23, "hermespy.core.device.Device.max_frame_duration"]], "max_sampling_rate (operatorslot property)": [[23, "hermespy.core.device.OperatorSlot.max_sampling_rate"]], "min_frame_duration (operatorslot property)": [[23, "hermespy.core.device.OperatorSlot.min_frame_duration"]], "min_num_samples_per_frame (operatorslot property)": [[23, "hermespy.core.device.OperatorSlot.min_num_samples_per_frame"]], "noise_power (duplexoperator property)": [[23, "hermespy.core.device.DuplexOperator.noise_power"]], "noise_power() (receiver method)": [[23, "hermespy.core.device.Receiver.noise_power"]], "num_antennas (device property)": [[23, "hermespy.core.device.Device.num_antennas"]], "num_operator_receptions (devicereception property)": [[23, "hermespy.core.device.DeviceReception.num_operator_receptions"]], "num_operator_transmissions (devicetransmission property)": [[23, "hermespy.core.device.DeviceTransmission.num_operator_transmissions"]], "num_operators (operatorslot property)": [[23, "hermespy.core.device.OperatorSlot.num_operators"]], "operator_index() (operatorslot method)": [[23, "hermespy.core.device.OperatorSlot.operator_index"]], "operator_receptions (devicereception property)": [[23, "hermespy.core.device.DeviceReception.operator_receptions"]], "operator_transmissions (devicetransmission property)": [[23, "hermespy.core.device.DeviceTransmission.operator_transmissions"]], "orientation (device property)": [[23, "hermespy.core.device.Device.orientation"]], "position (device property)": [[23, "hermespy.core.device.Device.position"]], "power (device property)": [[23, "hermespy.core.device.Device.power"]], "receive() (device method)": [[23, "hermespy.core.device.Device.receive"]], "receive() (duplexoperator method)": [[23, "hermespy.core.device.DuplexOperator.receive"]], "receive() (receiver method)": [[23, "hermespy.core.device.Receiver.receive"]], "received_signal (device property)": [[23, "hermespy.core.device.Device.received_signal"]], "receivers (device attribute)": [[23, "hermespy.core.device.Device.receivers"]], "reference (receiver property)": [[23, "hermespy.core.device.Receiver.reference"]], "registered() (operatorslot method)": [[23, "hermespy.core.device.OperatorSlot.registered"]], "remove() (operatorslot method)": [[23, "hermespy.core.device.OperatorSlot.remove"]], "sampling_rate (device property)": [[23, "hermespy.core.device.Device.sampling_rate"]], "sampling_rate (duplexoperator property)": [[23, "hermespy.core.device.DuplexOperator.sampling_rate"]], "sampling_rate (operator property)": [[23, "hermespy.core.device.Operator.sampling_rate"]], "signal (operationresult attribute)": [[23, "hermespy.core.device.OperationResult.signal"]], "signal (receiver property)": [[23, "hermespy.core.device.Receiver.signal"]], "signal (reception attribute)": [[23, "hermespy.core.device.Reception.signal"]], "signal (transmission attribute)": [[23, "hermespy.core.device.Transmission.signal"]], "slot (duplexoperator property)": [[23, "hermespy.core.device.DuplexOperator.slot"]], "slot (operator property)": [[23, "hermespy.core.device.Operator.slot"]], "slot (receiver property)": [[23, "hermespy.core.device.Receiver.slot"]], "slot (transmitter property)": [[23, "hermespy.core.device.Transmitter.slot"]], "slot_index (operator property)": [[23, "hermespy.core.device.Operator.slot_index"]], "snr (device property)": [[23, "hermespy.core.device.Device.snr"]], "to_hdf() (devicereception method)": [[23, "hermespy.core.device.DeviceReception.to_HDF"]], "to_hdf() (devicetransmission method)": [[23, "hermespy.core.device.DeviceTransmission.to_HDF"]], "to_hdf() (operationresult method)": [[23, "hermespy.core.device.OperationResult.to_HDF"]], "topology (device property)": [[23, "hermespy.core.device.Device.topology"]], "transmit() (device method)": [[23, "hermespy.core.device.Device.transmit"]], "transmit() (duplexoperator method)": [[23, "hermespy.core.device.DuplexOperator.transmit"]], "transmit() (transmitter method)": [[23, "hermespy.core.device.Transmitter.transmit"]], "transmitters (device attribute)": [[23, "hermespy.core.device.Device.transmitters"]], "velocity (device property)": [[23, "hermespy.core.device.Device.velocity"]], "wavelength (device property)": [[23, "hermespy.core.device.Device.wavelength"]], "all (verbosity attribute)": [[24, "hermespy.core.executable.Verbosity.ALL"]], "error (verbosity attribute)": [[24, "hermespy.core.executable.Verbosity.ERROR"]], "executable (class in hermespy.core.executable)": [[24, "hermespy.core.executable.Executable"]], "info (verbosity attribute)": [[24, "hermespy.core.executable.Verbosity.INFO"]], "none (verbosity attribute)": [[24, "hermespy.core.executable.Verbosity.NONE"]], "verbosity (class in hermespy.core.executable)": [[24, "hermespy.core.executable.Verbosity"]], "warning (verbosity attribute)": [[24, "hermespy.core.executable.Verbosity.WARNING"]], "console (executable property)": [[24, "hermespy.core.executable.Executable.console"]], "default_results_dir() (executable static method)": [[24, "hermespy.core.executable.Executable.default_results_dir"]], "execute() (executable method)": [[24, "hermespy.core.executable.Executable.execute"]], "hermespy.core.executable": [[24, "module-hermespy.core.executable"]], "results_dir (executable property)": [[24, "hermespy.core.executable.Executable.results_dir"]], "run() (executable method)": [[24, "hermespy.core.executable.Executable.run"]], "style (executable property)": [[24, "hermespy.core.executable.Executable.style"]], "style_context() (executable static method)": [[24, "hermespy.core.executable.Executable.style_context"]], "verbosity (executable property)": [[24, "hermespy.core.executable.Executable.verbosity"]], "factory (class in hermespy.core.factory)": [[25, "hermespy.core.factory.Factory"]], "hdfserializable (class in hermespy.core.factory)": [[25, "hermespy.core.factory.HDFSerializable"]], "initializationwrapper() (serializable class method)": [[25, "hermespy.core.factory.Serializable.InitializationWrapper"]], "serializable (class in hermespy.core.factory)": [[25, "hermespy.core.factory.Serializable"]], "serializablearray (class in hermespy.core.factory)": [[25, "hermespy.core.factory.SerializableArray"]], "serializableenum (class in hermespy.core.factory)": [[25, "hermespy.core.factory.SerializableEnum"]], "set_array() (serializablearray static method)": [[25, "hermespy.core.factory.SerializableArray.Set_Array"]], "clean (factory property)": [[25, "hermespy.core.factory.Factory.clean"]], "extensions (factory attribute)": [[25, "hermespy.core.factory.Factory.extensions"]], "from_hdf() (hdfserializable class method)": [[25, "hermespy.core.factory.HDFSerializable.from_HDF"]], "from_file() (factory method)": [[25, "hermespy.core.factory.Factory.from_file"]], "from_folder() (factory method)": [[25, "hermespy.core.factory.Factory.from_folder"]], "from_path() (factory method)": [[25, "hermespy.core.factory.Factory.from_path"]], "from_str() (factory method)": [[25, "hermespy.core.factory.Factory.from_str"]], "from_stream() (factory method)": [[25, "hermespy.core.factory.Factory.from_stream"]], "from_yaml() (serializable class method)": [[25, "hermespy.core.factory.Serializable.from_yaml"]], "hermespy.core.factory": [[25, "module-hermespy.core.factory"]], "load() (factory method)": [[25, "hermespy.core.factory.Factory.load"]], "property_blacklist (serializable attribute)": [[25, "hermespy.core.factory.Serializable.property_blacklist"]], "property_blacklist (serializableenum attribute)": [[25, "hermespy.core.factory.SerializableEnum.property_blacklist"]], "registered_classes (factory property)": [[25, "hermespy.core.factory.Factory.registered_classes"]], "registered_tags (factory property)": [[25, "hermespy.core.factory.Factory.registered_tags"]], "serialized_attributes (serializable attribute)": [[25, "hermespy.core.factory.Serializable.serialized_attributes"]], "serialized_attributes (serializableenum attribute)": [[25, "hermespy.core.factory.SerializableEnum.serialized_attributes"]], "to_hdf() (hdfserializable method)": [[25, "hermespy.core.factory.HDFSerializable.to_HDF"]], "to_file() (factory method)": [[25, "hermespy.core.factory.Factory.to_file"]], "to_folder() (factory method)": [[25, "hermespy.core.factory.Factory.to_folder"]], "to_str() (factory method)": [[25, "hermespy.core.factory.Factory.to_str"]], "to_stream() (factory method)": [[25, "hermespy.core.factory.Factory.to_stream"]], "to_yaml() (serializable class method)": [[25, "hermespy.core.factory.Serializable.to_yaml"]], "yaml_tag (serializable attribute)": [[25, "hermespy.core.factory.Serializable.yaml_tag"]], "yaml_tag (serializableenum property)": [[25, "hermespy.core.factory.SerializableEnum.yaml_tag"]], "actorrunresult (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.ActorRunResult"]], "artifact (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.Artifact"]], "artifacttemplate (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.ArtifactTemplate"]], "consolemode (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.ConsoleMode"]], "evaluation (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.Evaluation"]], "evaluationresult (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.EvaluationResult"]], "evaluationtemplate (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.EvaluationTemplate"]], "evaluator (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.Evaluator"]], "griddimension (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.GridDimension"]], "gridsection (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.GridSection"]], "interactive (consolemode attribute)": [[26, "hermespy.core.monte_carlo.ConsoleMode.INTERACTIVE"]], "linear (consolemode attribute)": [[26, "hermespy.core.monte_carlo.ConsoleMode.LINEAR"]], "montecarlo (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.MonteCarlo"]], "montecarloactor (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.MonteCarloActor"]], "montecarloresult (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.MonteCarloResult"]], "montecarlosample (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.MonteCarloSample"]], "processedscalarevaluationresult (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.ProcessedScalarEvaluationResult"]], "registereddimension (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.RegisteredDimension"]], "silent (consolemode attribute)": [[26, "hermespy.core.monte_carlo.ConsoleMode.SILENT"]], "samplegrid (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.SampleGrid"]], "scalarevaluationresult (class in hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.ScalarEvaluationResult"]], "abbreviation (evaluator property)": [[26, "hermespy.core.monte_carlo.Evaluator.abbreviation"]], "add_dimension() (montecarlo method)": [[26, "hermespy.core.monte_carlo.MonteCarlo.add_dimension"]], "add_evaluator() (montecarlo method)": [[26, "hermespy.core.monte_carlo.MonteCarlo.add_evaluator"]], "add_samples() (gridsection method)": [[26, "hermespy.core.monte_carlo.GridSection.add_samples"]], "artifact (artifacttemplate property)": [[26, "hermespy.core.monte_carlo.ArtifactTemplate.artifact"]], "artifact() (evaluation method)": [[26, "hermespy.core.monte_carlo.Evaluation.artifact"]], "artifact_scalars (montecarlosample property)": [[26, "hermespy.core.monte_carlo.MonteCarloSample.artifact_scalars"]], "artifacts (montecarlosample property)": [[26, "hermespy.core.monte_carlo.MonteCarloSample.artifacts"]], "catch_exceptions (montecarlo attribute)": [[26, "hermespy.core.monte_carlo.MonteCarlo.catch_exceptions"]], "catch_exceptions (montecarloactor attribute)": [[26, "hermespy.core.monte_carlo.MonteCarloActor.catch_exceptions"]], "confidence (evaluator property)": [[26, "hermespy.core.monte_carlo.Evaluator.confidence"]], "confidence_status() (gridsection method)": [[26, "hermespy.core.monte_carlo.GridSection.confidence_status"]], "confidences (gridsection property)": [[26, "hermespy.core.monte_carlo.GridSection.confidences"]], "configure_point() (griddimension method)": [[26, "hermespy.core.monte_carlo.GridDimension.configure_point"]], "considered_objects (griddimension property)": [[26, "hermespy.core.monte_carlo.GridDimension.considered_objects"]], "console (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.console"]], "coordinates (gridsection property)": [[26, "hermespy.core.monte_carlo.GridSection.coordinates"]], "cpus_per_actor (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.cpus_per_actor"]], "deleter() (registereddimension method)": [[26, "hermespy.core.monte_carlo.RegisteredDimension.deleter"]], "dimension() (in module hermespy.core.monte_carlo)": [[26, "hermespy.core.monte_carlo.dimension"]], "evaluate() (evaluator method)": [[26, "hermespy.core.monte_carlo.Evaluator.evaluate"]], "evaluation (evaluationtemplate attribute)": [[26, "hermespy.core.monte_carlo.EvaluationTemplate.evaluation"]], "evaluation_results (montecarloresult property)": [[26, "hermespy.core.monte_carlo.MonteCarloResult.evaluation_results"]], "first_impact (griddimension property)": [[26, "hermespy.core.monte_carlo.GridDimension.first_impact"]], "first_impact (registereddimension property)": [[26, "hermespy.core.monte_carlo.RegisteredDimension.first_impact"]], "generate_result() (evaluator method)": [[26, "hermespy.core.monte_carlo.Evaluator.generate_result"]], "grid_section (montecarlosample property)": [[26, "hermespy.core.monte_carlo.MonteCarloSample.grid_section"]], "hermespy.core.monte_carlo": [[26, "module-hermespy.core.monte_carlo"]], "investigated_object (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.investigated_object"]], "is_registered() (registereddimension class method)": [[26, "hermespy.core.monte_carlo.RegisteredDimension.is_registered"]], "last_impact (griddimension property)": [[26, "hermespy.core.monte_carlo.GridDimension.last_impact"]], "last_impact (registereddimension property)": [[26, "hermespy.core.monte_carlo.RegisteredDimension.last_impact"]], "max_num_samples (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.max_num_samples"]], "min_num_samples (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.min_num_samples"]], "new_dimension() (montecarlo method)": [[26, "hermespy.core.monte_carlo.MonteCarlo.new_dimension"]], "num_actors (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.num_actors"]], "num_artifacts (montecarlosample property)": [[26, "hermespy.core.monte_carlo.MonteCarloSample.num_artifacts"]], "num_sample_points (griddimension property)": [[26, "hermespy.core.monte_carlo.GridDimension.num_sample_points"]], "num_samples (gridsection property)": [[26, "hermespy.core.monte_carlo.GridSection.num_samples"]], "num_samples (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.num_samples"]], "performance_time (montecarloresult property)": [[26, "hermespy.core.monte_carlo.MonteCarloResult.performance_time"]], "plot() (evaluationresult method)": [[26, "hermespy.core.monte_carlo.EvaluationResult.plot"]], "plot() (montecarloresult method)": [[26, "hermespy.core.monte_carlo.MonteCarloResult.plot"]], "plot() (processedscalarevaluationresult method)": [[26, "hermespy.core.monte_carlo.ProcessedScalarEvaluationResult.plot"]], "plot_scale (evaluator property)": [[26, "hermespy.core.monte_carlo.Evaluator.plot_scale"]], "plot_scale (griddimension property)": [[26, "hermespy.core.monte_carlo.GridDimension.plot_scale"]], "plot_surface (processedscalarevaluationresult attribute)": [[26, "hermespy.core.monte_carlo.ProcessedScalarEvaluationResult.plot_surface"]], "plot_surface (scalarevaluationresult attribute)": [[26, "hermespy.core.monte_carlo.ScalarEvaluationResult.plot_surface"]], "run() (montecarloactor method)": [[26, "hermespy.core.monte_carlo.MonteCarloActor.run"]], "runtime_env (montecarlo attribute)": [[26, "hermespy.core.monte_carlo.MonteCarlo.runtime_env"]], "sample_index (montecarlosample property)": [[26, "hermespy.core.monte_carlo.MonteCarloSample.sample_index"]], "sample_points (griddimension property)": [[26, "hermespy.core.monte_carlo.GridDimension.sample_points"]], "samples (gridsection property)": [[26, "hermespy.core.monte_carlo.GridSection.samples"]], "save_to_matlab() (montecarloresult method)": [[26, "hermespy.core.monte_carlo.MonteCarloResult.save_to_matlab"]], "scalars (gridsection property)": [[26, "hermespy.core.monte_carlo.GridSection.scalars"]], "section_block_size (montecarlo property)": [[26, "hermespy.core.monte_carlo.MonteCarlo.section_block_size"]], "setter() (registereddimension method)": [[26, "hermespy.core.monte_carlo.RegisteredDimension.setter"]], "simulate() (montecarlo method)": [[26, "hermespy.core.monte_carlo.MonteCarlo.simulate"]], "stage_executors() (montecarloactor method)": [[26, "hermespy.core.monte_carlo.MonteCarloActor.stage_executors"]], "stage_identifiers() (montecarloactor static method)": [[26, "hermespy.core.monte_carlo.MonteCarloActor.stage_identifiers"]], "title (evaluator property)": [[26, "hermespy.core.monte_carlo.Evaluator.title"]], "title (griddimension property)": [[26, "hermespy.core.monte_carlo.GridDimension.title"]], "to_array() (evaluationresult method)": [[26, "hermespy.core.monte_carlo.EvaluationResult.to_array"]], "to_array() (processedscalarevaluationresult method)": [[26, "hermespy.core.monte_carlo.ProcessedScalarEvaluationResult.to_array"]], "to_scalar() (artifact method)": [[26, "hermespy.core.monte_carlo.Artifact.to_scalar"]], "to_scalar() (artifacttemplate method)": [[26, "hermespy.core.monte_carlo.ArtifactTemplate.to_scalar"]], "tolerance (evaluator property)": [[26, "hermespy.core.monte_carlo.Evaluator.tolerance"]], "pipeline (class in hermespy.core.pipeline)": [[27, "hermespy.core.pipeline.Pipeline"]], "add_device() (pipeline method)": [[27, "hermespy.core.pipeline.Pipeline.add_device"]], "hermespy.core.pipeline": [[27, "module-hermespy.core.pipeline"]], "new_device() (pipeline method)": [[27, "hermespy.core.pipeline.Pipeline.new_device"]], "num_drops (pipeline property)": [[27, "hermespy.core.pipeline.Pipeline.num_drops"]], "scenario (pipeline property)": [[27, "hermespy.core.pipeline.Pipeline.scenario"]], "randomnode (class in hermespy.core.random_node)": [[28, "hermespy.core.random_node.RandomNode"]], "hermespy.core.random_node": [[28, "module-hermespy.core.random_node"]], "is_random_root (randomnode property)": [[28, "hermespy.core.random_node.RandomNode.is_random_root"]], "random_mother (randomnode property)": [[28, "hermespy.core.random_node.RandomNode.random_mother"]], "seed (randomnode property)": [[28, "hermespy.core.random_node.RandomNode.seed"]], "default (scenariomode attribute)": [[29, "hermespy.core.scenario.ScenarioMode.DEFAULT"]], "record (scenariomode attribute)": [[29, "hermespy.core.scenario.ScenarioMode.RECORD"]], "replay (scenariomode attribute)": [[29, "hermespy.core.scenario.ScenarioMode.REPLAY"]], "scenario (class in hermespy.core.scenario)": [[29, "hermespy.core.scenario.Scenario"]], "scenariomode (class in hermespy.core.scenario)": [[29, "hermespy.core.scenario.ScenarioMode"]], "scenariotype (in module hermespy.core.scenario)": [[29, "hermespy.core.scenario.ScenarioType"]], "add_device() (scenario method)": [[29, "hermespy.core.scenario.Scenario.add_device"]], "device_registered() (scenario method)": [[29, "hermespy.core.scenario.Scenario.device_registered"]], "devices (scenario property)": [[29, "hermespy.core.scenario.Scenario.devices"]], "drop() (scenario method)": [[29, "hermespy.core.scenario.Scenario.drop"]], "drop_duration (scenario property)": [[29, "hermespy.core.scenario.Scenario.drop_duration"]], "hermespy.core.scenario": [[29, "module-hermespy.core.scenario"]], "mode (scenario property)": [[29, "hermespy.core.scenario.Scenario.mode"]], "new_device() (scenario method)": [[29, "hermespy.core.scenario.Scenario.new_device"]], "num_devices (scenario property)": [[29, "hermespy.core.scenario.Scenario.num_devices"]], "num_operators (scenario property)": [[29, "hermespy.core.scenario.Scenario.num_operators"]], "num_receivers (scenario property)": [[29, "hermespy.core.scenario.Scenario.num_receivers"]], "num_transmitters (scenario property)": [[29, "hermespy.core.scenario.Scenario.num_transmitters"]], "operators (scenario property)": [[29, "hermespy.core.scenario.Scenario.operators"]], "receive_devices() (scenario method)": [[29, "hermespy.core.scenario.Scenario.receive_devices"]], "receive_operators() (scenario method)": [[29, "hermespy.core.scenario.Scenario.receive_operators"]], "receivers (scenario property)": [[29, "hermespy.core.scenario.Scenario.receivers"]], "record() (scenario method)": [[29, "hermespy.core.scenario.Scenario.record"]], "replay() (scenario method)": [[29, "hermespy.core.scenario.Scenario.replay"]], "stop() (scenario method)": [[29, "hermespy.core.scenario.Scenario.stop"]], "transmit_devices() (scenario method)": [[29, "hermespy.core.scenario.Scenario.transmit_devices"]], "transmit_operators() (scenario method)": [[29, "hermespy.core.scenario.Scenario.transmit_operators"]], "transmitters (scenario property)": [[29, "hermespy.core.scenario.Scenario.transmitters"]], "signal (class in hermespy.core.signal_model)": [[30, "hermespy.core.signal_model.Signal"]], "__carrier_frequency (signal attribute)": [[30, "hermespy.core.signal_model.Signal.__carrier_frequency"]], "__samples (signal attribute)": [[30, "hermespy.core.signal_model.Signal.__samples"]], "__sampling_rate (signal attribute)": [[30, "hermespy.core.signal_model.Signal.__sampling_rate"]], "append_samples() (signal method)": [[30, "hermespy.core.signal_model.Signal.append_samples"]], "append_streams() (signal method)": [[30, "hermespy.core.signal_model.Signal.append_streams"]], "carrier_frequency (signal property)": [[30, "hermespy.core.signal_model.Signal.carrier_frequency"]], "copy() (signal method)": [[30, "hermespy.core.signal_model.Signal.copy"]], "delay (signal attribute)": [[30, "hermespy.core.signal_model.Signal.delay"]], "duration (signal property)": [[30, "hermespy.core.signal_model.Signal.duration"]], "empty() (signal class method)": [[30, "hermespy.core.signal_model.Signal.empty"]], "energy (signal property)": [[30, "hermespy.core.signal_model.Signal.energy"]], "filter_order (signal attribute)": [[30, "hermespy.core.signal_model.Signal.filter_order"]], "frequencies (signal property)": [[30, "hermespy.core.signal_model.Signal.frequencies"]], "from_hdf() (signal class method)": [[30, "hermespy.core.signal_model.Signal.from_HDF"]], "from_interleaved() (signal class method)": [[30, "hermespy.core.signal_model.Signal.from_interleaved"]], "hermespy.core.signal_model": [[30, "module-hermespy.core.signal_model"]], "noise_power (signal property)": [[30, "hermespy.core.signal_model.Signal.noise_power"]], "num_samples (signal property)": [[30, "hermespy.core.signal_model.Signal.num_samples"]], "num_streams (signal property)": [[30, "hermespy.core.signal_model.Signal.num_streams"]], "plot() (signal method)": [[30, "hermespy.core.signal_model.Signal.plot"]], "power (signal property)": [[30, "hermespy.core.signal_model.Signal.power"]], "resample() (signal method)": [[30, "hermespy.core.signal_model.Signal.resample"]], "samples (signal property)": [[30, "hermespy.core.signal_model.Signal.samples"]], "sampling_rate (signal property)": [[30, "hermespy.core.signal_model.Signal.sampling_rate"]], "superimpose() (signal method)": [[30, "hermespy.core.signal_model.Signal.superimpose"]], "timestamps (signal property)": [[30, "hermespy.core.signal_model.Signal.timestamps"]], "to_hdf() (signal method)": [[30, "hermespy.core.signal_model.Signal.to_HDF"]], "to_interleaved() (signal method)": [[30, "hermespy.core.signal_model.Signal.to_interleaved"]], "blockinterleaver (class in hermespy.fec.block_interleaver)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver"]], "bit_block_size (blockinterleaver property)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.bit_block_size"]], "block_size (blockinterleaver property)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.block_size"]], "code_block_size (blockinterleaver property)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.code_block_size"]], "decode() (blockinterleaver method)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.decode"]], "encode() (blockinterleaver method)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.encode"]], "hermespy.fec.block_interleaver": [[33, "module-hermespy.fec.block_interleaver"]], "interleave_blocks (blockinterleaver property)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.interleave_blocks"]], "rate (blockinterleaver property)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.rate"]], "yaml_tag (blockinterleaver attribute)": [[33, "hermespy.fec.block_interleaver.BlockInterleaver.yaml_tag"]], "encoder (class in hermespy.fec.coding)": [[34, "hermespy.fec.coding.Encoder"]], "encodermanager (class in hermespy.fec.coding)": [[34, "hermespy.fec.coding.EncoderManager"]], "add_encoder() (encodermanager method)": [[34, "hermespy.fec.coding.EncoderManager.add_encoder"]], "allow_padding (encodermanager attribute)": [[34, "hermespy.fec.coding.EncoderManager.allow_padding"]], "allow_truncating (encodermanager attribute)": [[34, "hermespy.fec.coding.EncoderManager.allow_truncating"]], "bit_block_size (encoder property)": [[34, "hermespy.fec.coding.Encoder.bit_block_size"]], "bit_block_size (encodermanager property)": [[34, "hermespy.fec.coding.EncoderManager.bit_block_size"]], "code_block_size (encoder property)": [[34, "hermespy.fec.coding.Encoder.code_block_size"]], "code_block_size (encodermanager property)": [[34, "hermespy.fec.coding.EncoderManager.code_block_size"]], "decode() (encoder method)": [[34, "hermespy.fec.coding.Encoder.decode"]], "decode() (encodermanager method)": [[34, "hermespy.fec.coding.EncoderManager.decode"]], "enabled (encoder attribute)": [[34, "hermespy.fec.coding.Encoder.enabled"]], "encode() (encoder method)": [[34, "hermespy.fec.coding.Encoder.encode"]], "encode() (encodermanager method)": [[34, "hermespy.fec.coding.EncoderManager.encode"]], "encoders (encodermanager property)": [[34, "hermespy.fec.coding.EncoderManager.encoders"]], "hermespy.fec.coding": [[34, "module-hermespy.fec.coding"]], "manager (encoder property)": [[34, "hermespy.fec.coding.Encoder.manager"]], "modem (encodermanager property)": [[34, "hermespy.fec.coding.EncoderManager.modem"]], "rate (encoder property)": [[34, "hermespy.fec.coding.Encoder.rate"]], "rate (encodermanager property)": [[34, "hermespy.fec.coding.EncoderManager.rate"]], "required_num_data_bits() (encodermanager method)": [[34, "hermespy.fec.coding.EncoderManager.required_num_data_bits"]], "yaml_tag (encoder attribute)": [[34, "hermespy.fec.coding.Encoder.yaml_tag"]], "yaml_tag (encodermanager attribute)": [[34, "hermespy.fec.coding.EncoderManager.yaml_tag"]], "cyclicredundancycheck (class in hermespy.fec.cyclic_redundancy_check)": [[35, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck"]], "bit_block_size (cyclicredundancycheck property)": [[35, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.bit_block_size"]], "check_block_size (cyclicredundancycheck property)": [[35, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.check_block_size"]], "code_block_size (cyclicredundancycheck property)": [[35, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.code_block_size"]], "decode() (cyclicredundancycheck method)": [[35, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.decode"]], "encode() (cyclicredundancycheck method)": [[35, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.encode"]], "hermespy.fec.cyclic_redundancy_check": [[35, "module-hermespy.fec.cyclic_redundancy_check"]], "yaml_tag (cyclicredundancycheck attribute)": [[35, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.yaml_tag"]], "repetitionencoder (class in hermespy.fec.repetition_encoder)": [[38, "hermespy.fec.repetition_encoder.RepetitionEncoder"]], "bit_block_size (repetitionencoder property)": [[38, "hermespy.fec.repetition_encoder.RepetitionEncoder.bit_block_size"]], "code_block_size (repetitionencoder property)": [[38, "hermespy.fec.repetition_encoder.RepetitionEncoder.code_block_size"]], "decode() (repetitionencoder method)": [[38, "hermespy.fec.repetition_encoder.RepetitionEncoder.decode"]], "encode() (repetitionencoder method)": [[38, "hermespy.fec.repetition_encoder.RepetitionEncoder.encode"]], "hermespy.fec.repetition_encoder": [[38, "module-hermespy.fec.repetition_encoder"]], "repetitions (repetitionencoder property)": [[38, "hermespy.fec.repetition_encoder.RepetitionEncoder.repetitions"]], "yaml_tag (repetitionencoder attribute)": [[38, "hermespy.fec.repetition_encoder.RepetitionEncoder.yaml_tag"]], "pseudorandomgenerator (class in hermespy.fec.scrambler)": [[41, "hermespy.fec.scrambler.PseudoRandomGenerator"]], "scrambler3gpp (class in hermespy.fec.scrambler)": [[41, "hermespy.fec.scrambler.Scrambler3GPP"]], "scrambler80211a (class in hermespy.fec.scrambler)": [[41, "hermespy.fec.scrambler.Scrambler80211a"]], "bit_block_size (scrambler3gpp property)": [[41, "hermespy.fec.scrambler.Scrambler3GPP.bit_block_size"]], "bit_block_size (scrambler80211a property)": [[41, "hermespy.fec.scrambler.Scrambler80211a.bit_block_size"]], "code_block_size (scrambler3gpp property)": [[41, "hermespy.fec.scrambler.Scrambler3GPP.code_block_size"]], "code_block_size (scrambler80211a property)": [[41, "hermespy.fec.scrambler.Scrambler80211a.code_block_size"]], "decode() (scrambler3gpp method)": [[41, "hermespy.fec.scrambler.Scrambler3GPP.decode"]], "decode() (scrambler80211a method)": [[41, "hermespy.fec.scrambler.Scrambler80211a.decode"]], "encode() (scrambler3gpp method)": [[41, "hermespy.fec.scrambler.Scrambler3GPP.encode"]], "encode() (scrambler80211a method)": [[41, "hermespy.fec.scrambler.Scrambler80211a.encode"]], "generate() (pseudorandomgenerator method)": [[41, "hermespy.fec.scrambler.PseudoRandomGenerator.generate"]], "generate_sequence() (pseudorandomgenerator method)": [[41, "hermespy.fec.scrambler.PseudoRandomGenerator.generate_sequence"]], "hermespy.fec.scrambler": [[41, "module-hermespy.fec.scrambler"]], "reset() (pseudorandomgenerator method)": [[41, "hermespy.fec.scrambler.PseudoRandomGenerator.reset"]], "seed (scrambler80211a property)": [[41, "hermespy.fec.scrambler.Scrambler80211a.seed"]], "yaml_tag (scrambler3gpp attribute)": [[41, "hermespy.fec.scrambler.Scrambler3GPP.yaml_tag"]], "yaml_tag (scrambler80211a attribute)": [[41, "hermespy.fec.scrambler.Scrambler80211a.yaml_tag"]], "audiodevice (class in hermespy.hardware_loop.audio.device)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice"]], "audiodeviceantennas (class in hermespy.hardware_loop.audio.device)": [[44, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas"]], "carrier_frequency (audiodevice property)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.carrier_frequency"]], "hermespy.hardware_loop.audio.device": [[44, "module-hermespy.hardware_loop.audio.device"]], "max_sampling_rate (audiodevice property)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.max_sampling_rate"]], "num_antennas (audiodeviceantennas property)": [[44, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.num_antennas"]], "playback_channels (audiodevice property)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.playback_channels"]], "playback_device (audiodevice property)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.playback_device"]], "property_blacklist (audiodevice attribute)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.property_blacklist"]], "record_channels (audiodevice property)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.record_channels"]], "record_device (audiodevice property)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.record_device"]], "sampling_rate (audiodevice property)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.sampling_rate"]], "trigger() (audiodevice method)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.trigger"]], "yaml_tag (audiodevice attribute)": [[44, "hermespy.hardware_loop.audio.device.AudioDevice.yaml_tag"]], "audioscenario (class in hermespy.hardware_loop.audio.scenario)": [[45, "hermespy.hardware_loop.audio.scenario.AudioScenario"]], "hermespy.hardware_loop.audio.scenario": [[45, "module-hermespy.hardware_loop.audio.scenario"]], "new_device() (audioscenario method)": [[45, "hermespy.hardware_loop.audio.scenario.AudioScenario.new_device"]], "yaml_tag (audioscenario attribute)": [[45, "hermespy.hardware_loop.audio.scenario.AudioScenario.yaml_tag"]], "hardwareloop (class in hermespy.hardware_loop.hardware_loop)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop"]], "add_dimension() (hardwareloop method)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_dimension"]], "add_evaluator() (hardwareloop method)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_evaluator"]], "from_yaml() (hardwareloop class method)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.from_yaml"]], "hermespy.hardware_loop.hardware_loop": [[46, "module-hermespy.hardware_loop.hardware_loop"]], "manual_triggering (hardwareloop attribute)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.manual_triggering"]], "new_dimension() (hardwareloop method)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.new_dimension"]], "num_evaluators (hardwareloop property)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.num_evaluators"]], "plot_information (hardwareloop attribute)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.plot_information"]], "replay() (hardwareloop method)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.replay"]], "run() (hardwareloop method)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.run"]], "yaml_tag (hardwareloop attribute)": [[46, "hermespy.hardware_loop.hardware_loop.HardwareLoop.yaml_tag"]], "physicaldevice (class in hermespy.hardware_loop.physical_device)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice"]], "physicaldevicetype (in module hermespy.hardware_loop.physical_device)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDeviceType"]], "powerreceiver (class in hermespy.hardware_loop.physical_device)": [[47, "hermespy.hardware_loop.physical_device.PowerReceiver"]], "signalreceiver (class in hermespy.hardware_loop.physical_device)": [[47, "hermespy.hardware_loop.physical_device.SignalReceiver"]], "signaltransmitter (class in hermespy.hardware_loop.physical_device)": [[47, "hermespy.hardware_loop.physical_device.SignalTransmitter"]], "silenttransmitter (class in hermespy.hardware_loop.physical_device)": [[47, "hermespy.hardware_loop.physical_device.SilentTransmitter"]], "staticoperator (class in hermespy.hardware_loop.physical_device)": [[47, "hermespy.hardware_loop.physical_device.StaticOperator"]], "adaptive_sampling (physicaldevice property)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.adaptive_sampling"]], "calibrate() (physicaldevice method)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.calibrate"]], "calibration_delay (physicaldevice property)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.calibration_delay"]], "energy (powerreceiver property)": [[47, "hermespy.hardware_loop.physical_device.PowerReceiver.energy"]], "energy (signalreceiver property)": [[47, "hermespy.hardware_loop.physical_device.SignalReceiver.energy"]], "estimate_noise_power() (physicaldevice method)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.estimate_noise_power"]], "frame_duration (powerreceiver property)": [[47, "hermespy.hardware_loop.physical_device.PowerReceiver.frame_duration"]], "frame_duration (staticoperator property)": [[47, "hermespy.hardware_loop.physical_device.StaticOperator.frame_duration"]], "hermespy.hardware_loop.physical_device": [[47, "module-hermespy.hardware_loop.physical_device"]], "load_calibration() (physicaldevice method)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.load_calibration"]], "lowpass_bandwidth (physicaldevice property)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_bandwidth"]], "lowpass_filter (physicaldevice property)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_filter"]], "max_receive_delay (physicaldevice property)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_receive_delay"]], "max_sampling_rate (physicaldevice property)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_sampling_rate"]], "num_samples (staticoperator property)": [[47, "hermespy.hardware_loop.physical_device.StaticOperator.num_samples"]], "receive() (physicaldevice method)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.receive"]], "receive() (powerreceiver method)": [[47, "hermespy.hardware_loop.physical_device.PowerReceiver.receive"]], "receive() (signalreceiver method)": [[47, "hermespy.hardware_loop.physical_device.SignalReceiver.receive"]], "sampling_rate (powerreceiver property)": [[47, "hermespy.hardware_loop.physical_device.PowerReceiver.sampling_rate"]], "sampling_rate (staticoperator property)": [[47, "hermespy.hardware_loop.physical_device.StaticOperator.sampling_rate"]], "transmit() (physicaldevice method)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.transmit"]], "transmit() (signaltransmitter method)": [[47, "hermespy.hardware_loop.physical_device.SignalTransmitter.transmit"]], "transmit() (silenttransmitter method)": [[47, "hermespy.hardware_loop.physical_device.SilentTransmitter.transmit"]], "trigger() (physicaldevice method)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.trigger"]], "velocity (physicaldevice property)": [[47, "hermespy.hardware_loop.physical_device.PhysicalDevice.velocity"]], "physicaldevicedummy (class in hermespy.hardware_loop.physical_device_dummy)": [[48, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy"]], "physicalscenariodummy (class in hermespy.hardware_loop.physical_device_dummy)": [[48, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy"]], "hermespy.hardware_loop.physical_device_dummy": [[48, "module-hermespy.hardware_loop.physical_device_dummy"]], "max_sampling_rate (physicaldevicedummy property)": [[48, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.max_sampling_rate"]], "new_device() (physicalscenariodummy method)": [[48, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.new_device"]], "receive() (physicaldevicedummy method)": [[48, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.receive"]], "transmit() (physicaldevicedummy method)": [[48, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.transmit"]], "trigger() (physicaldevicedummy method)": [[48, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.trigger"]], "physicalscenario (class in hermespy.hardware_loop.scenario)": [[49, "hermespy.hardware_loop.scenario.PhysicalScenario"]], "physicalscenariotype (in module hermespy.hardware_loop.scenario)": [[49, "hermespy.hardware_loop.scenario.PhysicalScenarioType"]], "hermespy.hardware_loop.scenario": [[49, "module-hermespy.hardware_loop.scenario"]], "receive_devices() (physicalscenario method)": [[49, "hermespy.hardware_loop.scenario.PhysicalScenario.receive_devices"]], "usrpdevice (class in hermespy.hardware_loop.uhd.usrp)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice"]], "usrpsystem (class in hermespy.hardware_loop.uhd.system)": [[50, "hermespy.hardware_loop.uhd.system.UsrpSystem"]], "add_device() (usrpsystem method)": [[50, "hermespy.hardware_loop.uhd.system.UsrpSystem.add_device"]], "carrier_frequency (usrpdevice property)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.carrier_frequency"]], "hermespy.hardware_loop.uhd.system": [[50, "module-hermespy.hardware_loop.uhd.system"]], "hermespy.hardware_loop.uhd.usrp": [[50, "module-hermespy.hardware_loop.uhd.usrp"]], "ip (usrpdevice property)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.ip"]], "max_sampling_rate (usrpdevice property)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.max_sampling_rate"]], "new_device() (usrpsystem method)": [[50, "hermespy.hardware_loop.uhd.system.UsrpSystem.new_device"]], "port (usrpdevice property)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.port"]], "property_blacklist (usrpdevice attribute)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.property_blacklist"]], "rx_gain (usrpdevice property)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.rx_gain"]], "sampling_rate (usrpdevice property)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.sampling_rate"]], "trigger() (usrpdevice method)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.trigger"]], "tx_gain (usrpdevice property)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.tx_gain"]], "yaml_tag (usrpdevice attribute)": [[50, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.yaml_tag"]], "yaml_tag (usrpsystem attribute)": [[50, "hermespy.hardware_loop.uhd.system.UsrpSystem.yaml_tag"]], "jcasreception (class in hermespy.jcas.matched_filtering)": [[52, "hermespy.jcas.matched_filtering.JCASReception"]], "jcastransmission (class in hermespy.jcas.matched_filtering)": [[52, "hermespy.jcas.matched_filtering.JCASTransmission"]], "matchedfilterjcas (class in hermespy.jcas.matched_filtering)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas"]], "frames (jcasreception attribute)": [[52, "hermespy.jcas.matched_filtering.JCASReception.frames"]], "frames (jcastransmission attribute)": [[52, "hermespy.jcas.matched_filtering.JCASTransmission.frames"]], "hermespy.jcas.matched_filtering": [[52, "module-hermespy.jcas.matched_filtering"]], "max_range (matchedfilterjcas property)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas.max_range"]], "property_blacklist (matchedfilterjcas attribute)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas.property_blacklist"]], "range_resolution (matchedfilterjcas property)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas.range_resolution"]], "receive() (matchedfilterjcas method)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas.receive"]], "sampling_rate (matchedfilterjcas property)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas.sampling_rate"]], "transmit() (matchedfilterjcas method)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas.transmit"]], "yaml_tag (matchedfilterjcas attribute)": [[52, "hermespy.jcas.matched_filtering.MatchedFilterJcas.yaml_tag"]], "bitssource (class in hermespy.modem.bits_source)": [[54, "hermespy.modem.bits_source.BitsSource"]], "randombitssource (class in hermespy.modem.bits_source)": [[54, "hermespy.modem.bits_source.RandomBitsSource"]], "streambitssource (class in hermespy.modem.bits_source)": [[54, "hermespy.modem.bits_source.StreamBitsSource"]], "generate_bits() (bitssource method)": [[54, "hermespy.modem.bits_source.BitsSource.generate_bits"]], "generate_bits() (randombitssource method)": [[54, "hermespy.modem.bits_source.RandomBitsSource.generate_bits"]], "generate_bits() (streambitssource method)": [[54, "hermespy.modem.bits_source.StreamBitsSource.generate_bits"]], "hermespy.modem.bits_source": [[54, "module-hermespy.modem.bits_source"]], "yaml_tag (randombitssource attribute)": [[54, "hermespy.modem.bits_source.RandomBitsSource.yaml_tag"]], "biterrorartifact (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.BitErrorArtifact"]], "biterrorevaluation (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.BitErrorEvaluation"]], "biterrorevaluator (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.BitErrorEvaluator"]], "blockerrorartifact (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.BlockErrorArtifact"]], "blockerrorevaluation (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluation"]], "blockerrorevaluator (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluator"]], "communicationevaluator (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.CommunicationEvaluator"]], "frameerrorartifact (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.FrameErrorArtifact"]], "frameerrorevaluation (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluation"]], "frameerrorevaluator (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluator"]], "throughputartifact (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.ThroughputArtifact"]], "throughputevaluation (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.ThroughputEvaluation"]], "throughputevaluator (class in hermespy.modem.evaluators)": [[55, "hermespy.modem.evaluators.ThroughputEvaluator"]], "abbreviation (biterrorevaluator property)": [[55, "hermespy.modem.evaluators.BitErrorEvaluator.abbreviation"]], "abbreviation (blockerrorevaluator property)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluator.abbreviation"]], "abbreviation (frameerrorevaluator property)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluator.abbreviation"]], "abbreviation (throughputevaluator property)": [[55, "hermespy.modem.evaluators.ThroughputEvaluator.abbreviation"]], "artifact() (biterrorevaluation method)": [[55, "hermespy.modem.evaluators.BitErrorEvaluation.artifact"]], "artifact() (blockerrorevaluation method)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluation.artifact"]], "artifact() (frameerrorevaluation method)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluation.artifact"]], "artifact() (throughputevaluation method)": [[55, "hermespy.modem.evaluators.ThroughputEvaluation.artifact"]], "evaluate() (biterrorevaluator method)": [[55, "hermespy.modem.evaluators.BitErrorEvaluator.evaluate"]], "evaluate() (blockerrorevaluator method)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluator.evaluate"]], "evaluate() (frameerrorevaluator method)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluator.evaluate"]], "evaluate() (throughputevaluator method)": [[55, "hermespy.modem.evaluators.ThroughputEvaluator.evaluate"]], "evaluation (biterrorevaluation attribute)": [[55, "hermespy.modem.evaluators.BitErrorEvaluation.evaluation"]], "evaluation (blockerrorevaluation attribute)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluation.evaluation"]], "evaluation (frameerrorevaluation attribute)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluation.evaluation"]], "generate_result() (communicationevaluator method)": [[55, "hermespy.modem.evaluators.CommunicationEvaluator.generate_result"]], "hermespy.modem.evaluators": [[55, "module-hermespy.modem.evaluators"]], "plot() (biterrorevaluation method)": [[55, "hermespy.modem.evaluators.BitErrorEvaluation.plot"]], "plot() (blockerrorevaluation method)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluation.plot"]], "plot() (frameerrorevaluation method)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluation.plot"]], "receiving_modem (communicationevaluator property)": [[55, "hermespy.modem.evaluators.CommunicationEvaluator.receiving_modem"]], "title (biterrorevaluator property)": [[55, "hermespy.modem.evaluators.BitErrorEvaluator.title"]], "title (blockerrorevaluator property)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluator.title"]], "title (frameerrorevaluator property)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluator.title"]], "title (throughputevaluator property)": [[55, "hermespy.modem.evaluators.ThroughputEvaluator.title"]], "to_scalar() (biterrorartifact method)": [[55, "hermespy.modem.evaluators.BitErrorArtifact.to_scalar"]], "to_scalar() (blockerrorartifact method)": [[55, "hermespy.modem.evaluators.BlockErrorArtifact.to_scalar"]], "to_scalar() (frameerrorartifact method)": [[55, "hermespy.modem.evaluators.FrameErrorArtifact.to_scalar"]], "to_scalar() (throughputartifact method)": [[55, "hermespy.modem.evaluators.ThroughputArtifact.to_scalar"]], "transmitting_modem (communicationevaluator property)": [[55, "hermespy.modem.evaluators.CommunicationEvaluator.transmitting_modem"]], "yaml_tag (biterrorevaluator attribute)": [[55, "hermespy.modem.evaluators.BitErrorEvaluator.yaml_tag"]], "yaml_tag (blockerrorevaluator attribute)": [[55, "hermespy.modem.evaluators.BlockErrorEvaluator.yaml_tag"]], "yaml_tag (frameerrorevaluator attribute)": [[55, "hermespy.modem.evaluators.FrameErrorEvaluator.yaml_tag"]], "yaml_tag (throughputevaluator attribute)": [[55, "hermespy.modem.evaluators.ThroughputEvaluator.yaml_tag"]], "basemodem (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.BaseModem"]], "communicationreception (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.CommunicationReception"]], "communicationreceptionframe (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame"]], "communicationtransmission (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.CommunicationTransmission"]], "communicationtransmissionframe (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame"]], "duplexmodem (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.DuplexModem"]], "receivingmodem (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.ReceivingModem"]], "simplexlink (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.SimplexLink"]], "transmittingmodem (class in hermespy.modem.modem)": [[56, "hermespy.modem.modem.TransmittingModem"]], "bits (communicationreception property)": [[56, "hermespy.modem.modem.CommunicationReception.bits"]], "bits (communicationtransmission property)": [[56, "hermespy.modem.modem.CommunicationTransmission.bits"]], "bits (communicationtransmissionframe attribute)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.bits"]], "bits_source (transmittingmodem property)": [[56, "hermespy.modem.modem.TransmittingModem.bits_source"]], "csi (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.csi"]], "csi (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.csi"]], "csi (duplexmodem property)": [[56, "hermespy.modem.modem.DuplexModem.csi"]], "csi (receivingmodem property)": [[56, "hermespy.modem.modem.ReceivingModem.csi"]], "decoded_bits (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_bits"]], "decoded_signal (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_signal"]], "decoded_symbols (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_symbols"]], "device (duplexmodem property)": [[56, "hermespy.modem.modem.DuplexModem.device"]], "encoded_bits (communicationreception property)": [[56, "hermespy.modem.modem.CommunicationReception.encoded_bits"]], "encoded_bits (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.encoded_bits"]], "encoded_bits (communicationtransmissionframe attribute)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_bits"]], "encoded_symbols (communicationtransmissionframe attribute)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_symbols"]], "encoder_manager (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.encoder_manager"]], "equalized_symbols (communicationreception property)": [[56, "hermespy.modem.modem.CommunicationReception.equalized_symbols"]], "equalized_symbols (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.equalized_symbols"]], "frame_duration (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.frame_duration"]], "frames (communicationreception attribute)": [[56, "hermespy.modem.modem.CommunicationReception.frames"]], "frames (communicationtransmission attribute)": [[56, "hermespy.modem.modem.CommunicationTransmission.frames"]], "from_hdf() (communicationreception class method)": [[56, "hermespy.modem.modem.CommunicationReception.from_HDF"]], "from_hdf() (communicationreceptionframe class method)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.from_HDF"]], "from_hdf() (communicationtransmission class method)": [[56, "hermespy.modem.modem.CommunicationTransmission.from_HDF"]], "from_hdf() (communicationtransmissionframe class method)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.from_HDF"]], "hermespy.modem.modem": [[56, "module-hermespy.modem.modem"]], "noise_power() (basemodem method)": [[56, "hermespy.modem.modem.BaseModem.noise_power"]], "num_data_bits_per_frame (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.num_data_bits_per_frame"]], "num_frames (communicationreception property)": [[56, "hermespy.modem.modem.CommunicationReception.num_frames"]], "num_frames (communicationtransmission property)": [[56, "hermespy.modem.modem.CommunicationTransmission.num_frames"]], "num_receive_streams (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.num_receive_streams"]], "num_transmit_streams (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.num_transmit_streams"]], "precoding (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.precoding"]], "receive() (receivingmodem method)": [[56, "hermespy.modem.modem.ReceivingModem.receive"]], "receive_stream_coding (receivingmodem property)": [[56, "hermespy.modem.modem.ReceivingModem.receive_stream_coding"]], "receiving_device (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.receiving_device"]], "receiving_device (duplexmodem property)": [[56, "hermespy.modem.modem.DuplexModem.receiving_device"]], "receiving_device (receivingmodem property)": [[56, "hermespy.modem.modem.ReceivingModem.receiving_device"]], "receiving_device (simplexlink property)": [[56, "hermespy.modem.modem.SimplexLink.receiving_device"]], "receiving_device (transmittingmodem property)": [[56, "hermespy.modem.modem.TransmittingModem.receiving_device"]], "reception (receivingmodem property)": [[56, "hermespy.modem.modem.ReceivingModem.reception"]], "sampling_rate (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.sampling_rate"]], "signal (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.signal"]], "signal (communicationtransmissionframe attribute)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.signal"]], "symbols (communicationreception property)": [[56, "hermespy.modem.modem.CommunicationReception.symbols"]], "symbols (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.symbols"]], "symbols (communicationtransmission property)": [[56, "hermespy.modem.modem.CommunicationTransmission.symbols"]], "symbols (communicationtransmissionframe attribute)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.symbols"]], "timestamp (communicationreceptionframe attribute)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.timestamp"]], "timestamp (communicationtransmissionframe attribute)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.timestamp"]], "to_hdf() (communicationreception method)": [[56, "hermespy.modem.modem.CommunicationReception.to_HDF"]], "to_hdf() (communicationreceptionframe method)": [[56, "hermespy.modem.modem.CommunicationReceptionFrame.to_HDF"]], "to_hdf() (communicationtransmission method)": [[56, "hermespy.modem.modem.CommunicationTransmission.to_HDF"]], "to_hdf() (communicationtransmissionframe method)": [[56, "hermespy.modem.modem.CommunicationTransmissionFrame.to_HDF"]], "transmission (transmittingmodem property)": [[56, "hermespy.modem.modem.TransmittingModem.transmission"]], "transmit() (transmittingmodem method)": [[56, "hermespy.modem.modem.TransmittingModem.transmit"]], "transmit_stream_coding (receivingmodem property)": [[56, "hermespy.modem.modem.ReceivingModem.transmit_stream_coding"]], "transmit_stream_coding (transmittingmodem property)": [[56, "hermespy.modem.modem.TransmittingModem.transmit_stream_coding"]], "transmitting_device (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.transmitting_device"]], "transmitting_device (duplexmodem property)": [[56, "hermespy.modem.modem.DuplexModem.transmitting_device"]], "transmitting_device (receivingmodem property)": [[56, "hermespy.modem.modem.ReceivingModem.transmitting_device"]], "transmitting_device (simplexlink property)": [[56, "hermespy.modem.modem.SimplexLink.transmitting_device"]], "transmitting_device (transmittingmodem property)": [[56, "hermespy.modem.modem.TransmittingModem.transmitting_device"]], "waveform_generator (basemodem property)": [[56, "hermespy.modem.modem.BaseModem.waveform_generator"]], "yaml_tag (duplexmodem attribute)": [[56, "hermespy.modem.modem.DuplexModem.yaml_tag"]], "yaml_tag (receivingmodem attribute)": [[56, "hermespy.modem.modem.ReceivingModem.yaml_tag"]], "yaml_tag (simplexlink attribute)": [[56, "hermespy.modem.modem.SimplexLink.yaml_tag"]], "yaml_tag (transmittingmodem attribute)": [[56, "hermespy.modem.modem.TransmittingModem.yaml_tag"]], "data (symboltype attribute)": [[57, "hermespy.modem.symbols.SymbolType.DATA"]], "pilot (symboltype attribute)": [[57, "hermespy.modem.symbols.SymbolType.PILOT"]], "reference (symboltype attribute)": [[57, "hermespy.modem.symbols.SymbolType.REFERENCE"]], "statedsymbols (class in hermespy.modem.symbols)": [[57, "hermespy.modem.symbols.StatedSymbols"]], "symbol (class in hermespy.modem.symbols)": [[57, "hermespy.modem.symbols.Symbol"]], "symboltype (class in hermespy.modem.symbols)": [[57, "hermespy.modem.symbols.SymbolType"]], "symbols (class in hermespy.modem.symbols)": [[57, "hermespy.modem.symbols.Symbols"]], "append_stream() (symbols method)": [[57, "hermespy.modem.symbols.Symbols.append_stream"]], "append_symbols() (symbols method)": [[57, "hermespy.modem.symbols.Symbols.append_symbols"]], "copy() (statedsymbols method)": [[57, "hermespy.modem.symbols.StatedSymbols.copy"]], "copy() (symbols method)": [[57, "hermespy.modem.symbols.Symbols.copy"]], "flag (symbol attribute)": [[57, "hermespy.modem.symbols.Symbol.flag"]], "from_hdf() (statedsymbols class method)": [[57, "hermespy.modem.symbols.StatedSymbols.from_HDF"]], "from_hdf() (symbols class method)": [[57, "hermespy.modem.symbols.Symbols.from_HDF"]], "hermespy.modem.symbols": [[57, "module-hermespy.modem.symbols"]], "num_blocks (symbols property)": [[57, "hermespy.modem.symbols.Symbols.num_blocks"]], "num_streams (symbols property)": [[57, "hermespy.modem.symbols.Symbols.num_streams"]], "num_symbols (symbols property)": [[57, "hermespy.modem.symbols.Symbols.num_symbols"]], "num_transmit_streams (statedsymbols property)": [[57, "hermespy.modem.symbols.StatedSymbols.num_transmit_streams"]], "plot_constellation() (symbols method)": [[57, "hermespy.modem.symbols.Symbols.plot_constellation"]], "raw (symbols property)": [[57, "hermespy.modem.symbols.Symbols.raw"]], "states (statedsymbols property)": [[57, "hermespy.modem.symbols.StatedSymbols.states"]], "to_hdf() (statedsymbols method)": [[57, "hermespy.modem.symbols.StatedSymbols.to_HDF"]], "to_hdf() (symbols method)": [[57, "hermespy.modem.symbols.Symbols.to_HDF"]], "value (symbol attribute)": [[57, "hermespy.modem.symbols.Symbol.value"]], "correlationsynchronization (class in hermespy.modem.waveform_correlation_synchronization)": [[58, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization"]], "pgt (in module hermespy.modem.waveform_correlation_synchronization)": [[58, "hermespy.modem.waveform_correlation_synchronization.PGT"]], "guard_ratio (correlationsynchronization property)": [[58, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.guard_ratio"]], "hermespy.modem.waveform_correlation_synchronization": [[58, "module-hermespy.modem.waveform_correlation_synchronization"]], "synchronize() (correlationsynchronization method)": [[58, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.synchronize"]], "threshold (correlationsynchronization property)": [[58, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.threshold"]], "yaml_tag (correlationsynchronization attribute)": [[58, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.yaml_tag"]], "channelequalization (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.ChannelEqualization"]], "channelestimation (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.ChannelEstimation"]], "configurablepilotwaveform (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.ConfigurablePilotWaveform"]], "custompilotsymbolsequence (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.CustomPilotSymbolSequence"]], "idealchannelestimation (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.IdealChannelEstimation"]], "mappedpilotsymbolsequence (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.MappedPilotSymbolSequence"]], "pilotsymbolsequence (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.PilotSymbolSequence"]], "pilotwaveformgenerator (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.PilotWaveformGenerator"]], "synchronization (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.Synchronization"]], "uniformpilotsymbolsequence (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.UniformPilotSymbolSequence"]], "waveformgenerator (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator"]], "zeroforcingchannelequalization (class in hermespy.modem.waveform_generator)": [[59, "hermespy.modem.waveform_generator.ZeroForcingChannelEqualization"]], "bandwidth (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.bandwidth"]], "bit_energy (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.bit_energy"]], "bits_per_frame (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.bits_per_frame"]], "bits_per_symbol (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.bits_per_symbol"]], "channel_equalization (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.channel_equalization"]], "channel_estimation (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.channel_estimation"]], "data_rate (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.data_rate"]], "demodulate() (waveformgenerator method)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.demodulate"]], "equalize_channel() (channelequalization method)": [[59, "hermespy.modem.waveform_generator.ChannelEqualization.equalize_channel"]], "equalize_channel() (zeroforcingchannelequalization method)": [[59, "hermespy.modem.waveform_generator.ZeroForcingChannelEqualization.equalize_channel"]], "equalize_symbols() (waveformgenerator method)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.equalize_symbols"]], "estimate_channel() (channelestimation method)": [[59, "hermespy.modem.waveform_generator.ChannelEstimation.estimate_channel"]], "estimate_channel() (waveformgenerator method)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.estimate_channel"]], "frame_duration (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.frame_duration"]], "hermespy.modem.waveform_generator": [[59, "module-hermespy.modem.waveform_generator"]], "map() (waveformgenerator method)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.map"]], "modem (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.modem"]], "modulate() (waveformgenerator method)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.modulate"]], "modulation_order (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.modulation_order"]], "oversampling_factor (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.oversampling_factor"]], "pilot_signal (pilotwaveformgenerator property)": [[59, "hermespy.modem.waveform_generator.PilotWaveformGenerator.pilot_signal"]], "pilot_symbol_sequence (configurablepilotwaveform attribute)": [[59, "hermespy.modem.waveform_generator.ConfigurablePilotWaveform.pilot_symbol_sequence"]], "pilot_symbols() (configurablepilotwaveform method)": [[59, "hermespy.modem.waveform_generator.ConfigurablePilotWaveform.pilot_symbols"]], "power (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.power"]], "repeat_pilot_symbol_sequence (configurablepilotwaveform attribute)": [[59, "hermespy.modem.waveform_generator.ConfigurablePilotWaveform.repeat_pilot_symbol_sequence"]], "samples_in_frame (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.samples_in_frame"]], "sampling_rate (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.sampling_rate"]], "sequence (custompilotsymbolsequence property)": [[59, "hermespy.modem.waveform_generator.CustomPilotSymbolSequence.sequence"]], "sequence (pilotsymbolsequence property)": [[59, "hermespy.modem.waveform_generator.PilotSymbolSequence.sequence"]], "sequence (uniformpilotsymbolsequence property)": [[59, "hermespy.modem.waveform_generator.UniformPilotSymbolSequence.sequence"]], "symbol_energy (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.symbol_energy"]], "symbol_precoding_support (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.symbol_precoding_support"]], "symbol_type (waveformgenerator attribute)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.symbol_type"]], "symbols_per_frame (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.symbols_per_frame"]], "synchronization (waveformgenerator property)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.synchronization"]], "synchronize() (synchronization method)": [[59, "hermespy.modem.waveform_generator.Synchronization.synchronize"]], "unmap() (waveformgenerator method)": [[59, "hermespy.modem.waveform_generator.WaveformGenerator.unmap"]], "waveform_generator (channelequalization property)": [[59, "hermespy.modem.waveform_generator.ChannelEqualization.waveform_generator"]], "waveform_generator (channelestimation property)": [[59, "hermespy.modem.waveform_generator.ChannelEstimation.waveform_generator"]], "waveform_generator (synchronization property)": [[59, "hermespy.modem.waveform_generator.Synchronization.waveform_generator"]], "yaml_tag (channelequalization attribute)": [[59, "hermespy.modem.waveform_generator.ChannelEqualization.yaml_tag"]], "yaml_tag (channelestimation attribute)": [[59, "hermespy.modem.waveform_generator.ChannelEstimation.yaml_tag"]], "yaml_tag (idealchannelestimation attribute)": [[59, "hermespy.modem.waveform_generator.IdealChannelEstimation.yaml_tag"]], "yaml_tag (synchronization attribute)": [[59, "hermespy.modem.waveform_generator.Synchronization.yaml_tag"]], "yaml_tag (zeroforcingchannelequalization attribute)": [[59, "hermespy.modem.waveform_generator.ZeroForcingChannelEqualization.yaml_tag"]], "chirpfskcorrelationsynchronization (class in hermespy.modem.waveform_generator_chirp_fsk)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKCorrelationSynchronization"]], "chirpfsksynchronization (class in hermespy.modem.waveform_generator_chirp_fsk)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKSynchronization"]], "chirpfskwaveform (class in hermespy.modem.waveform_generator_chirp_fsk)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform"]], "bandwidth (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.bandwidth"]], "bit_energy (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.bit_energy"]], "bits_per_frame (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.bits_per_frame"]], "bits_per_symbol (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.bits_per_symbol"]], "chirp_bandwidth (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.chirp_bandwidth"]], "chirp_duration (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.chirp_duration"]], "chirp_time (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.chirp_time"]], "chirps_in_frame (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.chirps_in_frame"]], "demodulate() (chirpfskwaveform method)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.demodulate"]], "frame_duration (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.frame_duration"]], "freq_difference (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.freq_difference"]], "guard_interval (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.guard_interval"]], "hermespy.modem.waveform_generator_chirp_fsk": [[60, "module-hermespy.modem.waveform_generator_chirp_fsk"]], "map() (chirpfskwaveform method)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.map"]], "modulate() (chirpfskwaveform method)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.modulate"]], "modulation_order (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.modulation_order"]], "num_data_chirps (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.num_data_chirps"]], "num_pilot_chirps (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.num_pilot_chirps"]], "pilot_signal (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.pilot_signal"]], "power (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.power"]], "samples_in_chirp (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.samples_in_chirp"]], "samples_in_frame (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.samples_in_frame"]], "sampling_rate (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.sampling_rate"]], "symbol_energy (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.symbol_energy"]], "symbol_precoding_support (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.symbol_precoding_support"]], "symbol_type (chirpfskwaveform attribute)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.symbol_type"]], "symbols_per_frame (chirpfskwaveform property)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.symbols_per_frame"]], "unmap() (chirpfskwaveform method)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.unmap"]], "yaml_tag (chirpfskcorrelationsynchronization attribute)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKCorrelationSynchronization.yaml_tag"]], "yaml_tag (chirpfsksynchronization attribute)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKSynchronization.yaml_tag"]], "yaml_tag (chirpfskwaveform attribute)": [[60, "hermespy.modem.waveform_generator_chirp_fsk.ChirpFSKWaveform.yaml_tag"]], "cyclic (prefixtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.PrefixType.CYCLIC"]], "data (elementtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ElementType.DATA"]], "elementtype (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.ElementType"]], "frameelement (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameElement"]], "frameguardsection (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameGuardSection"]], "frameresource (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource"]], "framesection (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection"]], "framesymbolsection (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection"]], "ideal (referenceposition attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition.IDEAL"]], "ideal_midamble (referenceposition attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition.IDEAL_MIDAMBLE"]], "ideal_postamble (referenceposition attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition.IDEAL_POSTAMBLE"]], "ideal_preamble (referenceposition attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition.IDEAL_PREAMBLE"]], "none (prefixtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.PrefixType.NONE"]], "null (elementtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ElementType.NULL"]], "ofdmchannelequalization (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMChannelEqualization"]], "ofdmcorrelationsynchronization (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMCorrelationSynchronization"]], "ofdmidealchannelestimation (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMIdealChannelEstimation"]], "ofdmleastsquareschannelestimation (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMLeastSquaresChannelEstimation"]], "ofdmminimummeansquarechannelequalization (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMMinimumMeanSquareChannelEqualization"]], "ofdmsynchronization (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMSynchronization"]], "ofdmwaveform (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform"]], "ofdmzeroforcingchannelequalization (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMZeroForcingChannelEqualization"]], "pilotsection (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection"]], "prefixtype (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.PrefixType"]], "reference (elementtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ElementType.REFERENCE"]], "referenceposition (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition"]], "schmidlcoxpilotsection (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.SchmidlCoxPilotSection"]], "schmidlcoxsynchronization (class in hermespy.modem.waveform_generator_ofdm)": [[61, "hermespy.modem.waveform_generator_ofdm.SchmidlCoxSynchronization"]], "zeropad (prefixtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.PrefixType.ZEROPAD"]], "add_resource() (ofdmwaveform method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.add_resource"]], "add_section() (ofdmwaveform method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.add_section"]], "bandwidth (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.bandwidth"]], "bit_energy (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.bit_energy"]], "bits_per_frame (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.bits_per_frame"]], "dc_suppression (ofdmwaveform attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.dc_suppression"]], "demodulate() (frameguardsection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameGuardSection.demodulate"]], "demodulate() (framesection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.demodulate"]], "demodulate() (framesymbolsection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.demodulate"]], "demodulate() (ofdmwaveform method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.demodulate"]], "demodulate() (pilotsection method)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection.demodulate"]], "demodulate() (schmidlcoxpilotsection method)": [[61, "hermespy.modem.waveform_generator_ofdm.SchmidlCoxPilotSection.demodulate"]], "duration (frameguardsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameGuardSection.duration"]], "elements (frameresource attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.elements"]], "equalize_channel() (ofdmminimummeansquarechannelequalization method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMMinimumMeanSquareChannelEqualization.equalize_channel"]], "estimate_channel() (ofdmidealchannelestimation method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMIdealChannelEstimation.estimate_channel"]], "estimate_channel() (ofdmleastsquareschannelestimation method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMLeastSquaresChannelEstimation.estimate_channel"]], "frame (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.frame"]], "frame_duration (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.frame_duration"]], "from_yaml() (pilotsection class method)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection.from_yaml"]], "hermespy.modem.waveform_generator_ofdm": [[61, "module-hermespy.modem.waveform_generator_ofdm"]], "map() (ofdmwaveform method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.map"]], "mask (frameresource property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.mask"]], "modulate() (frameguardsection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameGuardSection.modulate"]], "modulate() (framesection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.modulate"]], "modulate() (framesymbolsection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.modulate"]], "modulate() (ofdmwaveform method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.modulate"]], "modulate() (pilotsection method)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection.modulate"]], "modulation_order (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.modulation_order"]], "num_references (frameresource property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.num_references"]], "num_references (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.num_references"]], "num_references (framesymbolsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.num_references"]], "num_repetitions (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.num_repetitions"]], "num_samples (frameguardsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameGuardSection.num_samples"]], "num_samples (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.num_samples"]], "num_samples (framesymbolsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.num_samples"]], "num_samples (pilotsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection.num_samples"]], "num_samples (schmidlcoxpilotsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.SchmidlCoxPilotSection.num_samples"]], "num_subcarriers (frameresource property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.num_subcarriers"]], "num_subcarriers (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.num_subcarriers"]], "num_subcarriers (framesymbolsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.num_subcarriers"]], "num_subcarriers (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.num_subcarriers"]], "num_symbols (frameresource property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.num_symbols"]], "num_symbols (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.num_symbols"]], "num_symbols (framesymbolsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.num_symbols"]], "num_words (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.num_words"]], "num_words (framesymbolsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.num_words"]], "pattern (framesymbolsection attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.pattern"]], "pick_symbols() (framesection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.pick_symbols"]], "pilot_elements (pilotsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection.pilot_elements"]], "pilot_section (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.pilot_section"]], "pilot_signal (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.pilot_signal"]], "place_symbols() (framesection method)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.place_symbols"]], "power (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.power"]], "prefix_ratio (frameresource property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.prefix_ratio"]], "prefix_type (frameresource attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.prefix_type"]], "property_blacklist (elementtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ElementType.property_blacklist"]], "property_blacklist (prefixtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.PrefixType.property_blacklist"]], "property_blacklist (referenceposition attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition.property_blacklist"]], "reference_based_channel_estimation() (ofdmwaveform static method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.reference_based_channel_estimation"]], "reference_position (ofdmidealchannelestimation attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMIdealChannelEstimation.reference_position"]], "references_per_frame (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.references_per_frame"]], "repetitions (frameelement attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameElement.repetitions"]], "repetitions (frameresource property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.repetitions"]], "resource_mask (framesection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSection.resource_mask"]], "resource_mask (framesymbolsection property)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.resource_mask"]], "resources (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.resources"]], "samples_in_frame (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.samples_in_frame"]], "sampling_rate (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.sampling_rate"]], "serialized_attributes (elementtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ElementType.serialized_attributes"]], "serialized_attributes (frameelement attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameElement.serialized_attributes"]], "serialized_attributes (frameresource attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.serialized_attributes"]], "serialized_attributes (ofdmidealchannelestimation attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMIdealChannelEstimation.serialized_attributes"]], "serialized_attributes (prefixtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.PrefixType.serialized_attributes"]], "serialized_attributes (referenceposition attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition.serialized_attributes"]], "structure (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.structure"]], "subcarrier_spacing (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.subcarrier_spacing"]], "symbol_energy (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.symbol_energy"]], "symbols_per_frame (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.symbols_per_frame"]], "synchronize() (schmidlcoxsynchronization method)": [[61, "hermespy.modem.waveform_generator_ofdm.SchmidlCoxSynchronization.synchronize"]], "to_yaml() (pilotsection class method)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection.to_yaml"]], "type (frameelement attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameElement.type"]], "unmap() (ofdmwaveform method)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.unmap"]], "words_per_frame (ofdmwaveform property)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.words_per_frame"]], "yaml_tag (elementtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ElementType.yaml_tag"]], "yaml_tag (frameelement attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameElement.yaml_tag"]], "yaml_tag (frameguardsection attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameGuardSection.yaml_tag"]], "yaml_tag (frameresource attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameResource.yaml_tag"]], "yaml_tag (framesymbolsection attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.FrameSymbolSection.yaml_tag"]], "yaml_tag (ofdmchannelequalization attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMChannelEqualization.yaml_tag"]], "yaml_tag (ofdmcorrelationsynchronization attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMCorrelationSynchronization.yaml_tag"]], "yaml_tag (ofdmidealchannelestimation attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMIdealChannelEstimation.yaml_tag"]], "yaml_tag (ofdmleastsquareschannelestimation attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMLeastSquaresChannelEstimation.yaml_tag"]], "yaml_tag (ofdmminimummeansquarechannelequalization attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMMinimumMeanSquareChannelEqualization.yaml_tag"]], "yaml_tag (ofdmwaveform attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMWaveform.yaml_tag"]], "yaml_tag (ofdmzeroforcingchannelequalization attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.OFDMZeroForcingChannelEqualization.yaml_tag"]], "yaml_tag (pilotsection attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.PilotSection.yaml_tag"]], "yaml_tag (prefixtype attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.PrefixType.yaml_tag"]], "yaml_tag (referenceposition attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.ReferencePosition.yaml_tag"]], "yaml_tag (schmidlcoxpilotsection attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.SchmidlCoxPilotSection.yaml_tag"]], "yaml_tag (schmidlcoxsynchronization attribute)": [[61, "hermespy.modem.waveform_generator_ofdm.SchmidlCoxSynchronization.yaml_tag"]], "fmcwwaveform (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.FMCWWaveform"]], "filteredsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform"]], "raisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform"]], "rectangularwaveform (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.RectangularWaveform"]], "rolledoffsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform"]], "rootraisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform"]], "singlecarrierchannelequalization (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierChannelEqualization"]], "singlecarrierchannelestimation (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierChannelEstimation"]], "singlecarriercorrelationsynchronization (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierCorrelationSynchronization"]], "singlecarrieridealchannelestimation (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation"]], "singlecarrierleastsquareschannelestimation (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation"]], "singlecarrierminimummeansquarechannelequalization (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization"]], "singlecarriersynchronization (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierSynchronization"]], "singlecarrierzeroforcingchannelequalization (class in hermespy.modem.waveform_single_carrier)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierZeroForcingChannelEqualization"]], "bandwidth (fmcwwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FMCWWaveform.bandwidth"]], "bandwidth (rectangularwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.RectangularWaveform.bandwidth"]], "bandwidth (rolledoffsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.bandwidth"]], "bit_energy (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.bit_energy"]], "bits_per_frame (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.bits_per_frame"]], "chirp_duration (fmcwwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_duration"]], "chirp_slope (fmcwwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_slope"]], "demodulate() (filteredsinglecarrierwaveform method)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.demodulate"]], "equalize_channel() (singlecarrierminimummeansquarechannelequalization method)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization.equalize_channel"]], "estimate_channel() (singlecarrieridealchannelestimation method)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation.estimate_channel"]], "estimate_channel() (singlecarrierleastsquareschannelestimation method)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation.estimate_channel"]], "filter_length (rolledoffsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.filter_length"]], "guard_interval (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.guard_interval"]], "hermespy.modem.waveform_single_carrier": [[62, "module-hermespy.modem.waveform_single_carrier"]], "map() (filteredsinglecarrierwaveform method)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.map"]], "modulate() (filteredsinglecarrierwaveform method)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulate"]], "modulation_order (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulation_order"]], "num_data_symbols (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_data_symbols"]], "num_guard_samples (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_guard_samples"]], "num_pilot_samples (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_pilot_samples"]], "num_postamble_symbols (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_postamble_symbols"]], "num_preamble_symbols (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_preamble_symbols"]], "pilot_rate (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_rate"]], "pilot_signal (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_signal"]], "plot_filter() (filteredsinglecarrierwaveform method)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter"]], "plot_filter_correlation() (filteredsinglecarrierwaveform method)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter_correlation"]], "power (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.power"]], "property_blacklist (fmcwwaveform attribute)": [[62, "hermespy.modem.waveform_single_carrier.FMCWWaveform.property_blacklist"]], "relative_bandwidth (rectangularwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.RectangularWaveform.relative_bandwidth"]], "relative_bandwidth (rolledoffsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.relative_bandwidth"]], "roll_off (rolledoffsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.roll_off"]], "samples_in_frame (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.samples_in_frame"]], "sampling_rate (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.sampling_rate"]], "symbol_energy (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_energy"]], "symbol_rate (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_rate"]], "symbols_per_frame (filteredsinglecarrierwaveform property)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbols_per_frame"]], "unmap() (filteredsinglecarrierwaveform method)": [[62, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.unmap"]], "yaml_tag (fmcwwaveform attribute)": [[62, "hermespy.modem.waveform_single_carrier.FMCWWaveform.yaml_tag"]], "yaml_tag (raisedcosinewaveform attribute)": [[62, "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform.yaml_tag"]], "yaml_tag (rectangularwaveform attribute)": [[62, "hermespy.modem.waveform_single_carrier.RectangularWaveform.yaml_tag"]], "yaml_tag (rootraisedcosinewaveform attribute)": [[62, "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform.yaml_tag"]], "yaml_tag (singlecarriercorrelationsynchronization attribute)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierCorrelationSynchronization.yaml_tag"]], "yaml_tag (singlecarrieridealchannelestimation attribute)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation.yaml_tag"]], "yaml_tag (singlecarrierleastsquareschannelestimation attribute)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation.yaml_tag"]], "yaml_tag (singlecarrierminimummeansquarechannelequalization attribute)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization.yaml_tag"]], "yaml_tag (singlecarrierzeroforcingchannelequalization attribute)": [[62, "hermespy.modem.waveform_single_carrier.SingleCarrierZeroForcingChannelEqualization.yaml_tag"]], "dft (class in hermespy.precoding.dft)": [[64, "hermespy.precoding.dft.DFT"]], "decode() (dft method)": [[64, "hermespy.precoding.dft.DFT.decode"]], "encode() (dft method)": [[64, "hermespy.precoding.dft.DFT.encode"]], "hermespy.precoding.dft": [[64, "module-hermespy.precoding.dft"]], "num_input_streams (dft property)": [[64, "hermespy.precoding.dft.DFT.num_input_streams"]], "num_output_streams (dft property)": [[64, "hermespy.precoding.dft.DFT.num_output_streams"]], "yaml_tag (dft attribute)": [[64, "hermespy.precoding.dft.DFT.yaml_tag"]], "precoder (class in hermespy.precoding.precoding)": [[65, "hermespy.precoding.precoding.Precoder"]], "precodertype (in module hermespy.precoding.precoding)": [[65, "hermespy.precoding.precoding.PrecoderType"]], "precoding (class in hermespy.precoding.precoding)": [[65, "hermespy.precoding.precoding.Precoding"]], "__modem (precoding attribute)": [[65, "hermespy.precoding.precoding.Precoding.__modem"]], "__precoders (precoding attribute)": [[65, "hermespy.precoding.precoding.Precoding.__precoders"]], "from_yaml() (precoding class method)": [[65, "hermespy.precoding.precoding.Precoding.from_yaml"]], "hermespy.precoding.precoding": [[65, "module-hermespy.precoding.precoding"]], "modem (precoding property)": [[65, "hermespy.precoding.precoding.Precoding.modem"]], "num_input_streams (precoder property)": [[65, "hermespy.precoding.precoding.Precoder.num_input_streams"]], "num_input_streams (precoding property)": [[65, "hermespy.precoding.precoding.Precoding.num_input_streams"]], "num_output_streams (precoder property)": [[65, "hermespy.precoding.precoding.Precoder.num_output_streams"]], "num_output_streams (precoding property)": [[65, "hermespy.precoding.precoding.Precoding.num_output_streams"]], "pop_precoder() (precoding method)": [[65, "hermespy.precoding.precoding.Precoding.pop_precoder"]], "precoding (precoder property)": [[65, "hermespy.precoding.precoding.Precoder.precoding"]], "rate (precoder property)": [[65, "hermespy.precoding.precoding.Precoder.rate"]], "rate (precoding property)": [[65, "hermespy.precoding.precoding.Precoding.rate"]], "required_inputs() (precoding method)": [[65, "hermespy.precoding.precoding.Precoding.required_inputs"]], "required_num_input_streams (precoder property)": [[65, "hermespy.precoding.precoding.Precoder.required_num_input_streams"]], "required_num_output_streams (precoder property)": [[65, "hermespy.precoding.precoding.Precoder.required_num_output_streams"]], "required_outputs() (precoding method)": [[65, "hermespy.precoding.precoding.Precoding.required_outputs"]], "to_yaml() (precoding class method)": [[65, "hermespy.precoding.precoding.Precoding.to_yaml"]], "yaml_tag (precoder attribute)": [[65, "hermespy.precoding.precoding.Precoder.yaml_tag"]], "maximumratiocombining (class in hermespy.precoding.ratio_combining)": [[66, "hermespy.precoding.ratio_combining.MaximumRatioCombining"]], "decode() (maximumratiocombining method)": [[66, "hermespy.precoding.ratio_combining.MaximumRatioCombining.decode"]], "encode() (maximumratiocombining method)": [[66, "hermespy.precoding.ratio_combining.MaximumRatioCombining.encode"]], "hermespy.precoding.ratio_combining": [[66, "module-hermespy.precoding.ratio_combining"]], "num_input_streams (maximumratiocombining property)": [[66, "hermespy.precoding.ratio_combining.MaximumRatioCombining.num_input_streams"]], "num_output_streams (maximumratiocombining property)": [[66, "hermespy.precoding.ratio_combining.MaximumRatioCombining.num_output_streams"]], "yaml_tag (maximumratiocombining attribute)": [[66, "hermespy.precoding.ratio_combining.MaximumRatioCombining.yaml_tag"]], "singlecarrier (class in hermespy.precoding.single_carrier)": [[67, "hermespy.precoding.single_carrier.SingleCarrier"]], "decode() (singlecarrier method)": [[67, "hermespy.precoding.single_carrier.SingleCarrier.decode"]], "encode() (singlecarrier method)": [[67, "hermespy.precoding.single_carrier.SingleCarrier.encode"]], "hermespy.precoding.single_carrier": [[67, "module-hermespy.precoding.single_carrier"]], "num_input_streams (singlecarrier property)": [[67, "hermespy.precoding.single_carrier.SingleCarrier.num_input_streams"]], "num_output_streams (singlecarrier property)": [[67, "hermespy.precoding.single_carrier.SingleCarrier.num_output_streams"]], "yaml_tag (singlecarrier attribute)": [[67, "hermespy.precoding.single_carrier.SingleCarrier.yaml_tag"]], "spacetimeblockcoding (class in hermespy.precoding.space_time_block_coding)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding"]], "decode() (spacetimeblockcoding method)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding.decode"]], "encode() (spacetimeblockcoding method)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding.encode"]], "from_yaml() (spacetimeblockcoding class method)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding.from_yaml"]], "hermespy.precoding.space_time_block_coding": [[68, "module-hermespy.precoding.space_time_block_coding"]], "num_input_streams (spacetimeblockcoding property)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding.num_input_streams"]], "num_output_streams (spacetimeblockcoding property)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding.num_output_streams"]], "to_yaml() (spacetimeblockcoding class method)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding.to_yaml"]], "yaml_tag (spacetimeblockcoding attribute)": [[68, "hermespy.precoding.space_time_block_coding.SpaceTimeBlockCoding.yaml_tag"]], "spatialmultiplexing (class in hermespy.precoding.spatial_multiplexing)": [[69, "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing"]], "decode() (spatialmultiplexing method)": [[69, "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing.decode"]], "encode() (spatialmultiplexing method)": [[69, "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing.encode"]], "hermespy.precoding.spatial_multiplexing": [[69, "module-hermespy.precoding.spatial_multiplexing"]], "num_input_streams (spatialmultiplexing property)": [[69, "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing.num_input_streams"]], "num_output_streams (spatialmultiplexing property)": [[69, "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing.num_output_streams"]], "rate (spatialmultiplexing property)": [[69, "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing.rate"]], "yaml_tag (spatialmultiplexing attribute)": [[69, "hermespy.precoding.spatial_multiplexing.SpatialMultiplexing.yaml_tag"]], "receivestreamcoding (class in hermespy.precoding.stream_precoding)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamCoding"]], "receivestreamdecoder (class in hermespy.precoding.stream_precoding)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder"]], "transmitstreamcoding (class in hermespy.precoding.stream_precoding)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamCoding"]], "transmitstreamencoder (class in hermespy.precoding.stream_precoding)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamEncoder"]], "decode() (receivestreamcoding method)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamCoding.decode"]], "decode_streams() (receivestreamdecoder method)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.decode_streams"]], "encode() (transmitstreamcoding method)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamCoding.encode"]], "encode_streams() (transmitstreamencoder method)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.encode_streams"]], "hermespy.precoding.stream_precoding": [[70, "module-hermespy.precoding.stream_precoding"]], "num_input_streams (receivestreamdecoder property)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_input_streams"]], "num_input_streams (transmitstreamencoder property)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_input_streams"]], "num_output_streams (receivestreamdecoder property)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_output_streams"]], "num_output_streams (transmitstreamencoder property)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_output_streams"]], "num_receive_input_streams (receivestreamdecoder property)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_receive_input_streams"]], "num_receive_output_streams (receivestreamdecoder property)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_receive_output_streams"]], "num_transmit_input_streams (transmitstreamencoder property)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_transmit_input_streams"]], "num_transmit_output_streams (transmitstreamencoder property)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_transmit_output_streams"]], "yaml_tag (receivestreamcoding attribute)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamCoding.yaml_tag"]], "yaml_tag (receivestreamdecoder attribute)": [[70, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.yaml_tag"]], "yaml_tag (transmitstreamcoding attribute)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamCoding.yaml_tag"]], "yaml_tag (transmitstreamencoder attribute)": [[70, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.yaml_tag"]], "symbolprecoder (class in hermespy.precoding.symbol_precoding)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoder"]], "symbolprecoding (class in hermespy.precoding.symbol_precoding)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoding"]], "decode() (symbolprecoder method)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoder.decode"]], "decode() (symbolprecoding method)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoding.decode"]], "encode() (symbolprecoder method)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoder.encode"]], "encode() (symbolprecoding method)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoding.encode"]], "hermespy.precoding.symbol_precoding": [[71, "module-hermespy.precoding.symbol_precoding"]], "yaml_tag (symbolprecoder attribute)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoder.yaml_tag"]], "yaml_tag (symbolprecoding attribute)": [[71, "hermespy.precoding.symbol_precoding.SymbolPrecoding.yaml_tag"]], "radarcube (class in hermespy.radar.cube)": [[73, "hermespy.radar.cube.RadarCube"]], "angle_bins (radarcube attribute)": [[73, "hermespy.radar.cube.RadarCube.angle_bins"]], "data (radarcube attribute)": [[73, "hermespy.radar.cube.RadarCube.data"]], "hermespy.radar.cube": [[73, "module-hermespy.radar.cube"]], "normalize_power() (radarcube method)": [[73, "hermespy.radar.cube.RadarCube.normalize_power"]], "plot_range() (radarcube method)": [[73, "hermespy.radar.cube.RadarCube.plot_range"]], "plot_range_velocity() (radarcube method)": [[73, "hermespy.radar.cube.RadarCube.plot_range_velocity"]], "range_bins (radarcube attribute)": [[73, "hermespy.radar.cube.RadarCube.range_bins"]], "velocity_bins (radarcube attribute)": [[73, "hermespy.radar.cube.RadarCube.velocity_bins"]], "fromspherical() (pointdetection class method)": [[74, "hermespy.radar.detection.PointDetection.FromSpherical"]], "maxdetector (class in hermespy.radar.detection)": [[74, "hermespy.radar.detection.MaxDetector"]], "pointdetection (class in hermespy.radar.detection)": [[74, "hermespy.radar.detection.PointDetection"]], "radardetector (class in hermespy.radar.detection)": [[74, "hermespy.radar.detection.RadarDetector"]], "radarpointcloud (class in hermespy.radar.detection)": [[74, "hermespy.radar.detection.RadarPointCloud"]], "thresholddetector (class in hermespy.radar.detection)": [[74, "hermespy.radar.detection.ThresholdDetector"]], "add_point() (radarpointcloud method)": [[74, "hermespy.radar.detection.RadarPointCloud.add_point"]], "detect() (maxdetector method)": [[74, "hermespy.radar.detection.MaxDetector.detect"]], "detect() (radardetector method)": [[74, "hermespy.radar.detection.RadarDetector.detect"]], "detect() (thresholddetector method)": [[74, "hermespy.radar.detection.ThresholdDetector.detect"]], "hermespy.radar.detection": [[74, "module-hermespy.radar.detection"]], "min_power (thresholddetector property)": [[74, "hermespy.radar.detection.ThresholdDetector.min_power"]], "num_points (radarpointcloud property)": [[74, "hermespy.radar.detection.RadarPointCloud.num_points"]], "points (radarpointcloud attribute)": [[74, "hermespy.radar.detection.RadarPointCloud.points"]], "position (pointdetection property)": [[74, "hermespy.radar.detection.PointDetection.position"]], "power (pointdetection property)": [[74, "hermespy.radar.detection.PointDetection.power"]], "velocity (pointdetection property)": [[74, "hermespy.radar.detection.PointDetection.velocity"]], "yaml_tag (maxdetector attribute)": [[74, "hermespy.radar.detection.MaxDetector.yaml_tag"]], "yaml_tag (thresholddetector attribute)": [[74, "hermespy.radar.detection.ThresholdDetector.yaml_tag"]], "detectionprobartifact (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.DetectionProbArtifact"]], "detectionprobevaluator (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.DetectionProbEvaluator"]], "detectionprobabilityevaluation (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.DetectionProbabilityEvaluation"]], "radarevaluator (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RadarEvaluator"]], "receiveroperatingcharacteristic (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic"]], "rocartifact (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RocArtifact"]], "rocevaluation (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RocEvaluation"]], "rocevaluationresult (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RocEvaluationResult"]], "rootmeansquareartifact (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RootMeanSquareArtifact"]], "rootmeansquareerror (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RootMeanSquareError"]], "rootmeansquareerrorresult (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RootMeanSquareErrorResult"]], "rootmeansquareevaluation (class in hermespy.radar.evaluators)": [[75, "hermespy.radar.evaluators.RootMeanSquareEvaluation"]], "abbreviation (detectionprobevaluator property)": [[75, "hermespy.radar.evaluators.DetectionProbEvaluator.abbreviation"]], "abbreviation (receiveroperatingcharacteristic property)": [[75, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.abbreviation"]], "abbreviation (rootmeansquareerror property)": [[75, "hermespy.radar.evaluators.RootMeanSquareError.abbreviation"]], "artifact() (detectionprobabilityevaluation method)": [[75, "hermespy.radar.evaluators.DetectionProbabilityEvaluation.artifact"]], "artifact() (rocevaluation method)": [[75, "hermespy.radar.evaluators.RocEvaluation.artifact"]], "artifact() (rootmeansquareevaluation method)": [[75, "hermespy.radar.evaluators.RootMeanSquareEvaluation.artifact"]], "cummulation (rootmeansquareartifact attribute)": [[75, "hermespy.radar.evaluators.RootMeanSquareArtifact.cummulation"]], "data_h0 (rocevaluation attribute)": [[75, "hermespy.radar.evaluators.RocEvaluation.data_h0"]], "data_h1 (rocevaluation attribute)": [[75, "hermespy.radar.evaluators.RocEvaluation.data_h1"]], "evaluate() (detectionprobevaluator method)": [[75, "hermespy.radar.evaluators.DetectionProbEvaluator.evaluate"]], "evaluate() (receiveroperatingcharacteristic method)": [[75, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.evaluate"]], "evaluate() (rootmeansquareerror method)": [[75, "hermespy.radar.evaluators.RootMeanSquareError.evaluate"]], "evaluation (detectionprobabilityevaluation attribute)": [[75, "hermespy.radar.evaluators.DetectionProbabilityEvaluation.evaluation"]], "generate_result() (detectionprobevaluator method)": [[75, "hermespy.radar.evaluators.DetectionProbEvaluator.generate_result"]], "generate_result() (radarevaluator method)": [[75, "hermespy.radar.evaluators.RadarEvaluator.generate_result"]], "generate_result() (receiveroperatingcharacteristic method)": [[75, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.generate_result"]], "generate_result() (rootmeansquareerror method)": [[75, "hermespy.radar.evaluators.RootMeanSquareError.generate_result"]], "h0_value (rocartifact property)": [[75, "hermespy.radar.evaluators.RocArtifact.h0_value"]], "h1_value (rocartifact property)": [[75, "hermespy.radar.evaluators.RocArtifact.h1_value"]], "hermespy.radar.evaluators": [[75, "module-hermespy.radar.evaluators"]], "num_errors (rootmeansquareartifact attribute)": [[75, "hermespy.radar.evaluators.RootMeanSquareArtifact.num_errors"]], "plot() (rocevaluationresult method)": [[75, "hermespy.radar.evaluators.RocEvaluationResult.plot"]], "plot_surface (rootmeansquareerrorresult attribute)": [[75, "hermespy.radar.evaluators.RootMeanSquareErrorResult.plot_surface"]], "radar_channel (radarevaluator property)": [[75, "hermespy.radar.evaluators.RadarEvaluator.radar_channel"]], "receiving_radar (radarevaluator property)": [[75, "hermespy.radar.evaluators.RadarEvaluator.receiving_radar"]], "receiving_radar_null_hypothesis (receiveroperatingcharacteristic property)": [[75, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.receiving_radar_null_hypothesis"]], "title (detectionprobevaluator property)": [[75, "hermespy.radar.evaluators.DetectionProbEvaluator.title"]], "title (receiveroperatingcharacteristic property)": [[75, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.title"]], "title (rootmeansquareerror property)": [[75, "hermespy.radar.evaluators.RootMeanSquareError.title"]], "to_array() (rocevaluationresult method)": [[75, "hermespy.radar.evaluators.RocEvaluationResult.to_array"]], "to_scalar() (detectionprobartifact method)": [[75, "hermespy.radar.evaluators.DetectionProbArtifact.to_scalar"]], "to_scalar() (rootmeansquareartifact method)": [[75, "hermespy.radar.evaluators.RootMeanSquareArtifact.to_scalar"]], "yaml_tag (detectionprobevaluator attribute)": [[75, "hermespy.radar.evaluators.DetectionProbEvaluator.yaml_tag"]], "yaml_tag (receiveroperatingcharacteristic attribute)": [[75, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.yaml_tag"]], "fmcw (class in hermespy.radar.fmcw)": [[76, "hermespy.radar.fmcw.FMCW"]], "adc_sampling_rate (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.adc_sampling_rate"]], "bandwidth (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.bandwidth"]], "chirp_duration (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.chirp_duration"]], "doppler_resolution (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.doppler_resolution"]], "energy (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.energy"]], "estimate() (fmcw method)": [[76, "hermespy.radar.fmcw.FMCW.estimate"]], "frame_duration (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.frame_duration"]], "hermespy.radar.fmcw": [[76, "module-hermespy.radar.fmcw"]], "max_range (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.max_range"]], "max_velocity (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.max_velocity"]], "num_chirps (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.num_chirps"]], "ping() (fmcw method)": [[76, "hermespy.radar.fmcw.FMCW.ping"]], "power (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.power"]], "pulse_rep_interval (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.pulse_rep_interval"]], "range_bins (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.range_bins"]], "range_resolution (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.range_resolution"]], "sampling_rate (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.sampling_rate"]], "slope (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.slope"]], "velocity_bins (fmcw property)": [[76, "hermespy.radar.fmcw.FMCW.velocity_bins"]], "yaml_tag (fmcw attribute)": [[76, "hermespy.radar.fmcw.FMCW.yaml_tag"]], "radar (class in hermespy.radar.radar)": [[77, "hermespy.radar.radar.Radar"]], "radarreception (class in hermespy.radar.radar)": [[77, "hermespy.radar.radar.RadarReception"]], "radartransmission (class in hermespy.radar.radar)": [[77, "hermespy.radar.radar.RadarTransmission"]], "radarwaveform (class in hermespy.radar.radar)": [[77, "hermespy.radar.radar.RadarWaveform"]], "cloud (radar property)": [[77, "hermespy.radar.radar.Radar.cloud"]], "cloud (radarreception attribute)": [[77, "hermespy.radar.radar.RadarReception.cloud"]], "cube (radar property)": [[77, "hermespy.radar.radar.Radar.cube"]], "cube (radarreception attribute)": [[77, "hermespy.radar.radar.RadarReception.cube"]], "detector (radar property)": [[77, "hermespy.radar.radar.Radar.detector"]], "energy (radarwaveform property)": [[77, "hermespy.radar.radar.RadarWaveform.energy"]], "estimate() (radarwaveform method)": [[77, "hermespy.radar.radar.RadarWaveform.estimate"]], "frame_duration (radar property)": [[77, "hermespy.radar.radar.Radar.frame_duration"]], "hermespy.radar.radar": [[77, "module-hermespy.radar.radar"]], "noise_power() (radar method)": [[77, "hermespy.radar.radar.Radar.noise_power"]], "ping() (radarwaveform method)": [[77, "hermespy.radar.radar.RadarWaveform.ping"]], "power (radarwaveform property)": [[77, "hermespy.radar.radar.RadarWaveform.power"]], "property_blacklist (radar attribute)": [[77, "hermespy.radar.radar.Radar.property_blacklist"]], "range_bins (radarwaveform property)": [[77, "hermespy.radar.radar.RadarWaveform.range_bins"]], "receive() (radar method)": [[77, "hermespy.radar.radar.Radar.receive"]], "receive_beamformer (radar property)": [[77, "hermespy.radar.radar.Radar.receive_beamformer"]], "sampling_rate (radar property)": [[77, "hermespy.radar.radar.Radar.sampling_rate"]], "sampling_rate (radarwaveform property)": [[77, "hermespy.radar.radar.RadarWaveform.sampling_rate"]], "signal (radartransmission attribute)": [[77, "hermespy.radar.radar.RadarTransmission.signal"]], "transmit() (radar method)": [[77, "hermespy.radar.radar.Radar.transmit"]], "transmit_beamformer (radar property)": [[77, "hermespy.radar.radar.Radar.transmit_beamformer"]], "velocity_bins (radarwaveform property)": [[77, "hermespy.radar.radar.RadarWaveform.velocity_bins"]], "waveform (radar property)": [[77, "hermespy.radar.radar.Radar.waveform"]], "yaml_tag (radar attribute)": [[77, "hermespy.radar.radar.Radar.yaml_tag"]], "analogdigitalconverter (class in hermespy.simulation.analog_digital_converter)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter"]], "automaticgaincontrol (class in hermespy.simulation.analog_digital_converter)": [[79, "hermespy.simulation.analog_digital_converter.AutomaticGainControl"]], "gain (class in hermespy.simulation.analog_digital_converter)": [[79, "hermespy.simulation.analog_digital_converter.Gain"]], "gaincontroltype (class in hermespy.simulation.analog_digital_converter)": [[79, "hermespy.simulation.analog_digital_converter.GainControlType"]], "max_amplitude (gaincontroltype attribute)": [[79, "hermespy.simulation.analog_digital_converter.GainControlType.MAX_AMPLITUDE"]], "mid_riser (quantizertype attribute)": [[79, "hermespy.simulation.analog_digital_converter.QuantizerType.MID_RISER"]], "mid_tread (quantizertype attribute)": [[79, "hermespy.simulation.analog_digital_converter.QuantizerType.MID_TREAD"]], "none (gaincontroltype attribute)": [[79, "hermespy.simulation.analog_digital_converter.GainControlType.NONE"]], "quantizertype (class in hermespy.simulation.analog_digital_converter)": [[79, "hermespy.simulation.analog_digital_converter.QuantizerType"]], "rms_amplitude (gaincontroltype attribute)": [[79, "hermespy.simulation.analog_digital_converter.GainControlType.RMS_AMPLITUDE"]], "agc_type (automaticgaincontrol property)": [[79, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.agc_type"]], "backoff (automaticgaincontrol property)": [[79, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.backoff"]], "convert() (analogdigitalconverter method)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.convert"]], "divide_signal() (gain method)": [[79, "hermespy.simulation.analog_digital_converter.Gain.divide_signal"]], "from_yaml() (automaticgaincontrol class method)": [[79, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.from_yaml"]], "gain (analogdigitalconverter attribute)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.gain"]], "gain (gain property)": [[79, "hermespy.simulation.analog_digital_converter.Gain.gain"]], "hermespy.simulation.analog_digital_converter": [[79, "module-hermespy.simulation.analog_digital_converter"]], "multiply_signal() (automaticgaincontrol method)": [[79, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.multiply_signal"]], "multiply_signal() (gain method)": [[79, "hermespy.simulation.analog_digital_converter.Gain.multiply_signal"]], "num_quantization_bits (analogdigitalconverter property)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.num_quantization_bits"]], "num_quantization_levels (analogdigitalconverter property)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.num_quantization_levels"]], "plot_quantizer() (analogdigitalconverter method)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.plot_quantizer"]], "property_blacklist (gaincontroltype attribute)": [[79, "hermespy.simulation.analog_digital_converter.GainControlType.property_blacklist"]], "property_blacklist (quantizertype attribute)": [[79, "hermespy.simulation.analog_digital_converter.QuantizerType.property_blacklist"]], "quantizer_type (analogdigitalconverter property)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.quantizer_type"]], "serialized_attributes (gaincontroltype attribute)": [[79, "hermespy.simulation.analog_digital_converter.GainControlType.serialized_attributes"]], "serialized_attributes (quantizertype attribute)": [[79, "hermespy.simulation.analog_digital_converter.QuantizerType.serialized_attributes"]], "to_yaml() (automaticgaincontrol class method)": [[79, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.to_yaml"]], "to_yaml() (gain class method)": [[79, "hermespy.simulation.analog_digital_converter.Gain.to_yaml"]], "yaml_tag (analogdigitalconverter attribute)": [[79, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.yaml_tag"]], "yaml_tag (automaticgaincontrol attribute)": [[79, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.yaml_tag"]], "yaml_tag (gain attribute)": [[79, "hermespy.simulation.analog_digital_converter.Gain.yaml_tag"]], "yaml_tag (gaincontroltype attribute)": [[79, "hermespy.simulation.analog_digital_converter.GainControlType.yaml_tag"]], "yaml_tag (quantizertype attribute)": [[79, "hermespy.simulation.analog_digital_converter.QuantizerType.yaml_tag"]], "coupling (class in hermespy.simulation.coupling.coupling)": [[80, "hermespy.simulation.coupling.coupling.Coupling"]], "device (coupling property)": [[80, "hermespy.simulation.coupling.coupling.Coupling.device"]], "hermespy.simulation.coupling.coupling": [[80, "module-hermespy.simulation.coupling.coupling"]], "receive() (coupling method)": [[80, "hermespy.simulation.coupling.coupling.Coupling.receive"]], "transmit() (coupling method)": [[80, "hermespy.simulation.coupling.coupling.Coupling.transmit"]], "impedancecoupling (class in hermespy.simulation.coupling.impedance)": [[81, "hermespy.simulation.coupling.impedance.ImpedanceCoupling"]], "hermespy.simulation.coupling.impedance": [[81, "module-hermespy.simulation.coupling.impedance"]], "matching_impedance (impedancecoupling property)": [[81, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.matching_impedance"]], "receive_correlation (impedancecoupling property)": [[81, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_correlation"]], "receive_impedance (impedancecoupling property)": [[81, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_impedance"]], "transmit_correlation (impedancecoupling property)": [[81, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_correlation"]], "transmit_impedance (impedancecoupling property)": [[81, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_impedance"]], "yaml_tag (impedancecoupling attribute)": [[81, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.yaml_tag"]], "perfectcoupling (class in hermespy.simulation.coupling.perfect)": [[82, "hermespy.simulation.coupling.perfect.PerfectCoupling"]], "hermespy.simulation.coupling.perfect": [[82, "module-hermespy.simulation.coupling.perfect"]], "yaml_tag (perfectcoupling attribute)": [[82, "hermespy.simulation.coupling.perfect.PerfectCoupling.yaml_tag"]], "isolation (class in hermespy.simulation.isolation.isolation)": [[83, "hermespy.simulation.isolation.isolation.Isolation"]], "device (isolation property)": [[83, "hermespy.simulation.isolation.isolation.Isolation.device"]], "hermespy.simulation.isolation.isolation": [[83, "module-hermespy.simulation.isolation.isolation"]], "leak() (isolation method)": [[83, "hermespy.simulation.isolation.isolation.Isolation.leak"]], "hermespy.simulation.isolation.impedance": [[84, "module-hermespy.simulation.isolation.impedance"]], "perfectisolation (class in hermespy.simulation.isolation.perfect)": [[85, "hermespy.simulation.isolation.perfect.PerfectIsolation"]], "hermespy.simulation.isolation.perfect": [[85, "module-hermespy.simulation.isolation.perfect"]], "yaml_tag (perfectisolation attribute)": [[85, "hermespy.simulation.isolation.perfect.PerfectIsolation.yaml_tag"]], "specificisolation (class in hermespy.simulation.isolation.specific)": [[86, "hermespy.simulation.isolation.specific.SpecificIsolation"]], "hermespy.simulation.isolation.specific": [[86, "module-hermespy.simulation.isolation.specific"]], "isolation (specificisolation property)": [[86, "hermespy.simulation.isolation.specific.SpecificIsolation.isolation"]], "yaml_tag (specificisolation attribute)": [[86, "hermespy.simulation.isolation.specific.SpecificIsolation.yaml_tag"]], "awgn (class in hermespy.simulation.noise.noise)": [[87, "hermespy.simulation.noise.noise.AWGN"]], "noise (class in hermespy.simulation.noise.noise)": [[87, "hermespy.simulation.noise.noise.Noise"]], "add() (awgn method)": [[87, "hermespy.simulation.noise.noise.AWGN.add"]], "add() (noise method)": [[87, "hermespy.simulation.noise.noise.Noise.add"]], "hermespy.simulation.noise.noise": [[87, "module-hermespy.simulation.noise.noise"]], "power (noise property)": [[87, "hermespy.simulation.noise.noise.Noise.power"]], "property_blacklist (awgn attribute)": [[87, "hermespy.simulation.noise.noise.AWGN.property_blacklist"]], "yaml_tag (awgn attribute)": [[87, "hermespy.simulation.noise.noise.AWGN.yaml_tag"]], "rfchain (class in hermespy.simulation.rf_chain.rf_chain)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain"]], "add_iq_imbalance() (rfchain method)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.add_iq_imbalance"]], "amplitude_imbalance (rfchain property)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.amplitude_imbalance"]], "hermespy.simulation.rf_chain.rf_chain": [[88, "module-hermespy.simulation.rf_chain.rf_chain"]], "phase_noise (rfchain property)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_noise"]], "phase_offset (rfchain property)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_offset"]], "power_amplifier (rfchain property)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.power_amplifier"]], "receive() (rfchain method)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.receive"]], "to_yaml() (rfchain class method)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.to_yaml"]], "transmit() (rfchain method)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.transmit"]], "yaml_tag (rfchain attribute)": [[88, "hermespy.simulation.rf_chain.rf_chain.RfChain.yaml_tag"]], "leakage (class in hermespy.simulation.rf_chain.leakage)": [[89, "hermespy.simulation.rf_chain.leakage.Leakage"]], "linearleakage (class in hermespy.simulation.rf_chain.leakage)": [[89, "hermespy.simulation.rf_chain.leakage.LinearLeakage"]], "hermespy.simulation.rf_chain.leakage": [[89, "module-hermespy.simulation.rf_chain.leakage"]], "receive() (leakage method)": [[89, "hermespy.simulation.rf_chain.leakage.Leakage.receive"]], "transmit() (leakage method)": [[89, "hermespy.simulation.rf_chain.leakage.Leakage.transmit"]], "nophasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[90, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise"]], "phasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[90, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise"]], "add_noise() (nophasenoise method)": [[90, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.add_noise"]], "add_noise() (phasenoise method)": [[90, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise.add_noise"]], "hermespy.simulation.rf_chain.phase_noise": [[90, "module-hermespy.simulation.rf_chain.phase_noise"]], "yaml_tag (nophasenoise attribute)": [[90, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.yaml_tag"]], "clippingpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[91, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier"]], "custompoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[91, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier"]], "poweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier"]], "rapppoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[91, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier"]], "salehpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier"]], "adjust_power (clippingpoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.adjust_power"]], "adjust_power (poweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.adjust_power"]], "adjust_power (rapppoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.adjust_power"]], "amplitude_alpha (salehpoweramplifier property)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_alpha"]], "amplitude_beta (salehpoweramplifier property)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_beta"]], "gain (custompoweramplifier property)": [[91, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.gain"]], "hermespy.simulation.rf_chain.power_amplifier": [[91, "module-hermespy.simulation.rf_chain.power_amplifier"]], "input (custompoweramplifier property)": [[91, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.input"]], "model() (clippingpoweramplifier method)": [[91, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.model"]], "model() (custompoweramplifier method)": [[91, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.model"]], "model() (poweramplifier method)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.model"]], "model() (rapppoweramplifier method)": [[91, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.model"]], "model() (salehpoweramplifier method)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.model"]], "phase (custompoweramplifier property)": [[91, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.phase"]], "phase_alpha (salehpoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_alpha"]], "phase_beta (salehpoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_beta"]], "plot() (poweramplifier method)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.plot"]], "saturation_amplitude (poweramplifier property)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.saturation_amplitude"]], "send() (poweramplifier method)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.send"]], "serialized_attributes (custompoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.serialized_attributes"]], "serialized_attributes (poweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.serialized_attributes"]], "serialized_attributes (salehpoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.serialized_attributes"]], "smoothness_factor (rapppoweramplifier property)": [[91, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.smoothness_factor"]], "yaml_tag (clippingpoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.yaml_tag"]], "yaml_tag (custompoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.yaml_tag"]], "yaml_tag (poweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.yaml_tag"]], "yaml_tag (rapppoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.yaml_tag"]], "yaml_tag (salehpoweramplifier attribute)": [[91, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.yaml_tag"]], "simulateddevice (class in hermespy.simulation.simulated_device)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice"]], "adc (simulateddevice attribute)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.adc"]], "attached (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.attached"]], "carrier_frequency (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.carrier_frequency"]], "coupling (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.coupling"]], "hermespy.simulation.simulated_device": [[92, "module-hermespy.simulation.simulated_device"]], "isolation (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.isolation"]], "noise (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.noise"]], "operator_separation (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.operator_separation"]], "orientation (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.orientation"]], "property_blacklist (simulateddevice attribute)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.property_blacklist"]], "receive() (simulateddevice method)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.receive"]], "rf_chain (simulateddevice attribute)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.rf_chain"]], "sampling_rate (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.sampling_rate"]], "scenario (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.scenario"]], "serialized_attribute (simulateddevice attribute)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.serialized_attribute"]], "snr (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.snr"]], "topology (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.topology"]], "transmit() (simulateddevice method)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.transmit"]], "velocity (simulateddevice property)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.velocity"]], "yaml_tag (simulateddevice attribute)": [[92, "hermespy.simulation.simulated_device.SimulatedDevice.yaml_tag"]], "simulation (class in hermespy.simulation.simulation)": [[93, "hermespy.simulation.simulation.Simulation"]], "simulationrunner (class in hermespy.simulation.simulation)": [[93, "hermespy.simulation.simulation.SimulationRunner"]], "simulationscenario (class in hermespy.simulation.simulation)": [[93, "hermespy.simulation.simulation.SimulationScenario"]], "add_device() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.add_device"]], "arriving_channels() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.arriving_channels"]], "channel() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.channel"]], "channels (simulationscenario property)": [[93, "hermespy.simulation.simulation.SimulationScenario.channels"]], "departing_channels() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.departing_channels"]], "dump_results (simulation attribute)": [[93, "hermespy.simulation.simulation.Simulation.dump_results"]], "from_yaml() (simulation class method)": [[93, "hermespy.simulation.simulation.Simulation.from_yaml"]], "hermespy.simulation.simulation": [[93, "module-hermespy.simulation.simulation"]], "new_device() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.new_device"]], "num_drops (simulation property)": [[93, "hermespy.simulation.simulation.Simulation.num_drops"]], "num_samples (simulation property)": [[93, "hermespy.simulation.simulation.Simulation.num_samples"]], "plot_results (simulation attribute)": [[93, "hermespy.simulation.simulation.Simulation.plot_results"]], "propagate() (simulationrunner method)": [[93, "hermespy.simulation.simulation.SimulationRunner.propagate"]], "propagate() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.propagate"]], "receive_devices() (simulationrunner method)": [[93, "hermespy.simulation.simulation.SimulationRunner.receive_devices"]], "receive_devices() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.receive_devices"]], "receive_operators() (simulationrunner method)": [[93, "hermespy.simulation.simulation.SimulationRunner.receive_operators"]], "run() (simulation method)": [[93, "hermespy.simulation.simulation.Simulation.run"]], "set_channel() (simulationscenario method)": [[93, "hermespy.simulation.simulation.SimulationScenario.set_channel"]], "snr (simulationscenario property)": [[93, "hermespy.simulation.simulation.SimulationScenario.snr"]], "snr_type (simulationscenario property)": [[93, "hermespy.simulation.simulation.SimulationScenario.snr_type"]], "to_yaml() (simulation class method)": [[93, "hermespy.simulation.simulation.Simulation.to_yaml"]], "transmit_devices() (simulationrunner method)": [[93, "hermespy.simulation.simulation.SimulationRunner.transmit_devices"]], "transmit_operators() (simulationrunner method)": [[93, "hermespy.simulation.simulation.SimulationRunner.transmit_operators"]], "yaml_tag (simulation attribute)": [[93, "hermespy.simulation.simulation.Simulation.yaml_tag"]], "amplitude (dbconversiontype attribute)": [[95, "hermespy.tools.math.DbConversionType.AMPLITUDE"]], "dbconversiontype (class in hermespy.tools.math)": [[95, "hermespy.tools.math.DbConversionType"]], "hilly (dbconversiontype attribute)": [[95, "hermespy.tools.math.DbConversionType.HILLY"]], "power (dbconversiontype attribute)": [[95, "hermespy.tools.math.DbConversionType.POWER"]], "db2lin() (in module hermespy.tools.math)": [[95, "hermespy.tools.math.db2lin"]], "hermespy.tools.math": [[95, "module-hermespy.tools.math"]], "lin2db() (in module hermespy.tools.math)": [[95, "hermespy.tools.math.lin2db"]], "marcum_q() (in module hermespy.tools.math)": [[95, "hermespy.tools.math.marcum_q"]], "rms_value() (in module hermespy.tools.math)": [[95, "hermespy.tools.math.rms_value"]], "rotation_matrix() (in module hermespy.tools.math)": [[95, "hermespy.tools.math.rotation_matrix"]], "transform_coordinates() (in module hermespy.tools.math)": [[95, "hermespy.tools.math.transform_coordinates"]], "transform_vector() (in module hermespy.tools.math)": [[95, "hermespy.tools.math.transform_vector"]], "delay_resampling_matrix() (in module hermespy.tools.resampling)": [[96, "hermespy.tools.resampling.delay_resampling_matrix"]], "hermespy.tools.resampling": [[96, "module-hermespy.tools.resampling"]], "hermespy.tools.tile": [[97, "module-hermespy.tools.tile"]], "screen_geometry() (in module hermespy.tools.tile)": [[97, "hermespy.tools.tile.screen_geometry"]], "set_figure_geometry() (in module hermespy.tools.tile)": [[97, "hermespy.tools.tile.set_figure_geometry"]], "test() (in module hermespy.tools.tile)": [[97, "hermespy.tools.tile.test"]], "tile_figures() (in module hermespy.tools.tile)": [[97, "hermespy.tools.tile.tile_figures"]]}})
Search.setIndex({"docnames": ["api/api", "api/beamforming", "api/beamforming.beamformer", "api/beamforming.capon", "api/beamforming.conventional", "api/bin", "api/bin.hermes", "api/channel", "api/channel.channel", "api/channel.cluster_delay_line_indoor_factory", "api/channel.cluster_delay_line_indoor_office", "api/channel.cluster_delay_line_rural_macrocells", "api/channel.cluster_delay_line_street_canyon", "api/channel.cluster_delay_line_urban_macrocells", "api/channel.cluster_delay_lines", "api/channel.delay", "api/channel.ideal", "api/channel.multipath_fading_channel", "api/channel.multipath_fading_templates", "api/channel.quadriga", "api/channel.radar_channel", "api/core", "api/core.animation", "api/core.antennas", "api/core.channel_state_information", "api/core.definitions", "api/core.device", "api/core.executable", "api/core.factory", "api/core.logarithmic", "api/core.monte_carlo", "api/core.operators", "api/core.pipeline", "api/core.random_node", "api/core.scenario", "api/core.signal_model", "api/core.transformation", "api/core.visualize", "api/fec", "api/fec.bch", "api/fec.block_interleaver", "api/fec.coding", "api/fec.crc", "api/fec.ldpc", "api/fec.polar", "api/fec.repetition", "api/fec.rs", "api/fec.rsc", "api/fec.scrambler", "api/fec.turbo", "api/hardware_loop", "api/hardware_loop.audio.device", "api/hardware_loop.audio.scenario", "api/hardware_loop.calibration.delay", "api/hardware_loop.calibration.leakage", "api/hardware_loop.hardware_loop", "api/hardware_loop.physical_device", "api/hardware_loop.physical_device_dummy", "api/hardware_loop.scenario", "api/hardware_loop.usrp", "api/hardware_loop.visualizers", "api/jcas", "api/jcas.matched_filtering", "api/modem", "api/modem.bits_source", "api/modem.evaluators", "api/modem.modem", "api/modem.precoding.dft", "api/modem.precoding.ratio_combining", "api/modem.precoding.single_carrier", "api/modem.precoding.space_time_block_coding", "api/modem.precoding.spatial_multiplexing", "api/modem.precoding.symbol_precoding", "api/modem.symbols", "api/modem.waveform", "api/modem.waveform_chirp_fsk", "api/modem.waveform_correlation_synchronization", "api/modem.waveform_ofdm", "api/modem.waveform_single_carrier", "api/precoding", "api/precoding.precoding", "api/precoding.stream_precoding", "api/radar", "api/radar.cube", "api/radar.detection", "api/radar.evaluation", "api/radar.fmcw", "api/radar.radar", "api/simulation", "api/simulation.analog_digital_converter", "api/simulation.coupling", "api/simulation.coupling.impedance", "api/simulation.coupling.perfect", "api/simulation.isolation", "api/simulation.isolation.impedance", "api/simulation.isolation.perfect", "api/simulation.isolation.specific", "api/simulation.noise", "api/simulation.rf_chain", "api/simulation.rf_chain.phase_noise", "api/simulation.rf_chain.power_amplifier", "api/simulation.simulated_device", "api/simulation.simulation", "api/tools", "api/tools.math", "api/tools.resampling", "api/tools.tile", "developer_hints", "examples/audio", "examples/chirp_fsk_lora", "examples/chirp_qam", "examples/examples", "examples/hardware_model", "examples/interference_ofdm_single_carrier", "examples/jcas", "examples/ofdm_5g", "examples/ofdm_single_carrier", "examples/operator_separation", "examples/uhd", "features", "getting_started", "index", "installation", "license", "matlab", "notebooks/audio", "notebooks/beamformer", "notebooks/channel", "notebooks/datasets", "notebooks/evaluator", "notebooks/fec_coding", "notebooks/precoding", "notebooks/roc", "notebooks/waveform", "references", "tutorials"], "filenames": ["api/api.rst", "api/beamforming.rst", "api/beamforming.beamformer.rst", "api/beamforming.capon.rst", "api/beamforming.conventional.rst", "api/bin.rst", "api/bin.hermes.rst", "api/channel.rst", "api/channel.channel.rst", "api/channel.cluster_delay_line_indoor_factory.rst", "api/channel.cluster_delay_line_indoor_office.rst", "api/channel.cluster_delay_line_rural_macrocells.rst", "api/channel.cluster_delay_line_street_canyon.rst", "api/channel.cluster_delay_line_urban_macrocells.rst", "api/channel.cluster_delay_lines.rst", "api/channel.delay.rst", "api/channel.ideal.rst", "api/channel.multipath_fading_channel.rst", "api/channel.multipath_fading_templates.rst", "api/channel.quadriga.rst", "api/channel.radar_channel.rst", "api/core.rst", "api/core.animation.rst", "api/core.antennas.rst", "api/core.channel_state_information.rst", "api/core.definitions.rst", "api/core.device.rst", "api/core.executable.rst", "api/core.factory.rst", "api/core.logarithmic.rst", "api/core.monte_carlo.rst", "api/core.operators.rst", "api/core.pipeline.rst", "api/core.random_node.rst", "api/core.scenario.rst", "api/core.signal_model.rst", "api/core.transformation.rst", "api/core.visualize.rst", "api/fec.rst", "api/fec.bch.rst", "api/fec.block_interleaver.rst", "api/fec.coding.rst", "api/fec.crc.rst", "api/fec.ldpc.rst", "api/fec.polar.rst", "api/fec.repetition.rst", "api/fec.rs.rst", "api/fec.rsc.rst", "api/fec.scrambler.rst", "api/fec.turbo.rst", "api/hardware_loop.rst", "api/hardware_loop.audio.device.rst", "api/hardware_loop.audio.scenario.rst", "api/hardware_loop.calibration.delay.rst", "api/hardware_loop.calibration.leakage.rst", "api/hardware_loop.hardware_loop.rst", "api/hardware_loop.physical_device.rst", "api/hardware_loop.physical_device_dummy.rst", "api/hardware_loop.scenario.rst", "api/hardware_loop.usrp.rst", "api/hardware_loop.visualizers.rst", "api/jcas.rst", "api/jcas.matched_filtering.rst", "api/modem.rst", "api/modem.bits_source.rst", "api/modem.evaluators.rst", "api/modem.modem.rst", "api/modem.precoding.dft.rst", "api/modem.precoding.ratio_combining.rst", "api/modem.precoding.single_carrier.rst", "api/modem.precoding.space_time_block_coding.rst", "api/modem.precoding.spatial_multiplexing.rst", "api/modem.precoding.symbol_precoding.rst", "api/modem.symbols.rst", "api/modem.waveform.rst", "api/modem.waveform_chirp_fsk.rst", "api/modem.waveform_correlation_synchronization.rst", "api/modem.waveform_ofdm.rst", "api/modem.waveform_single_carrier.rst", "api/precoding.rst", "api/precoding.precoding.rst", "api/precoding.stream_precoding.rst", "api/radar.rst", "api/radar.cube.rst", "api/radar.detection.rst", "api/radar.evaluation.rst", "api/radar.fmcw.rst", "api/radar.radar.rst", "api/simulation.rst", "api/simulation.analog_digital_converter.rst", "api/simulation.coupling.rst", "api/simulation.coupling.impedance.rst", "api/simulation.coupling.perfect.rst", "api/simulation.isolation.rst", "api/simulation.isolation.impedance.rst", "api/simulation.isolation.perfect.rst", "api/simulation.isolation.specific.rst", "api/simulation.noise.rst", "api/simulation.rf_chain.rst", "api/simulation.rf_chain.phase_noise.rst", "api/simulation.rf_chain.power_amplifier.rst", "api/simulation.simulated_device.rst", "api/simulation.simulation.rst", "api/tools.rst", "api/tools.math.rst", "api/tools.resampling.rst", "api/tools.tile.rst", "developer_hints.rst", "examples/audio.rst", "examples/chirp_fsk_lora.rst", "examples/chirp_qam.rst", "examples/examples.rst", "examples/hardware_model.rst", "examples/interference_ofdm_single_carrier.rst", "examples/jcas.rst", "examples/ofdm_5g.rst", "examples/ofdm_single_carrier.rst", "examples/operator_separation.rst", "examples/uhd.rst", "features.rst", "getting_started.rst", "index.rst", "installation.rst", "license.rst", "matlab.rst", "notebooks/audio.ipynb", "notebooks/beamformer.ipynb", "notebooks/channel.ipynb", "notebooks/datasets.ipynb", "notebooks/evaluator.ipynb", "notebooks/fec_coding.ipynb", "notebooks/precoding.ipynb", "notebooks/roc.ipynb", "notebooks/waveform.ipynb", "references.rst", "tutorials.rst"], "titles": ["HermesPy API", "Beamforming", "Beamformer", "Capon Beamformer", "Conventional Beamformer", "Entry Points", "Hermes Command Line Interface", "Channel Modeling", "Channel Modeling", "3GPP Cluster Delay Line Indoor Factory Model", "3GPP Cluster Delay Line Indoor Office Model", "3GPP Rural Macrocells Model", "3GPP Street Canyon (Urban Microcells) Model", "3GPP Urban Macrocells Model", "3GPP Cluster Delay Line Model", "Delay Channel", "Ideal Channel", "Multipath Fading", "Multipath Fading Standard Templates", "Quadriga Channel Model", "Single-Target Radar Channel Modeling", "Core", "Animation", "Antenna Configuration", "Channel State Information Model", "General Definitions", "Device Modeling", "Executable", "Serialization Factory", "Logarithmics", "PyMonte", "Extra Operators", "Pipeline", "Random Graph", "Wireless Scenario", "Signal Modeling", "Coordinate System Transformations", "Visualization", "Error Correction", "&lt;no title&gt;", "Interleaving", "Coding Pipeline", "Cyclic Redundancy Checks", "&lt;no title&gt;", "&lt;no title&gt;", "Repetition Coding", "&lt;no title&gt;", "&lt;no title&gt;", "Scrambling", "&lt;no title&gt;", "Hardware Loop", "Audio Device Binding", "Audio Device Scenario", "Delay Calibration", "Leakage Calibration", "Hardware Loop", "Physical Devices", "Physical Device Dummy", "Physical Device Scenario", "UHD System", "Visualizers", "JCAS", "Matched Filter JCAS", "Communication", "Bit Source", "Communication Evaluators", "Modem", "Discrete Fourier Transform Precoding", "Maximum Ratio Combining", "Single Carrier Encoding", "Space-Time Block Coding", "Spatial Multiplexing", "Symbol Precoding", "Communication Symbols", "Communication Waveform Base", "Chirp Frequency Shift Keying", "Correlation-Based Waveform Synchronization", "Orthogonal Frequency Division Multiplexing", "Filtered Single Carrier Waveforms", "Precoding", "Precoding Configuration", "Stream Precoding", "Sensing", "Radar Cube", "Radar Detection", "Radar Evaluation", "Frequency Modulated Continuous Waveform Radar", "Radar Device Operation", "Simulation", "Analog-to-Digital Converter", "Mutual Coupling", "Impedance Coupling", "Perfect Coupling", "Antenna Isolation Modeling", "Impedance Isolation", "Perfect Isolation", "Specific Isolation", "Noise Modeling", "Hardware Radio Frequency Chain Modeling", "Phase Noise Modeling", "Power Amplifier Modeling", "Simulated Devices", "Simulation", "Tools", "Math Tools", "Resampling Routines", "Tile Figures", "For Developers", "Audio Hardware Binding", "Chirp FSK LORA", "Chirp QAM", "Configuration Examples", "Hardware Modeling", "OFDM Interference", "JCAS", "OFDM 5G", "OFDM Single Carrier", "Operator Separation", "USRP Hardware Driver", "Features", "Getting Started", "HermesPy", "Installation", "License", "Matlab", "Using Audio Equipment", "Implementing Beamformers", "Implementing Channels", "Recording Datasets", "Implementing Evaluators", "Implementing FEC codings", "Implementing Precodings", "Receiver Operating Characteristics", "Implementing Communication Waveforms", "References", "Tutorials"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 26, 28, 30, 31, 33, 34, 35, 36, 40, 41, 42, 48, 51, 55, 56, 57, 59, 62, 63, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 80, 81, 84, 85, 86, 87, 89, 99, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "section": [0, 20, 28, 30, 40, 41, 48, 74, 75, 76, 77, 78, 102, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 125, 127, 129, 131, 132, 135], "describ": [0, 2, 6, 14, 17, 20, 40, 45, 48, 89, 100, 120, 122, 127, 133], "all": [0, 2, 3, 4, 7, 8, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 34, 41, 45, 50, 51, 56, 58, 65, 66, 70, 77, 82, 85, 88, 89, 101, 102, 107, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134], "part": [0, 31, 74, 75, 77, 78, 89, 123], "applic": [0, 2, 34, 59, 120, 121, 123, 126], "program": [0, 30, 120, 123, 129, 131], "interfac": [0, 5, 19, 28, 111, 120, 121, 122, 123, 124, 128, 129, 130, 131], "consist": [0, 16, 17, 34, 38, 41, 50, 63, 82, 86, 120, 123, 127, 128, 129, 131, 132], "self": [0, 20, 109, 114, 115, 116, 120, 126, 127, 129, 130, 131, 133], "titl": [0, 30, 35, 37, 54, 55, 60, 64, 65, 73, 83, 84, 85, 106, 110, 119, 120, 122, 125, 128, 129, 131, 132], "namespac": [0, 28], "featur": [0, 3, 4, 14, 28, 70, 72, 77, 80, 107, 120, 121, 123, 124, 126, 129, 130, 133], "multipl": [0, 17, 28, 29, 30, 34, 41, 63, 69, 70, 71, 72, 77, 80, 101, 120, 127, 129, 132, 133], "sub": [0, 21, 28, 30, 40, 55, 77, 103, 113, 120], "modul": [0, 1, 5, 6, 7, 14, 21, 28, 30, 31, 38, 41, 48, 50, 61, 63, 65, 66, 72, 74, 75, 77, 78, 80, 82, 85, 88, 103, 106, 107, 108, 109, 110, 113, 115, 116, 117, 118, 120, 123, 124, 125, 126, 127, 130, 131, 133, 134], "each": [0, 14, 17, 18, 20, 23, 26, 28, 30, 31, 32, 34, 35, 36, 55, 56, 67, 77, 78, 80, 85, 86, 89, 100, 101, 102, 108, 109, 110, 113, 115, 116, 117, 118, 120, 123, 127, 129, 130, 132, 133, 135], "tackl": 0, "differ": [0, 17, 30, 35, 75, 85, 101, 109, 120, 123, 125], "aspect": [0, 134], "signal": [0, 1, 2, 3, 4, 8, 16, 17, 20, 21, 23, 25, 26, 31, 34, 38, 51, 54, 56, 57, 58, 59, 60, 62, 66, 70, 72, 74, 75, 76, 77, 78, 80, 81, 86, 87, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 105, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 126, 128, 129, 130, 131, 132, 133, 134], "process": [0, 1, 2, 26, 28, 30, 34, 38, 40, 41, 55, 56, 57, 58, 65, 66, 72, 80, 83, 84, 85, 86, 87, 100, 101, 102, 110, 120, 121, 122, 126, 128, 129, 130, 131, 133, 134], "wireless": [0, 7, 8, 17, 21, 24, 48, 63, 66, 72, 74, 77, 78, 79, 80, 102, 111, 120, 121, 127, 129, 134], "system": [0, 2, 3, 4, 5, 6, 16, 17, 20, 21, 23, 26, 28, 30, 32, 34, 48, 50, 52, 55, 64, 74, 84, 85, 98, 100, 106, 108, 111, 112, 113, 119, 120, 122, 123, 124, 125, 127, 129, 132, 134], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 45, 48, 50, 51, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 95, 97, 99, 100, 101, 102, 103, 104, 106, 107, 109, 110, 111, 112, 113, 114, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "subpackag": [0, 63], "mai": [0, 2, 16, 17, 22, 23, 24, 26, 30, 34, 35, 41, 53, 55, 57, 67, 68, 69, 71, 72, 74, 77, 80, 81, 89, 100, 101, 107, 120, 121, 122, 123, 125, 126, 128, 130, 131, 132, 133, 135], "have": [0, 8, 17, 20, 26, 28, 30, 34, 77, 83, 89, 109, 110, 120, 122, 123, 125, 132, 133], "interdepend": [0, 21], "gener": [0, 2, 3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 27, 28, 30, 32, 33, 34, 36, 37, 40, 41, 48, 50, 51, 52, 55, 57, 58, 62, 64, 65, 66, 72, 74, 75, 76, 77, 78, 80, 81, 84, 85, 86, 87, 89, 97, 99, 100, 101, 102, 105, 107, 108, 109, 117, 118, 120, 123, 125, 126, 127, 128, 129, 133, 134], "root": [0, 14, 18, 23, 33, 78, 85, 99, 104, 107, 115, 116, 119, 120, 125], "depend": [0, 16, 17, 20, 22, 23, 24, 26, 30, 33, 35, 36, 51, 89, 98, 100, 107, 118, 120, 122, 134], "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 45, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "provid": [0, 1, 2, 7, 16, 17, 20, 21, 26, 28, 29, 30, 34, 35, 37, 38, 41, 50, 56, 59, 61, 63, 70, 73, 78, 79, 82, 88, 101, 102, 105, 107, 111, 119, 120, 122, 123, 124, 127, 134, 135], "core": [0, 8, 14, 15, 16, 17, 19, 20, 30, 32, 34, 57, 66, 119, 120, 126, 127, 128, 129, 130, 131, 132, 133], "packag": [0, 1, 120, 122, 123, 125], "channel": [0, 10, 11, 12, 13, 14, 17, 18, 21, 23, 26, 28, 36, 40, 41, 42, 45, 48, 51, 53, 55, 56, 57, 66, 72, 73, 74, 77, 78, 79, 80, 85, 101, 102, 108, 109, 110, 113, 114, 115, 116, 117, 118, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135], "model": [0, 2, 15, 16, 17, 18, 21, 23, 30, 34, 41, 51, 54, 57, 74, 75, 77, 78, 85, 86, 87, 88, 89, 90, 91, 92, 95, 101, 102, 107, 109, 110, 111, 113, 114, 115, 116, 117, 120, 122, 123, 127, 129, 131, 133, 134], "error": [0, 8, 16, 25, 27, 40, 42, 54, 65, 66, 85, 98, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 125, 127, 130, 134], "correct": [0, 42, 54, 56, 65, 66, 120, 123, 128, 130, 134], "hardwar": [0, 51, 56, 88, 100, 101, 111, 117, 120, 121, 122, 125, 129, 132, 133], "loop": [0, 120, 125, 129, 132], "jca": [0, 111, 119], "commun": [0, 17, 35, 38, 40, 41, 51, 61, 62, 64, 66, 75, 76, 77, 78, 80, 100, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 127, 128, 130, 131, 134, 135], "precod": [0, 1, 2, 63, 66, 69, 70, 71, 74, 75, 77, 113, 115, 116, 120, 129, 135], "beamform": [0, 87, 129, 135], "sens": [0, 1, 61, 62, 85, 86, 87, 101, 114, 120, 121, 127, 132], "simul": [0, 6, 8, 17, 21, 22, 25, 27, 28, 30, 32, 55, 58, 65, 74, 75, 76, 77, 78, 85, 86, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "entri": [0, 6, 27, 30, 41, 74, 76, 77, 102], "point": [0, 1, 2, 3, 4, 6, 15, 20, 23, 27, 30, 32, 34, 35, 36, 55, 57, 59, 84, 85, 87, 89, 99, 100, 110, 111, 115, 120, 121, 122, 123, 124], "tool": [0, 78, 107, 122, 123, 124, 129], "hermespi": [1, 5, 6, 8, 14, 21, 26, 27, 28, 30, 32, 34, 35, 50, 51, 55, 57, 66, 79, 87, 88, 102, 107, 111, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "routin": [1, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 26, 27, 28, 30, 35, 37, 40, 41, 42, 45, 48, 50, 56, 64, 72, 74, 75, 76, 77, 78, 80, 85, 102, 103, 107, 116, 120, 124, 125, 126, 127, 128, 129, 131, 133], "spatial": [1, 3, 7, 15, 20, 23, 63, 79, 101, 113, 114, 115, 116, 119, 120, 121, 126, 134], "mimo": [1, 2, 8, 16, 17, 63, 66, 73, 81, 115, 116, 129, 133, 134], "antenna": [1, 3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 26, 51, 54, 57, 66, 70, 72, 80, 88, 90, 91, 92, 95, 101, 102, 109, 115, 116, 120, 121, 126, 127, 129, 131, 132, 134], "stream": [1, 2, 3, 4, 8, 24, 26, 28, 35, 41, 51, 54, 56, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 90, 93, 95, 102, 117, 120, 126, 128, 131, 133], "dure": [1, 2, 3, 4, 8, 10, 11, 12, 13, 14, 16, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 40, 41, 42, 45, 48, 51, 52, 54, 55, 56, 57, 58, 59, 62, 66, 71, 72, 74, 77, 78, 80, 81, 84, 86, 87, 90, 97, 101, 102, 108, 115, 116, 118, 120, 122, 127, 128, 129, 130, 131, 132, 133], "transmiss": [1, 2, 7, 23, 24, 26, 31, 34, 40, 41, 42, 45, 48, 51, 53, 56, 57, 59, 62, 66, 67, 68, 69, 71, 72, 80, 81, 87, 90, 98, 101, 102, 109, 113, 117, 121, 123, 125, 128, 131, 133], "allow": [1, 8, 16, 32, 34, 35, 55, 56, 57, 74, 78, 111, 117, 123, 130], "steer": [1, 2, 3, 4, 126], "power": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 25, 26, 29, 35, 54, 56, 57, 58, 70, 74, 75, 77, 78, 83, 84, 86, 87, 88, 96, 97, 99, 101, 102, 104, 107, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 123, 126, 129, 132, 133, 134], "emit": [1, 3, 4, 8, 23, 26, 34, 66, 87, 102, 108, 109, 115, 116, 117, 118, 120, 126], "an": [1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 16, 17, 23, 24, 26, 27, 28, 29, 30, 32, 34, 35, 36, 40, 41, 48, 51, 53, 55, 59, 61, 65, 67, 68, 69, 71, 72, 74, 77, 80, 85, 86, 89, 98, 100, 101, 102, 104, 105, 110, 112, 113, 114, 115, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "arrai": [1, 2, 3, 4, 17, 18, 20, 23, 26, 30, 35, 36, 48, 51, 55, 56, 57, 65, 66, 73, 83, 85, 91, 92, 96, 101, 104, 115, 116, 119, 126, 128, 131], "toward": [1, 2, 3, 4, 23, 36, 107, 126], "desir": [1, 85, 89, 104], "direct": [1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 20, 23, 30, 36, 51, 56, 57, 77, 106, 123, 126, 128], "within": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 28, 29, 30, 33, 34, 35, 36, 40, 41, 42, 45, 48, 51, 55, 56, 66, 73, 74, 75, 77, 78, 80, 84, 86, 99, 100, 101, 102, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133], "refer": [1, 3, 6, 9, 10, 11, 12, 13, 14, 20, 22, 23, 26, 30, 36, 40, 41, 42, 45, 48, 51, 52, 55, 57, 59, 65, 66, 70, 73, 74, 75, 77, 78, 85, 100, 101, 107, 110, 113, 114, 115, 116, 118, 119, 120, 123, 127, 128], "focu": [1, 2, 3, 4, 120, 126], "recept": [1, 2, 23, 26, 31, 34, 40, 41, 42, 45, 48, 51, 54, 56, 57, 58, 59, 66, 67, 68, 69, 71, 72, 77, 80, 81, 87, 90, 98, 101, 102, 120, 125, 128, 129, 131], "invers": [1, 3, 41, 78, 120, 126, 131], "can": [1, 2, 5, 6, 17, 20, 23, 28, 30, 34, 41, 45, 51, 77, 89, 101, 106, 107, 111, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "us": [1, 2, 8, 16, 17, 18, 26, 28, 29, 30, 33, 34, 36, 48, 52, 54, 55, 56, 57, 58, 64, 65, 66, 74, 75, 77, 78, 80, 84, 85, 86, 99, 102, 104, 106, 107, 113, 114, 115, 119, 120, 122, 123, 124, 126, 128, 129, 130, 132, 133, 135], "well": [1, 14, 38, 41, 50, 63, 67, 68, 69, 71, 72, 82, 107, 114, 120, 123, 132], "order": [1, 6, 29, 30, 35, 40, 41, 42, 48, 72, 74, 75, 77, 78, 80, 99, 101, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 120, 122, 123, 129, 132, 133, 135], "receiv": [1, 2, 3, 4, 8, 14, 15, 16, 17, 19, 20, 23, 24, 26, 31, 34, 40, 41, 42, 45, 48, 51, 53, 54, 56, 57, 58, 59, 60, 62, 65, 66, 70, 73, 74, 76, 77, 78, 80, 85, 86, 87, 90, 91, 93, 95, 96, 98, 101, 102, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 123, 125, 126, 127, 128, 129, 131, 133, 134, 135], "By": [1, 2, 6, 17, 20, 22, 23, 24, 26, 30, 33, 34, 35, 36, 41, 51, 57, 58, 73, 74, 77, 78, 85, 89, 99, 100, 101, 102, 120, 123], "focus": [1, 2, 3, 4, 126], "dictionari": [1, 28, 126], "angl": [1, 2, 3, 4, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 35, 36, 51, 83, 84, 100, 126], "interest": [1, 2, 3, 4, 23, 30, 121, 123, 124, 126], "algorithm": [1, 2, 30, 42, 63, 72, 76, 77, 80, 81, 84, 114, 121, 126, 130, 134], "ma": 1, "creat": [1, 2, 6, 8, 14, 15, 16, 17, 19, 20, 23, 27, 30, 32, 34, 35, 52, 55, 57, 59, 65, 73, 80, 83, 85, 89, 100, 102, 120, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "imag": [1, 83, 126], "": [1, 2, 3, 4, 6, 8, 14, 17, 20, 22, 23, 24, 26, 28, 30, 34, 35, 36, 51, 53, 54, 56, 57, 59, 62, 66, 73, 75, 78, 83, 84, 85, 86, 87, 89, 100, 101, 102, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "environ": [1, 6, 27, 30, 87, 107, 111, 120, 122, 124, 128, 129], "probe": [1, 2, 3, 4, 54], "convent": [1, 2, 119, 134], "capon": [1, 4, 119, 126, 134], "split": [2, 21, 41], "prototyp": [2, 100, 126], "class": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 120, 123, 126, 127, 129, 130, 131, 133, 134], "transmitbeamform": [2, 4, 87], "receivebeamform": [2, 3, 4, 87, 126], "oper": [2, 4, 20, 21, 26, 27, 29, 30, 34, 38, 40, 41, 42, 45, 48, 51, 56, 57, 58, 59, 61, 62, 66, 67, 68, 69, 71, 72, 80, 81, 82, 85, 89, 101, 102, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 133, 135], "respect": [2, 3, 4, 9, 10, 11, 12, 13, 14, 15, 17, 20, 22, 23, 24, 26, 28, 30, 34, 36, 40, 41, 42, 45, 48, 51, 56, 57, 72, 73, 74, 77, 78, 80, 83, 93, 95, 100, 101, 102, 107, 120, 122, 123, 124, 125, 126, 127, 130, 131], "thei": [2, 5, 17, 29, 42, 66, 86, 120, 123, 124, 125, 127, 129, 133], "ar": [2, 5, 6, 7, 9, 10, 11, 12, 13, 14, 17, 20, 22, 24, 26, 27, 28, 30, 33, 34, 35, 41, 45, 51, 58, 64, 65, 66, 70, 71, 74, 75, 77, 78, 80, 85, 86, 89, 99, 100, 101, 102, 106, 107, 111, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "both": [2, 15, 16, 17, 20, 35, 48, 61, 66, 77, 81, 89, 107, 109, 114, 120, 121, 123, 127, 129, 131], "deriv": [2, 30, 74, 123], "from": [2, 3, 5, 6, 8, 14, 15, 16, 17, 19, 20, 23, 24, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 51, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 73, 74, 77, 80, 83, 84, 85, 87, 90, 98, 100, 101, 102, 104, 107, 114, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135], "base": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 107, 114, 120, 121, 122, 123, 127, 131, 132, 133], "beamformerbas": 2, "due": [2, 20, 26, 105, 134], "fact": 2, "some": [2, 26, 107, 120, 122, 123, 131], "exclus": [2, 66, 123], "case": [2, 3, 20, 30, 56, 100, 120, 123, 127, 128, 129], "should": [2, 6, 8, 15, 17, 20, 28, 30, 34, 35, 37, 41, 53, 56, 65, 74, 89, 97, 102, 105, 107, 120, 123, 124, 127, 132], "inherit": [2, 28, 41, 64, 65, 74, 85, 100, 126, 127, 130, 131], "exampl": [2, 6, 8, 20, 35, 65, 71, 80, 85, 107, 108, 109, 110, 112, 113, 115, 118, 119, 120, 121, 123, 124, 126, 135], "implement": [2, 3, 4, 7, 9, 10, 11, 12, 13, 14, 17, 20, 27, 28, 30, 38, 41, 45, 48, 55, 57, 61, 63, 64, 65, 74, 76, 77, 78, 81, 82, 85, 89, 90, 98, 100, 104, 107, 119, 120, 121, 122, 123, 124, 134, 135], "focusmod": 2, "valu": [2, 8, 14, 15, 18, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 51, 55, 59, 65, 73, 74, 75, 77, 78, 83, 84, 85, 89, 99, 100, 104, 125, 133], "serializableenum": [2, 18, 25, 27, 28, 55, 77, 89], "mode": [2, 6, 24, 27, 30, 32, 34, 35, 55, 57, 58, 102, 123], "spheric": [2, 3, 4, 20, 23, 36, 84, 126], "0": [2, 3, 8, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 30, 34, 35, 40, 45, 48, 53, 54, 55, 56, 57, 59, 73, 75, 76, 77, 78, 83, 84, 86, 89, 97, 100, 101, 102, 104, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "coordin": [2, 3, 4, 20, 21, 22, 23, 26, 30, 57, 84, 101, 126], "e": [2, 8, 14, 15, 17, 18, 19, 20, 23, 24, 26, 29, 30, 35, 36, 40, 41, 48, 51, 53, 55, 56, 58, 74, 75, 77, 78, 85, 86, 89, 100, 102, 107, 108, 109, 113, 114, 115, 116, 118, 122, 123, 134], "azimuth": [2, 3, 4, 9, 10, 11, 12, 13, 14, 20, 23, 36, 51, 83, 84, 126], "zenith": [2, 3, 4, 9, 10, 11, 12, 13, 14, 20, 23, 36, 83, 84, 126], "radian": [2, 3, 4, 17, 20, 23, 36, 51, 83, 84, 98], "horizont": [2, 23, 51], "1": [2, 3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29, 30, 32, 34, 35, 40, 41, 45, 48, 51, 55, 73, 74, 75, 77, 78, 86, 89, 98, 100, 101, 104, 105, 108, 110, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "elev": [2, 4, 23, 51], "cartesian": [2, 20, 22, 23, 26, 36, 56, 84, 101], "2": [2, 4, 14, 17, 18, 20, 23, 24, 25, 27, 30, 34, 48, 51, 55, 70, 73, 74, 75, 77, 78, 83, 89, 99, 100, 106, 108, 109, 112, 113, 114, 115, 116, 117, 118, 120, 123, 126, 127, 129, 130, 131, 132, 133, 134], "xyz": 2, "m": [2, 3, 4, 9, 10, 11, 12, 13, 14, 17, 20, 22, 23, 26, 30, 35, 36, 40, 45, 54, 62, 77, 83, 84, 86, 87, 100, 104, 105, 107, 109, 114, 117, 122, 126, 132, 134], "devic": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 31, 32, 34, 50, 53, 54, 60, 61, 62, 66, 82, 88, 90, 91, 92, 93, 95, 96, 99, 102, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "3": [2, 14, 18, 20, 23, 24, 25, 27, 45, 48, 77, 99, 106, 107, 108, 109, 110, 112, 113, 115, 116, 117, 118, 120, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134], "consid": [2, 8, 17, 20, 23, 24, 26, 30, 33, 35, 36, 41, 51, 57, 62, 65, 66, 74, 75, 77, 78, 80, 85, 89, 90, 93, 99, 101, 102, 109, 110, 112, 115, 116, 120, 123, 127, 128, 131, 132], "peer": [2, 123, 134], "ot": 2, "type": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 113, 114, 115, 116, 118, 120, 129], "alia": [2, 8, 20, 24, 26, 28, 34, 56, 58, 74, 75, 76, 80, 89, 97], "typevar": [2, 8, 20, 24, 26, 28, 30, 32, 34, 56, 58, 74, 76, 80, 89, 97], "bound": [2, 8, 20, 24, 26, 28, 30, 32, 34, 55, 56, 58, 74, 76, 80, 89, 97, 134], "none": [2, 4, 6, 8, 14, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 41, 48, 51, 53, 54, 55, 56, 57, 58, 59, 62, 64, 66, 72, 73, 74, 75, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 106, 126, 129], "abc": [2, 8, 17, 20, 26, 27, 30, 34, 41, 55, 56, 60, 64, 65, 66, 72, 74, 77, 78, 80, 81, 85, 89, 90, 93, 99, 101], "beam": 2, "arg": [2, 6, 15, 19, 20, 26, 28, 30, 31, 32, 34, 52, 55, 56, 57, 58, 59, 66, 75, 76, 77, 78, 101, 102, 126], "option": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 120, 123], "attach": [2, 17, 20, 26, 41, 55, 57, 66, 72, 74, 75, 77, 78, 80, 81, 101, 123], "default": [2, 3, 6, 8, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 29, 30, 32, 33, 34, 35, 36, 41, 48, 51, 53, 54, 55, 56, 57, 58, 59, 65, 66, 73, 74, 77, 78, 80, 83, 84, 85, 89, 91, 99, 100, 101, 102, 104, 106, 120, 127, 133], "float": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 26, 29, 30, 31, 34, 35, 36, 40, 41, 51, 53, 54, 55, 56, 57, 58, 59, 62, 65, 66, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 89, 90, 93, 97, 98, 99, 100, 101, 102, 104, 105, 126, 127, 129, 133], "properti": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 48, 51, 53, 54, 55, 56, 57, 59, 60, 62, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 93, 96, 97, 98, 99, 100, 101, 102, 110, 115, 120, 123, 126, 129, 130, 131, 133], "assign": [2, 30, 45, 77, 120, 125, 133], "return": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 123, 126, 127, 129, 130, 131, 133], "handl": [2, 8, 17, 18, 20, 26, 27, 28, 30, 32, 34, 36, 41, 52, 55, 56, 57, 59, 62, 65, 66, 73, 74, 77, 78, 80, 85, 90, 93, 98, 101, 102], "transmitt": [2, 8, 16, 17, 20, 26, 31, 34, 48, 62, 66, 80, 98, 101, 102, 108, 109, 115, 116, 117, 118, 120, 127], "transmitstreamencod": [2, 81], "abstract": [2, 8, 14, 17, 20, 23, 26, 27, 28, 30, 36, 41, 55, 56, 57, 64, 66, 72, 74, 77, 80, 81, 84, 87, 89, 97, 99, 101, 120, 126, 130, 131, 133], "num_transmit_input_stream": [2, 4, 81], "int": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 80, 81, 84, 85, 86, 89, 99, 101, 102, 105, 106, 126, 127, 130, 131, 133], "number": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 28, 29, 30, 31, 32, 33, 34, 35, 40, 41, 42, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 81, 83, 84, 85, 86, 89, 90, 93, 95, 99, 101, 102, 105, 106, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 123, 126, 127, 129, 131, 133], "input": [2, 3, 4, 8, 16, 17, 26, 34, 40, 41, 42, 45, 48, 55, 56, 57, 58, 67, 68, 69, 70, 71, 80, 81, 89, 98, 100, 101, 102, 104, 105, 125, 130, 131, 134], "requir": [2, 3, 4, 8, 14, 15, 26, 27, 30, 35, 40, 41, 48, 50, 53, 55, 64, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 80, 81, 84, 86, 87, 89, 93, 95, 101, 106, 107, 108, 118, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134], "num_transmit_output_stream": [2, 4, 81], "output": [2, 3, 4, 6, 8, 16, 17, 19, 26, 27, 29, 30, 34, 40, 41, 42, 45, 48, 55, 65, 67, 68, 69, 70, 71, 78, 80, 81, 85, 89, 101, 102, 105, 120, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "num_transmit_focus_angl": [2, 4], "transmit": [2, 4, 8, 14, 15, 16, 17, 19, 20, 23, 24, 26, 34, 35, 40, 41, 42, 45, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 64, 65, 66, 70, 73, 74, 75, 77, 78, 86, 87, 90, 91, 93, 95, 96, 98, 100, 101, 102, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 129, 130, 132, 133, 134], "encode_stream": [2, 81], "encod": [2, 4, 40, 41, 42, 45, 48, 63, 66, 67, 68, 70, 71, 72, 77, 80, 81, 109, 110, 115, 116, 117, 119, 120, 130, 131, 133], "modifi": [2, 67, 68, 69, 71, 72, 81, 120, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "paramet": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 127, 131, 132], "access": [2, 8, 17, 18, 20, 23, 24, 30, 48, 66, 72, 73, 74, 75, 77, 78, 80, 98, 102, 121, 123, 127, 128, 134, 135], "configur": [2, 6, 8, 14, 17, 18, 20, 21, 26, 27, 28, 30, 34, 40, 41, 51, 54, 55, 56, 58, 59, 63, 65, 66, 72, 74, 76, 77, 78, 79, 81, 85, 87, 90, 91, 92, 93, 95, 97, 98, 101, 102, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133], "rais": [2, 3, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 24, 26, 27, 28, 30, 32, 34, 35, 36, 40, 41, 42, 45, 48, 51, 54, 55, 56, 57, 58, 59, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 104, 119, 120, 125, 127, 129], "runtimeerror": [2, 8, 17, 20, 26, 32, 34, 35, 36, 41, 55, 57, 58, 70, 74, 76, 77, 80, 83, 101, 102, 127, 129], "If": [2, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 23, 24, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 40, 41, 42, 45, 48, 51, 54, 55, 56, 57, 58, 59, 62, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 86, 87, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 104, 106, 120, 122, 123, 125], "current": [2, 5, 6, 7, 8, 17, 20, 22, 24, 26, 27, 30, 34, 35, 36, 41, 61, 62, 64, 65, 66, 74, 77, 78, 80, 85, 89, 101, 102, 107, 111, 120, 121, 129], "transmit_focu": 2, "tupl": [2, 8, 15, 16, 20, 23, 26, 29, 30, 34, 55, 74, 77, 78, 100, 101, 102, 106], "ndarrai": [2, 3, 4, 8, 15, 16, 17, 18, 20, 22, 23, 24, 26, 29, 30, 35, 36, 40, 41, 42, 45, 48, 51, 54, 55, 56, 57, 64, 65, 66, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 89, 91, 96, 98, 100, 101, 102, 104, 105, 126, 129, 130, 133], "numpi": [2, 3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 30, 33, 35, 36, 40, 41, 42, 45, 48, 51, 54, 55, 56, 57, 64, 65, 66, 67, 73, 83, 85, 96, 101, 102, 126, 127, 128, 129, 130, 131, 133], "certain": [2, 23, 41, 123, 134], "target": [2, 7, 23, 85, 114, 121, 132], "np": [2, 3, 4, 8, 15, 16, 17, 20, 22, 23, 24, 26, 30, 35, 36, 40, 41, 42, 45, 48, 51, 54, 55, 56, 57, 64, 65, 66, 73, 74, 75, 76, 77, 78, 83, 84, 85, 86, 87, 89, 91, 98, 100, 101, 102, 104, 105, 126, 127, 128, 129, 130, 131, 133], "sampl": [2, 3, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 26, 30, 31, 35, 51, 54, 55, 56, 57, 58, 59, 62, 74, 75, 76, 77, 78, 81, 83, 85, 86, 87, 89, 100, 101, 102, 105, 109, 110, 112, 113, 114, 115, 116, 117, 120, 126, 127, 129, 133], "receivestreamdecod": [2, 81], "characteris": 2, "its": [2, 3, 4, 9, 10, 11, 12, 13, 14, 17, 20, 22, 23, 26, 28, 30, 36, 41, 48, 51, 56, 57, 58, 78, 87, 101, 114, 120, 121, 122, 123, 126, 131], "n": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 41, 42, 48, 54, 70, 74, 75, 77, 78, 105, 115, 117, 120, 122, 126, 128, 130], "result": [2, 6, 20, 23, 27, 28, 30, 32, 35, 36, 37, 40, 41, 55, 57, 65, 67, 68, 69, 70, 71, 74, 75, 77, 78, 80, 81, 84, 85, 87, 89, 90, 100, 101, 102, 107, 120, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133], "support": [2, 5, 7, 8, 17, 18, 20, 25, 26, 67, 68, 69, 70, 71, 72, 74, 75, 77, 89, 103, 104, 120, 122, 123, 124, 127], "f": [2, 3, 4, 23, 51, 99, 100, 123, 128, 129, 130, 133, 134], "matrix": [2, 3, 4, 8, 17, 18, 20, 23, 24, 35, 54, 73, 83, 91, 96, 98, 102, 105, 126], "t": [2, 3, 4, 6, 20, 23, 34, 35, 73, 77, 83, 100, 109, 126, 131, 134], "baseband": [2, 86, 101, 126, 133], "mathbf": [2, 3, 4, 23, 40, 45, 51, 126, 130], "x": [2, 3, 4, 23, 24, 30, 35, 36, 40, 45, 55, 74, 75, 76, 77, 78, 89, 98, 100, 104, 106, 108, 113, 115, 116, 118], "mathbb": [2, 3, 4, 23, 30, 55, 83, 100, 126], "c": [2, 3, 4, 17, 18, 23, 29, 77, 83, 100, 107, 122, 123, 124, 126, 134], "time": [2, 3, 4, 8, 14, 15, 16, 17, 19, 20, 22, 23, 24, 30, 35, 36, 45, 53, 54, 57, 60, 62, 63, 66, 73, 74, 75, 76, 77, 78, 83, 100, 101, 102, 108, 109, 110, 113, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 129, 130, 131, 133, 134], "y": [2, 3, 4, 23, 36, 40, 45, 106, 126], "mathcal": [2, 3, 4], "b": [2, 3, 4, 17, 18, 29, 83, 104, 109, 123, 134], "lbrace": [2, 3, 4, 40, 45, 100], "rbrace": [2, 3, 4, 40, 45, 100], "quad": [2, 99], "text": [2, 28, 99, 100, 111], "function": [2, 7, 20, 21, 30, 32, 34, 50, 57, 61, 63, 79, 82, 104, 119, 120, 122, 123, 124, 125, 128, 130, 133], "compress": [2, 129], "while": [2, 26, 41, 120, 124, 129, 131], "num_receive_input_stream": [2, 3, 4, 81, 126], "dimens": [2, 3, 4, 15, 23, 24, 30, 48, 54, 55, 57, 65, 73, 77, 83, 85, 101, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 127, 131], "num_receive_output_stream": [2, 3, 4, 81, 126], "num_receive_focus_angl": [2, 3, 4, 126], "decode_stream": [2, 81], "recepept": [2, 81], "decod": [2, 3, 4, 40, 41, 42, 45, 48, 66, 67, 68, 69, 70, 71, 72, 80, 81, 120, 126, 130, 131, 134], "_decod": [2, 3, 4, 126], "carrier_frequ": [2, 3, 4, 20, 23, 26, 35, 51, 57, 59, 83, 101, 104, 109, 113, 114, 115, 116, 117, 118, 126, 128, 130, 132], "method": [2, 3, 4, 26, 27, 28, 30, 41, 55, 78, 104, 122, 123, 126, 127, 129, 131, 133, 134], "call": [2, 3, 4, 8, 26, 30, 34, 55, 56, 58, 100, 101, 102, 120, 121, 123, 124, 125, 126, 127, 128, 129, 131], "subroutin": [2, 3, 4, 100, 126, 128], "first": [2, 3, 4, 17, 30, 51, 57, 73, 74, 76, 77, 78, 101, 102, 107, 113, 117, 118, 123, 125, 127, 128, 130, 132], "being": [2, 3, 4, 6, 26, 29, 32, 40, 55, 78, 120, 123, 124, 126, 129], "second": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 26, 30, 34, 35, 53, 54, 56, 57, 62, 65, 66, 73, 74, 75, 77, 78, 83, 86, 87, 89, 100, 101, 102, 105, 109, 113, 115, 116, 117, 120, 127, 132, 134], "assum": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 22, 23, 26, 29, 30, 34, 35, 54, 56, 57, 58, 70, 73, 77, 78, 85, 101, 102, 114, 115, 116, 120, 123, 124, 126, 128, 130, 132], "carrier": [2, 3, 4, 26, 35, 51, 56, 57, 59, 63, 74, 77, 83, 99, 101, 104, 109, 111, 112, 113, 114, 115, 119, 120, 125, 126, 128, 132, 134], "central": [2, 3, 4, 26, 30, 35, 51, 59, 83, 101], "frequenc": [2, 3, 4, 8, 14, 17, 18, 20, 23, 24, 26, 35, 51, 54, 56, 57, 59, 63, 70, 74, 78, 82, 83, 87, 88, 99, 100, 101, 102, 104, 108, 109, 112, 113, 114, 115, 116, 117, 118, 119, 120, 126, 127, 128, 132, 134], "f_": [2, 3, 4, 23, 51, 86, 87], "mathrm": [2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 30, 41, 42, 45, 51, 55, 59, 77, 83, 86, 87, 99, 100, 125, 126, 132], "arriv": [2, 3, 4, 9, 10, 11, 12, 13, 14, 17, 23, 57, 83, 101, 102], "A": [2, 3, 4, 8, 17, 18, 20, 23, 24, 26, 28, 29, 30, 33, 34, 35, 36, 40, 41, 42, 45, 48, 51, 52, 55, 59, 62, 64, 66, 67, 72, 73, 74, 77, 78, 80, 83, 84, 89, 98, 99, 100, 101, 102, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 123, 134, 135], "three": [2, 3, 4, 26, 36, 56, 73, 83, 84, 99, 101, 122, 123, 126, 131], "dimension": [2, 3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 23, 26, 30, 36, 51, 56, 57, 65, 69, 71, 72, 73, 80, 83, 84, 85, 96, 101, 102, 127], "repres": [2, 3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 23, 28, 29, 30, 33, 34, 36, 40, 41, 42, 45, 48, 51, 55, 56, 64, 65, 66, 72, 73, 77, 80, 83, 84, 85, 100, 102, 108, 113, 115, 116, 118, 120, 123, 129, 130, 131, 133], "magnitud": [2, 3, 4, 23, 51], "third": [2, 3, 4, 73, 123, 127], "contain": [2, 3, 4, 5, 6, 17, 20, 23, 24, 26, 28, 30, 31, 34, 35, 41, 48, 57, 66, 74, 75, 77, 78, 84, 85, 101, 102, 103, 120, 122, 123, 128, 134], "amount": [2, 3, 4, 23, 35, 120], "receive_focu": 2, "focus_point": 2, "focus_mod": 2, "two": [2, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 23, 30, 51, 57, 64, 65, 66, 70, 73, 74, 75, 85, 91, 92, 96, 100, 101, 102, 117, 120, 123, 125, 128, 129, 131, 132], "expect": [2, 26, 28, 30, 34, 41, 53, 55, 56, 64, 74, 123, 125, 127, 131, 132], "request": [2, 24, 26, 34, 41, 120, 121], "floatingerror": [2, 26, 87, 90, 93, 95], "yet": [2, 8, 20, 26, 101], "specifi": [2, 6, 8, 14, 15, 17, 18, 19, 26, 30, 33, 34, 37, 54, 56, 58, 66, 77, 83, 85, 89, 90, 93, 95, 97, 101, 102, 106, 115, 116, 122, 123, 126, 128, 131], "doe": [2, 9, 10, 11, 12, 13, 14, 26, 28, 30, 32, 34, 36, 40, 41, 42, 45, 48, 56, 57, 58, 90, 93, 95, 102, 120, 123, 124], "match": [2, 26, 30, 34, 35, 41, 56, 57, 58, 61, 73, 83, 90, 91, 93, 95, 102, 119], "probe_focus_point": [2, 126], "index": [2, 26, 30, 32, 34, 45, 55, 80, 102, 106, 107, 122, 129], "valueerror": [2, 3, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 24, 26, 27, 28, 30, 32, 34, 35, 36, 40, 41, 42, 45, 48, 51, 54, 55, 56, 57, 58, 59, 62, 66, 70, 73, 75, 76, 77, 78, 80, 83, 84, 85, 86, 89, 90, 93, 95, 97, 98, 99, 100, 101, 102, 104], "On": [2, 18, 26, 30, 51, 59, 78, 84, 101, 102, 127, 134], "invalid": [2, 18, 24, 30, 36, 123], "argument": [2, 15, 18, 23, 30, 35, 51, 55, 59, 75, 83, 100], "plot_receive_pattern": 2, "visual": [2, 21, 23, 24, 30, 35, 50, 55, 65, 83, 84, 85, 89, 100, 109, 110, 112, 113, 114, 115, 116, 117, 120, 122, 125, 129, 130, 132], "instanc": [2, 8, 18, 20, 26, 27, 28, 30, 35, 36, 41, 53, 54, 55, 64, 65, 66, 77, 78, 80, 85, 100, 102, 120, 124, 127], "characterist": [2, 3, 4, 20, 23, 51, 78, 85, 89, 100, 114, 119, 126, 135], "imping": [2, 8, 20, 23, 26, 34, 56, 58, 73, 101, 102, 126, 132], "which": [2, 8, 14, 15, 16, 17, 19, 20, 24, 26, 27, 28, 30, 33, 34, 35, 37, 40, 41, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 64, 65, 66, 73, 74, 75, 76, 77, 78, 83, 85, 87, 89, 97, 99, 100, 101, 102, 105, 107, 109, 110, 112, 113, 114, 115, 116, 117, 120, 123, 126, 130, 131, 132], "plot": [2, 6, 23, 24, 30, 35, 37, 55, 60, 65, 73, 78, 83, 85, 89, 100, 102, 120, 125, 126, 127, 128, 129, 130, 131, 132, 133], "sourc": [2, 3, 4, 6, 20, 23, 35, 56, 63, 66, 78, 89, 100, 107, 120, 121, 123, 124, 126, 134], "theta": [2, 3, 4, 23, 51, 126], "phi": [2, 3, 4, 23, 51, 99, 100, 126], "figur": [2, 23, 30, 35, 37, 55, 73, 78, 83, 89, 100, 103], "matplotlib": [2, 23, 27, 30, 35, 37, 73, 78, 89, 100, 106, 120, 127, 129], "classmethod": [2, 8, 18, 24, 26, 28, 29, 30, 34, 35, 36, 53, 54, 55, 56, 62, 66, 73, 77, 80, 83, 84, 85, 87, 101, 102], "plotreceivepattern": [2, 126], "array_topologi": 2, "sensor": [2, 3, 4, 20, 23, 126], "topologi": [2, 23, 26, 51, 59, 101], "8": [2, 3, 75, 76, 77, 78, 109, 113, 114, 120, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134], "uniform": [2, 15, 23, 74, 78, 89, 115, 116], "caponbeamform": [3, 126], "load": [3, 28, 56, 124], "kwarg": [3, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 26, 30, 31, 32, 34, 35, 51, 52, 55, 56, 57, 58, 59, 62, 66, 74, 75, 76, 77, 78, 100, 101, 102, 126], "serializ": [3, 4, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 26, 28, 30, 36, 40, 41, 42, 45, 48, 51, 53, 54, 55, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 84, 85, 86, 87, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "also": [3, 4, 16, 20, 57, 67, 77, 100, 101, 110, 113, 120, 122, 123, 126, 132], "minimum": [3, 8, 16, 26, 30, 54, 78, 109, 110, 112, 113, 114, 115, 116, 117, 120, 126], "varianc": [3, 56, 97, 126], "distortionless": [3, 100, 126], "respons": [3, 4, 8, 14, 15, 16, 17, 19, 20, 23, 24, 51, 54, 89, 119, 123, 125, 126, 127], "mvdr": [3, 126], "estim": [3, 4, 20, 26, 30, 53, 54, 55, 56, 62, 66, 73, 74, 75, 77, 78, 83, 85, 86, 87, 89, 108, 114, 115, 116, 118, 119, 120, 121, 126, 127, 128, 129, 131, 132, 134], "hat": [3, 4, 126], "p": [3, 4, 17, 20, 30, 48, 55, 126, 134], "where": [3, 4, 8, 14, 15, 16, 17, 19, 20, 23, 30, 34, 35, 41, 54, 57, 77, 83, 99, 100, 101, 105, 120, 123, 126], "let": [3, 4, 40, 45, 51, 120, 123, 126, 128, 129, 130, 131, 132, 133], "discret": [3, 4, 24, 35, 63, 74, 75, 77, 78, 83, 86, 87, 101, 119, 120, 126], "acquir": [3, 4, 123, 126], "arrari": [3, 4, 126], "r": [3, 23, 30, 40, 41, 48, 55, 83, 100, 115, 120, 126, 130, 134], "left": [3, 23, 30, 40, 41, 45, 55, 100, 120], "mathsf": [3, 4, 126], "h": [3, 4, 6, 23, 30, 51, 106, 126, 134], "lambda": [3, 86, 87], "right": [3, 23, 30, 40, 41, 45, 55, 85, 100, 120, 123, 129, 131], "correl": [3, 17, 18, 63, 75, 77, 78, 91, 109, 126, 134], "factor": [3, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20, 23, 74, 78, 100, 109, 110, 113, 120, 125], "_": [3, 4, 16, 20, 23, 30, 55, 68, 77, 100, 120, 125, 126, 128, 129, 130, 131, 132, 133], "far": [3, 4, 20, 23, 78, 126], "field": [3, 4, 17, 20, 23, 51, 126, 134], "small": [3, 4, 126], "rel": [3, 4, 30, 35, 36, 55, 76, 78, 84, 86, 87, 120, 126], "bandwidth": [3, 4, 51, 56, 74, 75, 77, 78, 86, 109, 110, 113, 117, 120, 126, 132, 133], "Then": [3, 4, 126], "defin": [3, 6, 7, 9, 10, 11, 12, 13, 14, 17, 18, 23, 30, 40, 41, 50, 74, 75, 77, 78, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 126, 128, 129, 131, 132, 133], "frac": [3, 23, 30, 40, 41, 42, 45, 86, 87, 99, 100, 120, 126, 130], "w": [3, 4, 86, 87, 106, 126], "weight": [3, 4, 24, 126], "so": [3, 4, 14, 23, 84, 100, 105, 123, 124, 125, 126, 128, 130, 131], "equat": [3, 4, 20, 29, 40, 41, 42, 45, 48, 100, 104, 126, 130], "diagon": [3, 120], "covari": [3, 17, 18, 54, 126], "coeffici": 3, "zero": [3, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 24, 26, 30, 34, 35, 41, 42, 51, 53, 54, 55, 56, 57, 59, 62, 74, 75, 76, 77, 78, 83, 84, 86, 89, 97, 100, 101, 102, 104, 108, 112, 113, 116, 118, 119, 120, 127], "yaml_tag": [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 28, 31, 34, 36, 40, 41, 42, 45, 48, 51, 52, 53, 54, 55, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 84, 85, 86, 87, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "str": [3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 26, 27, 28, 30, 31, 34, 35, 36, 37, 40, 41, 42, 45, 48, 51, 53, 54, 55, 56, 57, 58, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 129], "yaml": [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 28, 31, 36, 40, 41, 42, 45, 48, 51, 53, 54, 55, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 84, 85, 86, 87, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 111, 120, 121], "serial": [3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 26, 31, 34, 35, 36, 40, 41, 42, 45, 48, 51, 53, 54, 55, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 84, 85, 86, 87, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "tag": [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 28, 31, 36, 40, 41, 42, 45, 48, 51, 53, 54, 55, 56, 57, 59, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 81, 84, 85, 86, 87, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102], "robust": [3, 77, 134], "rank": 3, "defici": 3, "For": [3, 8, 9, 14, 15, 16, 17, 19, 20, 30, 32, 34, 51, 56, 59, 71, 74, 78, 80, 84, 86, 100, 101, 106, 120, 121, 122, 123, 125, 126, 128, 133], "smaller": [3, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 26, 30, 32, 34, 35, 41, 42, 45, 56, 62, 75, 76, 78, 84, 86, 89, 97, 100, 101, 102, 105], "than": [3, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 23, 26, 30, 32, 34, 35, 40, 41, 42, 45, 51, 55, 56, 59, 70, 76, 77, 78, 84, 86, 89, 97, 98, 100, 101, 102, 105, 106, 123], "j": [3, 23, 100, 134], "high": [3, 18, 48, 121, 132, 134], "resolut": [3, 8, 14, 15, 17, 19, 20, 23, 62, 86, 87, 89, 134], "wavenumb": [3, 134], "spectrum": [3, 17, 134], "analysi": [3, 4, 134], "proceed": [3, 134], "ieee": [3, 17, 23, 48, 77, 98, 100, 121, 134], "57": [3, 115, 134], "1408": [3, 134], "1418": [3, 134], "1969": [3, 134], "doi": [3, 17, 23, 30, 48, 74, 77, 98, 100, 121, 134], "10": [3, 8, 17, 23, 29, 30, 35, 48, 53, 74, 77, 86, 98, 99, 100, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 132, 133, 134], "1109": [3, 17, 23, 48, 77, 98, 100, 121, 134], "proc": [3, 134], "7278": [3, 134], "refererd": 4, "delai": [4, 7, 8, 11, 12, 13, 16, 17, 18, 19, 20, 24, 35, 50, 54, 56, 57, 101, 105, 109, 115, 116, 117, 119, 127, 134], "sum": [4, 17, 29, 74, 75, 77, 78, 85, 129, 134], "conventionalbeamform": [4, 126], "bartlett": [4, 134], "known": [4, 48, 83, 120, 126], "maxim": [4, 20, 51, 56, 57, 59, 62, 68, 84, 114], "singl": [4, 7, 8, 17, 23, 24, 26, 28, 30, 34, 35, 40, 41, 42, 45, 48, 51, 55, 62, 63, 65, 66, 70, 73, 74, 75, 77, 84, 85, 86, 87, 100, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "_encod": 4, "focus_angl": 4, "departur": [4, 9, 10, 11, 12, 13, 14], "periodogram": [4, 134], "continu": [4, 78, 82, 119, 123, 134], "spectra": [4, 134], "biometrika": [4, 134], "37": [4, 134], "16": [4, 14, 74, 77, 78, 109, 110, 112, 113, 114, 116, 117, 120, 123, 127, 130, 131, 133, 134], "1950": [4, 134], "url": [4, 14, 48, 100, 134], "http": [4, 14, 48, 68, 98, 100, 106, 118, 123, 134], "www": [4, 14, 48, 123, 134], "jstor": [4, 134], "org": [4, 14, 48, 68, 98, 118, 123, 134], "stabl": [4, 134], "2332141": [4, 134], "visit": [4, 121, 134], "2022": [4, 121, 134], "06": [4, 86, 134], "28": [4, 14, 120, 123, 134], "binari": [5, 30, 85, 122, 132, 133, 134], "definit": [5, 17, 21, 120, 123], "execut": [5, 6, 21, 30, 32, 34, 41, 80, 85, 102, 107, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "launch": [5, 6, 30, 102, 107, 108, 111, 118, 120], "command": [5, 107, 111, 122, 123, 132], "line": [5, 7, 11, 12, 13, 17, 18, 20, 35, 111, 119, 122, 123, 128, 132], "ani": [5, 6, 17, 18, 27, 28, 29, 30, 33, 55, 56, 75, 76, 77, 78, 85, 100, 111, 120, 121, 122, 123, 124, 131], "herm": [5, 19, 28, 29, 51, 101, 107, 111, 118, 120, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133], "primari": 6, "In": [6, 14, 17, 26, 30, 40, 41, 42, 45, 48, 66, 72, 74, 75, 77, 78, 80, 100, 107, 109, 110, 111, 112, 113, 115, 120, 122, 123, 127, 129, 134, 135], "conveni": [6, 28, 31, 32, 34, 57, 66, 111, 123, 133], "make": [6, 30, 74, 118, 120, 121, 122, 123, 128], "sure": [6, 118, 122, 123, 128], "virtual": [6, 30, 109, 115, 116, 117, 122, 124], "python": [6, 107, 111, 120, 121, 122, 124], "you": [6, 118, 122, 123, 125, 129, 135], "instal": [6, 107, 111, 118, 120, 123, 124], "activ": [6, 8, 16, 17, 19, 102, 111, 122, 123, 124, 128], "conda": [6, 122, 124], "venv": [6, 122], "window": [6, 120, 122, 123], "linux": [6, 120, 122], "envnam": [6, 122, 124], "script": [6, 107, 120, 122, 123, 124], "bat": 6, "bin": [6, 24, 35, 83, 85, 86, 87, 122], "termin": [6, 18, 109, 114, 120, 122, 123], "usual": [6, 30, 40, 42, 48, 84, 120], "indic": [6, 9, 10, 11, 12, 13, 14, 15, 23, 26, 30, 33, 36, 51, 55, 56, 57, 59, 65, 71, 73, 74, 75, 76, 77, 78, 80, 83, 84, 85, 97, 101, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 125, 127, 128, 129, 133], "front": [6, 59, 132], "your": [6, 107, 111, 120, 121, 122, 123, 124], "afterward": [6, 111, 122], "o": [6, 120, 132, 134], "output_dir": 6, "file": [6, 28, 30, 34, 55, 56, 64, 85, 102, 107, 111, 120, 121, 122, 123, 124, 128, 132, 135], "scenario": [6, 8, 9, 10, 11, 12, 13, 14, 17, 21, 26, 28, 32, 50, 55, 57, 59, 65, 74, 75, 77, 78, 101, 102, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 126, 127, 128, 129, 130, 132, 133], "repositori": [6, 107, 120, 122, 123, 124, 135], "avail": [6, 27, 30, 34, 35, 51, 57, 64, 66, 74, 85, 101, 114, 115, 116, 120, 121, 122, 123, 129, 133], "path": [6, 8, 14, 15, 16, 17, 19, 20, 27, 28, 30, 34, 56, 64, 78, 111, 120, 122, 124, 132], "yml": [6, 28, 120], "descript": [6, 14, 30, 38, 66, 77, 120, 122], "help": [6, 121], "displai": [6, 30, 35, 120, 123, 135], "directori": [6, 27, 28, 102, 107, 120, 122, 124], "style": [6, 27, 30, 111, 120, 121], "run": [6, 27, 30, 32, 34, 55, 59, 84, 102, 107, 111, 120, 123, 125, 126, 127, 129, 130, 131, 132, 133, 135], "test": [6, 20, 57, 58, 74, 85], "No": [6, 12, 13, 14, 17, 23, 25, 36, 51, 56, 77, 99, 114, 123, 134], "artifact": [6, 27, 30, 55, 65, 85, 102, 129], "save": [6, 27, 30, 34, 56, 111, 120, 132], "folder": [6, 28, 120], "wa": [6, 8, 15, 16, 17, 20, 26, 30, 33, 35, 66, 101, 102, 111, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "new": [6, 8, 14, 15, 16, 17, 19, 20, 23, 24, 26, 28, 30, 32, 33, 34, 35, 36, 37, 41, 48, 52, 55, 57, 58, 59, 64, 73, 77, 80, 84, 89, 100, 101, 102, 107, 111, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133], "work": [6, 120, 123, 126, 135], "hermes_simul": 6, "via": [6, 24, 28, 59, 62, 107, 120, 121, 122, 124, 128, 135], "list": [6, 8, 23, 26, 28, 29, 30, 34, 41, 51, 52, 55, 57, 58, 62, 66, 74, 76, 77, 80, 84, 101, 102, 107, 119, 122, 123, 129, 134, 135], "vector": [6, 20, 22, 23, 26, 30, 35, 36, 40, 41, 42, 45, 48, 51, 56, 64, 74, 75, 76, 77, 78, 83, 84, 100, 101, 104, 126], "interpret": [6, 20, 56, 122, 123], "link": [7, 14, 15, 20, 24, 28, 36, 41, 48, 57, 63, 66, 101, 102, 108, 109, 115, 118, 120, 121, 123, 125, 127, 128, 129, 134, 135], "between": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 23, 24, 30, 40, 41, 48, 53, 55, 57, 65, 66, 71, 72, 75, 76, 77, 78, 80, 89, 91, 92, 93, 95, 96, 101, 102, 104, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 127, 128, 129, 131, 132, 134], "physic": [7, 8, 26, 48, 50, 53, 54, 55, 60, 101, 109, 110, 112, 113, 114, 115, 116, 117, 120, 123, 127, 132, 134], "level": [7, 20, 30, 38, 55, 70, 81, 89, 99, 101, 107, 115, 116, 120, 121, 123, 127, 133, 134], "follow": [7, 17, 28, 76, 77, 78, 89, 99, 100, 110, 111, 112, 120, 122, 123, 129, 130, 131, 132, 134], "statist": [7, 14, 17, 18, 134], "ideal": [7, 8, 14, 15, 17, 19, 20, 23, 24, 26, 53, 57, 58, 74, 77, 78, 91, 92, 101, 102, 110, 112, 115, 116, 120, 125, 127, 129], "multipath": [7, 20, 119, 129], "fade": [7, 109, 117, 119, 134], "standard": [7, 9, 10, 11, 12, 13, 14, 28, 30, 31, 41, 48, 109, 123, 134], "templat": 7, "3gpp": [7, 18, 48, 109, 119, 134], "cluster": [7, 11, 12, 13, 119, 121], "indoor": [7, 14, 17, 119, 128, 134], "factori": [7, 14, 21, 119], "offic": [7, 14, 119, 128], "rural": [7, 14, 18, 119], "macrocel": [7, 14, 119], "street": [7, 14, 119], "canyon": [7, 119], "urban": [7, 11, 14, 18, 119], "microcel": [7, 119], "radar": [7, 60, 62, 82, 114, 119, 120, 126, 132], "quadriga": [7, 119], "propagationdirect": 8, "enum": [8, 14, 24, 28, 29, 73, 104], "propag": [8, 14, 15, 16, 17, 19, 20, 23, 24, 78, 79, 100, 101, 102, 104, 120, 123, 127, 128, 130, 132, 134], "forward": [8, 20, 38, 66, 130, 134], "backward": [8, 20], "crt": 8, "realiz": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 30, 33, 57, 58, 97, 101, 102, 127, 129], "channelr": [8, 14, 15, 16, 17, 19, 20, 102, 127], "impulse_respons": [8, 15, 16, 20, 24, 127], "channelstateinform": [8, 24, 26, 34, 57, 66, 74, 77, 78, 101, 131], "impuls": [8, 14, 15, 16, 17, 19, 20, 23, 24, 54, 125, 127], "reciproc": [8, 24], "comput": [8, 23, 24, 26, 30, 35, 41, 51, 66, 85, 93, 95, 101, 104, 121, 123, 126, 129, 132, 133, 134], "state": [8, 14, 15, 16, 17, 19, 20, 21, 26, 28, 30, 34, 35, 48, 53, 54, 55, 56, 57, 62, 65, 66, 73, 74, 77, 78, 80, 83, 85, 87, 101, 102, 115, 123, 127, 128, 131], "inform": [8, 14, 21, 23, 25, 26, 27, 28, 34, 35, 36, 37, 48, 51, 53, 54, 55, 56, 57, 58, 60, 62, 63, 65, 66, 70, 73, 77, 80, 83, 87, 101, 102, 107, 114, 115, 120, 123, 125, 127, 128, 129, 131, 132, 133, 134], "to_hdf": [8, 24, 26, 28, 35, 53, 54, 56, 62, 66, 73, 83, 87, 101, 102], "group": [8, 24, 26, 28, 35, 53, 54, 56, 62, 66, 73, 83, 87, 101, 102, 134], "object": [8, 17, 18, 19, 20, 22, 23, 24, 26, 28, 30, 31, 33, 35, 36, 37, 48, 53, 54, 55, 56, 57, 62, 65, 66, 67, 69, 71, 72, 73, 75, 77, 80, 81, 83, 84, 85, 87, 100, 101, 102, 110, 114, 120, 123, 124, 128, 129, 133], "hdf5": [8, 24, 26, 28, 34, 35, 53, 54, 56, 62, 66, 73, 83, 87, 101, 102, 128], "dump": [8, 24, 26, 28, 35, 53, 54, 56, 62, 66, 73, 83, 87, 101, 102, 120], "addit": [8, 16, 17, 24, 26, 28, 30, 32, 34, 35, 53, 54, 56, 57, 59, 62, 66, 73, 74, 83, 87, 97, 101, 102, 107, 117, 118, 119, 120, 122, 123, 131, 133], "from_hdf": [8, 24, 26, 28, 35, 53, 54, 56, 62, 66, 73, 83, 85, 87, 101, 102, 132], "de": [8, 24, 26, 28, 35, 36, 53, 54, 55, 56, 62, 66, 73, 77, 83, 87, 100, 101, 102, 134], "recal": [8, 24, 26, 28, 35, 36, 53, 54, 55, 56, 62, 66, 73, 77, 80, 83, 87, 101, 102, 128], "initi": [8, 15, 16, 17, 18, 22, 23, 24, 26, 28, 29, 30, 33, 34, 35, 36, 48, 52, 53, 54, 56, 57, 58, 59, 62, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 83, 85, 87, 99, 100, 101, 102, 109, 120, 123, 124, 125, 126, 128, 130, 132, 133], "true": [8, 14, 15, 16, 20, 26, 28, 30, 34, 35, 36, 41, 54, 55, 56, 57, 58, 59, 65, 74, 77, 78, 83, 84, 85, 101, 102, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 128, 132], "gain": [8, 16, 17, 19, 20, 23, 51, 59, 89, 100, 109, 112, 114, 117, 120, 129, 131, 132], "sync_offset_low": [8, 16], "sync_offset_high": [8, 16], "impulse_response_interpol": [8, 16, 17, 19, 20], "seed": [8, 16, 26, 33, 34, 48, 52, 57, 58, 64, 66, 97, 99, 102, 120, 125], "randomnod": [8, 26, 33, 34, 41, 42, 64, 66, 97, 99, 101], "simulateddevic": [8, 16, 17, 57, 90, 91, 92, 93, 95, 101, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120], "connect": [8, 16, 53, 123], "bool": [8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 26, 28, 30, 33, 34, 35, 36, 41, 54, 55, 56, 57, 58, 59, 65, 74, 75, 77, 78, 83, 84, 85, 89, 100, 101, 102], "flag": [8, 15, 16, 17, 20, 24, 26, 27, 28, 34, 35, 56, 59, 73, 74, 75, 84, 100, 101], "linear": [8, 16, 17, 20, 23, 24, 25, 26, 28, 29, 30, 58, 78, 84, 89, 96, 100, 101, 102, 104, 105, 110, 120, 129, 130, 134], "synchron": [8, 16, 58, 63, 74, 75, 77, 78, 101, 108, 118, 119, 125, 133, 134], "maximum": [8, 14, 15, 16, 17, 19, 20, 26, 30, 34, 53, 56, 59, 62, 63, 77, 83, 84, 86, 87, 89, 100, 110, 119, 120], "interpol": [8, 16, 17, 83, 105], "pseudo": [8, 16, 26, 33, 34, 48, 52, 57, 58, 64, 66, 77, 99, 102, 133], "random": [8, 15, 16, 17, 20, 21, 26, 30, 34, 42, 48, 52, 57, 58, 64, 66, 77, 97, 99, 101, 102, 119, 127, 130, 133], "serialized_attribut": [8, 17, 19, 20, 28, 31, 34, 55, 77, 100, 101], "set": [8, 9, 10, 11, 12, 13, 14, 17, 19, 20, 23, 24, 26, 27, 28, 30, 31, 33, 34, 36, 51, 55, 59, 62, 74, 77, 78, 87, 89, 97, 100, 101, 102, 108, 110, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 125, 127, 132, 133], "attribut": [8, 17, 19, 20, 28, 30, 31, 55, 77, 100, 123], "modem": [8, 17, 24, 34, 41, 60, 63, 64, 65, 72, 74, 77, 78, 80, 81, 85, 100, 102, 108, 110, 112, 113, 114, 115, 116, 117, 118, 120, 125, 127, 128, 129, 130, 131, 133], "alreadi": [8, 17, 26, 30, 32, 34, 55, 57, 58, 102, 120, 122, 123, 131, 133], "simulationscenario": [8, 58, 102, 128], "belong": [8, 23, 26, 30, 55, 77], "realist": [8, 23], "less": [8, 16, 23, 40, 66, 75, 77, 89, 98, 100], "one": [8, 9, 10, 11, 12, 13, 14, 17, 20, 23, 24, 26, 30, 32, 35, 40, 45, 55, 71, 72, 74, 75, 76, 77, 78, 80, 84, 85, 86, 89, 98, 100, 101, 102, 108, 113, 115, 116, 118, 120, 122, 123, 129, 133], "logarithm": [8, 21], "db": [8, 9, 10, 11, 12, 13, 14, 28, 29, 59, 99, 104, 109, 110, 112, 113, 114, 115, 116, 117, 120, 126, 127, 128, 129, 130, 131, 132, 133], "shorthand": [8, 30], "import": [8, 106, 120, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "num_input": 8, "feed": [8, 20, 24, 100], "actual": [8, 23, 30, 55, 120, 123, 126, 133], "shadow": [8, 9, 10, 11, 12, 13, 14], "num_stream": [8, 35, 73, 74, 76, 77], "hi": 8, "num_output": 8, "emerg": [8, 24, 26, 101], "radio": [8, 26, 35, 50, 57, 88, 100, 101, 102, 112, 118, 119, 120, 121, 129, 132], "band": [8, 20, 26, 35, 48, 51, 56, 57, 59, 60, 62, 66, 72, 74, 75, 76, 77, 78, 80, 81, 83, 101, 102, 109, 115, 116, 117, 120, 131, 133, 134], "over": [8, 20, 23, 24, 26, 30, 34, 35, 40, 50, 51, 55, 56, 57, 58, 62, 63, 64, 65, 66, 85, 87, 93, 95, 101, 102, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 125, 127, 128, 129, 131, 132, 133, 134], "ones": [8, 127], "convert": [8, 24, 26, 29, 30, 33, 35, 36, 51, 57, 59, 84, 85, 88, 101, 104, 119, 125, 133], "union": [8, 18, 26, 27, 28, 29, 30, 34, 51, 56, 58, 73, 85, 101, 102], "deviceoutput": [8, 26, 34, 101, 102], "sequenc": [8, 17, 20, 23, 26, 28, 29, 30, 34, 48, 51, 55, 56, 57, 58, 64, 65, 73, 74, 75, 77, 78, 80, 85, 86, 89, 101, 102, 133], "device_alpha": [8, 109, 110, 112, 113, 115, 116, 117, 120], "associ": [8, 123], "device_beta": [8, 113], "channelrealizationtyp": 8, "forwards_recept": 8, "onto": [8, 20, 23, 26, 34, 35, 56, 58, 73, 74, 75, 77, 78, 101, 102, 126, 132], "after": [8, 24, 30, 34, 35, 41, 42, 66, 67, 68, 69, 70, 71, 76, 77, 80, 81, 83, 85, 86, 100, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 123, 124, 126, 128, 130, 132], "backwards_recept": 8, "csi": [8, 26, 66], "static": [8, 20, 24, 27, 30, 31, 53, 54, 77, 87, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "given": [8, 16, 17, 20, 26, 30, 55, 56, 57, 80, 89, 99, 104, 109, 111, 120, 123, 126, 129, 130], "specif": [8, 9, 10, 11, 12, 13, 14, 20, 26, 30, 38, 48, 50, 74, 77, 82, 88, 93, 102, 105, 114, 119, 120, 121, 123, 124, 125, 131, 133, 134], "realzat": 8, "offset": [8, 9, 10, 11, 12, 13, 14, 36, 48, 75, 77, 98, 101, 106, 109, 117], "num_sampl": [8, 14, 15, 16, 17, 19, 20, 24, 30, 31, 35, 56, 74, 76, 77, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 126, 127, 130, 133], "sampling_r": [8, 14, 15, 16, 17, 19, 20, 26, 31, 35, 51, 54, 57, 59, 62, 66, 74, 75, 77, 78, 86, 87, 101, 105, 127, 133], "note": [8, 14, 15, 16, 17, 19, 20, 29, 33, 56, 89, 97, 120, 122, 124, 125], "rate": [8, 14, 15, 16, 17, 19, 20, 26, 31, 35, 40, 41, 42, 45, 48, 51, 54, 56, 57, 59, 62, 65, 71, 74, 75, 77, 78, 80, 86, 87, 101, 105, 109, 110, 112, 113, 114, 115, 116, 119, 120, 121, 125, 127, 130, 133, 134], "tap": [8, 14, 15, 17, 18, 19, 20, 23, 24, 109, 119, 134], "arai": [8, 14, 15, 16, 17, 19, 20], "4": [8, 14, 15, 16, 17, 18, 19, 20, 25, 27, 48, 78, 99, 100, 106, 108, 110, 112, 114, 115, 116, 120, 123, 125, 126, 127, 128, 129, 130, 131, 133, 134], "tensor": [8, 14, 15, 16, 17, 19, 20, 24, 83, 127], "size": [8, 14, 15, 16, 17, 19, 20, 30, 40, 41, 42, 45, 48, 70, 77, 109, 110, 117, 120, 130], "m_": [8, 14, 15, 16, 17, 19, 20, 30], "rx": [8, 14, 15, 16, 17, 19, 20], "tx": [8, 14, 15, 16, 17, 19, 20], "l": [8, 14, 15, 16, 17, 19, 20, 30, 41, 54, 74, 75, 77, 78, 108, 114, 118, 134], "last": [8, 26, 30, 41, 73, 74, 119, 134], "updat": [8, 26, 36, 55, 56, 101, 123], "everi": [8, 23, 28, 36, 64, 120], "ha": [8, 24, 26, 30, 34, 70, 77, 78, 101, 109, 110, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 129, 130, 131], "been": [8, 20, 24, 26, 30, 101, 122, 123, 124, 125, 126, 130], "min_sampling_r": 8, "minim": [8, 14, 20, 74, 75, 77, 78, 84, 107, 120, 121, 124, 134], "adequ": [8, 74, 75, 77, 78], "hz": [8, 17, 20, 23, 26, 35, 51, 54, 56, 57, 59, 62, 74, 75, 77, 78, 83, 86, 87, 101, 104, 105, 108, 109, 113, 115, 116, 117, 118, 133], "sever": [9, 10, 11, 12, 13, 21, 34, 65, 85, 111, 120, 124, 126, 128, 133], "indoorfactorybas": 9, "volum": [9, 17, 123, 125, 134], "surfac": [9, 30, 65, 85, 120], "clusterdelaylinebas": [9, 10, 11, 12, 13, 14], "hall": 9, "m3": 9, "total": 9, "area": [9, 18, 106, 134], "m2": 9, "wall": 9, "floor": [9, 56, 99, 132], "ceil": 9, "equal": [9, 20, 23, 26, 35, 40, 41, 42, 45, 48, 62, 66, 70, 74, 75, 77, 78, 84, 86, 89, 101, 102, 108, 110, 113, 115, 116, 118, 119, 120, 127, 128, 133], "indoorfactorylineofsight": [9, 14], "preset": [9, 10, 11, 12, 13], "indoorfactorylo": 9, "line_of_sight": [9, 10, 11, 12, 13, 14], "sight": [9, 10, 11, 12, 13, 14, 17, 18, 20, 128], "lo": [9, 10, 11, 12, 13, 14], "delay_spread_mean": [9, 10, 11, 12, 13, 14], "mean": [9, 10, 11, 12, 13, 14, 18, 30, 54, 57, 78, 85, 89, 101, 104, 115, 116, 121, 123, 129, 130, 132], "spread": [9, 10, 11, 12, 13, 14, 109, 115], "d": [9, 10, 11, 12, 13, 14, 17, 18, 23, 74, 77, 123, 126, 134], "mu_": [9, 10, 11, 12, 13, 14], "lgd": [9, 10, 11, 12, 13, 14], "delay_spread_std": [9, 10, 11, 12, 13, 14], "deviat": [9, 10, 11, 12, 13, 14], "sigma_": [9, 10, 11, 12, 13, 14], "aod_spread_mean": [9, 10, 11, 12, 13, 14], "asd": [9, 10, 11, 12, 13, 14], "lgasd": [9, 10, 11, 12, 13, 14], "aod_spread_std": [9, 10, 11, 12, 13, 14], "aoa_spread_mean": [9, 10, 11, 12, 13, 14], "arriav": [9, 10, 11, 12, 13, 14], "asa": [9, 10, 11, 12, 13, 14], "lgasa": [9, 10, 11, 12, 13, 14], "aoa_spread_std": [9, 10, 11, 12, 13, 14], "zoa_spread_mean": [9, 10, 11, 12, 13, 14], "zsa": [9, 10, 11, 12, 13, 14], "lgzsa": [9, 10, 11, 12, 13, 14], "zoa_spread_std": [9, 10, 11, 12, 13, 14], "zod_spread_mean": [9, 10, 11, 12, 13, 14], "zod": [9, 10, 11, 12, 13, 14], "lgzsd": [9, 10, 11, 12, 13, 14], "degre": [9, 10, 11, 12, 13, 14], "zod_spread_std": [9, 10, 11, 12, 13, 14], "lgzod": [9, 10, 11, 12, 13, 14], "zod_offset": [9, 10, 11, 12, 13, 14], "rice_factor_mean": [9, 10, 11, 12, 13, 14], "rice": [9, 10, 11, 12, 13, 14, 17], "distribut": [9, 10, 11, 12, 13, 14, 15, 17, 18, 30, 40, 69, 70, 71, 104, 120, 121, 122, 123, 129, 133], "k": [9, 10, 11, 12, 13, 14, 17, 23, 40, 41, 45, 70, 74, 75, 77, 78, 130, 134], "mu_k": [9, 10, 11, 12, 13, 14], "rice_factor_std": [9, 10, 11, 12, 13, 14], "sigma_k": [9, 10, 11, 12, 13, 14], "delay_sc": [9, 10, 11, 12, 13, 14], "scale": [9, 10, 11, 12, 13, 14, 17, 20, 29, 30, 35, 59, 83, 89, 104], "proportion": [9, 10, 11, 12, 13, 14], "r_": [9, 10, 11, 12, 13, 14, 42], "tau": [9, 10, 11, 12, 13, 14], "cross_polarization_power_mean": [9, 10, 11, 12, 13, 14], "cross": [9, 10, 11, 12, 13, 14, 17, 20, 30, 114, 123, 132], "polar": [9, 10, 11, 12, 13, 14, 20, 23, 51, 119, 134], "xpr": [9, 10, 11, 12, 13, 14], "cross_polarization_power_std": [9, 10, 11, 12, 13, 14], "num_clust": [9, 10, 11, 12, 13, 14], "num_rai": [9, 10, 11, 12, 13, 14], "rai": [9, 10, 11, 12, 13, 14, 30, 102, 129, 134], "per": [9, 10, 11, 12, 13, 14, 30, 31, 40, 42, 45, 54, 65, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 86, 102, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 126], "cluster_delay_spread": [9, 10, 11, 12, 13, 14], "individu": [9, 10, 11, 12, 13, 14, 17, 23, 30, 35, 51, 62, 66, 77, 80, 101, 108, 115, 116, 118, 120, 123], "c_": [9, 10, 11, 12, 13, 14], "cluster_aod_spread": [9, 10, 11, 12, 13, 14], "cluster_aoa_spread": [9, 10, 11, 12, 13, 14], "cluster_zoa_spread": [9, 10, 11, 12, 13, 14], "cluster_shadowing_std": [9, 10, 11, 12, 13, 14], "zeta": [9, 10, 11, 12, 13, 14, 23], "indoorfactorynolineofsight": [9, 14], "indoorfactorynlo": 9, "indoorofficelineofsight": [10, 14], "delay_norm": [10, 11, 12, 13, 14], "delaynorm": [10, 11, 12, 13, 14], "normal": [10, 11, 12, 13, 14, 36, 83, 84, 100, 123, 127, 133], "appli": [10, 11, 12, 13, 14, 20, 30, 35, 54, 56, 67, 70, 77, 78, 86, 87, 89, 90, 97, 122, 123, 125, 126, 134], "indoorofficelo": 10, "indoorofficenolineofsight": [10, 14, 128], "indoorofficenlo": 10, "ruralmacrocellslineofsight": [11, 14], "rmalo": 11, "ruralmacrocellsnolineofsight": [11, 14], "ruralmacrocellsoutsidetoinsid": [11, 14], "rmao2i": 11, "streetcanyonlineofsight": [12, 14], "streetcanyonlo": 12, "urbanmicrocellsnolineofsight": 12, "share": [12, 13, 58, 101, 102, 123], "streetcanyonnolineofsight": [12, 14], "streetcanyonnlo": 12, "streetcanyonoutsidetoinsid": [12, 14], "streetcanyono2i": 12, "urbanmacrocellslineofsight": [13, 14], "umalo": 13, "urbanmacrocellsnolineofsightbas": 13, "urbanmacrocellsnolineofsight": [13, 14], "umanlo": 13, "urbanmacrocellsoutsidetoinsid": [13, 14], "uma02i": 13, "tudi": [14, 134], "5": [14, 17, 18, 48, 66, 74, 98, 113, 114, 116, 120, 123, 126, 129, 130, 134], "100": [14, 102, 107, 110, 113, 114, 115, 116, 118, 120, 134], "ghz": [14, 48, 113, 132, 134], "comprehens": 14, "involv": 14, "pleas": [14, 111, 120, 121, 122, 124], "document": [14, 30, 65, 85, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "abstrat": 14, "full": [14, 23, 28, 59, 66, 72, 77, 80, 119, 120, 123, 124, 128, 130, 132], "customiz": [14, 17, 120], "clusterdelaylin": 14, "compliant": [14, 41, 107], "benchmark": [14, 51], "Of": [14, 120, 133], "outsid": [14, 123], "To": [14, 121, 122, 123, 127, 128, 131], "insid": 14, "undefin": [14, 87], "canyhon": 14, "pre": [14, 76, 122], "mix": [14, 26, 35, 57, 86, 101], "determinist": [14, 64], "posit": [14, 15, 17, 20, 22, 23, 36, 40, 48, 51, 54, 77, 84, 89, 101, 102, 128], "orient": [14, 22, 23, 36, 51, 101, 120], "sinc": [14, 17, 29, 35, 74, 89, 120, 126, 130, 131, 133], "specular": [14, 17], "compon": [14, 17, 18, 20, 23, 51, 77, 93, 95, 99, 108, 115, 116, 118, 123], "tof": 14, "flight": [14, 62, 127], "onli": [14, 20, 27, 28, 35, 41, 42, 48, 70, 73, 74, 75, 77, 78, 84, 85, 89, 98, 102, 120, 123, 124, 125, 126, 127, 129, 131, 132], "relev": [14, 73, 123], "debug": [14, 129], "purpos": [14, 57, 58, 74, 123, 128, 130, 131], "7": [14, 48, 54, 120, 123, 133, 134], "14": [14, 75, 99, 123, 125, 132, 134], "38": 14, "21": [14, 126], "41": 14, "73": 14, "34": 14, "9": [14, 18, 74, 75, 76, 77, 78, 109, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 125, 128, 132, 134], "12": [14, 17, 23, 77, 120, 123, 125, 130, 131, 132, 134], "20": [14, 29, 60, 109, 110, 112, 113, 115, 116, 117, 118, 120, 123, 130, 131, 132, 134], "5e": [14, 86], "09": 14, "17": [14, 48, 123], "delay_spread": 14, "squar": [14, 17, 18, 54, 77, 78, 83, 85, 99, 104, 105, 108, 115, 116, 118, 119], "tsg": [14, 134], "ran": [14, 118, 134], "2020": [14, 134], "version": [14, 48, 98, 122, 123, 124, 134, 135], "releas": [14, 48, 119, 122, 123, 134], "etsi": [14, 48, 134], "deliv": [14, 48, 134], "etsi_tr": [14, 134], "138900_138999": [14, 134], "138901": [14, 134], "01": [14, 109, 113, 114, 115, 116, 117, 134], "00_60": [14, 48, 134], "tr_138901v160100p": [14, 134], "pdf": [14, 35, 48, 78, 89, 100, 134], "delaychannelr": 15, "delaychannelbas": 15, "model_propagation_loss": 15, "free": [15, 20, 77, 104, 123], "space": [15, 20, 22, 23, 28, 35, 60, 63, 77, 104, 108, 109, 115, 116, 118, 119], "loss": [15, 17, 20, 104, 123, 131], "enabl": [15, 20, 26, 30, 34, 35, 36, 41, 54, 55, 56, 57, 58, 59, 74, 77, 78, 83, 84, 85, 89, 100, 101, 102, 108, 117, 118, 120, 121, 122, 123, 129], "kawrg": 15, "spatialdelaychannel": [15, 119], "spatialdelai": 15, "randomdelaychannel": [15, 119], "scalar": [15, 29, 30, 55, 74, 85], "constant": [15, 20, 89, 101, 126], "mininum": [15, 26], "maxium": 15, "randomdelai": 15, "idealchannelr": 16, "idealchannel": [16, 120], "distort": [16, 23, 24, 98, 100, 120], "It": [16, 17, 21, 26, 38, 50, 63, 66, 72, 80, 82, 89, 107, 115, 120, 121, 123, 127, 133], "serv": [16, 123, 124], "other": [16, 30, 40, 41, 42, 45, 48, 66, 100, 101, 108, 109, 113, 115, 116, 117, 118, 123, 128, 129], "number_rx_antenna": [16, 17], "number_tx_antenna": [16, 17], "rnd": [16, 17], "need": [16, 17, 122, 123, 128, 129], "same": [16, 17, 20, 30, 70, 77, 89, 98, 113, 123, 126], "antennacorrel": [17, 18], "upon": 17, "unknown": [17, 26, 30, 56, 84, 101], "customantennacorrel": 17, "postiv": 17, "defint": 17, "customcorrel": 17, "multipathfadingchannel": [17, 18], "power_profil": [17, 109, 117], "rice_factor": [17, 109, 117], "num_sinusoid": [17, 18], "los_angl": [17, 18], "doppler_frequ": [17, 18], "los_doppler_frequ": [17, 18], "interpolate_sign": 17, "alpha_correl": [17, 109], "beta_correl": [17, 109], "stochast": 17, "param": 17, "signific": [17, 123], "power_delay_profil": 17, "averag": [17, 26, 74, 75, 77, 78, 129, 133], "must": [17, 20, 28, 30, 48, 55, 74, 83, 89, 107, 123, 126, 131], "element": [17, 23, 24, 30, 51, 53, 57, 77, 101, 102, 108, 113, 115, 116, 118, 127, 128, 129, 131], "k_factor_ric": 17, "ricean": 17, "variant": 17, "auto": 17, "drop": [17, 20, 27, 32, 34, 55, 57, 101, 102, 108, 115, 118, 128, 129, 132], "independ": [17, 30, 41, 100, 123, 134], "among": [17, 45, 123], "tx_cov_matrix": 17, "rx_cov_matrix": 17, "side": [17, 74, 76, 77, 98, 101, 102, 120, 121], "hermitian": 17, "matric": [17, 102], "rayleigh": [17, 109, 117, 134], "uncorrel": 17, "scatter": [17, 20, 23, 132], "jake": 17, "doppler": [17, 18, 20, 83, 86, 87], "approach": [17, 61, 120], "xiao": [17, 134], "et": [17, 23, 30, 74, 98, 121], "al": [17, 23, 30, 74, 98, 121], "sinusoid": [17, 18, 134], "phase": [17, 18, 20, 23, 78, 88, 98, 100, 112, 119, 127, 134], "interv": [17, 18, 20, 30, 35, 55, 74, 75, 77, 78, 86], "kroneck": 17, "yu": [17, 134], "balanc": 17, "random_gener": 17, "shift": [17, 18, 20, 63, 83, 86, 87, 105, 119, 127, 133], "length": [17, 24, 35, 40, 41, 42, 45, 48, 56, 74, 75, 77, 78, 100, 102, 115], "ident": [17, 30, 48, 55, 65, 66, 74, 85, 91, 100, 117, 128, 132], "multipathfad": [17, 109, 117], "delay_resolution_error": 17, "los_gain": 17, "profil": [17, 83], "max_delai": [17, 53], "num_resolvable_path": 17, "aoa": 17, "interpolation_filt": 17, "filter": [17, 35, 56, 61, 63, 76, 113, 119, 125], "resolv": [17, 30, 55, 102, 107, 123, 134], "chengshan": [17, 134], "yahong": [17, 134], "rosa": [17, 134], "zheng": [17, 134], "norman": [17, 134], "beaulieu": [17, 134], "novel": [17, 134], "rician": [17, 134], "transact": [17, 23, 77, 98, 100, 123, 134], "3667": [17, 134], "3679": [17, 134], "2006": [17, 134], "twc": [17, 134], "256990": [17, 134], "kai": [17, 23, 134], "bengtsson": [17, 134], "ottersten": [17, 134], "mcnamara": [17, 134], "karlsson": [17, 134], "beach": [17, 134], "wideband": [17, 134], "nlo": [17, 134], "vehicular": [17, 134], "technologi": [17, 74, 134], "confer": [17, 134], "55th": [17, 134], "vtc": [17, 134], "spring": [17, 119, 134], "2002": [17, 134], "cat": [17, 134], "02ch37367": [17, 134], "370": [17, 134], "374": [17, 134], "vol": [17, 134], "1002729": [17, 134], "devicetyp": [18, 26, 32, 34], "base_st": [18, 109, 114, 120], "station": [18, 114, 120], "mobil": [18, 121], "correlationtyp": 18, "low": [18, 109, 119, 130, 132, 134], "medium": [18, 48, 109, 123, 134], "medium_a": 18, "3874": 18, "standardantennacorrel": 18, "device_typ": [18, 109], "5g": [18, 111, 114, 116, 119], "standardcorrel": [18, 109], "valuerror": 18, "unsupport": [18, 26], "convers": [18, 24, 28, 29, 30, 59, 85, 89, 104, 112, 119, 132], "cost256typ": 18, "cost256": [18, 119], "hilli": 18, "terrain": 18, "multipathfadingcost256": [18, 119], "model_typ": [18, 114, 115, 116], "to_yaml": [18, 28, 36, 55, 77, 80, 102], "represent": [18, 23, 26, 28, 29, 30, 36, 55, 65, 66, 77, 80, 83, 85, 87, 89, 101, 102, 109, 115, 116, 117, 133], "node": [18, 28, 30, 33, 36, 55, 64, 77, 80, 99, 102], "saferepresent": [18, 28, 36, 55, 77, 80, 102], "valid": [18, 28, 36, 55, 77, 80, 102, 123, 125], "code": [18, 28, 35, 36, 38, 40, 42, 48, 55, 63, 66, 72, 77, 78, 79, 80, 81, 89, 100, 102, 111, 115, 119, 120, 122, 123, 131, 133, 134, 135], "get": [18, 20, 26, 28, 32, 36, 55, 65, 71, 77, 80, 85, 89, 102, 109, 110, 117, 119, 121, 123, 129, 131], "pass": [18, 28, 30, 36, 55, 59, 77, 80, 102, 107, 134], "down": [18, 28, 36, 48, 55, 77, 80, 102, 120, 121, 125], "tree": [18, 28, 36, 55, 77, 80, 102], "mappingnod": [18, 36, 55, 77], "tdltype": [18, 114, 115, 116], "tdl": [18, 114, 115, 116], "multipathfading5gtdl": [18, 119], "rms_delai": [18, 115, 116], "combin": [18, 26, 30, 41, 62, 63, 119, 122, 123, 132], "5gtdl": [18, 114, 115, 116], "multipathfadingexponenti": [18, 119], "tap_interv": 18, "exponenti": [18, 119], "quadrigachannel": 19, "map": [19, 28, 64, 72, 74, 75, 77, 78, 80, 109, 110, 115, 116, 117, 120, 131, 133], "quadrigainterfac": 19, "fit": [19, 123], "softwar": [19, 50, 118, 119, 120, 121, 123, 129, 132], "architectur": 19, "consisd": 19, "radartarget": 20, "fals": [20, 28, 30, 34, 35, 36, 55, 59, 85, 89, 100, 101, 102, 108, 110, 113, 115, 116, 118, 120, 121, 126, 128, 129, 130, 132], "visibl": [20, 120, 123, 125], "null": [20, 77, 85, 108, 115], "hypothesi": [20, 85], "disabl": [20, 28, 30, 34, 36, 41, 55, 89, 102, 120, 127], "get_cross_sect": 20, "impinging_direct": 20, "emerging_direct": 20, "queri": [20, 23, 26, 80, 101, 106, 125, 126], "wave": [20, 23, 51, 104, 127], "leav": 20, "get_veloc": 20, "veloc": [20, 22, 26, 51, 56, 57, 59, 83, 84, 87, 101, 115], "get_forwards_transform": 20, "global": [20, 23, 30, 36, 110, 115, 120, 132, 134], "transform": [20, 21, 22, 23, 24, 26, 51, 57, 63, 101, 105, 119, 120, 125], "get_backwards_transform": 20, "radarcrosssectionmodel": 20, "fixedcrosssect": 20, "cross_sect": 20, "fix": [20, 123], "__": 20, "virtualradartarget": 20, "pose": [20, 22, 23, 26, 36, 51, 57, 101], "exist": [20, 28, 30, 32, 34, 55, 57, 58, 59, 102, 107, 122, 124], "chann": 20, "see": [20, 35, 48, 67, 100, 107, 118, 123], "rest": [20, 22, 57, 101], "origin": [20, 26, 48, 84, 89, 123], "virtualtarget": 20, "physicalradartarget": 20, "moveabl": [20, 22, 57, 101], "alwai": [20, 29, 57, 66, 101, 126, 133], "physicaltarget": 20, "movebl": 20, "rcrt": 20, "radarchannelr": 20, "neg": [20, 26, 30, 51, 54, 55, 56, 59, 74, 89, 99, 101, 105], "impulserespons": 20, "path_real": 20, "radarpathr": 20, "domain": [20, 24, 35, 73, 74, 76, 77, 108, 113, 115, 116, 118, 120, 125, 127, 131, 133], "reiv": 20, "null_hypothesi": 20, "remov": [20, 23, 26, 36, 54, 56, 71, 80, 123, 132], "non": [20, 24, 30, 55, 74, 110, 112, 120, 123, 134], "evalu": [20, 30, 55, 60, 63, 82, 89, 100, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 127, 128, 131, 132, 134, 135], "ground_truth": [20, 85], "ground": [20, 85], "truth": [20, 85], "row": [20, 106], "radarchannelbas": [20, 85], "attenu": [20, 53, 126, 132], "miss": [20, 132], "recent": [20, 24, 26, 57, 66, 101, 135], "hasn": 20, "phase_shift": [20, 127], "doppler_shift": 20, "doppler_veloc": 20, "power_factor": 20, "mimo_respons": 20, "global_posit": [20, 36], "global_veloc": 20, "spectral": [20, 99, 134], "perceiv": 20, "amplitud": [20, 78, 89, 98, 100, 104, 112, 133], "global_velc": 20, "unit": [20, 22, 23, 26, 36, 57, 74, 75, 77, 78, 83, 89, 101, 133], "remain": [20, 122, 123], "reflect": [20, 120], "center": [20, 23, 35, 57, 101, 108, 109, 115, 116, 117, 118, 120], "includ": [20, 63, 77, 88, 89, 107, 123, 128], "radartargetr": 20, "radarinterferencer": 20, "interfer": [20, 35, 56, 77, 78, 110, 111, 114, 115, 116, 119, 120], "propgat": [20, 102], "singletargetradarchannelr": 20, "target_r": 20, "present": [20, 85, 106, 123, 132], "multitargetradarchannelr": 20, "interference_r": 20, "multi": [20, 72, 80, 121], "num_target": 20, "multitargetradarchannel": [20, 119], "spatialradarchannel": 20, "interfernc": [20, 109], "bistat": 20, "dedic": [20, 30, 32, 66, 109, 117, 120, 128], "add_target": 20, "make_target": 20, "singletargetradarchannel": [20, 119, 126, 132], "target_rang": [20, 114, 126, 132], "radar_cross_sect": [20, 114, 126, 132], "target_azimuth": 20, "target_zenith": 20, "target_exist": [20, 132], "monostat": [20, 132], "reflector": [20, 119], "presenc": 20, "leakag": [20, 50, 56, 57, 93, 95, 96, 101, 114, 132], "calcul": [20, 30, 89, 104, 134], "accord": [20, 35, 98, 99, 100, 120, 123], "rang": [20, 35, 59, 62, 83, 84, 86, 87, 89, 114, 128], "taken": [20, 98, 122], "account": [20, 72, 80], "move": 20, "chang": [20, 22, 24, 34, 36, 120, 123], "ob": 20, "clutter": 20, "todo": 20, "add": [20, 23, 26, 30, 32, 34, 35, 55, 57, 58, 77, 84, 97, 98, 99, 101, 102, 120, 123, 127, 129, 131, 132], "literatur": 20, "absolut": [20, 24, 27, 104, 123, 132], "distanc": [20, 35, 84, 85, 99, 104, 114, 132], "meter": 20, "either": [20, 35, 51, 85, 89, 120, 122, 123, 128], "rc": 20, "locat": [20, 23, 30, 34, 55, 73, 77, 85, 107, 114, 120, 122, 128, 132, 133], "nois": [20, 25, 26, 35, 54, 56, 57, 58, 70, 85, 88, 89, 98, 101, 102, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 130, 132, 133, 134], "3d": 20, "more": [20, 30, 70, 89, 98, 106, 120, 123, 125, 129], "radarchannel": [20, 85, 114], "target_veloc": 20, "coordiant": [20, 23, 84], "basic": [21, 38, 45, 64, 104, 120, 121, 123, 127, 130], "pymont": [21, 65, 85], "extra": 21, "pipelin": [21, 30, 38, 55, 102, 107, 121, 133], "graph": [21, 35, 73, 120], "anim": 21, "runtim": [22, 25, 27, 30, 55, 74, 102, 122, 127, 128, 129], "frame": [22, 23, 26, 34, 35, 36, 40, 41, 51, 56, 57, 62, 65, 66, 73, 74, 75, 76, 77, 78, 86, 87, 89, 101, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 127, 128, 129, 131, 132, 133], "local": [22, 23, 36, 57, 101, 107, 123], "antennaarrai": 23, "local_characterist": [23, 51], "character": [23, 51, 120, 123], "begin": [23, 51, 77, 78, 110, 120, 126, 130, 135], "pmatrix": [23, 51], "v": [23, 51, 134], "end": [23, 35, 51, 59, 78, 122, 123, 126, 130], "denot": [23, 51, 73, 83, 99, 100, 119, 127], "vertic": [23, 51], "lvert": [23, 51], "rvert": [23, 51], "sqrt": [23, 51], "ploariz": [23, 51], "global_characterist": 23, "global_direct": 23, "plot_polar": 23, "angle_resolut": 23, "180": [23, 74, 134], "plot_gain": 23, "idealantenna": [23, 115, 116, 126, 129], "theoret": [23, 74, 75, 77, 78, 120], "linearantenna": 23, "slant": 23, "linearli": 23, "co": 23, "sin": 23, "pi": [23, 126, 127], "patchantenna": 23, "patch": [23, 53, 119, 120, 125], "jaeckel": [23, 134], "further": [23, 26, 34, 48, 52, 56, 58, 59, 66, 70, 100, 102, 118, 122, 123, 128], "dipol": 23, "half": [23, 51], "wavelength": [23, 26, 51, 59, 101], "dipoleantenna": 23, "antennaarraybas": [23, 26, 51], "num_antenna": [23, 26, 51, 66, 101, 127], "num_transmit_antenna": 23, "num_receive_antenna": [23, 126], "arg_0": [23, 36], "plot_topologi": 23, "plt": [23, 30, 37, 55, 73, 83, 89, 100, 120, 127, 129], "cartesian_phase_respons": 23, "rvert_2": 23, "gg": 23, "th": [23, 30, 41], "q": [23, 42, 98, 104, 112, 119], "_m": [23, 30, 55], "respond": 23, "a_": 23, "electromagnet": [23, 26, 34, 101, 121, 127, 133], "waveform": [23, 26, 40, 50, 51, 62, 63, 66, 72, 75, 77, 80, 82, 87, 101, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 126, 127, 128, 129, 131, 132, 135], "refor": 23, "a_1": 23, "a_2": 23, "dot": [23, 40, 45], "interc": [23, 40, 45], "liter": [23, 35, 83], "nativ": [23, 120, 121, 122, 125], "complex": [23, 35, 51, 66, 72, 73, 74, 75, 76, 77, 78, 80, 89, 100, 120, 121, 125, 126, 127, 129, 131, 133], "cartesian_array_respons": 23, "charactersitci": 23, "charactersit": [23, 119, 132], "horizontal_phase_respons": 23, "planar": 23, "therefor": [23, 29, 30, 40, 41, 42, 48, 120, 122, 123], "spherical_phase_respons": [23, 126], "uniformarrai": [23, 26, 115, 116, 126, 129], "anntenna": 23, "z": [23, 36], "tranform": 23, "anntena": 23, "property_blacklist": [23, 26, 28, 36, 51, 55, 59, 62, 74, 78, 87, 97, 101, 102], "ignor": [23, 26, 28, 35, 36, 41, 51, 55, 59, 62, 74, 75, 77, 78, 87, 97, 101, 102, 108, 115, 118], "arbitrari": [23, 28, 30, 41, 51, 55, 64, 65, 74, 76, 78, 85, 120], "unequ": 23, "customarrai": 23, "add_antenna": 23, "ad": [23, 26, 30, 32, 34, 41, 52, 55, 57, 58, 59, 71, 77, 80, 84, 97, 99, 101, 102, 112, 120, 123, 124, 127, 133], "remove_antenna": 23, "stephan": [23, 134], "borner": [23, 134], "lar": [23, 134], "thiel": [23, 134], "volker": [23, 134], "jungnickel": [23, 134], "geometr": [23, 134], "rotat": [23, 36, 134], "60": [23, 123, 134], "5966": [23, 134], "5977": [23, 134], "2012": [23, 134], "2214017": [23, 134], "csit": 24, "hint": [24, 74, 107, 131], "channelstateformat": 24, "format": [24, 28, 30, 85, 115, 123], "frequency_select": 24, "channelstatedimens": 24, "select": [24, 30, 51, 54, 65, 77, 85, 120, 124, 130, 134], "receive_stream": 24, "transmit_stream": 24, "state_format": 24, "num_delay_tap": 24, "num_frequency_bin": 24, "hdfserializ": [24, 26, 28, 35, 56, 73, 83, 101], "__state_format": 24, "most": [24, 26, 40, 45, 48, 57, 101, 107, 120, 122, 123, 127, 130, 132, 135], "__state": 24, "num_receive_stream": [24, 66], "num_transmit_stream": [24, 66, 73], "state_inform": 24, "fourier": [24, 63, 119, 120], "__num_delay_tap": 24, "recov": 24, "4th": 24, "__num_frequency_bin": 24, "set_stat": 24, "to_impulse_respons": 24, "intern": [24, 26, 29, 34, 35, 48, 55, 56, 58, 74, 75, 77, 78, 100, 102, 125, 128, 129, 134], "fft": [24, 67, 77, 86], "to_frequency_select": 24, "num_bin": 24, "without": [24, 56, 76, 95, 102, 111, 123, 128], "pad": [24, 41, 59, 77], "perform": [24, 26, 30, 55, 65, 80, 85, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 126, 129, 131, 132, 134], "num_symbol": [24, 73, 74, 77], "symbol": [24, 25, 35, 40, 63, 66, 67, 68, 69, 70, 71, 74, 75, 77, 78, 80, 81, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 125, 127, 128, 129, 131, 133, 134], "coo": 24, "spars": [24, 84], "n_rx": 24, "n_tx": 24, "n_out": 24, "n_in": 24, "timestamp": [24, 35, 66, 102], "data": [24, 30, 32, 34, 35, 40, 41, 42, 45, 48, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 80, 83, 85, 87, 89, 108, 109, 113, 115, 116, 117, 118, 120, 123, 127, 128, 129, 130, 131, 132, 133], "befor": [24, 66, 67, 68, 69, 71, 72, 84, 89, 109, 110, 112, 113, 114, 115, 116, 117, 120, 122, 124, 126, 128, 129], "received_stream": 24, "iter": [24, 30, 34, 51, 53, 58, 73, 102], "slice": 24, "concaten": [24, 73], "append": [24, 25, 35, 42, 56, 59, 73, 122], "axi": [24, 30, 35, 37, 77, 83, 89, 100, 108, 113, 115, 116, 118, 129, 130, 131, 133], "along": [24, 77, 123], "linear_st": 24, "append_linear": 24, "consolemod": [25, 27, 30, 102, 126, 127, 129, 130, 131, 132, 133], "print": [25, 27, 29, 30, 130, 133], "behaviour": [25, 27, 30, 35, 41, 57, 89, 100, 101, 102, 120, 127, 129], "interact": [25, 27, 29, 30, 102, 123, 129], "refresh": 25, "shell": 25, "silent": [25, 31, 126, 127, 129, 130, 131, 132, 133], "exept": 25, "snrtype": [25, 26, 57, 58, 101, 102, 132], "ratio": [25, 26, 57, 58, 63, 75, 76, 77, 78, 89, 101, 102, 104, 109, 110, 112, 113, 114, 115, 116, 117, 119, 120, 130], "ebn0": [25, 109, 110, 112, 113, 114, 115, 116, 117, 120], "bit": [25, 38, 40, 41, 42, 45, 48, 63, 65, 66, 72, 74, 75, 77, 78, 80, 89, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 125, 127, 130, 131, 132, 133], "energi": [25, 31, 35, 74, 75, 77, 78, 86, 87, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 133], "esn0": 25, "pn0": [25, 57, 58, 101, 102], "en0": 25, "n0": [25, 132], "custom": [25, 31, 74, 77, 100, 101, 119, 120, 123, 129, 131], "snr": [25, 26, 57, 58, 101, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 126, 127, 128, 130, 131, 132, 133], "except": [26, 30, 123], "fail": [26, 28, 123], "operationresulttyp": 26, "operationresult": 26, "operatortyp": 26, "receptiontyp": 26, "slottyp": 26, "slot": [26, 62, 66, 71, 80, 87, 115, 120, 133], "operatorslot": 26, "broadcast": [26, 100, 134], "them": [26, 41, 42, 56, 66, 120, 123, 130, 135], "captur": 26, "slot_index": 26, "boolean": [26, 30, 33, 36, 59, 74, 75, 77, 101], "frame_dur": [26, 31, 62, 65, 66, 74, 75, 77, 86, 87, 89], "durat": [26, 34, 35, 62, 65, 75, 76, 77, 78, 86, 87, 89, 102, 108, 109, 110, 113, 115, 116, 117, 118, 120], "prefer": [26, 62, 83, 87, 123], "mixed_sign": 26, "emerging_sign": [26, 101], "num_emerging_sign": 26, "count": 26, "devicetransmiss": [26, 34, 56, 101, 102], "operator_transmiss": [26, 101, 128], "from_output": 26, "num_operator_transmiss": 26, "deviceinput": [26, 34, 56, 57, 58, 101, 102], "impinging_sign": [26, 34, 56, 57, 58, 101, 102], "num_impinging_sign": 26, "processeddeviceinput": [26, 34, 56, 101], "operator_input": [26, 34, 101], "cach": [26, 30, 34, 56, 57, 58, 66, 101, 102], "num_operator_input": 26, "drt": 26, "devicerecept": [26, 34, 56, 58, 101], "operator_recept": [26, 101, 128], "operator_separ": [26, 101, 117], "separ": [26, 65, 85, 89, 101, 110, 111, 120, 123], "infer": [26, 34, 74, 101, 114, 120], "from_processeddeviceinput": 26, "device_input": [26, 101], "operatorrecept": 26, "num_operator_recept": 26, "mixingoper": 26, "we": [26, 109, 110, 112, 113, 114, 115, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "receiverslot": 26, "shall": [26, 123], "referenc": [26, 66], "when": [26, 29, 35, 85, 101, 122, 123, 125], "wrapper": 26, "around": [26, 89, 129], "_receiv": 26, "rceiv": 26, "cache_recept": 26, "recall_recept": 26, "_recall_recept": 26, "hdf": [26, 28, 56], "noise_pow": [26, 35, 54, 56, 57], "strength": 26, "snr_type": [26, 57, 58, 101, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 132], "_noise_pow": 26, "operator_index": 26, "regist": [26, 28, 30, 34, 36, 41, 48, 55, 56, 58, 59, 80, 102, 122], "check": [26, 30, 34, 38, 110, 119, 120, 134], "registr": [26, 34, 55], "statu": [26, 30, 34, 123], "num_oper": [26, 34], "max_sampling_r": [26, 51, 56, 57, 59], "min_frame_dur": 26, "requri": 26, "least": [26, 77, 78, 108, 115, 118, 119, 123, 125], "min_num_samples_per_fram": 26, "collect": [26, 30, 55, 65, 66, 85, 102, 103, 120, 123, 129, 132], "transmissiontyp": 26, "transmitterslot": 26, "underli": [26, 30, 85], "_transmit": 26, "clear": [26, 56, 123], "cache_transmiss": 26, "recall_transmiss": 26, "_recall_transmiss": 26, "add_transmiss": 26, "operatortransmiss": 26, "get_transmiss": 26, "clear_cach": [26, 56], "unsupportedslot": 26, "act": [26, 29, 36, 66, 120], "basi": [26, 88, 119, 128, 129], "watt": [26, 97], "greater": [26, 30, 51, 55, 59, 74, 75, 76, 77, 78, 101, 102], "max_frame_dur": 26, "max_dur": 26, "emiss": [26, 51, 59, 101], "rf": [26, 51, 57, 59, 93, 95, 96, 98, 101, 109, 110, 112, 115, 116, 117, 120, 132, 134], "emmiss": 26, "analog": [26, 51, 59, 88, 101, 112, 119, 132], "digit": [26, 51, 56, 59, 88, 100, 101, 112, 119, 132, 134], "notimplementederror": [26, 35, 56, 67, 68, 69, 71, 72, 101], "transmit_oper": [26, 34, 102], "transmisison": 26, "generate_output": [26, 34, 101, 102], "were": [26, 34, 35, 37, 73, 101, 102, 123], "process_input": [26, 34, 56, 57, 58, 101, 102, 120], "receive_oper": [26, 34, 56, 58, 102], "fed": [26, 34], "operator": [26, 34], "verbos": [27, 102], "everyth": 27, "info": [27, 102], "warn": [27, 53, 125], "noth": [27, 123], "results_dir": [27, 102, 132], "consol": [27, 30, 55, 65, 85, 102], "console_mod": [27, 30, 102, 126, 127, 129, 130, 131, 132, 133], "up": [27, 30, 48, 120, 121, 122, 125, 132], "default_results_dir": [27, 132], "store": [27, 30, 34, 55, 56, 85, 120, 128, 129], "newli": [27, 30, 37, 55, 80, 102, 122, 126, 127, 129, 130, 131, 133], "color": 27, "scheme": [27, 40, 41, 42, 45, 77, 78, 120, 130, 131], "style_context": [27, 129], "context": [27, 28, 120, 123, 133], "manag": [27, 28, 41, 52, 58, 59, 66], "write": [27, 30, 102, 123], "returm": [27, 30, 102], "main": [28, 103, 123], "mutabl": 28, "detect": [28, 30, 42, 62, 73, 74, 75, 76, 77, 78, 82, 85, 86, 87, 114, 119, 121, 122, 125, 129], "automat": [28, 56, 89, 107, 112, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133], "As": [28, 120, 121, 122, 123, 124, 125, 126, 128, 130, 131], "easi": [28, 74, 122], "to_fil": 28, "again": 28, "just": [28, 128], "easili": [28, 129], "from_fil": 28, "serializabletyp": 28, "from_yaml": [28, 36, 55, 77, 80, 102], "constructor": [28, 36, 55, 77, 80, 102], "safeconstructor": [28, 36, 55, 77, 80, 102], "extract": [28, 30, 36, 55, 65, 77, 80, 84, 85, 102, 120, 122, 129], "initializationwrapp": 28, "dict": 28, "serializablearrai": 28, "enumer": [28, 29, 126], "from_paramet": 28, "helper": [28, 120], "extens": [28, 107, 122, 123, 131], "cfg": 28, "recogn": [28, 123], "filenam": 28, "clean": 28, "deactiv": [28, 131], "done": [28, 40], "registered_class": 28, "valuesview": 28, "registered_tag": 28, "keysview": 28, "read": [28, 123], "tag_registri": 28, "from_path": 28, "config": [28, 120], "filesystem": [28, 128], "from_fold": 28, "recurs": [28, 41, 119, 122], "follow_link": 28, "to_fold": 28, "from_str": 28, "string": [28, 30, 35, 37, 54, 55, 65, 84, 85], "to_str": 28, "representererror": 28, "unregist": 28, "from_stream": 28, "textiobas": 28, "deseri": [28, 128], "constructorerror": 28, "pars": 28, "to_stream": 28, "hdfserializabletyp": 28, "structur": [28, 30, 77, 101, 108, 113, 115, 116, 118, 120, 126, 127, 128, 129, 131], "valuetyp": [29, 30], "lin": [29, 83], "value_typ": 29, "dbconversiontyp": [29, 104], "decibel": 29, "api": [29, 107, 119, 120, 121, 123, 127, 128, 129, 132, 135], "howev": [29, 30, 101, 107, 113, 120, 123], "preserv": [29, 100, 123], "compat": 29, "20db": 29, "41392685158225": 29, "instead": [29, 111, 120, 124], "30": [29, 123, 132], "30db": 29, "from_tupl": 29, "value_db": 29, "logarithmicsequ": 29, "content": [29, 30, 85, 123, 125], "empti": [29, 35, 77, 102, 126, 129], "tolist": 29, "stand": 30, "alon": 30, "effici": [30, 129, 134], "flexibl": [30, 77], "mont": [30, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 127, 129, 131, 132, 134], "carlo": [30, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 121, 127, 129, 131, 132, 134], "wrap": 30, "project": [30, 73, 107, 120, 121, 123], "pickl": 30, "becom": [30, 84, 120, 121, 123, 129], "campaign": [30, 34, 55, 85, 120, 128, 132, 133], "sweep": [30, 55, 86, 102, 109, 110, 112, 113, 114, 115, 116, 117, 120, 127, 129, 131, 132], "gridsect": [30, 55], "grid": [30, 55, 65, 77, 85, 102, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 129], "settabl": [30, 120], "investig": [30, 55, 65, 85, 120, 121, 129, 130], "treat": [30, 123], "potenti": 30, "multidimension": [30, 72, 79, 80], "drawn": 30, "montecarlosampl": 30, "min": [30, 100], "max": [30, 84, 86, 87], "abort": [30, 55], "prematur": [30, 55, 85, 109, 110, 112, 113, 114, 115, 116, 117, 120], "reach": 30, "confid": [30, 55, 109, 110, 112, 113, 114, 115, 116, 117, 120], "threshold": [30, 55, 75, 76, 77, 78, 84, 85, 114], "bayer": [30, 134], "detail": [30, 48, 52, 59, 65, 66, 67, 77, 85, 100, 118, 120, 123], "workload": [30, 120, 129], "previou": [30, 34, 120, 123], "flowchart": [30, 120], "spawn": 30, "montecarloactor": 30, "actor": [30, 115], "resourc": [30, 77, 108, 113, 115, 116, 118, 127, 128, 129, 131], "cpu": [30, 129], "control": [30, 48, 55, 56, 89, 101, 112, 114, 123, 124, 129, 132, 133, 134], "schedul": [30, 134], "task": 30, "complet": [30, 101, 121, 124], "persist": 30, "word": [30, 40, 41, 42, 45, 48, 66, 77, 100, 108, 109, 113, 115, 116, 117, 118, 131], "sort": [30, 34, 74, 76, 77, 89], "encourag": [30, 123], "to_scalar": [30, 85, 129], "stop": [30, 34, 85, 109, 110, 112, 113, 114, 115, 116, 117, 120, 128, 134], "criteria": [30, 85, 134], "imposs": [30, 85], "artifacttempl": [30, 65, 85], "fat": 30, "numer": [30, 124, 134], "common": [30, 65, 85, 120, 123, 127, 131], "AT": [30, 65, 85], "copi": [30, 35, 73, 111, 122, 123, 128, 130, 131], "visualiz": [30, 35, 37, 54, 65, 84, 85], "evaluationtempl": [30, 65, 85], "evaluationresult": [30, 55, 85, 129], "final": [30, 85, 123, 128, 129], "step": [30, 38, 40, 41, 42, 48, 66, 68, 69, 71, 72, 80, 89, 100, 122, 123, 126, 130, 133, 135], "to_arrai": [30, 85, 129], "raw": [30, 73, 74, 75, 77, 78, 83, 85, 87, 131, 133], "scalarevaluationresult": [30, 65, 85], "scalar_result": [30, 85], "plot_surfac": [30, 65, 85, 110, 120], "griddimens": [30, 55, 65, 85, 129], "from_artifact": 30, "whose": [30, 55, 65, 85, 123], "whether": [30, 57, 59, 123], "sert": 30, "x_m": [30, 55, 65, 85], "form": [30, 41, 63, 66, 120, 123, 133], "onc": [30, 89, 120, 129], "report": [30, 41, 107, 121, 122], "confidence_level": 30, "suggest": [30, 64, 120], "toler": [30, 41, 55, 109, 110, 112, 113, 114, 115, 116, 117, 120], "tol": [30, 55], "bar": [30, 55, 106], "sum_": [30, 74, 75, 77, 78], "suffici": [30, 41], "delta": [30, 55, 86, 87, 89, 99], "leq": 30, "upper": [30, 55], "limit": [30, 51, 77, 78, 115, 123, 132, 134], "tick_format": 30, "rtype": [30, 55, 65, 85, 89], "abbrevi": [30, 55, 65, 85, 129], "short": [30, 55, 65, 85, 120, 123], "label": [30, 55, 65, 85, 89], "ax": [30, 35, 37, 55, 65, 73, 83, 85, 89, 100, 129], "annot": [30, 55, 65, 85, 107], "long": [30, 48, 55, 65, 85, 123], "lower": [30, 55, 120], "diverg": [30, 55], "plot_scal": [30, 109, 110, 112, 113, 114, 115, 116, 117, 120], "accept": [30, 123], "identifi": [30, 34, 51, 85, 122, 123], "generate_result": [30, 55, 65, 85, 129], "whole": [30, 35, 41, 55, 65, 85, 89, 120, 123], "grid_sect": 30, "sample_index": 30, "num_artifact": 30, "artifact_scalar": 30, "num_evalu": [30, 55], "add_sampl": 30, "probabl": [30, 85, 114, 121, 129], "confidence_statu": 30, "thershold": 30, "conid": 30, "give": [30, 111, 120, 123], "feedback": 30, "about": [30, 120, 123], "cofid": 30, "actorrunresult": 30, "messag": [30, 134], "runner": [30, 102], "remot": [30, 59, 102, 123], "samplegrid": 30, "grid_configur": 30, "persis": 30, "montecarlorunn": 30, "argument_tupl": 30, "catch_except": 30, "mo": 30, "essenti": [30, 73, 123, 128, 131], "worker": [30, 129], "privat": [30, 123], "catch": 30, "_ray_trace_ctx": [30, 102], "stage_identifi": 30, "stage": [30, 66, 102, 131], "here": [30, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "stage_executor": 30, "callback": 30, "callabl": 30, "montecarloresult": [30, 102, 129], "sample_grid": 30, "performance_tim": 30, "swept": [30, 86], "do": [30, 40, 42, 48, 55, 73, 108, 115, 118, 120, 122, 123, 128, 129], "suppli": 30, "save_to_matlab": [30, 120], "matlab": [30, 120, 121, 122, 128], "evaluation_result": 30, "considered_object": 30, "sample_point": [30, 55], "tick": 30, "name": [30, 34, 55, 56, 65, 85, 120, 123, 124, 131, 133], "num_sample_point": 30, "configure_point": 30, "point_index": 30, "first_impact": 30, "impact": 30, "last_impact": 30, "registereddimens": 30, "_properti": 30, "getter": 30, "significantli": 30, "increas": 30, "computation": [30, 120], "demand": [30, 115, 130], "re": [30, 35, 86, 87, 128, 129, 131], "reduc": [30, 120], "manipul": 30, "is_regist": 30, "question": [30, 80, 106, 121], "fget": 30, "descriptor": 30, "obtain": [30, 121], "setter": 30, "fset": 30, "delet": [30, 123], "fdel": 30, "montecarlo": [30, 102], "investigated_object": 30, "min_num_sampl": [30, 109, 110, 112, 113, 114, 115, 116, 117, 120], "num_actor": [30, 102, 115], "section_block_s": 30, "database_cach": 30, "ray_address": [30, 102], "cpus_per_actor": 30, "runtime_env": 30, "progress_log_interv": 30, "montecarloevalu": 30, "block": [30, 40, 41, 42, 45, 48, 63, 65, 73, 77, 109, 110, 115, 117, 119, 120, 121, 130], "hard": [30, 56, 64, 74, 75, 77, 78, 133], "drive": [30, 56, 111, 132], "zodb": 30, "databas": 30, "address": [30, 59, 102, 123, 127], "head": [30, 102], "machin": [30, 102, 123], "reserv": 30, "One": [30, 32, 78, 120], "host": [30, 59, 123, 124, 125], "occur": [30, 32, 35, 72, 80, 120, 123], "log": [30, 109, 110, 112, 113, 114, 115, 116, 117, 120], "new_dimens": [30, 55, 120, 126, 127, 129, 130, 131, 132, 133], "add_dimens": [30, 55], "add_evalu": [30, 55, 120, 126, 127, 129, 130, 131, 132, 133], "max_num_sampl": 30, "christian": [30, 134], "\u00e5": [30, 134], "kon": [30, 134], "hoel": [30, 134], "erik": [30, 134], "von": [30, 134], "schwerin": [30, 134], "ra": [30, 134], "\u00fa": [30, 134], "tempon": [30, 134], "asymptot": [30, 134], "optim": [30, 129, 133, 134], "siam": [30, 134], "journal": [30, 74, 134], "scientif": [30, 134], "36": [30, 113, 134], "a869": [30, 134], "a885": [30, 134], "2014": [30, 134], "1137": [30, 134], "130911433": [30, 134], "librari": [31, 59, 123, 129], "staticoper": 31, "silenttransmitt": 31, "mock": [31, 42, 119, 132], "signaltransmitt": 31, "signalreceiv": 31, "num_drop": [32, 34, 108, 118, 128, 132], "scenariotyp": [32, 34], "consecut": 32, "trigger": [32, 51, 55, 56, 57, 58, 59, 101, 102, 108, 118, 125], "add_devic": [32, 34, 58, 59, 101, 102], "exst": 32, "creation": [32, 34, 57, 122], "new_devic": [32, 34, 52, 57, 59, 102, 120, 124, 126, 127, 128, 129, 130, 131, 132, 133], "device_index": [32, 34, 128], "search": [32, 55, 84, 122], "randomr": [33, 97], "random_nod": 33, "sign": [33, 123], "integ": [33, 35, 41, 101, 133], "mother_nod": [33, 99], "mother": [33, 99], "is_random_root": 33, "is_root": 33, "random_moth": [33, 51, 97, 101], "child": 33, "scenariomod": 34, "intenum": 34, "record": [34, 135], "dataset": [34, 132, 135], "replai": [34, 55, 128], "transformablebas": [34, 36], "simultan": [34, 98, 102, 123, 134], "device_regist": 34, "lookup": 34, "num_devic": [34, 101], "num_receiv": 34, "num_transmitt": 34, "uniqu": [34, 101, 120], "drop_dur": [34, 102], "measur": [34, 55, 85, 123, 128, 132, 134], "overwrit": [34, 55, 128, 132], "start": [34, 35, 57, 99, 101, 111, 119, 121, 123, 124, 128, 132], "permit": [34, 123], "savefil": [34, 55, 85], "playback": 34, "session": 34, "transmit_devic": [34, 102], "receive_devic": [34, 58, 102], "represnt": 34, "replayscenario": 34, "unabl": [34, 122], "__sampl": 35, "mxt": 35, "uniformli": 35, "__sampling_r": 35, "__carrier_frequ": 35, "superimpos": 35, "filter_ord": 35, "resampl": [35, 103], "supoperosit": 35, "pipe": 35, "through": [35, 123], "init": 35, "aliasing_filt": 35, "anti": [35, 123], "alias": 35, "downsampl": 35, "added_sign": 35, "dynam": [35, 123], "superposit": [35, 99, 102, 120], "allowd": 35, "frequci": 35, "legend": 35, "png": [35, 78, 89, 100], "hire": [35, 78, 89, 100], "plot_ey": 35, "symbol_dur": 35, "linewidth": 35, "75": [35, 132], "symbol_cutoff": 35, "ey": [35, 126], "diagram": [35, 120], "render": [35, 107, 120, 123, 129], "plane": [35, 73, 74, 133], "repetit": [35, 38, 74, 77, 78, 86, 108, 109, 110, 113, 115, 116, 117, 118, 119, 120, 128, 130], "Will": [35, 106], "round": [35, 101, 133], "line_width": 35, "width": 35, "abov": [35, 85, 100, 120, 123], "properli": [35, 120, 122, 124, 128, 133], "intersymbol": 35, "special": [35, 123], "effect": [35, 51, 100, 112, 120, 123, 127, 129, 131, 133, 134], "append_sampl": 35, "don": [35, 73, 83, 131], "align": 35, "append_stream": [35, 73], "to_interleav": 35, "data_typ": 35, "int16": 35, "interleav": [35, 38, 119], "stretch": [35, 78, 86], "doubl": 35, "from_interleav": 35, "interleaved_sampl": 35, "norm": [36, 67], "from_spher": 36, "to_spher": 36, "from_cartesian": 36, "translat": 36, "rotation_rpi": 36, "roll": [36, 78, 113], "pitch": 36, "yaw": 36, "from_rpi": 36, "rpy": 36, "po": 36, "from_transl": 36, "transform_posit": 36, "rotate_direct": 36, "transform_direct": 36, "transformablelink": 36, "kinetmat": 36, "chain": [36, 38, 41, 56, 57, 66, 80, 88, 93, 95, 96, 101, 110, 112, 119, 120, 122, 126, 131, 132], "forwards_transform": 36, "kinemat": 36, "set_bas": 36, "detach": 36, "linked_fram": 36, "add_link": 36, "establish": [36, 108, 109, 118], "remove_link": 36, "force_remov": 36, "registerd": [36, 101], "global_orient": 36, "is_bas": 36, "backwards_transform": 36, "to_local_coordin": 36, "arg_1": 36, "cyclic": [38, 77, 113, 115, 116, 119], "redund": [38, 40, 45, 48, 109, 110, 117, 119, 120], "scrambl": [38, 119], "term": [40, 78, 123], "exchang": [40, 48, 65, 108, 118, 120, 127, 134], "wrong": 40, "decis": [40, 120], "demodul": [40, 74, 75, 77, 78, 102, 120, 125, 131, 133], "introduc": [40, 41, 42, 48, 65, 85, 101, 107, 119, 120, 122, 127], "blockinterleav": 40, "block_siz": [40, 115, 116], "interleave_block": 40, "wise": [40, 45], "fashion": [40, 120, 123], "divid": [40, 65, 78], "k_n": [40, 41, 42, 45, 48], "bit_block_s": [40, 41, 42, 45, 48, 109, 110, 117, 120, 130], "tild": [40, 45, 126], "x_1": [40, 45], "x_2": [40, 45], "x_": [40, 45], "y_1": [40, 45], "y_2": [40, 45], "y_": [40, 45], "y_k": [40, 45], "cdot": [40, 41, 45, 100], "mod": [40, 45], "l_n": [40, 41, 42, 45, 48], "encoded_bit": [40, 41, 42, 45, 48, 66], "code_block_s": [40, 41, 42, 45, 48, 130], "achiev": [40, 41, 42, 45, 74, 107, 120, 123, 124, 130, 134], "relat": [40, 41, 120], "r_n": [40, 41, 45], "concept": [41, 65, 85, 117, 120, 121, 127, 129, 134], "subsequ": [41, 72, 80, 120], "sequenti": [41, 80, 108, 118, 120, 122], "revers": [41, 131], "encodermanag": [41, 66], "k_": 41, "m_n": 41, "lceil": 41, "rceil": 41, "exactli": [41, 48], "necessari": [41, 115, 123], "simplif": 41, "allow_pad": 41, "allow_trunc": 41, "basemodem": [41, 66, 74, 80], "truncat": 41, "add_encod": [41, 120, 130], "data_bit": [41, 74, 75, 77, 78, 133], "num_code_bit": 41, "next": [41, 48, 120, 123, 131], "num_data_bit": 41, "plain": 41, "might": [41, 101, 105, 115, 131], "cut": [41, 100], "bigger": [41, 105], "required_num_data_bit": 41, "produc": [41, 123], "crc": 42, "occurr": 42, "cyclicredundancycheck": 42, "check_block_s": 42, "checksum": 42, "repeat": [45, 74, 77, 109, 110, 117, 120, 130, 133], "repetitionencod": [45, 120], "32": [45, 113], "lead": [45, 120, 123], "even": [45, 70, 89, 120, 123], "mask": [48, 77, 123], "prevent": [48, 76, 123], "pseudorandomgener": 48, "init_sequ": 48, "1600": 48, "31": 48, "gold": 48, "generate_sequ": 48, "reset": 48, "gernat": 48, "impli": [48, 123], "revert": 48, "queue": 48, "back": [48, 57, 89, 120, 122, 133], "rng": [48, 133], "scrambler3gpp": 48, "scrambler": 48, "technic": 48, "scrambler_3gpp": 48, "scrambler80211a": 48, "802": [48, 134], "11a": [48, 134], "scrambler_80211a": 48, "soft": 48, "07": [48, 134], "2018": [48, 98, 134], "15": [48, 123, 125, 132, 134], "etsi_t": [48, 134], "138200_138299": [48, 134], "138211": [48, 134], "02": [48, 133, 134], "ts_138211v150200p": [48, 134], "telecommun": [48, 134], "lan": [48, 134], "man": [48, 134], "art": [48, 74, 134], "11": [48, 99, 100, 112, 123, 125, 128, 132, 134], "mac": [48, 134], "layer": [48, 56, 57, 101, 127, 134], "phy": [48, 134], "speed": [48, 109, 134], "std": [48, 134], "1999": [48, 134], "ieeestd": [48, 134], "90606": [48, 134], "real": [50, 56, 83, 89, 125, 129, 132], "setup": [50, 122, 125], "usrp": [50, 59, 111, 119, 122], "univers": [50, 118], "peripher": 50, "bind": [50, 52, 58, 66, 111, 119, 122], "dummi": 50, "uhd": [50, 52, 118, 119, 122], "audio": [50, 111, 119, 122, 135], "sound": [50, 52, 100, 125, 134], "card": [50, 52, 125], "offer": [50, 51, 123, 128, 129], "calibr": [50, 56, 57], "testb": [50, 121, 132], "afford": 51, "consum": [51, 123], "grade": 51, "typic": [51, 120, 123, 132], "44": 51, "khz": [51, 77, 125], "48": 51, "audioantenna": 51, "audiodeviceantenna": 51, "audiodevic": [51, 52, 108, 125], "playback_devic": [51, 108], "record_devic": [51, 108], "playback_channel": [51, 108], "record_channel": [51, 108], "48000": 51, "physicaldevic": [51, 53, 54, 56, 57, 59, 60], "rock": 51, "samplin": [51, 56, 57, 59], "audioscenario": 52, "physicalscenario": [52, 57, 58, 59], "phyical": 52, "audiosystem": [52, 108], "delaycalibr": [53, 54], "physical_devic": [53, 54], "delaycalibrationbas": [53, 56], "num_iter": 53, "wait": 53, "inher": 53, "cabl": [53, 125], "Be": 53, "care": 53, "compens": [53, 78, 106, 110, 120], "idl": 53, "selectiveleakagecalibr": 54, "leakage_respons": 54, "leakagecalibrationbas": [54, 56], "implicit": 54, "remove_leakag": [54, 56], "transmitted_sign": [54, 56], "received_sign": [54, 56], "delay_correct": [54, 56], "recveived_sign": [54, 56], "estimate_delai": 54, "mmseestim": 54, "num_prob": 54, "num_wavelet_sampl": 54, "127": 54, "configure_devic": 54, "mmse": [54, 78, 110, 119, 120], "fly": 54, "strictli": [54, 120], "evaluatorplotmod": 55, "evalut": 55, "hide": 55, "seri": [55, 73, 131], "evaluatorregistr": 55, "plot_mod": 55, "hardwareloop": [55, 108, 118, 132], "hardwareloopsampl": 55, "hardwareloopplot": [55, 60], "hardware_loop": [55, 125, 132], "prepare_figur": 55, "prepar": 55, "update_plot": 55, "_update_plot": 55, "manual_trigg": [55, 108, 118], "plot_inform": [55, 132], "physicalscenariotyp": [55, 58], "pdt": [55, 56, 58], "keyboard": 55, "user": [55, 74, 108, 111, 118, 120, 121, 122, 123, 124, 129, 131, 132], "manual": [55, 107, 108, 118, 122], "imens": 55, "add_plot": 55, "evaluator_index": 55, "replac": [55, 122, 124, 127], "campa": 55, "file_loc": 55, "variabl": [56, 97, 122, 127, 133], "subclass": 56, "ct": 56, "max_receive_delai": [56, 57, 108, 125], "leakage_calibr": 56, "delay_calibr": 56, "siganl": 56, "noleakagecalibr": 56, "stub": [56, 127], "nodelaycalibr": 56, "save_calibr": 56, "under": [56, 85, 86, 107, 121, 122, 123], "load_calibr": 56, "adaptive_sampl": 56, "adapt": [56, 98, 120, 123, 134], "lowpass_filt": 56, "lowpass": 56, "lowpass_bandwidth": 56, "determin": [56, 59, 89, 123], "estimate_noise_pow": 56, "1000": [56, 77, 109, 110, 112, 114, 115, 116, 117, 120, 126, 130, 132, 133], "unbias": 56, "trigger_direct": [56, 57], "bypass": [56, 57], "directli": [56, 57, 107, 120, 121, 123, 135], "bass": 56, "hdf_group_nam": 56, "correct_transmit_delai": 56, "correct_receive_delai": 56, "demonstr": [57, 117, 127, 128, 129, 130, 131], "physicaldevicedummi": 57, "receive_transmiss": 57, "rf_chain": [57, 101, 107, 110, 112, 120], "rfchain": [57, 98, 101, 110, 112, 120], "amplif": [57, 100, 101], "adc": [57, 86, 89, 101, 112, 132], "analogdigitalconvert": [57, 89, 101], "isol": [57, 88, 98, 101, 114, 119, 120, 132, 134], "perfect": [57, 88, 90, 93, 101, 119, 132], "coupl": [57, 88, 101, 119], "mutual": [57, 88, 91, 92, 101, 119], "trigger_model": [57, 101], "triggermodel": [57, 101], "statictrigg": [57, 101], "own": [57, 111, 121, 123], "trigger_r": [57, 58, 101, 102], "triggerr": [57, 58, 101, 102], "simulateddevicetransmiss": [57, 101, 102], "inf": [57, 58, 100, 101, 102, 109, 117, 134], "leaking_sign": [57, 101], "channel_st": [57, 101, 120], "infinit": [57, 58, 89, 101, 102], "leak": [57, 93, 95, 101], "processedsimulateddeviceinput": [57, 101, 102], "simulateddevicerecept": [57, 58, 101, 102], "physicalscenariodummi": 57, "download": [58, 111, 122, 135], "simulatedphysicalscenario": [58, 132], "metric": [58, 102], "usrpsystem": [59, 118], "usrpdevic": 59, "server": [59, 107, 123], "ip": [59, 118], "port": [59, 118], "5555": [59, 118], "700000000": 59, "tx_gain": [59, 118], "rx_gain": [59, 118], "scale_transmiss": 59, "num_prepended_zero": 59, "200": [59, 113], "num_appended_zero": 59, "bindung": 59, "700": 59, "mhz": [59, 110, 113, 120, 128], "ensur": [59, 123], "proper": [59, 101, 120, 122, 125], "prepend": 59, "parent": 59, "internet": 59, "protocol": [59, 121, 123], "adress": [59, 101], "num_prepeneded_zero": 59, "dac": 59, "signalplot": 60, "hardwareloopdeviceplot": 60, "devicetransmissionplot": 60, "devicereceptionplot": 60, "eyeplot": 60, "receivedconstellationplot": 60, "radarrangeplot": 60, "hardwareloopevaluatorplot": 60, "evaluationplot": 60, "artifactplot": 60, "queue_length": 60, "joint": [61, 62, 114], "exemplari": 61, "jcastransmiss": 62, "communicationtransmiss": [62, 66], "radartransmiss": [62, 87], "communicationtransmissionfram": [62, 66], "jcasrecept": 62, "communicationrecept": [62, 66], "radarrecept": [62, 87], "communicationreceptionfram": [62, 66], "matchedfilterjca": [62, 114], "max_rang": [62, 84, 86, 87, 114], "duplexmodem": [62, 66, 120, 125, 127, 130, 131, 133], "enviro": 62, "correlatiom": 62, "range_resolut": [62, 86, 87], "chirp": [63, 78, 86, 111, 113, 117, 119, 120, 132], "kei": [63, 120, 123, 133], "orthogon": [63, 119], "divis": [63, 119], "multiplex": [63, 115, 116, 119], "Its": [63, 120], "bitssourc": [64, 66], "turn": [64, 125], "There": [64, 122, 123], "randombitssourc": 64, "streambitssourc": 64, "generate_bit": 64, "num_bit": 64, "randombit": 64, "introduct": [65, 85, 120], "communicationevalu": 65, "biterrorevalu": [65, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 125, 127, 130, 131, 133], "biterrorartifact": 65, "compar": [65, 126, 128], "blockerrorevalu": [65, 119], "blockerrorartifact": 65, "frameerrorevalu": [65, 119], "frameerrorartifact": 65, "throughputevalu": [65, 109, 119, 120], "throughputartifact": 65, "multipli": 65, "rather": [65, 85, 127], "straightforward": [65, 85], "modem_alpha": [65, 110, 112, 113, 115, 116, 117, 120], "modem_beta": [65, 113, 117], "communication_evalu": 65, "communication_artifact": 65, "transmitting_modem": [65, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120], "receiving_modem": [65, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120], "transmittingmodem": [65, 66, 120], "receivingmodem": [65, 66, 120], "float64": 65, "throughput": [65, 109, 119, 120, 121, 129], "bits_per_fram": [65, 74, 75, 77, 78, 133], "frame_error": 65, "duplexoper": [66, 87], "fec": [66, 120, 135], "waveformgener": [66, 74, 75, 77, 78, 133], "symbolprecod": [66, 67, 68, 69, 70, 71, 72, 131], "transmitstreamcod": [66, 81], "receivestreamcod": [66, 81], "encoded_symbol": [66, 131], "num_fram": 66, "decoded_sign": 66, "decoded_symbol": [66, 131], "equalized_symbol": [66, 125, 128], "decoded_bit": 66, "transmitting_devic": [66, 109, 128, 129], "tranmsit": 66, "unspecifi": 66, "receiving_devic": [66, 109, 128, 129], "encoder_manag": [66, 120, 130], "waveform_gener": [66, 74, 75, 77, 78, 114, 120, 125, 127, 129, 130, 131, 133], "num_data_bits_per_fram": 66, "bits_sourc": 66, "randomli": 66, "txmodem": 66, "transmit_stream_cod": 66, "rxmodem": [66, 114], "receive_stream_cod": 66, "simulatn": 66, "simplexlink": [66, 109, 128, 129], "simplex": [66, 109, 128, 129], "dft": [67, 108, 115, 116, 118, 119], "fft_norm": 67, "ortho": 67, "statedsymbol": [67, 68, 69, 70, 71, 72, 73, 74, 77, 78, 131], "num_input_stream": [67, 68, 69, 70, 71, 80, 81, 131], "num_output_stream": [67, 68, 69, 70, 71, 80, 81, 131], "maximumratiocombin": 68, "en": [68, 98, 123], "wikipedia": [68, 98], "wiki": [68, 98], "ratio_combin": 68, "mrc": [68, 70], "singlecarri": [69, 115, 116], "take": [69, 71, 123, 130], "alamouti": [70, 119, 134], "ala98": [70, 134], "stbc": 70, "emploi": 70, "spatialmultiplex": [71, 129], "sm": [71, 115], "fraction": [71, 80], "meant": [72, 80], "intermedi": [72, 80], "possibl": [72, 80, 123, 124], "symbolcod": [72, 115, 116], "symboltyp": 73, "pilot": [73, 74, 75, 76, 77, 78, 113], "somewher": 73, "num_block": 73, "append_symbol": 73, "deep": 73, "plot_constel": [73, 120, 125, 128, 133], "constel": [73, 78, 120, 125, 128, 133], "pyplot": [73, 120, 127, 129], "four": [73, 120, 127, 128, 129, 131, 133], "waveformtyp": 74, "nasir": [74, 134], "overview": [74, 119, 120, 121, 134], "tghe": 74, "channelestim": [74, 77, 78, 119], "nochannelestim": 74, "estimate_channel": [74, 77, 78], "idealchannelestim": [74, 77, 78, 119], "informaion": 74, "channelequ": [74, 77, 78, 119], "noequal": [74, 77], "equalize_channel": [74, 78], "stated_symbol": 74, "zeroforcingchannelequ": [74, 77, 78], "forc": [74, 77, 78, 108, 113, 116, 118, 119, 123, 127], "zeroforc": 74, "oversampling_factor": [74, 77, 78, 110, 112, 114, 120, 125, 130, 133], "modulation_ord": [74, 75, 77, 78, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 125, 130, 133], "channel_estim": [74, 108, 110, 114, 115, 116, 118, 120, 125, 127, 128], "channel_equ": [74, 108, 110, 114, 115, 116, 118, 120, 125, 127, 128], "baseband_sign": [74, 75, 77, 78, 101], "oversampl": [74, 78, 125], "symbol_typ": [74, 75], "complex128": 74, "samples_in_fram": [74, 75, 77, 78, 133], "bits_per_symbol": [74, 75], "symbols_per_fram": [74, 75, 77, 78, 133], "dat": [74, 75, 78], "bit_energi": [74, 75, 77, 78, 133], "guard": [74, 75, 76, 77, 78, 108, 113, 115, 116, 118], "symbol_energi": [74, 75, 77, 78, 133], "unitless": [74, 75, 77, 78], "unmap": [74, 75, 77, 78, 131, 133], "data_symbol": [74, 75, 77, 78, 133], "singular": [74, 75, 77, 78], "equalize_symbol": 74, "data_r": 74, "symbol_precoding_support": [74, 75], "pilotwaveformgener": [74, 75, 76], "pilot_sign": [74, 75, 77, 78], "pilotsymbolsequ": [74, 78], "accordingli": 74, "uniformpilotsymbolsequ": 74, "pilot_symbol": 74, "0j": 74, "viabl": 74, "spot": [74, 120], "Not": [74, 123], "advis": [74, 123], "product": [74, 123], "custompilotsymbolsequ": 74, "freeli": [74, 120], "chose": [74, 120], "mappedpilotsymbolsequ": 74, "pskqammap": [74, 78], "configurablepilotwaveform": [74, 77, 78], "symbol_sequ": 74, "repeat_symbol_sequ": 74, "pilot_symbol_sequ": [74, 78], "repeat_pilot_symbol_sequ": [74, 78], "ali": [74, 134], "salman": [74, 134], "durrani": [74, 134], "hani": [74, 134], "mehrpouyan": [74, 134], "steven": [74, 134], "blostein": [74, 134], "rodnei": [74, 134], "kennedi": [74, 134], "survei": [74, 134], "classif": [74, 134], "research": [74, 121, 134], "year": [74, 123, 134], "eurasip": [74, 134], "network": [74, 91, 123, 134], "2016": [74, 134], "1186": [74, 134], "s13638": [74, 134], "016": [74, 134], "0670": [74, 134], "chirpfskwaveform": 75, "chirp_dur": [75, 78, 86, 109, 117, 132], "1e": [75, 99, 110, 112, 113, 114, 116, 120, 129], "08": 75, "chirp_bandwidth": [75, 109, 117], "1000000000": 75, "freq_differ": [75, 109, 117], "num_pilot_chirp": 75, "num_data_chirp": [75, 109, 117], "50": [75, 109, 112, 117, 128], "guard_interv": [75, 78, 109, 110, 112, 113, 114, 117, 120], "adjac": 75, "chirpfsk": [75, 109, 117], "int64": 75, "neighbour": 75, "samples_in_chirp": 75, "chirps_in_fram": 75, "chirpfsksynchron": 75, "chirpfskcorrelationsynchron": 75, "guard_ratio": [75, 76, 77, 78], "correlationsynchron": [75, 76, 77, 78], "clock": [75, 76, 78], "fsk": [75, 111, 119], "pgt": 76, "equival": [76, 97, 104, 122, 123, 133], "kc76": [76, 134], "pilotcorrel": [76, 77], "anoth": 76, "span": 76, "elementtyp": [77, 108, 113, 115, 116, 118, 127, 128, 129, 131], "ofdm": [77, 100, 108, 111, 118, 119, 127, 128, 129, 131, 134], "prefixtyp": [77, 113, 115, 116], "prefix": 77, "zeropad": 77, "frameel": [77, 108, 113, 115, 116, 118, 127, 128, 129, 131], "frameresourc": [77, 127, 128, 129, 131], "prefix_typ": [77, 113, 115, 116], "prefix_ratio": [77, 108, 113, 115, 116, 118], "AND": [77, 123], "larger": [77, 78, 106, 123], "num_subcarri": [77, 108, 113, 115, 116, 118], "occupi": 77, "subcarri": [77, 108, 113, 115, 116, 118], "num_refer": 77, "num_element_typ": 77, "framesect": 77, "num_repetit": [77, 108, 113, 115, 116, 118], "ofdmwaveform": [77, 127, 128, 129, 131], "num_word": 77, "resource_mask": 77, "place_symbol": 77, "reference_symbol": 77, "pick_symbol": 77, "palc": 77, "framesymbolsect": [77, 127, 128, 129, 131], "pattern": [77, 108, 113, 115, 116, 118, 127, 129, 131], "frameguardsect": 77, "subcarrier_spac": [77, 108, 113, 115, 116, 118], "1024": [77, 110, 120, 127, 129, 131], "dc_suppress": [77, 108, 113, 115, 116, 118], "ul": 77, "dl": [77, 115], "sc": [77, 78, 110, 112, 113, 114, 120], "fdma": 77, "bpsk": 77, "qpsk": [77, 110, 120], "64": [77, 110, 113, 120, 125], "256": [77, 109, 115, 116, 117], "qam": [77, 78, 111, 113, 119, 120], "unassign": 77, "suppress": 77, "add_resourc": 77, "add_sect": 77, "pilot_sect": 77, "pilotsect": 77, "words_per_fram": 77, "references_per_fram": 77, "sometim": 77, "pilot_el": 77, "waveformgeneratorofdm": 77, "subsymbol": [77, 108, 115, 118], "schmidlcoxpilotsect": 77, "schmidl": [77, 108, 118, 134], "cox": [77, 108, 118, 134], "schmidlcoxpilot": [77, 108, 118], "ofdmsynchron": 77, "ofdmcorrelationsynchron": 77, "schmidlcoxsynchron": 77, "equz": 77, "schmidlcox": [77, 108, 118], "referenceposit": 77, "ideal_preambl": 77, "ideal_midambl": 77, "ideal_postambl": 77, "ofdmidealchannelestim": [77, 127], "reference_posit": 77, "referencposit": 77, "ofdmleastsquareschannelestim": [77, 128], "serializt": 77, "ofdmchannelequ": [77, 127], "ofdmzeroforcingchannelequ": [77, 127, 128], "zf": [77, 78, 108, 113, 114, 115, 116, 118, 127], "45": [77, 134], "1613": [77, 134], "1621": [77, 134], "1997": [77, 134], "26": [77, 134], "650240": [77, 134], "filteredsinglecarrierwaveform": 78, "symbol_r": [78, 110, 112, 113, 114, 120, 125, 130], "num_preamble_symbol": [78, 110, 112, 113, 114, 120, 125, 130], "num_data_symbol": [78, 110, 112, 113, 114, 120, 125, 130], "num_postamble_symbol": 78, "pilot_r": [78, 110, 112, 113, 114, 120, 125], "psk": [78, 115, 120, 133], "cosin": [78, 119, 120, 125], "off": [78, 100, 113], "psk_qam_map": 78, "llr": 78, "isi": 78, "fmcw": [78, 86, 119, 126, 132], "awgn": [78, 97, 110, 113, 120, 127, 131, 133], "preambl": [78, 113, 120, 123], "postambl": 78, "waform": 78, "num_guard_sampl": 78, "plot_filter_correl": 78, "convolut": [78, 119, 134], "shape": [78, 98, 126, 129], "plot_filt": 78, "singlecarriercorrelationsynchron": [78, 125], "singlecarrierchannelestim": 78, "singlecarrieridealchannelestim": 78, "singlecarrierleastsquareschannelestim": [78, 125], "singlecarrierchannelequ": 78, "singlecarrierzeroforcingchannelequ": [78, 125], "singlecarrierminimummeansquarechannelequ": 78, "rolledoffsinglecarrierwaveform": 78, "relative_bandwidth": 78, "roll_off": [78, 113, 120], "filter_length": 78, "longer": [78, 101], "puls": [78, 86, 113, 125], "inter": 78, "how": [78, 106, 120, 121, 123, 125, 132], "overlap": [78, 110, 120], "rootraisedcosinewaveform": [78, 120, 125, 130], "mdulat": 78, "rootraisedcosin": [78, 110, 112, 113, 120], "raisedcosinewaveform": 78, "raisedcosin": 78, "rectangularwaveform": 78, "rectangular": [78, 114, 119], "fmcwwaveform": 78, "chirp_slop": 78, "slope": [78, 86], "required_num_output_stream": [80, 131], "required_num_input_stream": [80, 131], "precodertyp": 80, "__modem": 80, "__precod": 80, "required_output": 80, "required_input": 80, "pop_precod": [80, 131], "transmitcod": 81, "receivecod": 81, "cube": [82, 84, 85, 87], "radarcub": [83, 84, 87], "angle_bin": 83, "doppler_bin": 83, "range_bin": [83, 87], "unexpect": 83, "velocity_bin": 83, "plot_rang": 83, "plot_range_veloc": 83, "normalize_pow": 83, "pointdetect": 84, "fromspher": 84, "radarpointcloud": [84, 87], "cloud": [84, 87], "num_point": 84, "add_point": 84, "radardetector": [84, 87], "thresholddetector": 84, "min_pow": [84, 114], "peak_detect": 84, "minmal": 84, "betwe": 84, "peak": 84, "maxdetector": 84, "radarevalu": 85, "detectionprobevalu": 85, "detectionprobartifact": 85, "receiveroperatingcharacterist": [85, 119, 126, 132], "rocartifact": 85, "versu": 85, "alarm": [85, 121], "rootmeansquareerror": [85, 119], "rootmeansquareartifact": 85, "radar_evalu": 85, "receiving_radar": 85, "radar_channel": [85, 114, 126, 132], "nradar": 85, "detector": [85, 87, 114, 132], "detectionprobabilityevalu": 85, "h0_valu": 85, "h1_valu": 85, "roc": [85, 114, 132], "h0": 85, "altern": [85, 123, 128], "h1": 85, "rocevalu": 85, "cube_h0": 85, "cube_h1": 85, "data_h0": 85, "data_h1": 85, "rocevaluationresult": 85, "detection_prob": 85, "false_alarm_prob": 85, "characteristc": [85, 132], "num_threshold": 85, "101": 85, "curv": [85, 100], "from_scenario": 85, "h0_scenario": 85, "h1_scenario": 85, "h0_oper": 85, "h1_oper": 85, "h0_campaign": 85, "h0_measur": [85, 132], "h1_campaign": 85, "h1_measur": [85, 132], "h5py": 85, "num_error": 85, "cummul": 85, "errro": 85, "rootmeansquareevalu": 85, "pcl": 85, "squre": 85, "rootmeansquareerrorresult": 85, "num_chirp": [86, 132], "100000000": 86, "pulse_rep_interv": [86, 132], "adc_sampling_r": 86, "radarwaveform": [86, 87], "unmodul": [86, 110, 120], "ping": [86, 87], "input_sign": [86, 89, 98, 100], "radial": [86, 87], "max_relative_doppl": [86, 87], "math": [86, 87, 103], "v_": [86, 87], "relative_doppler_resolut": [86, 87], "relative_doppler_bin": [86, 87], "realtiv": [86, 87], "valueerorr": 86, "wh": 87, "mono": 87, "duplex": [87, 120], "transmit_beamform": 87, "receive_beamform": [87, 126], "velocity_resolut": 87, "resulut": 87, "amplifi": [88, 107, 110, 112, 119, 120, 134], "imped": [88, 90, 93, 119], "quantiz": [89, 112, 132], "gaincontroltyp": 89, "automatig": 89, "max_amplitud": 89, "rms_amplitud": 89, "gaintyp": 89, "gaincontrolbas": 89, "rescale_quant": 89, "rescal": 89, "adjust": [89, 100, 106], "estimate_gain": 89, "voltag": 89, "adjust_sign": 89, "scale_quantized_sign": 89, "quantized_sign": 89, "qzanit": 89, "appropri": [89, 123], "volt": [89, 100], "automaticgaincontrol": [89, 112, 132], "agc_typ": 89, "backoff": 89, "rm": [89, 115], "agc": 89, "wil": 89, "plu": [89, 123], "imaginari": 89, "greatest": [89, 123], "quantiti": 89, "quantizertyp": [89, 112], "mid_ris": [89, 112], "mid_tread": 89, "num_quantization_bit": [89, 112, 132], "quantizer_typ": [89, 112], "jitter": 89, "symmetr": [89, 120, 134], "still": 89, "num_quantization_level": 89, "quantizationtyp": 89, "indepentedli": 89, "plot_quant": 89, "input_sampl": 89, "fig_ax": 89, "depict": [89, 100], "staircas": 89, "charaterist": 89, "impedancecoupl": 91, "transmit_correl": 91, "receive_correl": 91, "transmit_imped": 91, "receive_imped": 91, "matching_imped": 91, "perfectcoupl": 92, "perfectisol": 95, "specificisol": [96, 132], "noiser": [97, 101], "add_to": 97, "noiserealizationtyp": 97, "white": [97, 99, 120, 133], "gaussian": [97, 120, 133], "awgnreal": 97, "kiayani": [98, 134], "phase_offset": [98, 112], "amplitude_imbal": [98, 112], "pa": [98, 119], "imbal": [98, 112, 119], "impair": [98, 132], "add_iq_imbal": 98, "notat": 98, "iq_imbal": 98, "deterior": 98, "no_antenna": 98, "no_sampl": 98, "power_amplifi": [98, 107, 110, 112, 120], "poweramplifi": [98, 100], "phase_nois": [98, 112], "phasenois": [98, 99], "pase": 98, "adnan": [98, 134], "muhammad": [98, 134], "zeeshan": [98, 134], "wahe": [98, 134], "lauri": [98, 134], "anttila": [98, 134], "mahmoud": [98, 134], "abdelaziz": [98, 134], "dani": [98, 134], "korpi": [98, 134], "vill": [98, 134], "syrj\u00e4l\u00e4": [98, 134], "marko": [98, 134], "kosunen": [98, 134], "kari": [98, 134], "stadiu": [98, 134], "jussi": [98, 134], "ryyn\u00e4nen": [98, 134], "mikko": [98, 134], "valkama": [98, 134], "nonlinear": [98, 100, 134], "cancel": [98, 134], "improv": [98, 122, 123, 134], "microwav": [98, 134], "theori": [98, 120, 134], "techniqu": [98, 134], "66": [98, 134], "2299": [98, 134], "2312": [98, 134], "tmtt": [98, 134], "2017": [98, 134], "2786729": [98, 134], "add_nois": 99, "nophasenois": 99, "oscillatorphasenois": [99, 112], "k0": [99, 112], "k2": [99, 112], "k3": [99, 112], "10000": [99, 110, 112, 120], "oscil": [99, 134], "kkp": [99, 134], "densiti": [99, 134], "psd": 99, "s_": [99, 100], "phi_0": 99, "phi_2": 99, "varphi_3": 99, "k_0": 99, "k_2": 99, "flicker": 99, "law": [99, 123, 134], "decai": 99, "phi_3": 99, "k_3": 99, "cubic": 99, "110": 99, "2nd": 99, "3rd": 99, "invari": 100, "memoryless": [100, 134], "satur": 100, "sat": [100, 134], "saturation_amplitud": 100, "adjust_pow": 100, "overwritten": 100, "send": 100, "clippingpoweramplifi": 100, "clip": [100, 119], "rapppoweramplifi": 100, "smoothness_factor": [100, 110, 120], "rapp": [100, 110, 112, 119, 120, 134], "2p_": 100, "p_": 100, "geq": 100, "smooth": [100, 110, 120], "salehpoweramplifi": 100, "amplitude_alpha": 100, "amplitude_beta": 100, "phase_alpha": 100, "phase_beta": 100, "saleh": [100, 119, 134], "alpha_": 100, "beta_": 100, "alpha": [100, 117], "beta": 100, "custompoweramplifi": 100, "ch": [100, 134], "hpa": [100, 134], "dpsk": [100, 134], "european": [100, 134], "conf": [100, 134], "comm": [100, 134], "22": [100, 134], "24": [100, 129, 134], "91": [100, 134], "lieg": [100, 134], "belgium": [100, 134], "179": [100, 134], "184": [100, 134], "1991": [100, 134], "elib": [100, 134], "dlr": [100, 134], "33776": [100, 134], "twt": [100, 134], "29": [100, 134], "1715": [100, 134], "1720": [100, 134], "novemb": [100, 123, 134], "1981": [100, 134], "tcom": [100, 134], "1094911": [100, 134], "num_offset_sampl": 101, "trigger_delai": 101, "compute_num_offset_sampl": 101, "nearest": 101, "intereset": 101, "highest": 101, "interf": [101, 123], "asynchron": 101, "remove_devic": 101, "perfectli": 101, "offsettrigg": 101, "randomtrigg": 101, "simulateddeviceoutput": 101, "sequenec": 101, "from_deviceoutput": 101, "device_output": 101, "from_simulateddeviceoutput": 101, "simulateddevicereceiver": 101, "noise_r": 101, "correspond": [101, 102, 109, 123], "sublist": 101, "from_processedsimulateddeviceinput": 101, "otherwis": [101, 123], "realize_recept": 101, "receive_from_r": 101, "process_from_r": 101, "simulateddevicer": 101, "device_sign": 101, "construct": [101, 134], "improperli": 101, "simulateddrop": 102, "device_transmiss": [102, 128], "channel_r": 102, "device_recept": [102, 128], "simual": 102, "processedsimulateddevicerecept": 102, "mxm": 102, "departing_channel": 102, "active_onli": 102, "depart": 102, "arriving_channel": 102, "set_channel": [102, 126, 127, 128, 132], "transmitter_index": 102, "receiver_index": 102, "transmissison": 102, "simulationrunn": 102, "thread": 102, "deploi": [102, 107, 121], "internali": 102, "prior": [102, 107, 123], "plot_result": [102, 109, 110, 112, 113, 114, 115, 116, 117, 120], "dump_result": 102, "lose": 103, "variou": [103, 107], "tile": [103, 130], "db2lin": 104, "db_val": 104, "conversion_typ": 104, "lin2db": 104, "val": 104, "marcum_q": 104, "marcum": 104, "q_m": 104, "relationship": [104, 123], "chi": 104, "approxim": [104, 123, 127], "rms_valu": 104, "amplitude_path_loss": 104, "vacuum": 104, "travel": 104, "delay_resampling_matrix": 105, "num_samples_in": 105, "num_samples_out": 105, "mxn": 105, "necessarili": 105, "curtesi": 106, "stackoverflow": 106, "com": [106, 134], "61503168": 106, "evenli": 106, "screen": 106, "get_monitor": 106, "screen_geometri": 106, "monitor": 106, "geometri": 106, "screeninfo": 106, "set_figure_geometri": 106, "fig": [106, 129], "backend": 106, "tile_figur": 106, "col": 106, "screen_rect": 106, "tile_offset": 106, "now": [106, 111, 120, 125, 126, 127, 128, 129, 130, 132, 133], "qt": 106, "tk": 106, "qt5agg": 106, "tkagg": 106, "shown": 106, "pixel": 106, "height": 106, "intend": [107, 122, 123], "contribut": [107, 121], "chanc": 107, "regress": 107, "autom": [107, 120], "unittest": 107, "discov": 107, "unit_test": 107, "integr": [107, 120, 121, 124], "found": [107, 120, 121, 123], "integration_test": 107, "config_test": 107, "assert": [107, 123], "coverag": [107, 123], "test_instal": 107, "statement": [107, 120, 122, 123], "cover": [107, 123], "kindli": 107, "ask": [107, 133], "contributor": [107, 123], "maintain": [107, 121, 123], "written": [107, 123], "fulli": 107, "mypi": 107, "enforc": [107, 123], "pep8": 107, "flake8": 107, "complianc": [107, 123], "violat": [107, 123], "black": 107, "preprocessor": 107, "choic": [107, 122, 123], "pip": [107, 118, 122], "upgrad": 107, "sphinx": 107, "pypi": 107, "docssourc": 107, "insert": 107, "autodoc": 107, "py": [107, 124], "build": [107, 122], "html": [107, 118, 123], "websit": 107, "view": [107, 121, 123], "open": [107, 121, 122, 123, 128, 134], "web": [107, 123], "browser": 107, "desktop": 108, "soundcard": [108, 119], "siso": [108, 118, 125, 127], "6": [108, 110, 112, 113, 114, 115, 118, 120, 123, 125, 129], "30e3": [108, 115, 118], "dc": [108, 115, 116, 118], "4096": [108, 115, 118], "communict": [108, 115, 118], "0703125": [108, 113, 115, 116, 118], "600": 108, "2100": [108, 115], "078125": [108, 113, 115, 116, 118], "35": [108, 115, 118], "677083e": [108, 115, 118], "similar": [109, 120, 123], "500khz": 109, "sf": 109, "delta_f": 109, "1953": [109, 117], "125hz": 109, "bw": 109, "512": 109, "uncod": [109, 110, 113, 120], "log2": [109, 133], "15625": 109, "kbp": 109, "160": 109, "865mhz": 109, "10m": [109, 115], "865e6": [109, 116, 117], "500e3": [109, 117], "512e": [109, 117], "125": [109, 117], "paus": [109, 113, 117], "finish": [109, 110, 112, 113, 114, 115, 116, 117, 120, 129], "nyquist": [110, 120], "yield": [110, 120], "400": [110, 120], "mbp": [110, 113, 120], "mu": [110, 120], "interchirp": [110, 120], "128": [110, 116, 120, 125], "100e6": [110, 112, 114, 120], "1e6": [110, 112, 113, 120, 130], "post": [110, 120], "95": [110, 120], "wavform": [110, 120], "chapter": [111, 120], "hermspi": 111, "depth": [111, 121], "knowledg": [111, 123], "instruct": [111, 135], "suit": [111, 120], "enter": [111, 120, 123], "lora": [111, 119], "driver": [111, 119, 122], "mid": 112, "riser": 112, "1e4": [112, 125], "numerologi": 113, "lte": 113, "501": 113, "5e9": 113, "501e9": 113, "90": 113, "15e3": [113, 116], "2048": [113, 125], "1200": 113, "2e": [113, 114, 116, 132], "simulatan": 114, "backscatt": 114, "downl": 114, "commuic": 114, "vicin": 114, "1e9": [114, 118], "1ghz": 114, "1m": 114, "2m": 114, "5m2": 114, "base_station_oper": 114, "operat": 114, "2e6": 114, "terminal_oper": 114, "downlink": [114, 120], "tdd": 115, "ddddffuddddffu": 115, "30khz": 115, "ldpc": [115, 116, 134], "2x2": 115, "3ghz": 115, "3e9": 115, "isotrop": [115, 116], "10e": [115, 116], "10cm": [115, 116], "apart": [115, 116], "interconnect": [115, 116, 129], "100e": 115, "998": 115, "ddddd": 115, "ffu": 115, "dddd": 115, "quit": 115, "memori": 115, "comparison": [117, 134], "192": 118, "168": 118, "189": 118, "132": 118, "steadili": 119, "expand": [119, 120, 135], "latest": [119, 122], "offici": [119, 121, 122, 123, 124, 135], "bold": 119, "bi": [119, 123], "anual": 119, "fall": [119, 122], "reundanc": 119, "differenti": 119, "pariti": [119, 134], "reed": [119, 134], "solomon": [119, 134], "systemat": 119, "turbo": [119, 134], "am": 119, "pm": 119, "anlog": 119, "rmse": 119, "equip": [119, 135], "plug": [120, 127], "rough": 120, "quickli": 120, "accustom": [120, 121, 129, 131], "aim": [120, 121], "distinguish": [120, 123], "entiti": [120, 123], "verif": 120, "scope": [120, 123], "unlimit": [120, 123], "assumpt": [120, 123, 132], "meta": 120, "submit": 120, "These": [120, 123], "modular": 120, "interchang": [120, 123], "much": 120, "easier": 120, "outlin": [120, 125, 126, 130, 132], "util": [120, 122], "40": 120, "show": [120, 127, 129], "snippet": 120, "our": [120, 123, 126, 127, 129, 130, 131, 132, 133], "13": [120, 123, 125, 128, 132, 134], "highlight": [120, 127, 131, 133], "philosophi": 120, "behind": 120, "those": [120, 122, 123, 126], "simpl": [120, 134], "cours": [120, 133], "multitud": 120, "beyond": [120, 123], "consult": 120, "sink": 120, "tx_devic": 120, "rx_devic": 120, "tx_oper": 120, "rx_oper": 120, "rx_signal": 120, "seem": 120, "somewhat": 120, "glanc": 120, "almost": [120, 124, 132], "ship": 120, "noiseless": 120, "stem": [120, 129], "consequ": [120, 123, 129], "consider": 120, "noisi": 120, "said": [120, 126], "clearli": [120, 125, 128], "fundament": [120, 127], "commonli": 120, "parametr": 120, "seemingli": 120, "streamlin": [120, 122], "multicor": [120, 129], "usag": 120, "surround": 120, "frequent": 120, "conduct": 120, "ber": [120, 125, 127, 131], "42": [120, 125, 133], "mat": 120, "importantli": 120, "exploit": 120, "simpli": [120, 122, 129], "major": [120, 123, 130], "vote": [120, 130], "higher": [120, 125], "capabilit": 120, "But": [120, 123, 130], "sweet": 120, "tradeoff": 120, "intefer": [120, 121], "snr_dimens": 120, "rep_dimens": 120, "engin": [120, 121, 122, 124, 134], "out": [120, 123], "omnidirect": 120, "100ghz": 120, "github": [120, 121, 122, 123, 124], "welcom": 121, "heterogen": 121, "semi": 121, "driven": 121, "mechan": 121, "rat": 121, "student": 121, "formul": 121, "deploy": 121, "framework": [121, 126, 134], "compact": 121, "experiment": 121, "thrid": 121, "parti": [121, 123], "effort": [121, 123], "tutori": [121, 131, 132, 133], "publish": [121, 123, 134], "gnu": [121, 123], "agpl": [121, 123], "licens": 121, "cite": 121, "adler": [121, 134], "highli": 121, "made": [121, 123], "pull": [121, 122], "issu": [121, 122], "contact": [121, 123], "jan": [121, 134], "tobia": [121, 134], "kronauer": [121, 134], "andr\u00e9": [121, 134], "noll": [121, 134], "barreto": [121, 134], "6g": [121, 134], "120256": [121, 134], "120273": [121, 134], "3222063": [121, 134], "wai": [122, 123, 128], "built": [122, 129], "wheel": 122, "clone": 122, "scratch": 122, "recommend": 122, "who": [122, 123], "extend": [122, 123, 134], "maco": 122, "newest": 122, "env": [122, 124], "action": [122, 123], "plan": 122, "omit": 122, "develop": [122, 123, 124, 131, 133], "addition": [122, 131, 132, 133], "mathod": 122, "reason": [122, 123, 132], "lf": 122, "git": 122, "repo": 122, "cd": 122, "submodul": [122, 134], "cmake": 122, "studio": 122, "alter": [122, 131], "edit": 122, "extern": 122, "preliminari": 122, "octav": 122, "oct2pi": 122, "abl": [122, 128], "setx": 122, "cli": 122, "zip": 122, "archiv": [122, 123], "hermes_quadriga": 122, "quadriga_src": 122, "userspac": 122, "inexperienc": 122, "experi": 122, "everyon": [122, 123], "affero": 123, "public": 123, "agplv3": 123, "below": 123, "summari": 123, "tl": 123, "dr": 123, "legal": 123, "claus": 123, "thu": 123, "condit": 123, "permiss": 123, "barkausen": 123, "institut": 123, "copyright": 123, "holder": 123, "approv": 123, "meet": 123, "foundat": 123, "explicitli": 123, "mere": 123, "oblig": 123, "wish": 123, "opensourc": 123, "19": [123, 134], "2007": [123, 134], "inc": 123, "fsf": 123, "verbatim": 123, "copyleft": 123, "kind": [123, 128], "design": 123, "cooper": 123, "practic": [123, 133], "awai": 123, "freedom": 123, "contrast": 123, "guarante": 123, "speak": 123, "price": 123, "charg": 123, "want": 123, "piec": 123, "know": 123, "thing": 123, "protect": 123, "secondari": 123, "benefit": 123, "defend": 123, "widespread": 123, "incorpor": 123, "mani": 123, "hearten": 123, "come": 123, "ever": 123, "publicli": 123, "older": 123, "accomplish": 123, "goal": 123, "gpl": 123, "relicens": 123, "precis": [123, 125], "modif": 123, "like": [123, 124, 129], "semiconductor": 123, "license": 123, "recipi": 123, "organ": 123, "exact": 123, "earlier": 123, "unmodifi": 123, "anyth": 123, "would": [123, 130], "secondarili": 123, "liabl": 123, "infring": 123, "countri": 123, "convei": 123, "transfer": 123, "notic": 123, "extent": 123, "promin": 123, "tell": 123, "warranti": 123, "menu": 123, "item": 123, "criterion": 123, "bodi": 123, "particular": 123, "languag": 123, "wide": 123, "kernel": 123, "compil": 123, "subprogram": 123, "intim": 123, "flow": 123, "regener": 123, "grant": 123, "irrevoc": 123, "met": 123, "affirm": 123, "constitut": 123, "acknowledg": 123, "fair": 123, "sole": 123, "facil": 123, "compli": 123, "materi": 123, "behalf": 123, "prohibit": 123, "circumst": 123, "sublicens": 123, "unnecessari": 123, "circumvent": 123, "deem": 123, "technolog": 123, "fulfil": 123, "articl": [123, 134], "wipo": 123, "treati": 123, "adopt": 123, "decemb": 123, "1996": 123, "restrict": 123, "waiv": 123, "forbid": 123, "exercis": [123, 131], "disclaim": 123, "intent": 123, "against": 123, "conspicu": 123, "keep": 123, "intact": 123, "absenc": 123, "fee": 123, "carri": [123, 131], "date": 123, "entir": 123, "anyon": [123, 124], "possess": 123, "regardless": 123, "natur": 123, "storag": 123, "aggreg": 123, "what": [123, 128, 129], "inclus": 123, "caus": 123, "readabl": 123, "embodi": 123, "accompani": 123, "durabl": 123, "customarili": 123, "spare": 123, "cost": 123, "occasion": 123, "noncommerci": 123, "subsect": 123, "6b": 123, "place": 123, "grati": 123, "sai": 123, "find": 123, "satisfi": 123, "6d": 123, "portion": [123, 125], "exclud": 123, "tangibl": 123, "person": 123, "famili": 123, "household": 123, "sold": 123, "dwell": 123, "doubt": 123, "favor": [123, 132], "substanti": 123, "commerci": 123, "industri": [123, 134], "unless": 123, "procedur": 123, "author": 123, "suffic": 123, "becaus": 123, "perpetu": 123, "neither": 123, "nor": 123, "retain": 123, "abil": 123, "rom": 123, "servic": 123, "deni": 123, "itself": 123, "advers": 123, "affect": 123, "rule": 123, "across": 123, "password": 123, "unpack": 123, "supplement": 123, "though": 123, "govern": 123, "regard": 123, "notwithstand": 123, "provis": 123, "liabil": 123, "misrepresent": 123, "mark": 123, "licensor": 123, "declin": 123, "trademark": 123, "trade": 123, "indemnif": 123, "contractu": 123, "impos": 123, "surviv": 123, "expressli": 123, "attempt": 123, "void": 123, "patent": 123, "paragraph": 123, "ceas": 123, "reinstat": 123, "provision": 123, "until": 123, "perman": 123, "notifi": 123, "dai": 123, "cessat": 123, "moreov": 123, "cure": 123, "receipt": 123, "qualifi": 123, "ancillari": 123, "likewis": 123, "downstream": 123, "subject": 123, "asset": 123, "subdivid": 123, "merg": 123, "whatev": 123, "predecessor": 123, "had": 123, "could": [123, 129], "royalti": 123, "litig": 123, "claim": 123, "counterclaim": 123, "lawsuit": 123, "alleg": 123, "sell": 123, "sale": 123, "hereaft": 123, "manner": 123, "worldwid": 123, "express": 123, "agreement": 123, "commit": 123, "denomin": 123, "coven": 123, "sue": 123, "knowingli": 123, "reli": [123, 131], "readili": 123, "arrang": 123, "depriv": 123, "yourself": [123, 135], "believ": 123, "pursuant": 123, "procur": 123, "convey": 123, "discriminatori": 123, "busi": 123, "payment": 123, "primarili": 123, "march": 123, "constru": 123, "defens": 123, "surrend": 123, "court": 123, "contradict": 123, "excus": 123, "cannot": 123, "pertin": 123, "agre": 123, "whom": 123, "refrain": 123, "opportun": 123, "customari": 123, "facilit": 123, "revis": 123, "Such": [123, 129], "spirit": 123, "problem": 123, "concern": 123, "later": [123, 128], "choos": 123, "proxi": 123, "decid": [123, 130], "futur": 123, "THERE": 123, "NO": [123, 132], "FOR": 123, "THE": 123, "TO": 123, "BY": 123, "IN": 123, "OR": 123, "AS": 123, "OF": 123, "BUT": 123, "NOT": 123, "merchant": 123, "risk": 123, "qualiti": 123, "WITH": 123, "prove": 123, "defect": 123, "repair": 123, "event": 123, "WILL": 123, "BE": 123, "damag": 123, "incident": 123, "consequenti": 123, "aris": 123, "inabl": 123, "BEING": 123, "inaccur": 123, "sustain": 123, "failur": 123, "IF": 123, "SUCH": 123, "review": [123, 134], "close": [123, 128], "waiver": 123, "civil": 123, "best": 123, "redistribut": 123, "safest": 123, "pointer": 123, "brief": 123, "idea": 123, "hope": 123, "electron": [123, 134], "paper": [123, 134], "mail": 123, "solut": 123, "better": 123, "employ": 123, "programm": [123, 129], "school": 123, "especi": [124, 125], "disciplin": 124, "mathwork": 124, "popular": 124, "languang": 124, "esenti": [124, 127, 128], "workflow": [124, 127, 129], "pyenv": 124, "executionmod": 124, "outofprocess": 124, "ex": 124, "look": 124, "someth": 124, "usernam": 124, "simulation_modul": 124, "importlib": 124, "import_modul": 124, "thank": 124, "roberto": 124, "bomfin": 124, "courtesi": 124, "jupyt": [125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "notebook": [125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "onlin": [125, 126, 127, 128, 129, 130, 131, 132, 133, 135], "hardawar": 125, "diretli": 125, "lokal": 125, "query_devic": 125, "underyl": 125, "sounddevic": 125, "hilbert": 125, "envelop": 125, "fetch": 125, "speaker": 125, "inspect": [125, 130, 132, 133], "equl": 125, "assess": 125, "cap69": [126, 134], "logic": 126, "def": [126, 127, 129, 130, 131, 133], "__init__": [126, 129], "sample_covari": 126, "linalg": 126, "inv": 126, "conj": 126, "dtype": [126, 127, 129, 133], "array_respons": 126, "beamformed_sampl": 126, "newaxi": [126, 133], "And": 126, "coventionalbeamform": 126, "scipi": 126, "speed_of_light": 126, "10ghz": [126, 130], "10e9": [126, 130, 132], "18": [126, 130, 134], "25": [126, 132, 134], "essenc": 127, "capabl": 127, "radiat": 127, "radat": 127, "straightfoward": 127, "phaseshiftchannel": 127, "exp": 127, "2j": 127, "_rng": 127, "fourth": 127, "roughli": [127, 132], "tfrac": 127, "workspac": 128, "u": [128, 130], "800": 128, "800e6": 128, "Or": 128, "transmitter_idx": 128, "receiver_idx": 128, "few": 128, "h5": [128, 132], "recorded_drop": 128, "recalled_scenario": 128, "num_recalled_drop": 128, "deduc": 128, "arguabl": [129, 130], "grasp": 129, "veri": [129, 130], "ll": [129, 132], "insight": 129, "powerartifact": 129, "__str__": 129, "2f": 129, "powerevalu": 129, "subplot": 129, "suptitl": 129, "arang": [129, 133], "len": 129, "set_xlabel": 129, "set_ylabel": 129, "summed_pow": 129, "keepdim": [129, 130], "powerevaluationresult": 129, "section_coord": 129, "ndindex": 129, "_plot": 129, "_plot_multidim": 129, "powerestim": 129, "__receiv": 129, "think": 129, "why": 129, "answer": 129, "simulaten": 129, "parallel": 129, "sent": 129, "embarassingli": 129, "blazingli": 129, "fast": [129, 134], "observ": [129, 133], "power_estim": 129, "funtion": 129, "3k": 130, "repetitioncod": 130, "reshap": [130, 133], "astyp": [130, 133], "randint": 130, "error_cod": 130, "flip": [130, 131], "corrected_data": 130, "3333333333333333": 130, "39": 130, "capaign": 130, "At": 131, "coher": 131, "jump": 131, "prose": 131, "symbolflipp": 131, "incom": 131, "counterpart": 131, "072": 132, "072e9": 132, "simulated_devic": 132, "human": 132, "candid": 132, "notabl": 132, "predict": 132, "world": 132, "parameter": 132, "offlin": 132, "join": 132, "complementari": 133, "invert": 133, "communc": 133, "sake": 133, "simplic": 133, "skip": 133, "mention": 133, "amplitudeshiftkei": 133, "symbols_candid": 133, "symbol_indic": 133, "packbit": 133, "bitord": 133, "littl": 133, "flatten": 133, "symbol_index_estim": 133, "ab": 133, "uint8": 133, "unpackbit": 133, "baseband_sampl": 133, "explain": 133, "circl": 133, "symbol_pow": 133, "chosen": 133, "instanti": 133, "default_rng": 133, "instantiant": 133, "mapped_symbol": 133, "baseband_transmiss": 133, "baseband_recept": 133, "received_symbol": 133, "etsi18": 134, "akb22": 134, "divers": 134, "1451": 134, "1458": 134, "1998": 134, "49": 134, "730453": 134, "ari09": 134, "erdal": 134, "arikan": 134, "capac": 134, "55": 134, "3051": 134, "3073": 134, "2009": 134, "tit": 134, "2021379": 134, "bcjr74": 134, "bahl": 134, "cock": 134, "jelinek": 134, "raviv": 134, "corresp": 134, "284": 134, "287": 134, "1974": 134, "1055186": 134, "bar50": 134, "bhvst14": 134, "bgt93": 134, "berrou": 134, "glavieux": 134, "thitimajshima": 134, "Near": 134, "shannon": 134, "icc": 134, "93": 134, "1064": 134, "1070": 134, "1993": 134, "397441": 134, "brc60": 134, "bose": 134, "dwijendra": 134, "chaudhuri": 134, "68": 134, "79": 134, "1960": 134, "chleonardon": 134, "cassagn": 134, "hartmann": 134, "l\u00e9onardon": 134, "he": 134, "leroux": 134, "tajan": 134, "aumag": 134, "barthou": 134, "tonnelli": 134, "pignoli": 134, "le": 134, "gal": 134, "j\u00e9go": 134, "aff3ct": 134, "toolbox": 134, "elsevi": 134, "softwarex": 134, "100345": 134, "octob": 134, "2019": 134, "sciencedirect": 134, "scienc": 134, "pii": 134, "s2352711019300457": 134, "1016": 134, "softx": 134, "cb06": 134, "chorti": 134, "brook": 134, "circuit": 134, "regular": 134, "53": 134, "1989": 134, "tcsi": 134, "881182": 134, "cb07": 134, "arsenia": 134, "mike": 134, "infin": 134, "acoust": 134, "speech": 134, "icassp": 134, "iii": 134, "1005": 134, "1008": 134, "366852": 134, "gal63": 134, "robert": 134, "g": 134, "gallag": 134, "1963": 134, "iee99": 134, "jbtj12": 134, "reza": 134, "khanzadi": 134, "dan": 134, "kuylenstierna": 134, "ashkan": 134, "panahi": 134, "thoma": 134, "eriksson": 134, "herbert": 134, "zirath": 134, "61": 134, "1553": 134, "1565": 134, "2013": 134, "2285698": 134, "kwa": 134, "knapp": 134, "carter": 134, "320": 134, "327": 134, "1976": 134, "tassp": 134, "1162830": 134, "ndm": 134, "ncmf18": 134, "nimr": 134, "chafii": 134, "matth": 134, "fettwei": 134, "gfdm": 134, "otf": 134, "globecom": 134, "glocom": 134, "8647704": 134, "rap91": 134, "rs60": 134, "polynomi": 134, "finit": 134, "societi": 134, "mathemat": 134, "300": 134, "304": 134, "0108018": 134, "arxiv": 134, "sal81": 134, "sc97": 134, "slg04": 134, "sharon": 134, "litsyn": 134, "goldberg": 134, "2004": 134, "23rd": 134, "electr": 134, "israel": 134, "223": 134, "226": 134, "eeei": 134, "1361130": 134, "tv15": 134, "ido": 134, "tal": 134, "alexand": 134, "vardi": 134, "2213": 134, "2226": 134, "2015": 134, "2410251": 134, "vit67": 134, "viterbi": 134, "optimum": 134, "260": 134, "269": 134, "april": 134, "1967": 134, "1054010": 134, "xzb06": 134, "ybo": 134, "3gpptran04": 134, "gpp": 134, "tr": 134, "943": 134, "v6": 134, "eploy": 134, "googl": 135, "colab": 135}, "objects": {"hermespy.beamforming": [[2, 0, 0, "-", "beamformer"], [3, 0, 0, "-", "capon"], [4, 0, 0, "-", "conventional"]], "hermespy.beamforming.beamformer": [[2, 1, 1, "", "BeamformerBase"], [2, 1, 1, "", "FocusMode"], [2, 1, 1, "", "OT"], [2, 1, 1, "", "ReceiveBeamformer"], [2, 1, 1, "", "TransmitBeamformer"]], "hermespy.beamforming.beamformer.BeamformerBase": [[2, 2, 1, "", "operator"]], "hermespy.beamforming.beamformer.FocusMode": [[2, 3, 1, "", "CARTESIAN"], [2, 3, 1, "", "DEVICE"], [2, 3, 1, "", "HORIZONTAL"], [2, 3, 1, "", "SPHERICAL"]], "hermespy.beamforming.beamformer.ReceiveBeamformer": [[2, 4, 1, "", "PlotReceivePattern"], [2, 4, 1, "", "_decode"], [2, 4, 1, "", "decode_streams"], [2, 2, 1, "", "num_receive_focus_angles"], [2, 2, 1, "", "num_receive_input_streams"], [2, 2, 1, "", "num_receive_output_streams"], [2, 4, 1, "", "plot_receive_pattern"], [2, 2, 1, "", "precoding"], [2, 4, 1, "", "probe"], [2, 2, 1, "", "probe_focus_points"], [2, 4, 1, "", "receive"], [2, 2, 1, "", "receive_focus"]], "hermespy.beamforming.beamformer.TransmitBeamformer": [[2, 4, 1, "", "encode_streams"], [2, 2, 1, "", "num_transmit_focus_angles"], [2, 2, 1, "", "num_transmit_input_streams"], [2, 2, 1, "", "num_transmit_output_streams"], [2, 2, 1, "", "precoding"], [2, 4, 1, "", "transmit"], [2, 2, 1, "", "transmit_focus"]], "hermespy.beamforming.capon": [[3, 1, 1, "", "CaponBeamformer"]], "hermespy.beamforming.capon.CaponBeamformer": [[3, 4, 1, "", "_decode"], [3, 2, 1, "", "loading"], [3, 2, 1, "", "num_receive_focus_angles"], [3, 2, 1, "", "num_receive_input_streams"], [3, 2, 1, "", "num_receive_output_streams"], [3, 3, 1, "", "yaml_tag"]], "hermespy.beamforming.conventional": [[4, 1, 1, "", "ConventionalBeamformer"]], "hermespy.beamforming.conventional.ConventionalBeamformer": [[4, 4, 1, "", "_decode"], [4, 4, 1, "", "_encode"], [4, 2, 1, "", "num_receive_focus_angles"], [4, 2, 1, "", "num_receive_input_streams"], [4, 2, 1, "", "num_receive_output_streams"], [4, 2, 1, "", "num_transmit_focus_angles"], [4, 2, 1, "", "num_transmit_input_streams"], [4, 2, 1, "", "num_transmit_output_streams"], [4, 3, 1, "", "yaml_tag"]], "hermespy.bin": [[6, 0, 0, "-", "hermes"]], "hermespy.bin.hermes": [[6, 5, 1, "", "hermes_simulation"]], "hermespy.channel": [[8, 0, 0, "-", "channel"], [9, 0, 0, "-", "cluster_delay_line_indoor_factory"], [10, 0, 0, "-", "cluster_delay_line_indoor_office"], [11, 0, 0, "-", "cluster_delay_line_rural_macrocells"], [12, 0, 0, "-", "cluster_delay_line_street_canyon"], [13, 0, 0, "-", "cluster_delay_line_urban_macrocells"], [14, 0, 0, "-", "cluster_delay_lines"], [15, 0, 0, "-", "delay"], [16, 0, 0, "-", "ideal"], [17, 0, 0, "-", "multipath_fading_channel"], [18, 0, 0, "-", "multipath_fading_templates"], [19, 0, 0, "-", "quadriga_channel"], [20, 0, 0, "-", "radar_channel"]], "hermespy.channel.channel": [[8, 1, 1, "", "CRT"], [8, 1, 1, "", "Channel"], [8, 1, 1, "", "ChannelRealization"], [8, 1, 1, "", "PropagationDirection"]], "hermespy.channel.channel.Channel": [[8, 4, 1, "", "Propagate"], [8, 2, 1, "", "active"], [8, 2, 1, "", "gain"], [8, 3, 1, "", "impulse_response_interpolation"], [8, 2, 1, "", "min_sampling_rate"], [8, 2, 1, "", "num_inputs"], [8, 2, 1, "", "num_outputs"], [8, 4, 1, "", "propagate"], [8, 2, 1, "", "realization"], [8, 4, 1, "", "realize"], [8, 2, 1, "", "receiver"], [8, 2, 1, "", "scenario"], [8, 3, 1, "", "serialized_attributes"], [8, 2, 1, "", "sync_offset_high"], [8, 2, 1, "", "sync_offset_low"], [8, 2, 1, "", "transmitter"]], "hermespy.channel.channel.ChannelRealization": [[8, 2, 1, "", "channel"], [8, 4, 1, "", "from_HDF"], [8, 4, 1, "", "reciprocal"], [8, 4, 1, "", "to_HDF"]], "hermespy.channel.channel.PropagationDirection": [[8, 3, 1, "", "BACKWARDS"], [8, 3, 1, "", "FORWARDS"]], "hermespy.channel.cluster_delay_line_indoor_factory": [[9, 1, 1, "", "IndoorFactoryBase"], [9, 1, 1, "", "IndoorFactoryLineOfSight"], [9, 1, 1, "", "IndoorFactoryNoLineOfSight"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase": [[9, 2, 1, "", "surface"], [9, 2, 1, "", "volume"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight": [[9, 2, 1, "", "aoa_spread_mean"], [9, 2, 1, "", "aoa_spread_std"], [9, 2, 1, "", "aod_spread_mean"], [9, 2, 1, "", "aod_spread_std"], [9, 2, 1, "", "cluster_aoa_spread"], [9, 2, 1, "", "cluster_aod_spread"], [9, 2, 1, "", "cluster_delay_spread"], [9, 2, 1, "", "cluster_shadowing_std"], [9, 2, 1, "", "cluster_zoa_spread"], [9, 2, 1, "", "cross_polarization_power_mean"], [9, 2, 1, "", "cross_polarization_power_std"], [9, 2, 1, "", "delay_scaling"], [9, 2, 1, "", "delay_spread_mean"], [9, 2, 1, "", "delay_spread_std"], [9, 2, 1, "", "line_of_sight"], [9, 2, 1, "", "num_clusters"], [9, 2, 1, "", "num_rays"], [9, 2, 1, "", "rice_factor_mean"], [9, 2, 1, "", "rice_factor_std"], [9, 3, 1, "", "yaml_tag"], [9, 2, 1, "", "zoa_spread_mean"], [9, 2, 1, "", "zoa_spread_std"], [9, 2, 1, "", "zod_offset"], [9, 2, 1, "", "zod_spread_mean"], [9, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight": [[9, 2, 1, "", "aoa_spread_mean"], [9, 2, 1, "", "aoa_spread_std"], [9, 2, 1, "", "aod_spread_mean"], [9, 2, 1, "", "aod_spread_std"], [9, 2, 1, "", "cluster_aoa_spread"], [9, 2, 1, "", "cluster_aod_spread"], [9, 2, 1, "", "cluster_delay_spread"], [9, 2, 1, "", "cluster_shadowing_std"], [9, 2, 1, "", "cluster_zoa_spread"], [9, 2, 1, "", "cross_polarization_power_mean"], [9, 2, 1, "", "cross_polarization_power_std"], [9, 2, 1, "", "delay_scaling"], [9, 2, 1, "", "delay_spread_mean"], [9, 2, 1, "", "delay_spread_std"], [9, 2, 1, "", "line_of_sight"], [9, 2, 1, "", "num_clusters"], [9, 2, 1, "", "num_rays"], [9, 2, 1, "", "rice_factor_mean"], [9, 2, 1, "", "rice_factor_std"], [9, 3, 1, "", "yaml_tag"], [9, 2, 1, "", "zoa_spread_mean"], [9, 2, 1, "", "zoa_spread_std"], [9, 2, 1, "", "zod_offset"], [9, 2, 1, "", "zod_spread_mean"], [9, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office": [[10, 1, 1, "", "IndoorOfficeLineOfSight"], [10, 1, 1, "", "IndoorOfficeNoLineOfSight"]], "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight": [[10, 2, 1, "", "aoa_spread_mean"], [10, 2, 1, "", "aoa_spread_std"], [10, 2, 1, "", "aod_spread_mean"], [10, 2, 1, "", "aod_spread_std"], [10, 2, 1, "", "cluster_aoa_spread"], [10, 2, 1, "", "cluster_aod_spread"], [10, 2, 1, "", "cluster_delay_spread"], [10, 2, 1, "", "cluster_shadowing_std"], [10, 2, 1, "", "cluster_zoa_spread"], [10, 2, 1, "", "cross_polarization_power_mean"], [10, 2, 1, "", "cross_polarization_power_std"], [10, 2, 1, "", "delay_scaling"], [10, 2, 1, "", "delay_spread_mean"], [10, 2, 1, "", "delay_spread_std"], [10, 2, 1, "", "line_of_sight"], [10, 2, 1, "", "num_clusters"], [10, 2, 1, "", "num_rays"], [10, 2, 1, "", "rice_factor_mean"], [10, 2, 1, "", "rice_factor_std"], [10, 3, 1, "", "yaml_tag"], [10, 2, 1, "", "zoa_spread_mean"], [10, 2, 1, "", "zoa_spread_std"], [10, 2, 1, "", "zod_offset"], [10, 2, 1, "", "zod_spread_mean"], [10, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight": [[10, 2, 1, "", "aoa_spread_mean"], [10, 2, 1, "", "aoa_spread_std"], [10, 2, 1, "", "aod_spread_mean"], [10, 2, 1, "", "aod_spread_std"], [10, 2, 1, "", "cluster_aoa_spread"], [10, 2, 1, "", "cluster_aod_spread"], [10, 2, 1, "", "cluster_delay_spread"], [10, 2, 1, "", "cluster_shadowing_std"], [10, 2, 1, "", "cluster_zoa_spread"], [10, 2, 1, "", "cross_polarization_power_mean"], [10, 2, 1, "", "cross_polarization_power_std"], [10, 2, 1, "", "delay_scaling"], [10, 2, 1, "", "delay_spread_mean"], [10, 2, 1, "", "delay_spread_std"], [10, 2, 1, "", "line_of_sight"], [10, 2, 1, "", "num_clusters"], [10, 2, 1, "", "num_rays"], [10, 2, 1, "", "rice_factor_mean"], [10, 2, 1, "", "rice_factor_std"], [10, 3, 1, "", "yaml_tag"], [10, 2, 1, "", "zoa_spread_mean"], [10, 2, 1, "", "zoa_spread_std"], [10, 2, 1, "", "zod_offset"], [10, 2, 1, "", "zod_spread_mean"], [10, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells": [[11, 1, 1, "", "RuralMacrocellsLineOfSight"], [11, 1, 1, "", "RuralMacrocellsNoLineOfSight"], [11, 1, 1, "", "RuralMacrocellsOutsideToInside"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight": [[11, 2, 1, "", "aoa_spread_mean"], [11, 2, 1, "", "aoa_spread_std"], [11, 2, 1, "", "aod_spread_mean"], [11, 2, 1, "", "aod_spread_std"], [11, 2, 1, "", "cluster_aoa_spread"], [11, 2, 1, "", "cluster_aod_spread"], [11, 2, 1, "", "cluster_delay_spread"], [11, 2, 1, "", "cluster_shadowing_std"], [11, 2, 1, "", "cluster_zoa_spread"], [11, 2, 1, "", "cross_polarization_power_mean"], [11, 2, 1, "", "cross_polarization_power_std"], [11, 2, 1, "", "delay_scaling"], [11, 2, 1, "", "delay_spread_mean"], [11, 2, 1, "", "delay_spread_std"], [11, 2, 1, "", "line_of_sight"], [11, 2, 1, "", "num_clusters"], [11, 2, 1, "", "num_rays"], [11, 2, 1, "", "rice_factor_mean"], [11, 2, 1, "", "rice_factor_std"], [11, 3, 1, "", "yaml_tag"], [11, 2, 1, "", "zoa_spread_mean"], [11, 2, 1, "", "zoa_spread_std"], [11, 2, 1, "", "zod_offset"], [11, 2, 1, "", "zod_spread_mean"], [11, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight": [[11, 2, 1, "", "aoa_spread_mean"], [11, 2, 1, "", "aoa_spread_std"], [11, 2, 1, "", "aod_spread_mean"], [11, 2, 1, "", "aod_spread_std"], [11, 2, 1, "", "cluster_aoa_spread"], [11, 2, 1, "", "cluster_aod_spread"], [11, 2, 1, "", "cluster_delay_spread"], [11, 2, 1, "", "cluster_shadowing_std"], [11, 2, 1, "", "cluster_zoa_spread"], [11, 2, 1, "", "cross_polarization_power_mean"], [11, 2, 1, "", "cross_polarization_power_std"], [11, 2, 1, "", "delay_scaling"], [11, 2, 1, "", "delay_spread_mean"], [11, 2, 1, "", "delay_spread_std"], [11, 2, 1, "", "line_of_sight"], [11, 2, 1, "", "num_clusters"], [11, 2, 1, "", "num_rays"], [11, 2, 1, "", "rice_factor_mean"], [11, 2, 1, "", "rice_factor_std"], [11, 3, 1, "", "yaml_tag"], [11, 2, 1, "", "zoa_spread_mean"], [11, 2, 1, "", "zoa_spread_std"], [11, 2, 1, "", "zod_offset"], [11, 2, 1, "", "zod_spread_mean"], [11, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside": [[11, 2, 1, "", "aoa_spread_mean"], [11, 2, 1, "", "aoa_spread_std"], [11, 2, 1, "", "aod_spread_mean"], [11, 2, 1, "", "aod_spread_std"], [11, 2, 1, "", "cluster_aoa_spread"], [11, 2, 1, "", "cluster_aod_spread"], [11, 2, 1, "", "cluster_delay_spread"], [11, 2, 1, "", "cluster_shadowing_std"], [11, 2, 1, "", "cluster_zoa_spread"], [11, 2, 1, "", "cross_polarization_power_mean"], [11, 2, 1, "", "cross_polarization_power_std"], [11, 2, 1, "", "delay_scaling"], [11, 2, 1, "", "delay_spread_mean"], [11, 2, 1, "", "delay_spread_std"], [11, 2, 1, "", "line_of_sight"], [11, 2, 1, "", "num_clusters"], [11, 2, 1, "", "num_rays"], [11, 2, 1, "", "rice_factor_mean"], [11, 2, 1, "", "rice_factor_std"], [11, 3, 1, "", "yaml_tag"], [11, 2, 1, "", "zoa_spread_mean"], [11, 2, 1, "", "zoa_spread_std"], [11, 2, 1, "", "zod_offset"], [11, 2, 1, "", "zod_spread_mean"], [11, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon": [[12, 1, 1, "", "StreetCanyonLineOfSight"], [12, 1, 1, "", "StreetCanyonNoLineOfSight"], [12, 1, 1, "", "StreetCanyonOutsideToInside"], [12, 1, 1, "", "UrbanMicroCellsNoLineOfSight"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight": [[12, 2, 1, "", "aoa_spread_mean"], [12, 2, 1, "", "aoa_spread_std"], [12, 2, 1, "", "aod_spread_mean"], [12, 2, 1, "", "aod_spread_std"], [12, 2, 1, "", "cluster_aoa_spread"], [12, 2, 1, "", "cluster_aod_spread"], [12, 2, 1, "", "cluster_delay_spread"], [12, 2, 1, "", "cluster_shadowing_std"], [12, 2, 1, "", "cluster_zoa_spread"], [12, 2, 1, "", "cross_polarization_power_mean"], [12, 2, 1, "", "cross_polarization_power_std"], [12, 2, 1, "", "delay_scaling"], [12, 2, 1, "", "delay_spread_mean"], [12, 2, 1, "", "delay_spread_std"], [12, 2, 1, "", "line_of_sight"], [12, 2, 1, "", "num_clusters"], [12, 2, 1, "", "num_rays"], [12, 2, 1, "", "rice_factor_mean"], [12, 2, 1, "", "rice_factor_std"], [12, 3, 1, "", "yaml_tag"], [12, 2, 1, "", "zoa_spread_mean"], [12, 2, 1, "", "zoa_spread_std"], [12, 2, 1, "", "zod_offset"], [12, 2, 1, "", "zod_spread_mean"], [12, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight": [[12, 2, 1, "", "aoa_spread_mean"], [12, 2, 1, "", "aoa_spread_std"], [12, 2, 1, "", "aod_spread_mean"], [12, 2, 1, "", "aod_spread_std"], [12, 2, 1, "", "cluster_aoa_spread"], [12, 2, 1, "", "cluster_aod_spread"], [12, 2, 1, "", "cluster_delay_spread"], [12, 2, 1, "", "cluster_shadowing_std"], [12, 2, 1, "", "cluster_zoa_spread"], [12, 2, 1, "", "cross_polarization_power_mean"], [12, 2, 1, "", "cross_polarization_power_std"], [12, 2, 1, "", "delay_scaling"], [12, 2, 1, "", "delay_spread_mean"], [12, 2, 1, "", "delay_spread_std"], [12, 2, 1, "", "line_of_sight"], [12, 2, 1, "", "num_clusters"], [12, 2, 1, "", "num_rays"], [12, 2, 1, "", "rice_factor_mean"], [12, 2, 1, "", "rice_factor_std"], [12, 3, 1, "", "yaml_tag"], [12, 2, 1, "", "zoa_spread_mean"], [12, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside": [[12, 2, 1, "", "aoa_spread_mean"], [12, 2, 1, "", "aoa_spread_std"], [12, 2, 1, "", "aod_spread_mean"], [12, 2, 1, "", "aod_spread_std"], [12, 2, 1, "", "cluster_aoa_spread"], [12, 2, 1, "", "cluster_aod_spread"], [12, 2, 1, "", "cluster_delay_spread"], [12, 2, 1, "", "cluster_shadowing_std"], [12, 2, 1, "", "cluster_zoa_spread"], [12, 2, 1, "", "cross_polarization_power_mean"], [12, 2, 1, "", "cross_polarization_power_std"], [12, 2, 1, "", "delay_scaling"], [12, 2, 1, "", "delay_spread_mean"], [12, 2, 1, "", "delay_spread_std"], [12, 2, 1, "", "line_of_sight"], [12, 2, 1, "", "num_clusters"], [12, 2, 1, "", "num_rays"], [12, 2, 1, "", "rice_factor_mean"], [12, 2, 1, "", "rice_factor_std"], [12, 3, 1, "", "yaml_tag"], [12, 2, 1, "", "zoa_spread_mean"], [12, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight": [[12, 2, 1, "", "zod_offset"], [12, 2, 1, "", "zod_spread_mean"], [12, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells": [[13, 1, 1, "", "UrbanMacrocellsLineOfSight"], [13, 1, 1, "", "UrbanMacrocellsNoLineOfSight"], [13, 1, 1, "", "UrbanMacrocellsNoLineOfSightBase"], [13, 1, 1, "", "UrbanMacrocellsOutsideToInside"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight": [[13, 2, 1, "", "aoa_spread_mean"], [13, 2, 1, "", "aoa_spread_std"], [13, 2, 1, "", "aod_spread_mean"], [13, 2, 1, "", "aod_spread_std"], [13, 2, 1, "", "cluster_aoa_spread"], [13, 2, 1, "", "cluster_aod_spread"], [13, 2, 1, "", "cluster_delay_spread"], [13, 2, 1, "", "cluster_shadowing_std"], [13, 2, 1, "", "cluster_zoa_spread"], [13, 2, 1, "", "cross_polarization_power_mean"], [13, 2, 1, "", "cross_polarization_power_std"], [13, 2, 1, "", "delay_scaling"], [13, 2, 1, "", "delay_spread_mean"], [13, 2, 1, "", "delay_spread_std"], [13, 2, 1, "", "line_of_sight"], [13, 2, 1, "", "num_clusters"], [13, 2, 1, "", "num_rays"], [13, 2, 1, "", "rice_factor_mean"], [13, 2, 1, "", "rice_factor_std"], [13, 3, 1, "", "yaml_tag"], [13, 2, 1, "", "zoa_spread_mean"], [13, 2, 1, "", "zoa_spread_std"], [13, 2, 1, "", "zod_offset"], [13, 2, 1, "", "zod_spread_mean"], [13, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight": [[13, 2, 1, "", "aoa_spread_mean"], [13, 2, 1, "", "aoa_spread_std"], [13, 2, 1, "", "aod_spread_mean"], [13, 2, 1, "", "aod_spread_std"], [13, 2, 1, "", "cluster_aoa_spread"], [13, 2, 1, "", "cluster_aod_spread"], [13, 2, 1, "", "cluster_delay_spread"], [13, 2, 1, "", "cluster_shadowing_std"], [13, 2, 1, "", "cluster_zoa_spread"], [13, 2, 1, "", "cross_polarization_power_mean"], [13, 2, 1, "", "cross_polarization_power_std"], [13, 2, 1, "", "delay_scaling"], [13, 2, 1, "", "delay_spread_mean"], [13, 2, 1, "", "delay_spread_std"], [13, 2, 1, "", "line_of_sight"], [13, 2, 1, "", "num_clusters"], [13, 2, 1, "", "num_rays"], [13, 2, 1, "", "rice_factor_mean"], [13, 2, 1, "", "rice_factor_std"], [13, 3, 1, "", "yaml_tag"], [13, 2, 1, "", "zoa_spread_mean"], [13, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase": [[13, 2, 1, "", "zod_offset"], [13, 2, 1, "", "zod_spread_mean"], [13, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside": [[13, 2, 1, "", "aoa_spread_mean"], [13, 2, 1, "", "aoa_spread_std"], [13, 2, 1, "", "aod_spread_mean"], [13, 2, 1, "", "aod_spread_std"], [13, 2, 1, "", "cluster_aoa_spread"], [13, 2, 1, "", "cluster_aod_spread"], [13, 2, 1, "", "cluster_delay_spread"], [13, 2, 1, "", "cluster_shadowing_std"], [13, 2, 1, "", "cluster_zoa_spread"], [13, 2, 1, "", "cross_polarization_power_mean"], [13, 2, 1, "", "cross_polarization_power_std"], [13, 2, 1, "", "delay_scaling"], [13, 2, 1, "", "delay_spread_mean"], [13, 2, 1, "", "delay_spread_std"], [13, 2, 1, "", "line_of_sight"], [13, 2, 1, "", "num_clusters"], [13, 2, 1, "", "num_rays"], [13, 2, 1, "", "rice_factor_mean"], [13, 2, 1, "", "rice_factor_std"], [13, 3, 1, "", "yaml_tag"], [13, 2, 1, "", "zoa_spread_mean"], [13, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_lines": [[14, 1, 1, "", "ClusterDelayLine"], [14, 1, 1, "", "ClusterDelayLineBase"], [14, 1, 1, "", "DelayNormalization"]], "hermespy.channel.cluster_delay_lines.ClusterDelayLine": [[14, 2, 1, "", "aoa_spread_mean"], [14, 2, 1, "", "aoa_spread_std"], [14, 2, 1, "", "aod_spread_mean"], [14, 2, 1, "", "aod_spread_std"], [14, 2, 1, "", "cluster_aoa_spread"], [14, 2, 1, "", "cluster_aod_spread"], [14, 2, 1, "", "cluster_delay_spread"], [14, 2, 1, "", "cluster_shadowing_std"], [14, 2, 1, "", "cluster_zoa_spread"], [14, 2, 1, "", "cross_polarization_power_mean"], [14, 2, 1, "", "cross_polarization_power_std"], [14, 2, 1, "", "delay_scaling"], [14, 2, 1, "", "delay_spread_mean"], [14, 2, 1, "", "delay_spread_std"], [14, 2, 1, "", "line_of_sight"], [14, 2, 1, "", "num_clusters"], [14, 2, 1, "", "num_rays"], [14, 2, 1, "", "rice_factor_mean"], [14, 2, 1, "", "rice_factor_std"], [14, 3, 1, "", "yaml_tag"], [14, 2, 1, "", "zoa_spread_mean"], [14, 2, 1, "", "zoa_spread_std"], [14, 2, 1, "", "zod_offset"], [14, 2, 1, "", "zod_spread_mean"], [14, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase": [[14, 2, 1, "", "aoa_spread_mean"], [14, 2, 1, "", "aoa_spread_std"], [14, 2, 1, "", "aod_spread_mean"], [14, 2, 1, "", "aod_spread_std"], [14, 2, 1, "", "cluster_aoa_spread"], [14, 2, 1, "", "cluster_aod_spread"], [14, 2, 1, "", "cluster_delay_spread"], [14, 2, 1, "", "cluster_shadowing_std"], [14, 2, 1, "", "cluster_zoa_spread"], [14, 2, 1, "", "cross_polarization_power_mean"], [14, 2, 1, "", "cross_polarization_power_std"], [14, 3, 1, "", "delay_normalization"], [14, 2, 1, "", "delay_scaling"], [14, 2, 1, "", "delay_spread_mean"], [14, 2, 1, "", "delay_spread_std"], [14, 2, 1, "", "line_of_sight"], [14, 2, 1, "", "num_clusters"], [14, 2, 1, "", "num_rays"], [14, 4, 1, "", "realize"], [14, 2, 1, "", "rice_factor_mean"], [14, 2, 1, "", "rice_factor_std"], [14, 2, 1, "", "zoa_spread_mean"], [14, 2, 1, "", "zoa_spread_std"], [14, 2, 1, "", "zod_offset"], [14, 2, 1, "", "zod_spread_mean"], [14, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_lines.DelayNormalization": [[14, 3, 1, "", "NONE"], [14, 3, 1, "", "TOF"], [14, 3, 1, "", "ZERO"]], "hermespy.channel.delay": [[15, 1, 1, "", "DelayChannelBase"], [15, 1, 1, "", "DelayChannelRealization"], [15, 1, 1, "", "RandomDelayChannel"], [15, 1, 1, "", "SpatialDelayChannel"]], "hermespy.channel.delay.DelayChannelBase": [[15, 2, 1, "", "model_propagation_loss"], [15, 4, 1, "", "realize"], [15, 3, 1, "", "yaml_tag"]], "hermespy.channel.delay.RandomDelayChannel": [[15, 2, 1, "", "delay"], [15, 3, 1, "", "yaml_tag"]], "hermespy.channel.delay.SpatialDelayChannel": [[15, 3, 1, "", "yaml_tag"]], "hermespy.channel.ideal": [[16, 1, 1, "", "IdealChannel"], [16, 1, 1, "", "IdealChannelRealization"]], "hermespy.channel.ideal.IdealChannel": [[16, 4, 1, "", "realize"], [16, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_channel": [[17, 1, 1, "", "AntennaCorrelation"], [17, 1, 1, "", "CustomAntennaCorrelation"], [17, 1, 1, "", "MultipathFadingChannel"]], "hermespy.channel.multipath_fading_channel.AntennaCorrelation": [[17, 2, 1, "", "channel"], [17, 2, 1, "", "covariance"], [17, 2, 1, "", "device"]], "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation": [[17, 2, 1, "", "covariance"], [17, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_channel.MultipathFadingChannel": [[17, 2, 1, "", "alpha_correlation"], [17, 2, 1, "", "beta_correlation"], [17, 3, 1, "", "delay_resolution_error"], [17, 2, 1, "", "delays"], [17, 2, 1, "", "doppler_frequency"], [17, 3, 1, "", "interpolate_signals"], [17, 4, 1, "", "interpolation_filter"], [17, 2, 1, "", "los_angle"], [17, 2, 1, "", "los_doppler_frequency"], [17, 3, 1, "", "los_gains"], [17, 2, 1, "", "max_delay"], [17, 2, 1, "", "num_resolvable_paths"], [17, 2, 1, "", "num_sinusoids"], [17, 2, 1, "", "power_profile"], [17, 4, 1, "", "realize"], [17, 2, 1, "", "receiver"], [17, 2, 1, "", "rice_factors"], [17, 3, 1, "", "serialized_attributes"], [17, 2, 1, "", "transmitter"], [17, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates": [[18, 1, 1, "", "CorrelationType"], [18, 1, 1, "", "Cost256Type"], [18, 1, 1, "", "DeviceType"], [18, 1, 1, "", "MultipathFading5GTDL"], [18, 1, 1, "", "MultipathFadingCost256"], [18, 1, 1, "", "MultipathFadingExponential"], [18, 1, 1, "", "StandardAntennaCorrelation"], [18, 1, 1, "", "TDLType"]], "hermespy.channel.multipath_fading_templates.CorrelationType": [[18, 3, 1, "", "HIGH"], [18, 3, 1, "", "LOW"], [18, 3, 1, "", "MEDIUM"], [18, 3, 1, "", "MEDIUM_A"]], "hermespy.channel.multipath_fading_templates.Cost256Type": [[18, 3, 1, "", "HILLY"], [18, 3, 1, "", "RURAL"], [18, 3, 1, "", "URBAN"]], "hermespy.channel.multipath_fading_templates.DeviceType": [[18, 3, 1, "", "BASE_STATION"], [18, 3, 1, "", "TERMINAL"]], "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL": [[18, 2, 1, "", "model_type"], [18, 2, 1, "", "rms_delay"], [18, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.MultipathFadingCost256": [[18, 2, 1, "", "model_type"], [18, 4, 1, "", "to_yaml"], [18, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.MultipathFadingExponential": [[18, 2, 1, "", "rms_delay"], [18, 2, 1, "", "tap_interval"], [18, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation": [[18, 2, 1, "", "correlation"], [18, 2, 1, "", "covariance"], [18, 2, 1, "", "device_type"], [18, 3, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_templates.TDLType": [[18, 3, 1, "", "A"], [18, 3, 1, "", "B"], [18, 3, 1, "", "C"], [18, 3, 1, "", "D"], [18, 3, 1, "", "E"]], "hermespy.channel.quadriga_channel": [[19, 1, 1, "", "QuadrigaChannel"]], "hermespy.channel.quadriga_channel.QuadrigaChannel": [[19, 4, 1, "", "realize"], [19, 3, 1, "", "serialized_attributes"], [19, 3, 1, "", "yaml_tag"]], "hermespy.channel.radar_channel": [[20, 1, 1, "", "FixedCrossSection"], [20, 1, 1, "", "MultiTargetRadarChannel"], [20, 1, 1, "", "MultiTargetRadarChannelRealization"], [20, 1, 1, "", "PhysicalRadarTarget"], [20, 1, 1, "", "RCRT"], [20, 1, 1, "", "RadarChannelBase"], [20, 1, 1, "", "RadarChannelRealization"], [20, 1, 1, "", "RadarCrossSectionModel"], [20, 1, 1, "", "RadarInterferenceRealization"], [20, 1, 1, "", "RadarPathRealization"], [20, 1, 1, "", "RadarTarget"], [20, 1, 1, "", "RadarTargetRealization"], [20, 1, 1, "", "SingleTargetRadarChannel"], [20, 1, 1, "", "SingleTargetRadarChannelRealization"], [20, 1, 1, "", "VirtualRadarTarget"]], "hermespy.channel.radar_channel.FixedCrossSection": [[20, 2, 1, "", "cross_section"], [20, 4, 1, "", "get_cross_section"]], "hermespy.channel.radar_channel.MultiTargetRadarChannel": [[20, 4, 1, "", "add_target"], [20, 3, 1, "", "interfernce"], [20, 4, 1, "", "make_target"], [20, 4, 1, "", "realize"], [20, 2, 1, "", "targets"], [20, 3, 1, "", "yaml_tag"]], "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization": [[20, 4, 1, "", "ground_truth"], [20, 2, 1, "", "interference_realization"], [20, 4, 1, "", "null_hypothesis"], [20, 2, 1, "", "num_targets"], [20, 2, 1, "", "target_realizations"]], "hermespy.channel.radar_channel.PhysicalRadarTarget": [[20, 2, 1, "", "cross_section"], [20, 4, 1, "", "get_backwards_transformation"], [20, 4, 1, "", "get_cross_section"], [20, 4, 1, "", "get_forwards_transformation"], [20, 4, 1, "", "get_velocity"], [20, 2, 1, "", "moveable"], [20, 3, 1, "", "yaml_tag"]], "hermespy.channel.radar_channel.RadarChannelBase": [[20, 2, 1, "", "attenuate"], [20, 4, 1, "", "null_hypothesis"]], "hermespy.channel.radar_channel.RadarChannelRealization": [[20, 4, 1, "", "ImpulseResponse"], [20, 2, 1, "", "gain"], [20, 4, 1, "", "ground_truth"], [20, 4, 1, "", "null_hypothesis"]], "hermespy.channel.radar_channel.RadarCrossSectionModel": [[20, 4, 1, "", "get_cross_section"]], "hermespy.channel.radar_channel.RadarPathRealization": [[20, 2, 1, "", "delay"], [20, 2, 1, "", "doppler_shift"], [20, 2, 1, "", "doppler_velocity"], [20, 2, 1, "", "global_position"], [20, 2, 1, "", "global_velocity"], [20, 2, 1, "", "mimo_response"], [20, 2, 1, "", "phase_shift"], [20, 2, 1, "", "power_factor"], [20, 2, 1, "", "static"]], "hermespy.channel.radar_channel.RadarTarget": [[20, 4, 1, "", "get_backwards_transformation"], [20, 4, 1, "", "get_cross_section"], [20, 4, 1, "", "get_forwards_transformation"], [20, 4, 1, "", "get_velocity"], [20, 2, 1, "", "static"]], "hermespy.channel.radar_channel.SingleTargetRadarChannel": [[20, 2, 1, "", "radar_cross_section"], [20, 4, 1, "", "realize"], [20, 3, 1, "", "serialized_attributes"], [20, 2, 1, "", "target_azimuth"], [20, 3, 1, "", "target_exists"], [20, 2, 1, "", "target_range"], [20, 2, 1, "", "target_velocity"], [20, 2, 1, "", "target_zenith"], [20, 3, 1, "", "yaml_tag"]], "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization": [[20, 4, 1, "", "ground_truth"], [20, 4, 1, "", "null_hypothesis"], [20, 2, 1, "", "target_realization"]], "hermespy.channel.radar_channel.VirtualRadarTarget": [[20, 2, 1, "", "cross_section"], [20, 4, 1, "", "get_backwards_transformation"], [20, 4, 1, "", "get_cross_section"], [20, 4, 1, "", "get_forwards_transformation"], [20, 4, 1, "", "get_velocity"], [20, 2, 1, "", "velocity"], [20, 3, 1, "", "yaml_tag"]], "hermespy.core": [[22, 0, 0, "-", "animation"], [23, 0, 0, "-", "antennas"], [24, 0, 0, "-", "channel_state_information"], [25, 0, 0, "-", "definitions"], [26, 0, 0, "-", "device"], [27, 0, 0, "-", "executable"], [28, 0, 0, "-", "factory"], [29, 0, 0, "-", "logarithmic"], [30, 0, 0, "-", "monte_carlo"], [31, 0, 0, "-", "operators"], [32, 0, 0, "-", "pipeline"], [33, 0, 0, "-", "random_node"], [34, 0, 0, "-", "scenario"], [35, 0, 0, "-", "signal_model"], [36, 0, 0, "-", "transformation"], [37, 0, 0, "-", "visualize"]], "hermespy.core.animation": [[22, 1, 1, "", "Moveable"]], "hermespy.core.animation.Moveable": [[22, 2, 1, "", "velocity"]], "hermespy.core.antennas": [[23, 1, 1, "", "Antenna"], [23, 1, 1, "", "AntennaArray"], [23, 1, 1, "", "AntennaArrayBase"], [23, 1, 1, "", "Dipole"], [23, 1, 1, "", "IdealAntenna"], [23, 1, 1, "", "LinearAntenna"], [23, 1, 1, "", "PatchAntenna"], [23, 1, 1, "", "UniformArray"]], "hermespy.core.antennas.Antenna": [[23, 2, 1, "", "array"], [23, 4, 1, "", "global_characteristics"], [23, 4, 1, "", "local_characteristics"], [23, 4, 1, "", "plot_gain"], [23, 4, 1, "", "plot_polarization"], [23, 4, 1, "", "receive"], [23, 4, 1, "", "transmit"], [23, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.AntennaArray": [[23, 4, 1, "", "add_antenna"], [23, 2, 1, "", "antennas"], [23, 2, 1, "", "num_antennas"], [23, 4, 1, "", "remove_antenna"], [23, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.AntennaArrayBase": [[23, 2, 1, "", "antennas"], [23, 4, 1, "", "cartesian_array_response"], [23, 4, 1, "", "cartesian_phase_response"], [23, 4, 1, "", "characteristics"], [23, 4, 1, "", "horizontal_phase_response"], [23, 2, 1, "", "num_antennas"], [23, 2, 1, "", "num_receive_antennas"], [23, 2, 1, "", "num_transmit_antennas"], [23, 4, 1, "", "plot_topology"], [23, 4, 1, "", "spherical_phase_response"], [23, 2, 1, "", "topology"]], "hermespy.core.antennas.Dipole": [[23, 4, 1, "", "local_characteristics"], [23, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.IdealAntenna": [[23, 4, 1, "", "local_characteristics"], [23, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.LinearAntenna": [[23, 4, 1, "", "local_characteristics"], [23, 2, 1, "", "slant"], [23, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.PatchAntenna": [[23, 4, 1, "", "local_characteristics"], [23, 3, 1, "", "yaml_tag"]], "hermespy.core.antennas.UniformArray": [[23, 2, 1, "", "antenna"], [23, 2, 1, "", "antennas"], [23, 2, 1, "", "dimensions"], [23, 2, 1, "", "num_antennas"], [23, 3, 1, "", "property_blacklist"], [23, 2, 1, "", "spacing"], [23, 3, 1, "", "yaml_tag"]], "hermespy.core.channel_state_information": [[24, 1, 1, "", "CSIT"], [24, 1, 1, "", "ChannelStateDimension"], [24, 1, 1, "", "ChannelStateFormat"], [24, 1, 1, "", "ChannelStateInformation"]], "hermespy.core.channel_state_information.ChannelStateDimension": [[24, 3, 1, "", "INFORMATION"], [24, 3, 1, "", "RECEIVE_STREAMS"], [24, 3, 1, "", "SAMPLES"], [24, 3, 1, "", "TRANSMIT_STREAMS"]], "hermespy.core.channel_state_information.ChannelStateFormat": [[24, 3, 1, "", "FREQUENCY_SELECTIVITY"], [24, 3, 1, "", "IMPULSE_RESPONSE"]], "hermespy.core.channel_state_information.ChannelStateInformation": [[24, 4, 1, "", "Ideal"], [24, 3, 1, "", "__num_delay_taps"], [24, 3, 1, "", "__num_frequency_bins"], [24, 3, 1, "", "__state"], [24, 3, 1, "", "__state_format"], [24, 4, 1, "", "append"], [24, 4, 1, "", "append_linear"], [24, 4, 1, "", "concatenate"], [24, 4, 1, "", "from_HDF"], [24, 2, 1, "", "linear"], [24, 2, 1, "", "num_delay_taps"], [24, 2, 1, "", "num_receive_streams"], [24, 2, 1, "", "num_samples"], [24, 2, 1, "", "num_symbols"], [24, 2, 1, "", "num_transmit_streams"], [24, 4, 1, "", "plot"], [24, 4, 1, "", "received_streams"], [24, 4, 1, "", "reciprocal"], [24, 4, 1, "", "samples"], [24, 4, 1, "", "set_state"], [24, 2, 1, "", "state"], [24, 2, 1, "", "state_format"], [24, 4, 1, "", "to_HDF"], [24, 4, 1, "", "to_frequency_selectivity"], [24, 4, 1, "", "to_impulse_response"]], "hermespy.core.definitions": [[25, 1, 1, "", "ConsoleMode"], [25, 1, 1, "", "SNRType"]], "hermespy.core.definitions.ConsoleMode": [[25, 3, 1, "", "INTERACTIVE"], [25, 3, 1, "", "LINEAR"], [25, 3, 1, "", "SILENT"]], "hermespy.core.definitions.SNRType": [[25, 3, 1, "", "CUSTOM"], [25, 3, 1, "", "EBN0"], [25, 3, 1, "", "EN0"], [25, 3, 1, "", "ESN0"], [25, 3, 1, "", "N0"], [25, 3, 1, "", "PN0"]], "hermespy.core.device": [[26, 1, 1, "", "DRT"], [26, 1, 1, "", "Device"], [26, 1, 1, "", "DeviceInput"], [26, 1, 1, "", "DeviceOutput"], [26, 1, 1, "", "DeviceReception"], [26, 1, 1, "", "DeviceTransmission"], [26, 1, 1, "", "DeviceType"], [26, 6, 1, "", "FloatingError"], [26, 1, 1, "", "MixingOperator"], [26, 1, 1, "", "OperationResult"], [26, 1, 1, "", "OperationResultType"], [26, 1, 1, "", "Operator"], [26, 1, 1, "", "OperatorSlot"], [26, 1, 1, "", "OperatorType"], [26, 1, 1, "", "ProcessedDeviceInput"], [26, 1, 1, "", "Receiver"], [26, 1, 1, "", "ReceiverSlot"], [26, 1, 1, "", "Reception"], [26, 1, 1, "", "ReceptionType"], [26, 1, 1, "", "SlotType"], [26, 1, 1, "", "Transmission"], [26, 1, 1, "", "Transmitter"], [26, 1, 1, "", "TransmitterSlot"], [26, 1, 1, "", "UnsupportedSlot"]], "hermespy.core.device.Device": [[26, 2, 1, "", "antennas"], [26, 4, 1, "", "cache_transmission"], [26, 2, 1, "", "carrier_frequency"], [26, 4, 1, "", "generate_output"], [26, 2, 1, "", "max_frame_duration"], [26, 2, 1, "", "num_antennas"], [26, 2, 1, "", "power"], [26, 4, 1, "", "process_input"], [26, 4, 1, "", "receive"], [26, 4, 1, "", "receive_operators"], [26, 3, 1, "", "receivers"], [26, 2, 1, "", "sampling_rate"], [26, 2, 1, "", "snr"], [26, 4, 1, "", "transmit"], [26, 4, 1, "", "transmit_operators"], [26, 3, 1, "", "transmitters"], [26, 2, 1, "", "velocity"], [26, 2, 1, "", "wavelength"]], "hermespy.core.device.DeviceInput": [[26, 4, 1, "", "from_HDF"], [26, 2, 1, "", "impinging_signals"], [26, 2, 1, "", "num_impinging_signals"], [26, 4, 1, "", "to_HDF"]], "hermespy.core.device.DeviceOutput": [[26, 2, 1, "", "carrier_frequency"], [26, 2, 1, "", "emerging_signals"], [26, 4, 1, "", "from_HDF"], [26, 2, 1, "", "mixed_signal"], [26, 2, 1, "", "num_antennas"], [26, 2, 1, "", "num_emerging_signals"], [26, 2, 1, "", "sampling_rate"], [26, 4, 1, "", "to_HDF"]], "hermespy.core.device.DeviceReception": [[26, 4, 1, "", "From_ProcessedDeviceInput"], [26, 4, 1, "", "Recall"], [26, 4, 1, "", "from_HDF"], [26, 2, 1, "", "num_operator_receptions"], [26, 2, 1, "", "operator_receptions"], [26, 4, 1, "", "to_HDF"]], "hermespy.core.device.DeviceTransmission": [[26, 4, 1, "", "From_Output"], [26, 4, 1, "", "Recall"], [26, 4, 1, "", "from_HDF"], [26, 2, 1, "", "num_operator_transmissions"], [26, 2, 1, "", "operator_transmissions"], [26, 4, 1, "", "to_HDF"]], "hermespy.core.device.MixingOperator": [[26, 2, 1, "", "carrier_frequency"]], "hermespy.core.device.OperationResult": [[26, 4, 1, "", "from_HDF"], [26, 3, 1, "", "signal"], [26, 4, 1, "", "to_HDF"]], "hermespy.core.device.Operator": [[26, 2, 1, "", "attached"], [26, 2, 1, "", "device"], [26, 2, 1, "", "frame_duration"], [26, 3, 1, "", "property_blacklist"], [26, 2, 1, "", "sampling_rate"], [26, 2, 1, "", "slot"], [26, 2, 1, "", "slot_index"]], "hermespy.core.device.OperatorSlot": [[26, 4, 1, "", "add"], [26, 2, 1, "", "device"], [26, 2, 1, "", "max_sampling_rate"], [26, 2, 1, "", "min_frame_duration"], [26, 2, 1, "", "min_num_samples_per_frame"], [26, 2, 1, "", "num_operators"], [26, 4, 1, "", "operator_index"], [26, 4, 1, "", "registered"], [26, 4, 1, "", "remove"]], "hermespy.core.device.ProcessedDeviceInput": [[26, 4, 1, "", "from_HDF"], [26, 2, 1, "", "num_operator_inputs"], [26, 2, 1, "", "operator_inputs"], [26, 4, 1, "", "to_HDF"]], "hermespy.core.device.Receiver": [[26, 4, 1, "", "cache_reception"], [26, 2, 1, "", "csi"], [26, 2, 1, "", "device"], [26, 4, 1, "", "noise_power"], [26, 4, 1, "", "recall_reception"], [26, 4, 1, "", "receive"], [26, 2, 1, "", "reception"], [26, 2, 1, "", "reference"], [26, 2, 1, "", "signal"], [26, 2, 1, "", "slot"]], "hermespy.core.device.Transmitter": [[26, 4, 1, "", "cache_transmission"], [26, 2, 1, "", "device"], [26, 4, 1, "", "recall_transmission"], [26, 2, 1, "", "slot"], [26, 2, 1, "", "transmission"], [26, 4, 1, "", "transmit"]], "hermespy.core.device.TransmitterSlot": [[26, 4, 1, "", "add"], [26, 4, 1, "", "add_transmission"], [26, 4, 1, "", "clear_cache"], [26, 4, 1, "", "get_transmissions"]], "hermespy.core.device.UnsupportedSlot": [[26, 4, 1, "", "add"]], "hermespy.core.executable": [[27, 1, 1, "", "Executable"], [27, 1, 1, "", "Verbosity"]], "hermespy.core.executable.Executable": [[27, 2, 1, "", "console"], [27, 2, 1, "", "console_mode"], [27, 4, 1, "", "default_results_dir"], [27, 4, 1, "", "execute"], [27, 2, 1, "", "results_dir"], [27, 4, 1, "", "run"], [27, 2, 1, "", "style"], [27, 4, 1, "", "style_context"], [27, 2, 1, "", "verbosity"]], "hermespy.core.executable.Verbosity": [[27, 3, 1, "", "ALL"], [27, 3, 1, "", "ERROR"], [27, 3, 1, "", "INFO"], [27, 3, 1, "", "NONE"], [27, 3, 1, "", "WARNING"]], "hermespy.core.factory": [[28, 1, 1, "", "Factory"], [28, 1, 1, "", "HDFSerializable"], [28, 1, 1, "", "HDFSerializableType"], [28, 1, 1, "", "SET"], [28, 1, 1, "", "Serializable"], [28, 1, 1, "", "SerializableEnum"], [28, 1, 1, "", "SerializableType"]], "hermespy.core.factory.Factory": [[28, 2, 1, "", "clean"], [28, 3, 1, "", "extensions"], [28, 4, 1, "", "from_file"], [28, 4, 1, "", "from_folder"], [28, 4, 1, "", "from_path"], [28, 4, 1, "", "from_str"], [28, 4, 1, "", "from_stream"], [28, 2, 1, "", "registered_classes"], [28, 2, 1, "", "registered_tags"], [28, 2, 1, "", "tag_registry"], [28, 4, 1, "", "to_file"], [28, 4, 1, "", "to_folder"], [28, 4, 1, "", "to_str"], [28, 4, 1, "", "to_stream"]], "hermespy.core.factory.HDFSerializable": [[28, 4, 1, "", "from_HDF"], [28, 4, 1, "", "to_HDF"]], "hermespy.core.factory.Serializable": [[28, 4, 1, "", "InitializationWrapper"], [28, 4, 1, "", "from_yaml"], [28, 3, 1, "", "property_blacklist"], [28, 3, 1, "", "serialized_attributes"], [28, 4, 1, "", "to_yaml"], [28, 3, 1, "", "yaml_tag"]], "hermespy.core.factory.SerializableEnum": [[28, 4, 1, "", "from_parameters"]], "hermespy.core.logarithmic": [[29, 1, 1, "", "Logarithmic"], [29, 1, 1, "", "LogarithmicSequence"], [29, 1, 1, "", "ValueType"], [29, 5, 1, "", "dB"]], "hermespy.core.logarithmic.Logarithmic": [[29, 4, 1, "", "From_Tuple"], [29, 2, 1, "", "conversion"], [29, 2, 1, "", "value_db"]], "hermespy.core.logarithmic.LogarithmicSequence": [[29, 2, 1, "", "conversion"], [29, 4, 1, "", "tolist"]], "hermespy.core.logarithmic.ValueType": [[29, 3, 1, "", "DB"], [29, 3, 1, "", "LIN"]], "hermespy.core.monte_carlo": [[30, 1, 1, "", "ActorRunResult"], [30, 1, 1, "", "Artifact"], [30, 1, 1, "", "ArtifactTemplate"], [30, 1, 1, "", "Evaluation"], [30, 1, 1, "", "EvaluationResult"], [30, 1, 1, "", "EvaluationTemplate"], [30, 1, 1, "", "Evaluator"], [30, 1, 1, "", "GridDimension"], [30, 1, 1, "", "GridSection"], [30, 1, 1, "", "MonteCarlo"], [30, 1, 1, "", "MonteCarloActor"], [30, 1, 1, "", "MonteCarloResult"], [30, 1, 1, "", "MonteCarloSample"], [30, 1, 1, "", "RegisteredDimension"], [30, 1, 1, "", "SampleGrid"], [30, 1, 1, "", "ScalarEvaluationResult"], [30, 5, 1, "", "register"]], "hermespy.core.monte_carlo.ActorRunResult": [[30, 3, 1, "", "message"], [30, 3, 1, "", "samples"]], "hermespy.core.monte_carlo.Artifact": [[30, 4, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.ArtifactTemplate": [[30, 2, 1, "", "artifact"], [30, 4, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.Evaluation": [[30, 4, 1, "", "artifact"]], "hermespy.core.monte_carlo.EvaluationResult": [[30, 4, 1, "", "to_array"]], "hermespy.core.monte_carlo.EvaluationTemplate": [[30, 3, 1, "", "evaluation"]], "hermespy.core.monte_carlo.Evaluator": [[30, 2, 1, "", "abbreviation"], [30, 2, 1, "", "confidence"], [30, 4, 1, "", "evaluate"], [30, 4, 1, "", "generate_result"], [30, 2, 1, "", "plot_scale"], [30, 3, 1, "", "tick_format"], [30, 2, 1, "", "title"], [30, 2, 1, "", "tolerance"]], "hermespy.core.monte_carlo.GridDimension": [[30, 4, 1, "", "configure_point"], [30, 2, 1, "", "considered_objects"], [30, 2, 1, "", "dimension"], [30, 2, 1, "", "first_impact"], [30, 2, 1, "", "last_impact"], [30, 2, 1, "", "num_sample_points"], [30, 2, 1, "", "plot_scale"], [30, 2, 1, "", "sample_points"], [30, 2, 1, "", "tick_format"], [30, 2, 1, "", "title"]], "hermespy.core.monte_carlo.GridSection": [[30, 4, 1, "", "add_samples"], [30, 4, 1, "", "confidence_status"], [30, 2, 1, "", "confidences"], [30, 2, 1, "", "coordinates"], [30, 2, 1, "", "num_samples"], [30, 2, 1, "", "samples"]], "hermespy.core.monte_carlo.MonteCarlo": [[30, 4, 1, "", "add_dimension"], [30, 4, 1, "", "add_evaluator"], [30, 3, 1, "", "catch_exceptions"], [30, 2, 1, "", "console"], [30, 2, 1, "", "console_mode"], [30, 2, 1, "", "cpus_per_actor"], [30, 2, 1, "", "dimensions"], [30, 2, 1, "", "evaluators"], [30, 2, 1, "", "investigated_object"], [30, 2, 1, "", "max_num_samples"], [30, 2, 1, "", "min_num_samples"], [30, 4, 1, "", "new_dimension"], [30, 2, 1, "", "num_actors"], [30, 2, 1, "", "num_samples"], [30, 3, 1, "", "runtime_env"], [30, 2, 1, "", "section_block_size"], [30, 4, 1, "", "simulate"]], "hermespy.core.monte_carlo.MonteCarloActor": [[30, 3, 1, "", "catch_exceptions"], [30, 4, 1, "", "run"], [30, 4, 1, "", "stage_executors"], [30, 4, 1, "", "stage_identifiers"]], "hermespy.core.monte_carlo.MonteCarloResult": [[30, 2, 1, "", "evaluation_results"], [30, 2, 1, "", "performance_time"], [30, 4, 1, "", "plot"], [30, 4, 1, "", "save_to_matlab"]], "hermespy.core.monte_carlo.MonteCarloSample": [[30, 2, 1, "", "artifact_scalars"], [30, 2, 1, "", "artifacts"], [30, 2, 1, "", "grid_section"], [30, 2, 1, "", "num_artifacts"], [30, 2, 1, "", "sample_index"]], "hermespy.core.monte_carlo.RegisteredDimension": [[30, 4, 1, "", "deleter"], [30, 2, 1, "", "first_impact"], [30, 4, 1, "", "getter"], [30, 4, 1, "", "is_registered"], [30, 2, 1, "", "last_impact"], [30, 4, 1, "", "setter"], [30, 2, 1, "", "title"]], "hermespy.core.monte_carlo.ScalarEvaluationResult": [[30, 4, 1, "", "From_Artifacts"], [30, 3, 1, "", "plot_surface"], [30, 2, 1, "", "title"], [30, 4, 1, "", "to_array"]], "hermespy.core.operators": [[31, 1, 1, "", "SignalReceiver"], [31, 1, 1, "", "SignalTransmitter"], [31, 1, 1, "", "SilentTransmitter"], [31, 1, 1, "", "StaticOperator"]], "hermespy.core.operators.SignalReceiver": [[31, 2, 1, "", "energy"], [31, 3, 1, "", "serialized_attributes"], [31, 3, 1, "", "yaml_tag"]], "hermespy.core.operators.SignalTransmitter": [[31, 3, 1, "", "yaml_tag"]], "hermespy.core.operators.SilentTransmitter": [[31, 3, 1, "", "serialized_attributes"], [31, 3, 1, "", "yaml_tag"]], "hermespy.core.operators.StaticOperator": [[31, 2, 1, "", "frame_duration"], [31, 2, 1, "", "num_samples"], [31, 2, 1, "", "sampling_rate"]], "hermespy.core.pipeline": [[32, 1, 1, "", "Pipeline"]], "hermespy.core.pipeline.Pipeline": [[32, 4, 1, "", "add_device"], [32, 4, 1, "", "device_index"], [32, 4, 1, "", "new_device"], [32, 2, 1, "", "num_drops"], [32, 2, 1, "", "scenario"]], "hermespy.core.random_node": [[33, 1, 1, "", "RandomNode"], [33, 1, 1, "", "RandomRealization"]], "hermespy.core.random_node.RandomNode": [[33, 2, 1, "", "is_random_root"], [33, 2, 1, "", "random_mother"], [33, 2, 1, "", "seed"]], "hermespy.core.random_node.RandomRealization": [[33, 4, 1, "", "generator"], [33, 2, 1, "", "seed"]], "hermespy.core.scenario": [[34, 1, 1, "", "ReplayScenario"], [34, 1, 1, "", "Scenario"], [34, 1, 1, "", "ScenarioMode"], [34, 1, 1, "", "ScenarioType"]], "hermespy.core.scenario.Scenario": [[34, 4, 1, "", "Replay"], [34, 4, 1, "", "add_device"], [34, 2, 1, "", "campaign"], [34, 4, 1, "", "device_index"], [34, 4, 1, "", "device_registered"], [34, 2, 1, "", "devices"], [34, 4, 1, "", "drop"], [34, 2, 1, "", "drop_duration"], [34, 4, 1, "", "generate_outputs"], [34, 2, 1, "", "mode"], [34, 4, 1, "", "new_device"], [34, 2, 1, "", "num_devices"], [34, 2, 1, "", "num_drops"], [34, 2, 1, "", "num_operators"], [34, 2, 1, "", "num_receivers"], [34, 2, 1, "", "num_transmitters"], [34, 2, 1, "", "operators"], [34, 4, 1, "", "process_inputs"], [34, 4, 1, "", "receive_devices"], [34, 4, 1, "", "receive_operators"], [34, 2, 1, "", "receivers"], [34, 4, 1, "", "record"], [34, 4, 1, "", "replay"], [34, 3, 1, "", "serialized_attributes"], [34, 4, 1, "", "stop"], [34, 4, 1, "", "transmit_devices"], [34, 4, 1, "", "transmit_operators"], [34, 2, 1, "", "transmitters"], [34, 3, 1, "", "yaml_tag"]], "hermespy.core.scenario.ScenarioMode": [[34, 3, 1, "", "DEFAULT"], [34, 3, 1, "", "RECORD"], [34, 3, 1, "", "REPLAY"]], "hermespy.core.signal_model": [[35, 1, 1, "", "Signal"]], "hermespy.core.signal_model.Signal": [[35, 3, 1, "", "__carrier_frequency"], [35, 3, 1, "", "__samples"], [35, 3, 1, "", "__sampling_rate"], [35, 4, 1, "", "append_samples"], [35, 4, 1, "", "append_streams"], [35, 2, 1, "", "carrier_frequency"], [35, 4, 1, "", "copy"], [35, 3, 1, "", "delay"], [35, 2, 1, "", "duration"], [35, 4, 1, "", "empty"], [35, 2, 1, "", "energy"], [35, 3, 1, "", "filter_order"], [35, 2, 1, "", "frequencies"], [35, 4, 1, "", "from_HDF"], [35, 4, 1, "", "from_interleaved"], [35, 2, 1, "", "noise_power"], [35, 2, 1, "", "num_samples"], [35, 2, 1, "", "num_streams"], [35, 4, 1, "", "plot"], [35, 4, 1, "", "plot_eye"], [35, 2, 1, "", "power"], [35, 4, 1, "", "resample"], [35, 2, 1, "", "samples"], [35, 2, 1, "", "sampling_rate"], [35, 4, 1, "", "superimpose"], [35, 2, 1, "", "timestamps"], [35, 2, 1, "", "title"], [35, 4, 1, "", "to_HDF"], [35, 4, 1, "", "to_interleaved"]], "hermespy.core.transformation": [[36, 1, 1, "", "Direction"], [36, 1, 1, "", "Transformable"], [36, 1, 1, "", "TransformableBase"], [36, 1, 1, "", "TransformableLink"], [36, 1, 1, "", "Transformation"]], "hermespy.core.transformation.Direction": [[36, 4, 1, "", "From_Cartesian"], [36, 4, 1, "", "From_Spherical"], [36, 4, 1, "", "to_spherical"]], "hermespy.core.transformation.Transformable": [[36, 2, 1, "", "backwards_transformation"], [36, 2, 1, "", "forwards_transformation"], [36, 2, 1, "", "global_orientation"], [36, 2, 1, "", "global_position"], [36, 2, 1, "", "is_base"], [36, 2, 1, "", "orientation"], [36, 2, 1, "", "pose"], [36, 2, 1, "", "position"], [36, 3, 1, "", "property_blacklist"], [36, 4, 1, "", "set_base"], [36, 4, 1, "", "to_local_coordinates"]], "hermespy.core.transformation.TransformableBase": [[36, 2, 1, "", "forwards_transformation"], [36, 4, 1, "", "set_base"]], "hermespy.core.transformation.TransformableLink": [[36, 4, 1, "", "add_link"], [36, 2, 1, "", "forwards_transformation"], [36, 2, 1, "", "linked_frames"], [36, 4, 1, "", "remove_link"], [36, 4, 1, "", "set_base"]], "hermespy.core.transformation.Transformation": [[36, 4, 1, "", "From_RPY"], [36, 4, 1, "", "From_Translation"], [36, 4, 1, "", "No"], [36, 4, 1, "", "from_yaml"], [36, 4, 1, "", "rotate_direction"], [36, 2, 1, "", "rotation_rpy"], [36, 4, 1, "", "to_yaml"], [36, 4, 1, "", "transform_direction"], [36, 4, 1, "", "transform_position"], [36, 2, 1, "", "translation"], [36, 3, 1, "", "yaml_tag"]], "hermespy.core.visualize": [[37, 1, 1, "", "Visualizable"]], "hermespy.core.visualize.Visualizable": [[37, 4, 1, "", "plot"], [37, 2, 1, "", "title"]], "hermespy.fec": [[40, 0, 0, "-", "block_interleaver"], [41, 0, 0, "-", "coding"], [42, 0, 0, "-", "cyclic_redundancy_check"], [45, 0, 0, "-", "repetition_encoder"], [48, 0, 0, "-", "scrambler"]], "hermespy.fec.block_interleaver": [[40, 1, 1, "", "BlockInterleaver"]], "hermespy.fec.block_interleaver.BlockInterleaver": [[40, 2, 1, "", "bit_block_size"], [40, 2, 1, "", "block_size"], [40, 2, 1, "", "code_block_size"], [40, 4, 1, "", "decode"], [40, 4, 1, "", "encode"], [40, 2, 1, "", "interleave_blocks"], [40, 2, 1, "", "rate"], [40, 3, 1, "", "yaml_tag"]], "hermespy.fec.coding": [[41, 1, 1, "", "Encoder"], [41, 1, 1, "", "EncoderManager"]], "hermespy.fec.coding.Encoder": [[41, 2, 1, "", "bit_block_size"], [41, 2, 1, "", "code_block_size"], [41, 4, 1, "", "decode"], [41, 2, 1, "", "enabled"], [41, 4, 1, "", "encode"], [41, 2, 1, "", "manager"], [41, 2, 1, "", "rate"], [41, 3, 1, "", "yaml_tag"]], "hermespy.fec.coding.EncoderManager": [[41, 4, 1, "", "add_encoder"], [41, 3, 1, "", "allow_padding"], [41, 3, 1, "", "allow_truncating"], [41, 2, 1, "", "bit_block_size"], [41, 2, 1, "", "code_block_size"], [41, 4, 1, "", "decode"], [41, 4, 1, "", "encode"], [41, 2, 1, "", "encoders"], [41, 2, 1, "", "modem"], [41, 2, 1, "", "rate"], [41, 4, 1, "", "required_num_data_bits"], [41, 3, 1, "", "yaml_tag"]], "hermespy.fec.cyclic_redundancy_check": [[42, 1, 1, "", "CyclicRedundancyCheck"]], "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck": [[42, 2, 1, "", "bit_block_size"], [42, 2, 1, "", "check_block_size"], [42, 2, 1, "", "code_block_size"], [42, 4, 1, "", "decode"], [42, 4, 1, "", "encode"], [42, 3, 1, "", "yaml_tag"]], "hermespy.fec.repetition_encoder": [[45, 1, 1, "", "RepetitionEncoder"]], "hermespy.fec.repetition_encoder.RepetitionEncoder": [[45, 2, 1, "", "bit_block_size"], [45, 2, 1, "", "code_block_size"], [45, 4, 1, "", "decode"], [45, 4, 1, "", "encode"], [45, 2, 1, "", "repetitions"], [45, 3, 1, "", "yaml_tag"]], "hermespy.fec.scrambler": [[48, 1, 1, "", "PseudoRandomGenerator"], [48, 1, 1, "", "Scrambler3GPP"], [48, 1, 1, "", "Scrambler80211a"]], "hermespy.fec.scrambler.PseudoRandomGenerator": [[48, 4, 1, "", "generate"], [48, 4, 1, "", "generate_sequence"], [48, 4, 1, "", "reset"]], "hermespy.fec.scrambler.Scrambler3GPP": [[48, 2, 1, "", "bit_block_size"], [48, 2, 1, "", "code_block_size"], [48, 4, 1, "", "decode"], [48, 4, 1, "", "encode"], [48, 3, 1, "", "yaml_tag"]], "hermespy.fec.scrambler.Scrambler80211a": [[48, 2, 1, "", "bit_block_size"], [48, 2, 1, "", "code_block_size"], [48, 4, 1, "", "decode"], [48, 4, 1, "", "encode"], [48, 2, 1, "", "seed"], [48, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.audio": [[51, 0, 0, "-", "device"], [52, 0, 0, "-", "scenario"]], "hermespy.hardware_loop.audio.device": [[51, 1, 1, "", "AudioAntenna"], [51, 1, 1, "", "AudioDevice"], [51, 1, 1, "", "AudioDeviceAntennas"]], "hermespy.hardware_loop.audio.device.AudioAntenna": [[51, 4, 1, "", "local_characteristics"]], "hermespy.hardware_loop.audio.device.AudioDevice": [[51, 2, 1, "", "carrier_frequency"], [51, 2, 1, "", "max_sampling_rate"], [51, 2, 1, "", "playback_channels"], [51, 2, 1, "", "playback_device"], [51, 3, 1, "", "property_blacklist"], [51, 2, 1, "", "record_channels"], [51, 2, 1, "", "record_device"], [51, 2, 1, "", "sampling_rate"], [51, 4, 1, "", "trigger"], [51, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.audio.device.AudioDeviceAntennas": [[51, 2, 1, "", "antennas"], [51, 2, 1, "", "num_antennas"]], "hermespy.hardware_loop.audio.scenario": [[52, 1, 1, "", "AudioScenario"]], "hermespy.hardware_loop.audio.scenario.AudioScenario": [[52, 4, 1, "", "new_device"], [52, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.calibration": [[53, 0, 0, "-", "delay"], [54, 0, 0, "-", "leakage"]], "hermespy.hardware_loop.calibration.delay": [[53, 1, 1, "", "DelayCalibration"]], "hermespy.hardware_loop.calibration.delay.DelayCalibration": [[53, 4, 1, "", "Estimate"], [53, 2, 1, "", "delay"], [53, 4, 1, "", "from_HDF"], [53, 4, 1, "", "to_HDF"], [53, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.calibration.leakage": [[54, 1, 1, "", "SelectiveLeakageCalibration"]], "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration": [[54, 4, 1, "", "MMSEEstimate"], [54, 2, 1, "", "delay"], [54, 4, 1, "", "estimate_delay"], [54, 4, 1, "", "from_HDF"], [54, 2, 1, "", "leakage_response"], [54, 4, 1, "", "remove_leakage"], [54, 2, 1, "", "sampling_rate"], [54, 2, 1, "", "title"], [54, 4, 1, "", "to_HDF"], [54, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop": [[55, 0, 0, "-", "hardware_loop"], [56, 0, 0, "-", "physical_device"], [57, 0, 0, "-", "physical_device_dummy"], [58, 0, 0, "-", "scenario"], [60, 0, 0, "-", "visualizers"]], "hermespy.hardware_loop.hardware_loop": [[55, 1, 1, "", "EvaluatorPlotMode"], [55, 1, 1, "", "EvaluatorRegistration"], [55, 1, 1, "", "HardwareLoop"], [55, 1, 1, "", "HardwareLoopPlot"], [55, 1, 1, "", "HardwareLoopSample"]], "hermespy.hardware_loop.hardware_loop.EvaluatorPlotMode": [[55, 3, 1, "", "ARTIFACTS"], [55, 3, 1, "", "EVALUATION"], [55, 3, 1, "", "HIDE"]], "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration": [[55, 2, 1, "", "abbreviation"], [55, 2, 1, "", "confidence"], [55, 4, 1, "", "evaluate"], [55, 2, 1, "", "evaluator"], [55, 4, 1, "", "generate_result"], [55, 2, 1, "", "plot_mode"], [55, 2, 1, "", "title"], [55, 2, 1, "", "tolerance"]], "hermespy.hardware_loop.hardware_loop.HardwareLoop": [[55, 4, 1, "", "add_dimension"], [55, 4, 1, "", "add_evaluator"], [55, 4, 1, "", "add_plot"], [55, 4, 1, "", "evaluator_index"], [55, 2, 1, "", "evaluators"], [55, 4, 1, "", "from_yaml"], [55, 3, 1, "", "manual_triggering"], [55, 4, 1, "", "new_dimension"], [55, 2, 1, "", "num_evaluators"], [55, 3, 1, "", "plot_information"], [55, 3, 1, "", "property_blacklist"], [55, 4, 1, "", "replay"], [55, 4, 1, "", "run"], [55, 3, 1, "", "serialized_attributes"], [55, 4, 1, "", "to_yaml"], [55, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot": [[55, 2, 1, "", "axes"], [55, 2, 1, "", "figure"], [55, 2, 1, "", "hardware_loop"], [55, 4, 1, "", "prepare_figure"], [55, 2, 1, "", "title"], [55, 4, 1, "", "update_plot"]], "hermespy.hardware_loop.hardware_loop.HardwareLoopSample": [[55, 2, 1, "", "artifacts"], [55, 2, 1, "", "drop"], [55, 2, 1, "", "evaluations"]], "hermespy.hardware_loop.physical_device": [[56, 1, 1, "", "CT"], [56, 1, 1, "", "Calibration"], [56, 1, 1, "", "DelayCalibrationBase"], [56, 1, 1, "", "LeakageCalibrationBase"], [56, 1, 1, "", "NoDelayCalibration"], [56, 1, 1, "", "NoLeakageCalibration"], [56, 1, 1, "", "PDT"], [56, 1, 1, "", "PhysicalDevice"]], "hermespy.hardware_loop.physical_device.Calibration": [[56, 4, 1, "", "Load"], [56, 2, 1, "", "device"], [56, 3, 1, "", "hdf_group_name"], [56, 4, 1, "", "save"]], "hermespy.hardware_loop.physical_device.DelayCalibrationBase": [[56, 4, 1, "", "correct_receive_delay"], [56, 4, 1, "", "correct_transmit_delay"], [56, 2, 1, "", "delay"], [56, 3, 1, "", "hdf_group_name"]], "hermespy.hardware_loop.physical_device.LeakageCalibrationBase": [[56, 3, 1, "", "hdf_group_name"], [56, 4, 1, "", "remove_leakage"]], "hermespy.hardware_loop.physical_device.NoDelayCalibration": [[56, 4, 1, "", "correct_receive_delay"], [56, 4, 1, "", "correct_transmit_delay"], [56, 2, 1, "", "delay"], [56, 4, 1, "", "from_HDF"], [56, 4, 1, "", "to_HDF"], [56, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.physical_device.NoLeakageCalibration": [[56, 4, 1, "", "from_HDF"], [56, 4, 1, "", "remove_leakage"], [56, 4, 1, "", "to_HDF"], [56, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.physical_device.PhysicalDevice": [[56, 2, 1, "", "adaptive_sampling"], [56, 2, 1, "", "delay_calibration"], [56, 4, 1, "", "estimate_noise_power"], [56, 2, 1, "", "leakage_calibration"], [56, 4, 1, "", "load_calibration"], [56, 2, 1, "", "lowpass_bandwidth"], [56, 2, 1, "", "lowpass_filter"], [56, 2, 1, "", "max_receive_delay"], [56, 2, 1, "", "max_sampling_rate"], [56, 2, 1, "", "noise_power"], [56, 4, 1, "", "process_input"], [56, 4, 1, "", "receive"], [56, 4, 1, "", "save_calibration"], [56, 4, 1, "", "transmit"], [56, 4, 1, "", "trigger"], [56, 4, 1, "", "trigger_direct"], [56, 2, 1, "", "velocity"]], "hermespy.hardware_loop.physical_device_dummy": [[57, 1, 1, "", "PhysicalDeviceDummy"], [57, 1, 1, "", "PhysicalScenarioDummy"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy": [[57, 2, 1, "", "max_sampling_rate"], [57, 4, 1, "", "process_input"], [57, 4, 1, "", "receive"], [57, 2, 1, "", "receive_transmission"], [57, 4, 1, "", "transmit"], [57, 4, 1, "", "trigger"], [57, 4, 1, "", "trigger_direct"], [57, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy": [[57, 4, 1, "", "new_device"], [57, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.scenario": [[58, 1, 1, "", "PhysicalScenario"], [58, 1, 1, "", "PhysicalScenarioType"], [58, 1, 1, "", "SimulatedPhysicalScenario"]], "hermespy.hardware_loop.scenario.PhysicalScenario": [[58, 4, 1, "", "add_device"], [58, 4, 1, "", "receive_devices"]], "hermespy.hardware_loop.scenario.SimulatedPhysicalScenario": [[58, 4, 1, "", "receive_devices"]], "hermespy.hardware_loop.uhd": [[59, 0, 0, "-", "system"], [59, 0, 0, "-", "usrp"]], "hermespy.hardware_loop.uhd.system": [[59, 1, 1, "", "UsrpSystem"]], "hermespy.hardware_loop.uhd.system.UsrpSystem": [[59, 4, 1, "", "add_device"], [59, 4, 1, "", "new_device"], [59, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.uhd.usrp": [[59, 1, 1, "", "UsrpDevice"]], "hermespy.hardware_loop.uhd.usrp.UsrpDevice": [[59, 2, 1, "", "carrier_frequency"], [59, 2, 1, "", "ip"], [59, 2, 1, "", "max_sampling_rate"], [59, 2, 1, "", "num_appended_zeros"], [59, 2, 1, "", "num_prepeneded_zeros"], [59, 2, 1, "", "port"], [59, 3, 1, "", "property_blacklist"], [59, 2, 1, "", "rx_gain"], [59, 2, 1, "", "sampling_rate"], [59, 2, 1, "", "scale_transmission"], [59, 4, 1, "", "trigger"], [59, 2, 1, "", "tx_gain"], [59, 3, 1, "", "yaml_tag"]], "hermespy.hardware_loop.visualizers": [[60, 1, 1, "", "ArtifactPlot"], [60, 1, 1, "", "DeviceReceptionPlot"], [60, 1, 1, "", "DeviceTransmissionPlot"], [60, 1, 1, "", "EvaluationPlot"], [60, 1, 1, "", "EyePlot"], [60, 1, 1, "", "HardwareLoopDevicePlot"], [60, 1, 1, "", "HardwareLoopEvaluatorPlot"], [60, 1, 1, "", "RadarRangePlot"], [60, 1, 1, "", "ReceivedConstellationPlot"], [60, 1, 1, "", "SignalPlot"]], "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot": [[60, 2, 1, "", "device"]], "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot": [[60, 2, 1, "", "evaluator"]], "hermespy.jcas": [[62, 0, 0, "-", "matched_filtering"]], "hermespy.jcas.matched_filtering": [[62, 1, 1, "", "JCASReception"], [62, 1, 1, "", "JCASTransmission"], [62, 1, 1, "", "MatchedFilterJcas"]], "hermespy.jcas.matched_filtering.JCASReception": [[62, 4, 1, "", "from_HDF"], [62, 4, 1, "", "to_HDF"]], "hermespy.jcas.matched_filtering.JCASTransmission": [[62, 4, 1, "", "from_HDF"]], "hermespy.jcas.matched_filtering.MatchedFilterJcas": [[62, 2, 1, "", "device"], [62, 2, 1, "", "frame_duration"], [62, 2, 1, "", "max_range"], [62, 3, 1, "", "property_blacklist"], [62, 2, 1, "", "range_resolution"], [62, 2, 1, "", "sampling_rate"], [62, 3, 1, "", "yaml_tag"]], "hermespy.modem": [[64, 0, 0, "-", "bits_source"], [65, 0, 0, "-", "evaluators"], [66, 0, 0, "-", "modem"], [73, 0, 0, "-", "symbols"], [74, 0, 0, "-", "waveform"], [75, 0, 0, "-", "waveform_chirp_fsk"], [76, 0, 0, "-", "waveform_correlation_synchronization"], [77, 0, 0, "-", "waveform_ofdm"], [78, 0, 0, "-", "waveform_single_carrier"]], "hermespy.modem.bits_source": [[64, 1, 1, "", "BitsSource"], [64, 1, 1, "", "RandomBitsSource"], [64, 1, 1, "", "StreamBitsSource"]], "hermespy.modem.bits_source.BitsSource": [[64, 4, 1, "", "generate_bits"]], "hermespy.modem.bits_source.RandomBitsSource": [[64, 4, 1, "", "generate_bits"], [64, 3, 1, "", "yaml_tag"]], "hermespy.modem.bits_source.StreamBitsSource": [[64, 4, 1, "", "generate_bits"]], "hermespy.modem.evaluators": [[65, 1, 1, "", "BitErrorArtifact"], [65, 1, 1, "", "BitErrorEvaluation"], [65, 1, 1, "", "BitErrorEvaluator"], [65, 1, 1, "", "BlockErrorArtifact"], [65, 1, 1, "", "BlockErrorEvaluation"], [65, 1, 1, "", "BlockErrorEvaluator"], [65, 1, 1, "", "CommunicationEvaluator"], [65, 1, 1, "", "FrameErrorArtifact"], [65, 1, 1, "", "FrameErrorEvaluation"], [65, 1, 1, "", "FrameErrorEvaluator"], [65, 1, 1, "", "ThroughputArtifact"], [65, 1, 1, "", "ThroughputEvaluation"], [65, 1, 1, "", "ThroughputEvaluator"]], "hermespy.modem.evaluators.BitErrorEvaluation": [[65, 4, 1, "", "artifact"], [65, 2, 1, "", "title"]], "hermespy.modem.evaluators.BitErrorEvaluator": [[65, 2, 1, "", "abbreviation"], [65, 4, 1, "", "evaluate"], [65, 2, 1, "", "title"], [65, 3, 1, "", "yaml_tag"]], "hermespy.modem.evaluators.BlockErrorEvaluation": [[65, 4, 1, "", "artifact"], [65, 2, 1, "", "title"]], "hermespy.modem.evaluators.BlockErrorEvaluator": [[65, 2, 1, "", "abbreviation"], [65, 4, 1, "", "evaluate"], [65, 2, 1, "", "title"], [65, 3, 1, "", "yaml_tag"]], "hermespy.modem.evaluators.CommunicationEvaluator": [[65, 4, 1, "", "generate_result"], [65, 2, 1, "", "receiving_modem"], [65, 2, 1, "", "transmitting_modem"]], "hermespy.modem.evaluators.FrameErrorEvaluation": [[65, 4, 1, "", "artifact"], [65, 2, 1, "", "title"]], "hermespy.modem.evaluators.FrameErrorEvaluator": [[65, 2, 1, "", "abbreviation"], [65, 4, 1, "", "evaluate"], [65, 2, 1, "", "title"], [65, 3, 1, "", "yaml_tag"]], "hermespy.modem.evaluators.ThroughputEvaluation": [[65, 4, 1, "", "artifact"], [65, 2, 1, "", "title"]], "hermespy.modem.evaluators.ThroughputEvaluator": [[65, 2, 1, "", "abbreviation"], [65, 4, 1, "", "evaluate"], [65, 2, 1, "", "title"], [65, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem": [[66, 1, 1, "", "BaseModem"], [66, 1, 1, "", "CommunicationReception"], [66, 1, 1, "", "CommunicationReceptionFrame"], [66, 1, 1, "", "CommunicationTransmission"], [66, 1, 1, "", "CommunicationTransmissionFrame"], [66, 1, 1, "", "DuplexModem"], [66, 1, 1, "", "ReceivingModem"], [66, 1, 1, "", "SimplexLink"], [66, 1, 1, "", "TransmittingModem"]], "hermespy.modem.modem.BaseModem": [[66, 2, 1, "", "csi"], [66, 2, 1, "", "encoder_manager"], [66, 2, 1, "", "frame_duration"], [66, 2, 1, "", "num_data_bits_per_frame"], [66, 2, 1, "", "num_receive_streams"], [66, 2, 1, "", "num_transmit_streams"], [66, 2, 1, "", "precoding"], [66, 2, 1, "", "receiving_device"], [66, 2, 1, "", "sampling_rate"], [66, 2, 1, "", "transmitting_device"], [66, 2, 1, "", "waveform_generator"]], "hermespy.modem.modem.CommunicationReception": [[66, 2, 1, "", "bits"], [66, 2, 1, "", "encoded_bits"], [66, 2, 1, "", "equalized_symbols"], [66, 3, 1, "", "frames"], [66, 4, 1, "", "from_HDF"], [66, 2, 1, "", "num_frames"], [66, 2, 1, "", "symbols"], [66, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.CommunicationReceptionFrame": [[66, 3, 1, "", "csi"], [66, 3, 1, "", "decoded_bits"], [66, 3, 1, "", "decoded_signal"], [66, 3, 1, "", "decoded_symbols"], [66, 3, 1, "", "encoded_bits"], [66, 3, 1, "", "equalized_symbols"], [66, 4, 1, "", "from_HDF"], [66, 3, 1, "", "signal"], [66, 3, 1, "", "symbols"], [66, 3, 1, "", "timestamp"], [66, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.CommunicationTransmission": [[66, 2, 1, "", "bits"], [66, 3, 1, "", "frames"], [66, 4, 1, "", "from_HDF"], [66, 2, 1, "", "num_frames"], [66, 2, 1, "", "symbols"], [66, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.CommunicationTransmissionFrame": [[66, 3, 1, "", "bits"], [66, 3, 1, "", "encoded_bits"], [66, 3, 1, "", "encoded_symbols"], [66, 4, 1, "", "from_HDF"], [66, 3, 1, "", "signal"], [66, 3, 1, "", "symbols"], [66, 3, 1, "", "timestamp"], [66, 4, 1, "", "to_HDF"]], "hermespy.modem.modem.DuplexModem": [[66, 2, 1, "", "csi"], [66, 2, 1, "", "device"], [66, 2, 1, "", "receiving_device"], [66, 2, 1, "", "transmitting_device"], [66, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem.ReceivingModem": [[66, 2, 1, "", "csi"], [66, 2, 1, "", "device"], [66, 2, 1, "", "receive_stream_coding"], [66, 2, 1, "", "receiving_device"], [66, 2, 1, "", "transmitting_device"], [66, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem.SimplexLink": [[66, 2, 1, "", "receiving_device"], [66, 2, 1, "", "reference"], [66, 2, 1, "", "transmitting_device"], [66, 3, 1, "", "yaml_tag"]], "hermespy.modem.modem.TransmittingModem": [[66, 2, 1, "", "bits_source"], [66, 2, 1, "", "device"], [66, 2, 1, "", "receiving_device"], [66, 2, 1, "", "transmit_stream_coding"], [66, 2, 1, "", "transmitting_device"], [66, 3, 1, "", "yaml_tag"]], "hermespy.modem.precoding": [[67, 0, 0, "-", "dft"], [68, 0, 0, "-", "ratio_combining"], [69, 0, 0, "-", "single_carrier"], [70, 0, 0, "-", "space_time_block_coding"], [71, 0, 0, "-", "spatial_multiplexing"], [72, 0, 0, "-", "symbol_precoding"]], "hermespy.modem.precoding.dft": [[67, 1, 1, "", "DFT"]], "hermespy.modem.precoding.dft.DFT": [[67, 4, 1, "", "decode"], [67, 4, 1, "", "encode"], [67, 2, 1, "", "num_input_streams"], [67, 2, 1, "", "num_output_streams"], [67, 3, 1, "", "yaml_tag"]], "hermespy.modem.precoding.ratio_combining": [[68, 1, 1, "", "MaximumRatioCombining"]], "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining": [[68, 4, 1, "", "decode"], [68, 4, 1, "", "encode"], [68, 2, 1, "", "num_input_streams"], [68, 2, 1, "", "num_output_streams"], [68, 3, 1, "", "yaml_tag"]], "hermespy.modem.precoding.single_carrier": [[69, 1, 1, "", "SingleCarrier"]], "hermespy.modem.precoding.single_carrier.SingleCarrier": [[69, 4, 1, "", "decode"], [69, 4, 1, "", "encode"], [69, 2, 1, "", "num_input_streams"], [69, 2, 1, "", "num_output_streams"], [69, 3, 1, "", "yaml_tag"]], "hermespy.modem.precoding.space_time_block_coding": [[70, 1, 1, "", "Alamouti"]], "hermespy.modem.precoding.space_time_block_coding.Alamouti": [[70, 4, 1, "", "decode"], [70, 4, 1, "", "encode"], [70, 2, 1, "", "num_input_streams"], [70, 2, 1, "", "num_output_streams"], [70, 3, 1, "", "yaml_tag"]], "hermespy.modem.precoding.spatial_multiplexing": [[71, 1, 1, "", "SpatialMultiplexing"]], "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing": [[71, 4, 1, "", "decode"], [71, 4, 1, "", "encode"], [71, 2, 1, "", "num_input_streams"], [71, 2, 1, "", "num_output_streams"], [71, 2, 1, "", "rate"], [71, 3, 1, "", "yaml_tag"]], "hermespy.modem.precoding.symbol_precoding": [[72, 1, 1, "", "SymbolPrecoder"], [72, 1, 1, "", "SymbolPrecoding"]], "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder": [[72, 4, 1, "", "decode"], [72, 4, 1, "", "encode"]], "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding": [[72, 4, 1, "", "decode"], [72, 4, 1, "", "encode"], [72, 3, 1, "", "yaml_tag"]], "hermespy.modem.symbols": [[73, 1, 1, "", "StatedSymbols"], [73, 1, 1, "", "Symbol"], [73, 1, 1, "", "SymbolType"], [73, 1, 1, "", "Symbols"]], "hermespy.modem.symbols.StatedSymbols": [[73, 4, 1, "", "copy"], [73, 4, 1, "", "from_HDF"], [73, 2, 1, "", "num_transmit_streams"], [73, 2, 1, "", "states"], [73, 4, 1, "", "to_HDF"]], "hermespy.modem.symbols.Symbol": [[73, 3, 1, "", "flag"], [73, 3, 1, "", "value"]], "hermespy.modem.symbols.SymbolType": [[73, 3, 1, "", "DATA"], [73, 3, 1, "", "PILOT"], [73, 3, 1, "", "REFERENCE"]], "hermespy.modem.symbols.Symbols": [[73, 4, 1, "", "append_stream"], [73, 4, 1, "", "append_symbols"], [73, 4, 1, "", "copy"], [73, 4, 1, "", "from_HDF"], [73, 2, 1, "", "num_blocks"], [73, 2, 1, "", "num_streams"], [73, 2, 1, "", "num_symbols"], [73, 4, 1, "", "plot_constellation"], [73, 2, 1, "", "raw"], [73, 4, 1, "", "to_HDF"]], "hermespy.modem.waveform": [[74, 1, 1, "", "ChannelEqualization"], [74, 1, 1, "", "ChannelEstimation"], [74, 1, 1, "", "ConfigurablePilotWaveform"], [74, 1, 1, "", "CustomPilotSymbolSequence"], [74, 1, 1, "", "IdealChannelEstimation"], [74, 1, 1, "", "MappedPilotSymbolSequence"], [74, 1, 1, "", "PilotSymbolSequence"], [74, 1, 1, "", "PilotWaveformGenerator"], [74, 1, 1, "", "Synchronization"], [74, 1, 1, "", "UniformPilotSymbolSequence"], [74, 1, 1, "", "WaveformGenerator"], [74, 1, 1, "", "WaveformType"], [74, 1, 1, "", "ZeroForcingChannelEqualization"]], "hermespy.modem.waveform.ChannelEqualization": [[74, 4, 1, "", "equalize_channel"], [74, 3, 1, "", "property_blacklist"], [74, 2, 1, "", "waveform_generator"], [74, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform.ChannelEstimation": [[74, 4, 1, "", "estimate_channel"], [74, 3, 1, "", "property_blacklist"], [74, 2, 1, "", "waveform_generator"], [74, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform.ConfigurablePilotWaveform": [[74, 3, 1, "", "pilot_symbol_sequence"], [74, 4, 1, "", "pilot_symbols"], [74, 3, 1, "", "repeat_pilot_symbol_sequence"]], "hermespy.modem.waveform.CustomPilotSymbolSequence": [[74, 2, 1, "", "sequence"]], "hermespy.modem.waveform.IdealChannelEstimation": [[74, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform.PilotSymbolSequence": [[74, 2, 1, "", "sequence"]], "hermespy.modem.waveform.PilotWaveformGenerator": [[74, 2, 1, "", "pilot_signal"]], "hermespy.modem.waveform.Synchronization": [[74, 3, 1, "", "property_blacklist"], [74, 4, 1, "", "synchronize"], [74, 2, 1, "", "waveform_generator"], [74, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform.UniformPilotSymbolSequence": [[74, 2, 1, "", "sequence"]], "hermespy.modem.waveform.WaveformGenerator": [[74, 2, 1, "", "bandwidth"], [74, 2, 1, "", "bit_energy"], [74, 2, 1, "", "bits_per_frame"], [74, 2, 1, "", "bits_per_symbol"], [74, 2, 1, "", "channel_equalization"], [74, 2, 1, "", "channel_estimation"], [74, 2, 1, "", "data_rate"], [74, 4, 1, "", "demodulate"], [74, 4, 1, "", "equalize_symbols"], [74, 4, 1, "", "estimate_channel"], [74, 2, 1, "", "frame_duration"], [74, 4, 1, "", "map"], [74, 2, 1, "", "modem"], [74, 4, 1, "", "modulate"], [74, 2, 1, "", "modulation_order"], [74, 2, 1, "", "oversampling_factor"], [74, 2, 1, "", "power"], [74, 3, 1, "", "property_blacklist"], [74, 2, 1, "", "samples_in_frame"], [74, 2, 1, "", "sampling_rate"], [74, 2, 1, "", "symbol_energy"], [74, 2, 1, "", "symbol_precoding_support"], [74, 3, 1, "", "symbol_type"], [74, 2, 1, "", "symbols_per_frame"], [74, 2, 1, "", "synchronization"], [74, 4, 1, "", "unmap"]], "hermespy.modem.waveform.ZeroForcingChannelEqualization": [[74, 4, 1, "", "equalize_channel"], [74, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_chirp_fsk": [[75, 1, 1, "", "ChirpFSKCorrelationSynchronization"], [75, 1, 1, "", "ChirpFSKSynchronization"], [75, 1, 1, "", "ChirpFSKWaveform"]], "hermespy.modem.waveform_chirp_fsk.ChirpFSKCorrelationSynchronization": [[75, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_chirp_fsk.ChirpFSKSynchronization": [[75, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform": [[75, 2, 1, "", "bandwidth"], [75, 2, 1, "", "bit_energy"], [75, 2, 1, "", "bits_per_frame"], [75, 2, 1, "", "bits_per_symbol"], [75, 2, 1, "", "chirp_bandwidth"], [75, 2, 1, "", "chirp_duration"], [75, 2, 1, "", "chirps_in_frame"], [75, 4, 1, "", "demodulate"], [75, 2, 1, "", "frame_duration"], [75, 2, 1, "", "freq_difference"], [75, 2, 1, "", "guard_interval"], [75, 4, 1, "", "map"], [75, 4, 1, "", "modulate"], [75, 2, 1, "", "modulation_order"], [75, 2, 1, "", "num_data_chirps"], [75, 2, 1, "", "num_pilot_chirps"], [75, 2, 1, "", "pilot_signal"], [75, 2, 1, "", "power"], [75, 2, 1, "", "samples_in_chirp"], [75, 2, 1, "", "samples_in_frame"], [75, 2, 1, "", "sampling_rate"], [75, 2, 1, "", "symbol_energy"], [75, 2, 1, "", "symbol_precoding_support"], [75, 3, 1, "", "symbol_type"], [75, 2, 1, "", "symbols_per_frame"], [75, 4, 1, "", "unmap"], [75, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_correlation_synchronization": [[76, 1, 1, "", "CorrelationSynchronization"], [76, 1, 1, "", "PGT"]], "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization": [[76, 2, 1, "", "guard_ratio"], [76, 4, 1, "", "synchronize"], [76, 2, 1, "", "threshold"], [76, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm": [[77, 1, 1, "", "ElementType"], [77, 1, 1, "", "FrameElement"], [77, 1, 1, "", "FrameGuardSection"], [77, 1, 1, "", "FrameResource"], [77, 1, 1, "", "FrameSection"], [77, 1, 1, "", "FrameSymbolSection"], [77, 1, 1, "", "OFDMChannelEqualization"], [77, 1, 1, "", "OFDMCorrelationSynchronization"], [77, 1, 1, "", "OFDMIdealChannelEstimation"], [77, 1, 1, "", "OFDMLeastSquaresChannelEstimation"], [77, 1, 1, "", "OFDMSynchronization"], [77, 1, 1, "", "OFDMWaveform"], [77, 1, 1, "", "OFDMZeroForcingChannelEqualization"], [77, 1, 1, "", "PilotSection"], [77, 1, 1, "", "PrefixType"], [77, 1, 1, "", "ReferencePosition"], [77, 1, 1, "", "SchmidlCoxPilotSection"], [77, 1, 1, "", "SchmidlCoxSynchronization"]], "hermespy.modem.waveform_ofdm.ElementType": [[77, 3, 1, "", "DATA"], [77, 3, 1, "", "NULL"], [77, 3, 1, "", "REFERENCE"]], "hermespy.modem.waveform_ofdm.FrameElement": [[77, 3, 1, "", "repetitions"], [77, 3, 1, "", "serialized_attributes"], [77, 3, 1, "", "type"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.FrameGuardSection": [[77, 4, 1, "", "demodulate"], [77, 2, 1, "", "duration"], [77, 4, 1, "", "modulate"], [77, 2, 1, "", "num_samples"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.FrameResource": [[77, 3, 1, "", "elements"], [77, 2, 1, "", "mask"], [77, 2, 1, "", "num_references"], [77, 2, 1, "", "num_subcarriers"], [77, 2, 1, "", "num_symbols"], [77, 2, 1, "", "prefix_ratio"], [77, 3, 1, "", "prefix_type"], [77, 2, 1, "", "repetitions"], [77, 3, 1, "", "serialized_attributes"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.FrameSection": [[77, 4, 1, "", "demodulate"], [77, 2, 1, "", "frame"], [77, 4, 1, "", "modulate"], [77, 2, 1, "", "num_references"], [77, 2, 1, "", "num_repetitions"], [77, 2, 1, "", "num_samples"], [77, 2, 1, "", "num_subcarriers"], [77, 2, 1, "", "num_symbols"], [77, 2, 1, "", "num_words"], [77, 4, 1, "", "pick_symbols"], [77, 4, 1, "", "place_symbols"], [77, 2, 1, "", "resource_mask"]], "hermespy.modem.waveform_ofdm.FrameSymbolSection": [[77, 4, 1, "", "demodulate"], [77, 4, 1, "", "modulate"], [77, 2, 1, "", "num_references"], [77, 2, 1, "", "num_samples"], [77, 2, 1, "", "num_subcarriers"], [77, 2, 1, "", "num_symbols"], [77, 2, 1, "", "num_words"], [77, 3, 1, "", "pattern"], [77, 2, 1, "", "resource_mask"], [77, 3, 1, "", "serialized_attributes"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMChannelEqualization": [[77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMCorrelationSynchronization": [[77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMIdealChannelEstimation": [[77, 4, 1, "", "estimate_channel"], [77, 3, 1, "", "reference_position"], [77, 3, 1, "", "serialized_attributes"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation": [[77, 4, 1, "", "estimate_channel"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMWaveform": [[77, 4, 1, "", "add_resource"], [77, 4, 1, "", "add_section"], [77, 2, 1, "", "bandwidth"], [77, 2, 1, "", "bit_energy"], [77, 2, 1, "", "bits_per_frame"], [77, 3, 1, "", "dc_suppression"], [77, 4, 1, "", "demodulate"], [77, 2, 1, "", "frame_duration"], [77, 4, 1, "", "map"], [77, 4, 1, "", "modulate"], [77, 2, 1, "", "modulation_order"], [77, 2, 1, "", "num_subcarriers"], [77, 2, 1, "", "pilot_section"], [77, 2, 1, "", "pilot_signal"], [77, 2, 1, "", "power"], [77, 2, 1, "", "references_per_frame"], [77, 2, 1, "", "resources"], [77, 2, 1, "", "samples_in_frame"], [77, 2, 1, "", "sampling_rate"], [77, 2, 1, "", "structure"], [77, 2, 1, "", "subcarrier_spacing"], [77, 2, 1, "", "symbol_energy"], [77, 2, 1, "", "symbols_per_frame"], [77, 4, 1, "", "unmap"], [77, 2, 1, "", "words_per_frame"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMZeroForcingChannelEqualization": [[77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.PilotSection": [[77, 4, 1, "", "demodulate"], [77, 4, 1, "", "from_yaml"], [77, 4, 1, "", "modulate"], [77, 2, 1, "", "num_samples"], [77, 2, 1, "", "pilot_elements"], [77, 4, 1, "", "to_yaml"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.PrefixType": [[77, 3, 1, "", "CYCLIC"], [77, 3, 1, "", "NONE"], [77, 3, 1, "", "ZEROPAD"]], "hermespy.modem.waveform_ofdm.ReferencePosition": [[77, 3, 1, "", "IDEAL"], [77, 3, 1, "", "IDEAL_MIDAMBLE"], [77, 3, 1, "", "IDEAL_POSTAMBLE"], [77, 3, 1, "", "IDEAL_PREAMBLE"]], "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection": [[77, 4, 1, "", "demodulate"], [77, 2, 1, "", "num_samples"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization": [[77, 4, 1, "", "synchronize"], [77, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier": [[78, 1, 1, "", "FMCWWaveform"], [78, 1, 1, "", "FilteredSingleCarrierWaveform"], [78, 1, 1, "", "RaisedCosineWaveform"], [78, 1, 1, "", "RectangularWaveform"], [78, 1, 1, "", "RolledOffSingleCarrierWaveform"], [78, 1, 1, "", "RootRaisedCosineWaveform"], [78, 1, 1, "", "SingleCarrierChannelEqualization"], [78, 1, 1, "", "SingleCarrierChannelEstimation"], [78, 1, 1, "", "SingleCarrierCorrelationSynchronization"], [78, 1, 1, "", "SingleCarrierIdealChannelEstimation"], [78, 1, 1, "", "SingleCarrierLeastSquaresChannelEstimation"], [78, 1, 1, "", "SingleCarrierMinimumMeanSquareChannelEqualization"], [78, 1, 1, "", "SingleCarrierZeroForcingChannelEqualization"]], "hermespy.modem.waveform_single_carrier.FMCWWaveform": [[78, 2, 1, "", "bandwidth"], [78, 2, 1, "", "chirp_duration"], [78, 2, 1, "", "chirp_slope"], [78, 3, 1, "", "property_blacklist"], [78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform": [[78, 2, 1, "", "bit_energy"], [78, 2, 1, "", "bits_per_frame"], [78, 4, 1, "", "demodulate"], [78, 2, 1, "", "guard_interval"], [78, 4, 1, "", "map"], [78, 4, 1, "", "modulate"], [78, 2, 1, "", "modulation_order"], [78, 2, 1, "", "num_data_symbols"], [78, 2, 1, "", "num_guard_samples"], [78, 2, 1, "", "num_postamble_symbols"], [78, 2, 1, "", "num_preamble_symbols"], [78, 2, 1, "", "pilot_rate"], [78, 2, 1, "", "pilot_signal"], [78, 4, 1, "", "plot_filter"], [78, 4, 1, "", "plot_filter_correlation"], [78, 2, 1, "", "power"], [78, 2, 1, "", "samples_in_frame"], [78, 2, 1, "", "sampling_rate"], [78, 2, 1, "", "symbol_energy"], [78, 2, 1, "", "symbol_rate"], [78, 2, 1, "", "symbols_per_frame"], [78, 4, 1, "", "unmap"]], "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform": [[78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.RectangularWaveform": [[78, 2, 1, "", "bandwidth"], [78, 2, 1, "", "relative_bandwidth"], [78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform": [[78, 2, 1, "", "bandwidth"], [78, 2, 1, "", "filter_length"], [78, 2, 1, "", "relative_bandwidth"], [78, 2, 1, "", "roll_off"]], "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform": [[78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierCorrelationSynchronization": [[78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation": [[78, 4, 1, "", "estimate_channel"], [78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation": [[78, 4, 1, "", "estimate_channel"], [78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization": [[78, 4, 1, "", "equalize_channel"], [78, 3, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.SingleCarrierZeroForcingChannelEqualization": [[78, 3, 1, "", "yaml_tag"]], "hermespy.precoding": [[80, 0, 0, "-", "precoding"], [81, 0, 0, "-", "stream_precoding"]], "hermespy.precoding.precoding": [[80, 1, 1, "", "Precoder"], [80, 1, 1, "", "PrecoderType"], [80, 1, 1, "", "Precoding"]], "hermespy.precoding.precoding.Precoder": [[80, 2, 1, "", "num_input_streams"], [80, 2, 1, "", "num_output_streams"], [80, 2, 1, "", "precoding"], [80, 2, 1, "", "rate"], [80, 2, 1, "", "required_num_input_streams"], [80, 2, 1, "", "required_num_output_streams"], [80, 3, 1, "", "yaml_tag"]], "hermespy.precoding.precoding.Precoding": [[80, 3, 1, "", "__modem"], [80, 3, 1, "", "__precoders"], [80, 4, 1, "", "from_yaml"], [80, 2, 1, "", "modem"], [80, 2, 1, "", "num_input_streams"], [80, 2, 1, "", "num_output_streams"], [80, 4, 1, "", "pop_precoder"], [80, 2, 1, "", "rate"], [80, 4, 1, "", "required_inputs"], [80, 4, 1, "", "required_outputs"], [80, 4, 1, "", "to_yaml"]], "hermespy.precoding.stream_precoding": [[81, 1, 1, "", "ReceiveStreamCoding"], [81, 1, 1, "", "ReceiveStreamDecoder"], [81, 1, 1, "", "TransmitStreamCoding"], [81, 1, 1, "", "TransmitStreamEncoder"]], "hermespy.precoding.stream_precoding.ReceiveStreamCoding": [[81, 4, 1, "", "decode"], [81, 3, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding.ReceiveStreamDecoder": [[81, 4, 1, "", "decode_streams"], [81, 2, 1, "", "num_input_streams"], [81, 2, 1, "", "num_output_streams"], [81, 2, 1, "", "num_receive_input_streams"], [81, 2, 1, "", "num_receive_output_streams"]], "hermespy.precoding.stream_precoding.TransmitStreamCoding": [[81, 4, 1, "", "encode"], [81, 3, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding.TransmitStreamEncoder": [[81, 4, 1, "", "encode_streams"], [81, 2, 1, "", "num_input_streams"], [81, 2, 1, "", "num_output_streams"], [81, 2, 1, "", "num_transmit_input_streams"], [81, 2, 1, "", "num_transmit_output_streams"]], "hermespy.radar": [[83, 0, 0, "-", "cube"], [84, 0, 0, "-", "detection"], [85, 0, 0, "-", "evaluators"], [86, 0, 0, "-", "fmcw"], [87, 0, 0, "-", "radar"]], "hermespy.radar.cube": [[83, 1, 1, "", "RadarCube"]], "hermespy.radar.cube.RadarCube": [[83, 2, 1, "", "angle_bins"], [83, 2, 1, "", "data"], [83, 2, 1, "", "doppler_bins"], [83, 4, 1, "", "from_HDF"], [83, 4, 1, "", "normalize_power"], [83, 4, 1, "", "plot_range"], [83, 4, 1, "", "plot_range_velocity"], [83, 2, 1, "", "range_bins"], [83, 4, 1, "", "to_HDF"], [83, 2, 1, "", "velocity_bins"]], "hermespy.radar.detection": [[84, 1, 1, "", "MaxDetector"], [84, 1, 1, "", "PointDetection"], [84, 1, 1, "", "RadarDetector"], [84, 1, 1, "", "RadarPointCloud"], [84, 1, 1, "", "ThresholdDetector"]], "hermespy.radar.detection.MaxDetector": [[84, 4, 1, "", "detect"], [84, 3, 1, "", "yaml_tag"]], "hermespy.radar.detection.PointDetection": [[84, 4, 1, "", "FromSpherical"], [84, 2, 1, "", "position"], [84, 2, 1, "", "power"], [84, 2, 1, "", "velocity"]], "hermespy.radar.detection.RadarDetector": [[84, 4, 1, "", "detect"]], "hermespy.radar.detection.RadarPointCloud": [[84, 4, 1, "", "add_point"], [84, 2, 1, "", "max_range"], [84, 2, 1, "", "num_points"], [84, 2, 1, "", "points"], [84, 2, 1, "", "title"]], "hermespy.radar.detection.ThresholdDetector": [[84, 4, 1, "", "detect"], [84, 2, 1, "", "min_power"], [84, 2, 1, "", "normalize"], [84, 2, 1, "", "peak_detection"], [84, 3, 1, "", "yaml_tag"]], "hermespy.radar.evaluators": [[85, 1, 1, "", "DetectionProbArtifact"], [85, 1, 1, "", "DetectionProbEvaluator"], [85, 1, 1, "", "DetectionProbabilityEvaluation"], [85, 1, 1, "", "RadarEvaluator"], [85, 1, 1, "", "ReceiverOperatingCharacteristic"], [85, 1, 1, "", "RocArtifact"], [85, 1, 1, "", "RocEvaluation"], [85, 1, 1, "", "RocEvaluationResult"], [85, 1, 1, "", "RootMeanSquareArtifact"], [85, 1, 1, "", "RootMeanSquareError"], [85, 1, 1, "", "RootMeanSquareErrorResult"], [85, 1, 1, "", "RootMeanSquareEvaluation"]], "hermespy.radar.evaluators.DetectionProbEvaluator": [[85, 2, 1, "", "abbreviation"], [85, 4, 1, "", "evaluate"], [85, 4, 1, "", "generate_result"], [85, 2, 1, "", "title"], [85, 3, 1, "", "yaml_tag"]], "hermespy.radar.evaluators.DetectionProbabilityEvaluation": [[85, 4, 1, "", "artifact"]], "hermespy.radar.evaluators.RadarEvaluator": [[85, 4, 1, "", "generate_result"], [85, 2, 1, "", "radar_channel"], [85, 2, 1, "", "receiving_radar"]], "hermespy.radar.evaluators.ReceiverOperatingCharacteristic": [[85, 4, 1, "", "From_HDF"], [85, 4, 1, "", "From_Scenarios"], [85, 2, 1, "", "abbreviation"], [85, 4, 1, "", "evaluate"], [85, 4, 1, "", "generate_result"], [85, 2, 1, "", "title"], [85, 3, 1, "", "yaml_tag"]], "hermespy.radar.evaluators.RocArtifact": [[85, 2, 1, "", "h0_value"], [85, 2, 1, "", "h1_value"]], "hermespy.radar.evaluators.RocEvaluation": [[85, 4, 1, "", "artifact"], [85, 3, 1, "", "data_h0"], [85, 3, 1, "", "data_h1"]], "hermespy.radar.evaluators.RocEvaluationResult": [[85, 2, 1, "", "title"], [85, 4, 1, "", "to_array"]], "hermespy.radar.evaluators.RootMeanSquareArtifact": [[85, 2, 1, "", "cummulation"], [85, 2, 1, "", "num_errors"], [85, 4, 1, "", "to_scalar"]], "hermespy.radar.evaluators.RootMeanSquareError": [[85, 2, 1, "", "abbreviation"], [85, 4, 1, "", "evaluate"], [85, 4, 1, "", "generate_result"], [85, 2, 1, "", "title"]], "hermespy.radar.evaluators.RootMeanSquareEvaluation": [[85, 4, 1, "", "artifact"]], "hermespy.radar.fmcw": [[86, 1, 1, "", "FMCW"]], "hermespy.radar.fmcw.FMCW": [[86, 2, 1, "", "adc_sampling_rate"], [86, 2, 1, "", "bandwidth"], [86, 2, 1, "", "chirp_duration"], [86, 2, 1, "", "energy"], [86, 4, 1, "", "estimate"], [86, 2, 1, "", "frame_duration"], [86, 2, 1, "", "max_range"], [86, 2, 1, "", "max_relative_doppler"], [86, 2, 1, "", "num_chirps"], [86, 4, 1, "", "ping"], [86, 2, 1, "", "power"], [86, 2, 1, "", "pulse_rep_interval"], [86, 2, 1, "", "range_resolution"], [86, 2, 1, "", "relative_doppler_bins"], [86, 2, 1, "", "relative_doppler_resolution"], [86, 2, 1, "", "sampling_rate"], [86, 2, 1, "", "slope"], [86, 3, 1, "", "yaml_tag"]], "hermespy.radar.radar": [[87, 1, 1, "", "Radar"], [87, 1, 1, "", "RadarReception"], [87, 1, 1, "", "RadarTransmission"], [87, 1, 1, "", "RadarWaveform"]], "hermespy.radar.radar.Radar": [[87, 2, 1, "", "detector"], [87, 2, 1, "", "frame_duration"], [87, 2, 1, "", "max_range"], [87, 3, 1, "", "property_blacklist"], [87, 2, 1, "", "receive_beamformer"], [87, 2, 1, "", "sampling_rate"], [87, 2, 1, "", "transmit_beamformer"], [87, 2, 1, "", "velocity_resolution"], [87, 2, 1, "", "waveform"], [87, 3, 1, "", "yaml_tag"]], "hermespy.radar.radar.RadarReception": [[87, 3, 1, "", "cloud"], [87, 3, 1, "", "cube"], [87, 4, 1, "", "from_HDF"], [87, 4, 1, "", "to_HDF"]], "hermespy.radar.radar.RadarWaveform": [[87, 2, 1, "", "energy"], [87, 4, 1, "", "estimate"], [87, 2, 1, "", "frame_duration"], [87, 2, 1, "", "max_range"], [87, 2, 1, "", "max_relative_doppler"], [87, 4, 1, "", "ping"], [87, 2, 1, "", "power"], [87, 2, 1, "", "range_bins"], [87, 2, 1, "", "range_resolution"], [87, 2, 1, "", "relative_doppler_bins"], [87, 2, 1, "", "relative_doppler_resolution"], [87, 2, 1, "", "sampling_rate"]], "hermespy.simulation": [[89, 0, 0, "-", "analog_digital_converter"], [101, 0, 0, "-", "simulated_device"], [102, 0, 0, "-", "simulation"]], "hermespy.simulation.analog_digital_converter": [[89, 1, 1, "", "AnalogDigitalConverter"], [89, 1, 1, "", "AutomaticGainControl"], [89, 1, 1, "", "Gain"], [89, 1, 1, "", "GainControlBase"], [89, 1, 1, "", "GainControlType"], [89, 1, 1, "", "GainType"], [89, 1, 1, "", "QuantizerType"]], "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter": [[89, 4, 1, "", "convert"], [89, 3, 1, "", "gain"], [89, 2, 1, "", "num_quantization_bits"], [89, 2, 1, "", "num_quantization_levels"], [89, 4, 1, "", "plot_quantizer"], [89, 2, 1, "", "quantizer_type"], [89, 3, 1, "", "yaml_tag"]], "hermespy.simulation.analog_digital_converter.AutomaticGainControl": [[89, 2, 1, "", "agc_type"], [89, 2, 1, "", "backoff"], [89, 4, 1, "", "estimate_gain"], [89, 3, 1, "", "yaml_tag"]], "hermespy.simulation.analog_digital_converter.Gain": [[89, 4, 1, "", "estimate_gain"], [89, 2, 1, "", "gain"], [89, 3, 1, "", "yaml_tag"]], "hermespy.simulation.analog_digital_converter.GainControlBase": [[89, 4, 1, "", "adjust_signal"], [89, 4, 1, "", "estimate_gain"], [89, 2, 1, "", "rescale_quantization"], [89, 4, 1, "", "scale_quantized_signal"]], "hermespy.simulation.analog_digital_converter.GainControlType": [[89, 3, 1, "", "MAX_AMPLITUDE"], [89, 3, 1, "", "NONE"], [89, 3, 1, "", "RMS_AMPLITUDE"]], "hermespy.simulation.analog_digital_converter.QuantizerType": [[89, 3, 1, "", "MID_RISER"], [89, 3, 1, "", "MID_TREAD"]], "hermespy.simulation.coupling": [[90, 0, 0, "-", "coupling"], [91, 0, 0, "-", "impedance"], [92, 0, 0, "-", "perfect"]], "hermespy.simulation.coupling.coupling": [[90, 1, 1, "", "Coupling"]], "hermespy.simulation.coupling.coupling.Coupling": [[90, 2, 1, "", "device"], [90, 4, 1, "", "receive"], [90, 4, 1, "", "transmit"]], "hermespy.simulation.coupling.impedance": [[91, 1, 1, "", "ImpedanceCoupling"]], "hermespy.simulation.coupling.impedance.ImpedanceCoupling": [[91, 2, 1, "", "matching_impedance"], [91, 2, 1, "", "receive_correlation"], [91, 2, 1, "", "receive_impedance"], [91, 2, 1, "", "transmit_correlation"], [91, 2, 1, "", "transmit_impedance"], [91, 3, 1, "", "yaml_tag"]], "hermespy.simulation.coupling.perfect": [[92, 1, 1, "", "PerfectCoupling"]], "hermespy.simulation.coupling.perfect.PerfectCoupling": [[92, 3, 1, "", "yaml_tag"]], "hermespy.simulation.isolation": [[94, 0, 0, "-", "impedance"], [93, 0, 0, "-", "isolation"], [95, 0, 0, "-", "perfect"], [96, 0, 0, "-", "specific"]], "hermespy.simulation.isolation.isolation": [[93, 1, 1, "", "Isolation"]], "hermespy.simulation.isolation.isolation.Isolation": [[93, 2, 1, "", "device"], [93, 4, 1, "", "leak"]], "hermespy.simulation.isolation.perfect": [[95, 1, 1, "", "PerfectIsolation"]], "hermespy.simulation.isolation.perfect.PerfectIsolation": [[95, 4, 1, "", "leak"], [95, 3, 1, "", "yaml_tag"]], "hermespy.simulation.isolation.specific": [[96, 1, 1, "", "SpecificIsolation"]], "hermespy.simulation.isolation.specific.SpecificIsolation": [[96, 2, 1, "", "isolation"], [96, 3, 1, "", "yaml_tag"]], "hermespy.simulation.noise": [[97, 0, 0, "-", "noise"]], "hermespy.simulation.noise.noise": [[97, 1, 1, "", "AWGN"], [97, 1, 1, "", "AWGNRealization"], [97, 1, 1, "", "Noise"], [97, 1, 1, "", "NoiseRealization"], [97, 1, 1, "", "NoiseRealizationType"]], "hermespy.simulation.noise.noise.AWGN": [[97, 3, 1, "", "property_blacklist"], [97, 4, 1, "", "realize"], [97, 3, 1, "", "yaml_tag"]], "hermespy.simulation.noise.noise.AWGNRealization": [[97, 4, 1, "", "add_to"]], "hermespy.simulation.noise.noise.Noise": [[97, 4, 1, "", "add"], [97, 2, 1, "", "power"], [97, 4, 1, "", "realize"]], "hermespy.simulation.noise.noise.NoiseRealization": [[97, 4, 1, "", "add_to"], [97, 2, 1, "", "power"]], "hermespy.simulation.rf_chain": [[99, 0, 0, "-", "phase_noise"], [100, 0, 0, "-", "power_amplifier"], [98, 0, 0, "-", "rf_chain"]], "hermespy.simulation.rf_chain.phase_noise": [[99, 1, 1, "", "NoPhaseNoise"], [99, 1, 1, "", "OscillatorPhaseNoise"], [99, 1, 1, "", "PhaseNoise"]], "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise": [[99, 4, 1, "", "add_noise"], [99, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise": [[99, 2, 1, "", "K0"], [99, 2, 1, "", "K2"], [99, 2, 1, "", "K3"], [99, 4, 1, "", "add_noise"], [99, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.phase_noise.PhaseNoise": [[99, 4, 1, "", "add_noise"]], "hermespy.simulation.rf_chain.power_amplifier": [[100, 1, 1, "", "ClippingPowerAmplifier"], [100, 1, 1, "", "CustomPowerAmplifier"], [100, 1, 1, "", "PowerAmplifier"], [100, 1, 1, "", "RappPowerAmplifier"], [100, 1, 1, "", "SalehPowerAmplifier"]], "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier": [[100, 4, 1, "", "model"], [100, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier": [[100, 2, 1, "", "gain"], [100, 2, 1, "", "input"], [100, 4, 1, "", "model"], [100, 2, 1, "", "phase"], [100, 3, 1, "", "serialized_attributes"], [100, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier": [[100, 3, 1, "", "adjust_power"], [100, 4, 1, "", "model"], [100, 4, 1, "", "plot"], [100, 2, 1, "", "saturation_amplitude"], [100, 4, 1, "", "send"], [100, 3, 1, "", "serialized_attributes"], [100, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier": [[100, 4, 1, "", "model"], [100, 2, 1, "", "smoothness_factor"], [100, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier": [[100, 2, 1, "", "amplitude_alpha"], [100, 2, 1, "", "amplitude_beta"], [100, 4, 1, "", "model"], [100, 3, 1, "", "phase_alpha"], [100, 3, 1, "", "phase_beta"], [100, 3, 1, "", "serialized_attributes"], [100, 3, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.rf_chain": [[98, 1, 1, "", "RfChain"]], "hermespy.simulation.rf_chain.rf_chain.RfChain": [[98, 4, 1, "", "add_iq_imbalance"], [98, 2, 1, "", "amplitude_imbalance"], [98, 2, 1, "", "phase_noise"], [98, 2, 1, "", "phase_offset"], [98, 2, 1, "", "power_amplifier"], [98, 4, 1, "", "receive"], [98, 4, 1, "", "transmit"], [98, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulated_device": [[101, 1, 1, "", "OffsetTrigger"], [101, 1, 1, "", "ProcessedSimulatedDeviceInput"], [101, 1, 1, "", "RandomTrigger"], [101, 1, 1, "", "SimulatedDevice"], [101, 1, 1, "", "SimulatedDeviceOutput"], [101, 1, 1, "", "SimulatedDeviceReceiveRealization"], [101, 1, 1, "", "SimulatedDeviceReception"], [101, 1, 1, "", "SimulatedDeviceTransmission"], [101, 1, 1, "", "StaticTrigger"], [101, 1, 1, "", "TriggerModel"], [101, 1, 1, "", "TriggerRealization"]], "hermespy.simulation.simulated_device.OffsetTrigger": [[101, 2, 1, "", "num_offset_samples"], [101, 4, 1, "", "realize"], [101, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput": [[101, 2, 1, "", "baseband_signal"], [101, 4, 1, "", "from_HDF"], [101, 2, 1, "", "leaking_signal"], [101, 2, 1, "", "operator_separation"], [101, 4, 1, "", "to_HDF"], [101, 2, 1, "", "trigger_realization"]], "hermespy.simulation.simulated_device.RandomTrigger": [[101, 4, 1, "", "realize"], [101, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulated_device.SimulatedDevice": [[101, 3, 1, "", "adc"], [101, 2, 1, "", "attached"], [101, 2, 1, "", "carrier_frequency"], [101, 2, 1, "", "coupling"], [101, 4, 1, "", "generate_output"], [101, 2, 1, "", "input"], [101, 2, 1, "", "isolation"], [101, 2, 1, "", "noise"], [101, 2, 1, "", "operator_separation"], [101, 2, 1, "", "output"], [101, 4, 1, "", "process_from_realization"], [101, 4, 1, "", "process_input"], [101, 3, 1, "", "property_blacklist"], [101, 2, 1, "", "realization"], [101, 4, 1, "", "realize_reception"], [101, 4, 1, "", "receive"], [101, 3, 1, "", "rf_chain"], [101, 2, 1, "", "sampling_rate"], [101, 2, 1, "", "scenario"], [101, 3, 1, "", "serialized_attribute"], [101, 2, 1, "", "snr"], [101, 4, 1, "", "transmit"], [101, 2, 1, "", "trigger_model"], [101, 2, 1, "", "velocity"], [101, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulated_device.SimulatedDeviceOutput": [[101, 4, 1, "", "From_DeviceOutput"], [101, 2, 1, "", "emerging_signals"], [101, 4, 1, "", "from_HDF"], [101, 2, 1, "", "operator_separation"], [101, 4, 1, "", "to_HDF"], [101, 2, 1, "", "trigger_realization"]], "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization": [[101, 2, 1, "", "noise_realizations"]], "hermespy.simulation.simulated_device.SimulatedDeviceReception": [[101, 4, 1, "", "From_ProcessedSimulatedDeviceInput"], [101, 4, 1, "", "from_HDF"], [101, 4, 1, "", "to_HDF"]], "hermespy.simulation.simulated_device.SimulatedDeviceTransmission": [[101, 4, 1, "", "From_SimulatedDeviceOutput"], [101, 4, 1, "", "from_HDF"], [101, 4, 1, "", "to_HDF"]], "hermespy.simulation.simulated_device.StaticTrigger": [[101, 4, 1, "", "realize"], [101, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulated_device.TriggerModel": [[101, 4, 1, "", "add_device"], [101, 2, 1, "", "devices"], [101, 2, 1, "", "num_devices"], [101, 4, 1, "", "realize"], [101, 4, 1, "", "remove_device"]], "hermespy.simulation.simulated_device.TriggerRealization": [[101, 4, 1, "", "compute_num_offset_samples"], [101, 4, 1, "", "from_HDF"], [101, 2, 1, "", "num_offset_samples"], [101, 2, 1, "", "sampling_rate"], [101, 4, 1, "", "to_HDF"], [101, 2, 1, "", "trigger_delay"]], "hermespy.simulation.simulation": [[102, 1, 1, "", "SimulatedDrop"], [102, 1, 1, "", "Simulation"], [102, 1, 1, "", "SimulationRunner"], [102, 1, 1, "", "SimulationScenario"]], "hermespy.simulation.simulation.SimulatedDrop": [[102, 2, 1, "", "channel_realizations"], [102, 4, 1, "", "from_HDF"], [102, 4, 1, "", "to_HDF"]], "hermespy.simulation.simulation.Simulation": [[102, 2, 1, "", "console"], [102, 2, 1, "", "console_mode"], [102, 3, 1, "", "dump_results"], [102, 4, 1, "", "from_yaml"], [102, 2, 1, "", "num_samples"], [102, 3, 1, "", "plot_results"], [102, 3, 1, "", "property_blacklist"], [102, 4, 1, "", "run"], [102, 4, 1, "", "to_yaml"], [102, 3, 1, "", "yaml_tag"]], "hermespy.simulation.simulation.SimulationRunner": [[102, 4, 1, "", "generate_outputs"], [102, 4, 1, "", "process_inputs"], [102, 4, 1, "", "propagate"], [102, 4, 1, "", "receive_operators"], [102, 4, 1, "", "transmit_operators"]], "hermespy.simulation.simulation.SimulationScenario": [[102, 4, 1, "", "add_device"], [102, 4, 1, "", "arriving_channels"], [102, 4, 1, "", "channel"], [102, 2, 1, "", "channels"], [102, 4, 1, "", "departing_channels"], [102, 4, 1, "", "new_device"], [102, 4, 1, "", "process_inputs"], [102, 4, 1, "", "propagate"], [102, 4, 1, "", "receive_devices"], [102, 4, 1, "", "set_channel"], [102, 2, 1, "", "snr"], [102, 2, 1, "", "snr_type"], [102, 4, 1, "", "transmit_devices"], [102, 3, 1, "", "yaml_tag"]], "hermespy.tools": [[104, 0, 0, "-", "math"], [105, 0, 0, "-", "resampling"], [106, 0, 0, "-", "tile"]], "hermespy.tools.math": [[104, 1, 1, "", "DbConversionType"], [104, 5, 1, "", "amplitude_path_loss"], [104, 5, 1, "", "db2lin"], [104, 5, 1, "", "lin2db"], [104, 5, 1, "", "marcum_q"], [104, 5, 1, "", "rms_value"]], "hermespy.tools.math.DbConversionType": [[104, 3, 1, "", "AMPLITUDE"], [104, 3, 1, "", "POWER"]], "hermespy.tools.resampling": [[105, 5, 1, "", "delay_resampling_matrix"]], "hermespy.tools.tile": [[106, 5, 1, "", "get_monitors"], [106, 5, 1, "", "screen_geometry"], [106, 5, 1, "", "set_figure_geometry"], [106, 5, 1, "", "tile_figures"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:method", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"hermespi": [0, 120, 121], "api": 0, "beamform": [1, 2, 3, 4, 119, 126], "capon": 3, "convent": 4, "entri": 5, "point": 5, "herm": 6, "command": [6, 120], "line": [6, 9, 10, 14, 120], "interfac": [6, 119], "cli": 6, "argument": 6, "option": [6, 122], "channel": [7, 8, 15, 16, 19, 20, 24, 119, 120, 127], "model": [7, 8, 9, 10, 11, 12, 13, 14, 19, 20, 24, 26, 35, 93, 97, 98, 99, 100, 112, 119], "3gpp": [9, 10, 11, 12, 13, 14], "cluster": [9, 10, 14], "delai": [9, 10, 14, 15, 53], "indoor": [9, 10], "factori": [9, 28], "offic": 10, "rural": 11, "macrocel": [11, 13], "street": 12, "canyon": 12, "urban": [12, 13], "microcel": 12, "ideal": 16, "multipath": [17, 18], "fade": [17, 18], "standard": 18, "templat": 18, "quadriga": [19, 122], "singl": [20, 69, 78, 116], "target": 20, "radar": [20, 83, 84, 85, 86, 87], "core": 21, "anim": 22, "antenna": [23, 93, 119], "configur": [23, 80, 111], "state": 24, "inform": 24, "gener": 25, "definit": 25, "devic": [26, 51, 52, 56, 57, 58, 59, 87, 101], "execut": 27, "serial": 28, "logarithm": 29, "pymont": 30, "extra": 31, "oper": [31, 87, 117, 132], "pipelin": [32, 41], "random": 33, "graph": 33, "wireless": 34, "scenario": [34, 52, 58], "signal": 35, "coordin": 36, "system": [36, 59], "transform": [36, 67], "visual": [37, 60], "error": [38, 119], "correct": [38, 119], "interleav": 40, "code": [41, 45, 70, 107, 130], "cyclic": 42, "redund": 42, "check": [42, 107], "repetit": 45, "scrambl": 48, "hardwar": [50, 55, 98, 108, 112, 118, 119], "loop": [50, 55], "audio": [51, 52, 108, 125], "bind": [51, 108], "calibr": [53, 54], "leakag": 54, "physic": [56, 57, 58], "dummi": 57, "uhd": 59, "jca": [61, 62, 114], "match": 62, "filter": [62, 78], "commun": [63, 65, 73, 74, 119, 133], "bit": 64, "sourc": [64, 122], "evalu": [65, 85, 129], "modem": 66, "discret": 67, "fourier": 67, "precod": [67, 72, 79, 80, 81, 119, 131], "maximum": 68, "ratio": 68, "combin": 68, "carrier": [69, 78, 116], "encod": 69, "space": 70, "time": 70, "block": 70, "spatial": 71, "multiplex": [71, 77], "symbol": [72, 73], "waveform": [74, 76, 78, 86, 133], "base": [74, 76], "chirp": [75, 109, 110], "frequenc": [75, 77, 86, 98], "shift": 75, "kei": [75, 119], "correl": 76, "synchron": 76, "orthogon": 77, "divis": 77, "modul": [79, 86, 119], "content": 79, "stream": 81, "sens": [82, 119], "cube": 83, "detect": 84, "continu": 86, "simul": [88, 101, 102, 120], "analog": 89, "digit": 89, "convert": 89, "mutual": 90, "coupl": [90, 91, 92], "imped": [91, 94], "perfect": [92, 95], "isol": [93, 94, 95, 96], "specif": 96, "nois": [97, 99], "radio": 98, "chain": 98, "phase": 99, "power": 100, "amplifi": 100, "tool": [103, 104, 120], "math": 104, "resampl": 105, "routin": [105, 122], "tile": 106, "figur": 106, "For": 107, "develop": 107, "unit": 107, "test": 107, "type": 107, "style": 107, "document": 107, "fsk": 109, "lora": 109, "qam": 110, "exampl": 111, "ofdm": [113, 115, 116], "interfer": 113, "5g": 115, "separ": 117, "usrp": 118, "driver": 118, "featur": [119, 122], "forward": 119, "receiv": [119, 132], "algorithm": 119, "multi": 119, "perform": 119, "indic": 119, "get": 120, "start": 120, "architectur": 120, "matrix": 120, "librari": 120, "transmiss": 120, "first": 120, "step": 120, "instal": 122, "from": 122, "pypi": 122, "licens": 123, "matlab": 124, "us": 125, "equip": 125, "implement": [126, 127, 129, 130, 131, 133], "record": 128, "dataset": 128, "fec": 130, "characterist": 132, "refer": 134, "tutori": 135}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"HermesPy API": [[0, "hermespy-api"]], "Beamforming": [[1, "beamforming"], [119, "id1"]], "Beamformer": [[2, "beamformer"]], "Capon Beamformer": [[3, "capon-beamformer"]], "Conventional Beamformer": [[4, "conventional-beamformer"]], "Entry Points": [[5, "entry-points"]], "Hermes Command Line Interface": [[6, "hermes-command-line-interface"]], "CLI Argument Options": [[6, "id1"]], "Channel Modeling": [[7, "channel-modeling"], [8, "channel-modeling"]], "3GPP Cluster Delay Line Indoor Factory Model": [[9, "gpp-cluster-delay-line-indoor-factory-model"]], "3GPP Cluster Delay Line Indoor Office Model": [[10, "gpp-cluster-delay-line-indoor-office-model"]], "3GPP Rural Macrocells Model": [[11, "gpp-rural-macrocells-model"]], "3GPP Street Canyon (Urban Microcells) Model": [[12, "gpp-street-canyon-urban-microcells-model"]], "3GPP Urban Macrocells Model": [[13, "gpp-urban-macrocells-model"]], "3GPP Cluster Delay Line Model": [[14, "gpp-cluster-delay-line-model"]], "Delay Channel": [[15, "delay-channel"]], "Ideal Channel": [[16, "ideal-channel"]], "Multipath Fading": [[17, "multipath-fading"]], "Multipath Fading Standard Templates": [[18, "multipath-fading-standard-templates"]], "Quadriga Channel Model": [[19, "quadriga-channel-model"]], "Single-Target Radar Channel Modeling": [[20, "single-target-radar-channel-modeling"]], "Core": [[21, "core"]], "Animation": [[22, "animation"]], "Antenna Configuration": [[23, "antenna-configuration"]], "Channel State Information Model": [[24, "channel-state-information-model"]], "General Definitions": [[25, "general-definitions"]], "Device Modeling": [[26, "device-modeling"]], "Executable": [[27, "executable"]], "Serialization Factory": [[28, "serialization-factory"]], "Logarithmics": [[29, "logarithmics"]], "PyMonte": [[30, "pymonte"]], "Extra Operators": [[31, "extra-operators"]], "Pipeline": [[32, "pipeline"]], "Random Graph": [[33, "random-graph"]], "Wireless Scenario": [[34, "wireless-scenario"]], "Signal Modeling": [[35, "signal-modeling"]], "Coordinate System Transformations": [[36, "coordinate-system-transformations"]], "Visualization": [[37, "visualization"]], "Error Correction": [[38, "error-correction"]], "Interleaving": [[40, "interleaving"]], "Coding Pipeline": [[41, "coding-pipeline"]], "Cyclic Redundancy Checks": [[42, "cyclic-redundancy-checks"]], "Repetition Coding": [[45, "repetition-coding"]], "Scrambling": [[48, "scrambling"]], "Hardware Loop": [[50, "hardware-loop"], [55, "hardware-loop"]], "Audio Device Binding": [[51, "audio-device-binding"]], "Audio Device Scenario": [[52, "audio-device-scenario"]], "Delay Calibration": [[53, "delay-calibration"]], "Leakage Calibration": [[54, "leakage-calibration"]], "Physical Devices": [[56, "physical-devices"]], "Physical Device Dummy": [[57, "physical-device-dummy"]], "Physical Device Scenario": [[58, "physical-device-scenario"]], "UHD System": [[59, "uhd-system"]], "UHD Device": [[59, "uhd-device"]], "Visualizers": [[60, "visualizers"]], "JCAS": [[61, "jcas"], [114, "jcas"]], "Matched Filter JCAS": [[62, "matched-filter-jcas"]], "Communication": [[63, "communication"]], "Bit Source": [[64, "bit-source"]], "Communication Evaluators": [[65, "communication-evaluators"]], "Modem": [[66, "modem"]], "Discrete Fourier Transform Precoding": [[67, "discrete-fourier-transform-precoding"]], "Maximum Ratio Combining": [[68, "maximum-ratio-combining"]], "Single Carrier Encoding": [[69, "single-carrier-encoding"]], "Space-Time Block Coding": [[70, "space-time-block-coding"]], "Spatial Multiplexing": [[71, "spatial-multiplexing"]], "Symbol Precoding": [[72, "symbol-precoding"]], "Communication Symbols": [[73, "communication-symbols"]], "Communication Waveform Base": [[74, "communication-waveform-base"]], "Chirp Frequency Shift Keying": [[75, "chirp-frequency-shift-keying"]], "Correlation-Based Waveform Synchronization": [[76, "correlation-based-waveform-synchronization"]], "Orthogonal Frequency Division Multiplexing": [[77, "orthogonal-frequency-division-multiplexing"]], "Filtered Single Carrier Waveforms": [[78, "filtered-single-carrier-waveforms"]], "Precoding": [[79, "precoding"]], "Module Content:": [[79, null]], "Precoding Configuration": [[80, "precoding-configuration"]], "Stream Precoding": [[81, "stream-precoding"]], "Sensing": [[82, "sensing"]], "Radar Cube": [[83, "radar-cube"]], "Radar Detection": [[84, "radar-detection"]], "Radar Evaluation": [[85, "radar-evaluation"]], "Frequency Modulated Continuous Waveform Radar": [[86, "frequency-modulated-continuous-waveform-radar"]], "Radar Device Operation": [[87, "radar-device-operation"]], "Simulation": [[88, "simulation"], [102, "simulation"]], "Analog-to-Digital Converter": [[89, "analog-to-digital-converter"]], "Mutual Coupling": [[90, "mutual-coupling"]], "Impedance Coupling": [[91, "impedance-coupling"]], "Perfect Coupling": [[92, "perfect-coupling"]], "Antenna Isolation Modeling": [[93, "antenna-isolation-modeling"]], "Impedance Isolation": [[94, "impedance-isolation"]], "Perfect Isolation": [[95, "perfect-isolation"]], "Specific Isolation": [[96, "specific-isolation"]], "Noise Modeling": [[97, "noise-modeling"]], "Hardware Radio Frequency Chain Modeling": [[98, "hardware-radio-frequency-chain-modeling"]], "Phase Noise Modeling": [[99, "phase-noise-modeling"]], "Power Amplifier Modeling": [[100, "power-amplifier-modeling"]], "Simulated Devices": [[101, "simulated-devices"]], "Tools": [[103, "tools"]], "Math Tools": [[104, "math-tools"]], "Resampling Routines": [[105, "resampling-routines"]], "Tile Figures": [[106, "tile-figures"]], "For Developers": [[107, "for-developers"]], "Unit Testing": [[107, "unit-testing"]], "Type Checking": [[107, "type-checking"]], "Coding Style": [[107, "coding-style"]], "Documentation": [[107, "documentation"]], "Audio Hardware Binding": [[108, "audio-hardware-binding"]], "Chirp FSK LORA": [[109, "chirp-fsk-lora"]], "Chirp QAM": [[110, "chirp-qam"]], "Configuration Examples": [[111, "configuration-examples"]], "Hardware Modeling": [[112, "hardware-modeling"]], "OFDM Interference": [[113, "ofdm-interference"]], "OFDM 5G": [[115, "ofdm-5g"]], "OFDM Single Carrier": [[116, "ofdm-single-carrier"]], "Operator Separation": [[117, "operator-separation"]], "USRP Hardware Driver": [[118, "usrp-hardware-driver"]], "Features": [[119, "features"]], "Forward Error Correction": [[119, "id2"]], "Channel Models": [[119, "id3"]], "Communication Modulation": [[119, "id4"]], "Communication Receiver Algorithms": [[119, "id5"]], "Sensing Modulation": [[119, "id6"]], "Multi Antenna Algorithms": [[119, "id7"]], "Precodings": [[119, "id8"]], "Hardware Models": [[119, "id9"]], "Key Performance Indicators": [[119, "id10"]], "Hardware Interfaces": [[119, "id11"]], "Getting Started": [[120, "getting-started"]], "HermesPy Architecture": [[120, "hermespy-architecture"]], "Channel Matrix": [[120, "id1"]], "Library": [[120, "library"]], "Transmissions": [[120, "transmissions"]], "Simulations": [[120, "simulations"]], "Command Line Tool": [[120, "command-line-tool"]], "First Steps": [[120, "first-steps"]], "HermesPy": [[121, "hermespy"]], "Installation": [[122, "installation"]], "Install from PyPi": [[122, "install-from-pypi"]], "Optional Features": [[122, "id2"]], "Install from Source": [[122, "install-from-source"]], "Install Quadriga": [[122, "install-quadriga"]], "Installation Routine": [[122, "installation-routine"]], "License": [[123, "license"]], "Matlab": [[124, "matlab"]], "Using Audio Equipment": [[125, "Using-Audio-Equipment"]], "Implementing Beamformers": [[126, "Implementing-Beamformers"]], "Implementing Channels": [[127, "Implementing-Channels"]], "Recording Datasets": [[128, "Recording-Datasets"]], "Implementing Evaluators": [[129, "Implementing-Evaluators"]], "Implementing FEC codings": [[130, "Implementing-FEC-codings"]], "Implementing Precodings": [[131, "Implementing-Precodings"]], "Receiver Operating Characteristics": [[132, "Receiver-Operating-Characteristics"]], "Implementing Communication Waveforms": [[133, "Implementing-Communication-Waveforms"]], "References": [[134, "references"]], "Tutorials": [[135, "tutorials"]]}, "indexentries": {"beamformerbase (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.BeamformerBase"]], "cartesian (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.CARTESIAN"]], "device (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.DEVICE"]], "focusmode (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.FocusMode"]], "horizontal (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.HORIZONTAL"]], "ot (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.OT"]], "plotreceivepattern() (receivebeamformer class method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.PlotReceivePattern"]], "receivebeamformer (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer"]], "spherical (focusmode attribute)": [[2, "hermespy.beamforming.beamformer.FocusMode.SPHERICAL"]], "transmitbeamformer (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer"]], "_decode() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer._decode"]], "decode_streams() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.decode_streams"]], "encode_streams() (transmitbeamformer method)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.encode_streams"]], "hermespy.beamforming.beamformer": [[2, "module-hermespy.beamforming.beamformer"]], "module": [[2, "module-hermespy.beamforming.beamformer"], [3, "module-hermespy.beamforming.capon"], [4, "module-hermespy.beamforming.conventional"], [6, "module-hermespy.bin.hermes"], [8, "module-hermespy.channel.channel"], [9, "module-hermespy.channel.cluster_delay_line_indoor_factory"], [10, "module-hermespy.channel.cluster_delay_line_indoor_office"], [11, "module-hermespy.channel.cluster_delay_line_rural_macrocells"], [12, "module-hermespy.channel.cluster_delay_line_street_canyon"], [13, "module-hermespy.channel.cluster_delay_line_urban_macrocells"], [14, "module-hermespy.channel.cluster_delay_lines"], [15, "module-hermespy.channel.delay"], [16, "module-hermespy.channel.ideal"], [17, "module-hermespy.channel.multipath_fading_channel"], [18, "module-hermespy.channel.multipath_fading_templates"], [19, "module-hermespy.channel.quadriga_channel"], [20, "module-hermespy.channel.radar_channel"], [22, "module-hermespy.core.animation"], [23, "module-hermespy.core.antennas"], [24, "module-hermespy.core.channel_state_information"], [25, "module-hermespy.core.definitions"], [26, "module-hermespy.core.device"], [27, "module-hermespy.core.executable"], [28, "module-hermespy.core.factory"], [29, "module-hermespy.core.logarithmic"], [30, "module-hermespy.core.monte_carlo"], [31, "module-hermespy.core.operators"], [32, "module-hermespy.core.pipeline"], [33, "module-hermespy.core.random_node"], [34, "module-hermespy.core.scenario"], [35, "module-hermespy.core.signal_model"], [36, "module-hermespy.core.transformation"], [37, "module-hermespy.core.visualize"], [40, "module-hermespy.fec.block_interleaver"], [41, "module-hermespy.fec.coding"], [42, "module-hermespy.fec.cyclic_redundancy_check"], [45, "module-hermespy.fec.repetition_encoder"], [48, "module-hermespy.fec.scrambler"], [51, "module-hermespy.hardware_loop.audio.device"], [52, "module-hermespy.hardware_loop.audio.scenario"], [53, "module-hermespy.hardware_loop.calibration.delay"], [54, "module-hermespy.hardware_loop.calibration.leakage"], [55, "module-hermespy.hardware_loop.hardware_loop"], [56, "module-hermespy.hardware_loop.physical_device"], [57, "module-hermespy.hardware_loop.physical_device_dummy"], [58, "module-hermespy.hardware_loop.scenario"], [59, "module-hermespy.hardware_loop.uhd.system"], [59, "module-hermespy.hardware_loop.uhd.usrp"], [60, "module-hermespy.hardware_loop.visualizers"], [62, "module-hermespy.jcas.matched_filtering"], [64, "module-hermespy.modem.bits_source"], [65, "module-hermespy.modem.evaluators"], [66, "module-hermespy.modem.modem"], [67, "module-hermespy.modem.precoding.dft"], [68, "module-hermespy.modem.precoding.ratio_combining"], [69, "module-hermespy.modem.precoding.single_carrier"], [70, "module-hermespy.modem.precoding.space_time_block_coding"], [71, "module-hermespy.modem.precoding.spatial_multiplexing"], [72, "module-hermespy.modem.precoding.symbol_precoding"], [73, "module-hermespy.modem.symbols"], [74, "module-hermespy.modem.waveform"], [75, "module-hermespy.modem.waveform_chirp_fsk"], [76, "module-hermespy.modem.waveform_correlation_synchronization"], [77, "module-hermespy.modem.waveform_ofdm"], [78, "module-hermespy.modem.waveform_single_carrier"], [80, "module-hermespy.precoding.precoding"], [81, "module-hermespy.precoding.stream_precoding"], [83, "module-hermespy.radar.cube"], [84, "module-hermespy.radar.detection"], [85, "module-hermespy.radar.evaluators"], [86, "module-hermespy.radar.fmcw"], [87, "module-hermespy.radar.radar"], [89, "module-hermespy.simulation.analog_digital_converter"], [90, "module-hermespy.simulation.coupling.coupling"], [91, "module-hermespy.simulation.coupling.impedance"], [92, "module-hermespy.simulation.coupling.perfect"], [93, "module-hermespy.simulation.isolation.isolation"], [94, "module-hermespy.simulation.isolation.impedance"], [95, "module-hermespy.simulation.isolation.perfect"], [96, "module-hermespy.simulation.isolation.specific"], [97, "module-hermespy.simulation.noise.noise"], [98, "module-hermespy.simulation.rf_chain.rf_chain"], [99, "module-hermespy.simulation.rf_chain.phase_noise"], [100, "module-hermespy.simulation.rf_chain.power_amplifier"], [101, "module-hermespy.simulation.simulated_device"], [102, "module-hermespy.simulation.simulation"], [104, "module-hermespy.tools.math"], [105, "module-hermespy.tools.resampling"], [106, "module-hermespy.tools.tile"]], "num_receive_focus_angles (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_focus_angles"]], "num_receive_input_streams (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_input_streams"]], "num_receive_output_streams (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_output_streams"]], "num_transmit_focus_angles (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_focus_angles"]], "num_transmit_input_streams (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_input_streams"]], "num_transmit_output_streams (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_output_streams"]], "operator (beamformerbase property)": [[2, "hermespy.beamforming.beamformer.BeamformerBase.operator"]], "plot_receive_pattern() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.plot_receive_pattern"]], "precoding (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.precoding"]], "precoding (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.precoding"]], "probe() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe"]], "probe_focus_points (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe_focus_points"]], "receive() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.receive"]], "receive_focus (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.receive_focus"]], "transmit() (transmitbeamformer method)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.transmit"]], "transmit_focus (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.transmit_focus"]], "caponbeamformer (class in hermespy.beamforming.capon)": [[3, "hermespy.beamforming.capon.CaponBeamformer"]], "_decode() (caponbeamformer method)": [[3, "hermespy.beamforming.capon.CaponBeamformer._decode"]], "hermespy.beamforming.capon": [[3, "module-hermespy.beamforming.capon"]], "loading (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.loading"]], "num_receive_focus_angles (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_focus_angles"]], "num_receive_input_streams (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_input_streams"]], "num_receive_output_streams (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_output_streams"]], "yaml_tag (caponbeamformer attribute)": [[3, "hermespy.beamforming.capon.CaponBeamformer.yaml_tag"]], "conventionalbeamformer (class in hermespy.beamforming.conventional)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer"]], "_decode() (conventionalbeamformer method)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer._decode"]], "_encode() (conventionalbeamformer method)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer._encode"]], "hermespy.beamforming.conventional": [[4, "module-hermespy.beamforming.conventional"]], "num_receive_focus_angles (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_focus_angles"]], "num_receive_input_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_input_streams"]], "num_receive_output_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_output_streams"]], "num_transmit_focus_angles (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_focus_angles"]], "num_transmit_input_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_input_streams"]], "num_transmit_output_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_output_streams"]], "yaml_tag (conventionalbeamformer attribute)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.yaml_tag"]], "hermes_simulation() (in module hermespy.bin.hermes)": [[6, "hermespy.bin.hermes.hermes_simulation"]], "hermespy.bin.hermes": [[6, "module-hermespy.bin.hermes"]], "backwards (propagationdirection attribute)": [[8, "hermespy.channel.channel.PropagationDirection.BACKWARDS"]], "crt (class in hermespy.channel.channel)": [[8, "hermespy.channel.channel.CRT"]], "channel (class in hermespy.channel.channel)": [[8, "hermespy.channel.channel.Channel"]], "channelrealization (class in hermespy.channel.channel)": [[8, "hermespy.channel.channel.ChannelRealization"]], "forwards (propagationdirection attribute)": [[8, "hermespy.channel.channel.PropagationDirection.FORWARDS"]], "propagate() (channel static method)": [[8, "hermespy.channel.channel.Channel.Propagate"]], "propagationdirection (class in hermespy.channel.channel)": [[8, "hermespy.channel.channel.PropagationDirection"]], "active (channel property)": [[8, "hermespy.channel.channel.Channel.active"]], "channel (channelrealization property)": [[8, "hermespy.channel.channel.ChannelRealization.channel"]], "from_hdf() (channelrealization class method)": [[8, "hermespy.channel.channel.ChannelRealization.from_HDF"]], "gain (channel property)": [[8, "hermespy.channel.channel.Channel.gain"]], "hermespy.channel.channel": [[8, "module-hermespy.channel.channel"]], "impulse_response_interpolation (channel attribute)": [[8, "hermespy.channel.channel.Channel.impulse_response_interpolation"]], "min_sampling_rate (channel property)": [[8, "hermespy.channel.channel.Channel.min_sampling_rate"]], "num_inputs (channel property)": [[8, "hermespy.channel.channel.Channel.num_inputs"]], "num_outputs (channel property)": [[8, "hermespy.channel.channel.Channel.num_outputs"]], "propagate() (channel method)": [[8, "hermespy.channel.channel.Channel.propagate"]], "realization (channel property)": [[8, "hermespy.channel.channel.Channel.realization"]], "realize() (channel method)": [[8, "hermespy.channel.channel.Channel.realize"]], "receiver (channel property)": [[8, "hermespy.channel.channel.Channel.receiver"]], "reciprocal() (channelrealization method)": [[8, "hermespy.channel.channel.ChannelRealization.reciprocal"]], "scenario (channel property)": [[8, "hermespy.channel.channel.Channel.scenario"]], "serialized_attributes (channel attribute)": [[8, "hermespy.channel.channel.Channel.serialized_attributes"]], "sync_offset_high (channel property)": [[8, "hermespy.channel.channel.Channel.sync_offset_high"]], "sync_offset_low (channel property)": [[8, "hermespy.channel.channel.Channel.sync_offset_low"]], "to_hdf() (channelrealization method)": [[8, "hermespy.channel.channel.ChannelRealization.to_HDF"]], "transmitter (channel property)": [[8, "hermespy.channel.channel.Channel.transmitter"]], "indoorfactorybase (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase"]], "indoorfactorylineofsight (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight"]], "indoorfactorynolineofsight (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight"]], "aoa_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aoa_spread_std"]], "aoa_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aod_spread_mean"]], "aod_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aod_spread_std"]], "aod_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_scaling"]], "delay_scaling (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_scaling"]], "delay_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_spread_mean"]], "delay_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_spread_std"]], "delay_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_factory": [[9, "module-hermespy.channel.cluster_delay_line_indoor_factory"]], "line_of_sight (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.line_of_sight"]], "line_of_sight (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.line_of_sight"]], "num_clusters (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.num_clusters"]], "num_clusters (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.num_clusters"]], "num_rays (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.num_rays"]], "num_rays (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.num_rays"]], "rice_factor_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.rice_factor_mean"]], "rice_factor_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.rice_factor_std"]], "rice_factor_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.rice_factor_std"]], "surface (indoorfactorybase property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase.surface"]], "volume (indoorfactorybase property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase.volume"]], "yaml_tag (indoorfactorylineofsight attribute)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.yaml_tag"]], "yaml_tag (indoorfactorynolineofsight attribute)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.yaml_tag"]], "zoa_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zoa_spread_std"]], "zoa_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zoa_spread_std"]], "zod_offset (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_offset"]], "zod_offset (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_offset"]], "zod_spread_mean (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_spread_mean"]], "zod_spread_mean (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorfactorylineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_spread_std"]], "zod_spread_std (indoorfactorynolineofsight property)": [[9, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_spread_std"]], "indoorofficelineofsight (class in hermespy.channel.cluster_delay_line_indoor_office)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight"]], "indoorofficenolineofsight (class in hermespy.channel.cluster_delay_line_indoor_office)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight"]], "aoa_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aoa_spread_std"]], "aoa_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aod_spread_mean"]], "aod_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aod_spread_std"]], "aod_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_scaling"]], "delay_scaling (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_scaling"]], "delay_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_spread_mean"]], "delay_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_spread_std"]], "delay_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office": [[10, "module-hermespy.channel.cluster_delay_line_indoor_office"]], "line_of_sight (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.line_of_sight"]], "line_of_sight (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.line_of_sight"]], "num_clusters (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.num_clusters"]], "num_clusters (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.num_clusters"]], "num_rays (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.num_rays"]], "num_rays (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.num_rays"]], "rice_factor_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.rice_factor_mean"]], "rice_factor_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.rice_factor_std"]], "rice_factor_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.rice_factor_std"]], "yaml_tag (indoorofficelineofsight attribute)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.yaml_tag"]], "yaml_tag (indoorofficenolineofsight attribute)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.yaml_tag"]], "zoa_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zoa_spread_std"]], "zoa_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zoa_spread_std"]], "zod_offset (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_offset"]], "zod_offset (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_offset"]], "zod_spread_mean (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_spread_mean"]], "zod_spread_mean (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorofficelineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_spread_std"]], "zod_spread_std (indoorofficenolineofsight property)": [[10, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_spread_std"]], "ruralmacrocellslineofsight (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight"]], "ruralmacrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight"]], "ruralmacrocellsoutsidetoinside (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside"]], "aoa_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aoa_spread_std"]], "aoa_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aoa_spread_std"]], "aoa_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aoa_spread_std"]], "aod_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aod_spread_mean"]], "aod_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aod_spread_mean"]], "aod_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aod_spread_mean"]], "aod_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aod_spread_std"]], "aod_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aod_spread_std"]], "aod_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cross_polarization_power_std"]], "delay_scaling (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_scaling"]], "delay_scaling (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_scaling"]], "delay_scaling (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_scaling"]], "delay_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_spread_mean"]], "delay_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_spread_mean"]], "delay_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_spread_mean"]], "delay_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_spread_std"]], "delay_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_spread_std"]], "delay_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells": [[11, "module-hermespy.channel.cluster_delay_line_rural_macrocells"]], "line_of_sight (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.line_of_sight"]], "line_of_sight (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.line_of_sight"]], "line_of_sight (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.line_of_sight"]], "num_clusters (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.num_clusters"]], "num_clusters (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.num_clusters"]], "num_clusters (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.num_clusters"]], "num_rays (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.num_rays"]], "num_rays (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.num_rays"]], "num_rays (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.num_rays"]], "rice_factor_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.rice_factor_mean"]], "rice_factor_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.rice_factor_mean"]], "rice_factor_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.rice_factor_mean"]], "rice_factor_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.rice_factor_std"]], "rice_factor_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.rice_factor_std"]], "rice_factor_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.rice_factor_std"]], "yaml_tag (ruralmacrocellslineofsight attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.yaml_tag"]], "yaml_tag (ruralmacrocellsnolineofsight attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.yaml_tag"]], "yaml_tag (ruralmacrocellsoutsidetoinside attribute)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.yaml_tag"]], "zoa_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zoa_spread_std"]], "zoa_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zoa_spread_std"]], "zoa_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zoa_spread_std"]], "zod_offset (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_offset"]], "zod_offset (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_offset"]], "zod_offset (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_offset"]], "zod_spread_mean (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_spread_mean"]], "zod_spread_mean (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_spread_mean"]], "zod_spread_mean (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_spread_mean"]], "zod_spread_std (ruralmacrocellslineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_spread_std"]], "zod_spread_std (ruralmacrocellsnolineofsight property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_spread_std"]], "zod_spread_std (ruralmacrocellsoutsidetoinside property)": [[11, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_spread_std"]], "streetcanyonlineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight"]], "streetcanyonnolineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight"]], "streetcanyonoutsidetoinside (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside"]], "urbanmicrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight"]], "aoa_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aoa_spread_std"]], "aoa_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aoa_spread_std"]], "aoa_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aoa_spread_std"]], "aod_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aod_spread_mean"]], "aod_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aod_spread_mean"]], "aod_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aod_spread_mean"]], "aod_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aod_spread_std"]], "aod_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aod_spread_std"]], "aod_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cross_polarization_power_std"]], "delay_scaling (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_scaling"]], "delay_scaling (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_scaling"]], "delay_scaling (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_scaling"]], "delay_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_spread_mean"]], "delay_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_spread_mean"]], "delay_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_spread_mean"]], "delay_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_spread_std"]], "delay_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_spread_std"]], "delay_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon": [[12, "module-hermespy.channel.cluster_delay_line_street_canyon"]], "line_of_sight (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.line_of_sight"]], "line_of_sight (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.line_of_sight"]], "line_of_sight (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.line_of_sight"]], "num_clusters (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.num_clusters"]], "num_clusters (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.num_clusters"]], "num_clusters (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.num_clusters"]], "num_rays (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.num_rays"]], "num_rays (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.num_rays"]], "num_rays (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.num_rays"]], "rice_factor_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.rice_factor_mean"]], "rice_factor_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.rice_factor_mean"]], "rice_factor_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.rice_factor_mean"]], "rice_factor_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.rice_factor_std"]], "rice_factor_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.rice_factor_std"]], "rice_factor_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.rice_factor_std"]], "yaml_tag (streetcanyonlineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.yaml_tag"]], "yaml_tag (streetcanyonnolineofsight attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.yaml_tag"]], "yaml_tag (streetcanyonoutsidetoinside attribute)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.yaml_tag"]], "zoa_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zoa_spread_std"]], "zoa_spread_std (streetcanyonnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.zoa_spread_std"]], "zoa_spread_std (streetcanyonoutsidetoinside property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.zoa_spread_std"]], "zod_offset (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_offset"]], "zod_offset (urbanmicrocellsnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight.zod_offset"]], "zod_spread_mean (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_spread_mean"]], "zod_spread_mean (urbanmicrocellsnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight.zod_spread_mean"]], "zod_spread_std (streetcanyonlineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_spread_std"]], "zod_spread_std (urbanmicrocellsnolineofsight property)": [[12, "hermespy.channel.cluster_delay_line_street_canyon.UrbanMicroCellsNoLineOfSight.zod_spread_std"]], "urbanmacrocellslineofsight (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight"]], "urbanmacrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight"]], "urbanmacrocellsnolineofsightbase (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase"]], "urbanmacrocellsoutsidetoinside (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside"]], "aoa_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aoa_spread_mean"]], "aoa_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aoa_spread_std"]], "aoa_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aoa_spread_std"]], "aoa_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aoa_spread_std"]], "aod_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aod_spread_mean"]], "aod_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aod_spread_mean"]], "aod_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aod_spread_mean"]], "aod_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aod_spread_std"]], "aod_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aod_spread_std"]], "aod_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_aoa_spread"]], "cluster_aoa_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_aod_spread"]], "cluster_aod_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_delay_spread"]], "cluster_delay_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_shadowing_std"]], "cluster_shadowing_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_zoa_spread"]], "cluster_zoa_spread (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cross_polarization_power_std"]], "cross_polarization_power_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cross_polarization_power_std"]], "delay_scaling (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_scaling"]], "delay_scaling (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_scaling"]], "delay_scaling (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_scaling"]], "delay_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_spread_mean"]], "delay_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_spread_mean"]], "delay_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_spread_mean"]], "delay_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_spread_std"]], "delay_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_spread_std"]], "delay_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells": [[13, "module-hermespy.channel.cluster_delay_line_urban_macrocells"]], "line_of_sight (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.line_of_sight"]], "line_of_sight (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.line_of_sight"]], "line_of_sight (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.line_of_sight"]], "num_clusters (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.num_clusters"]], "num_clusters (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.num_clusters"]], "num_clusters (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.num_clusters"]], "num_rays (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.num_rays"]], "num_rays (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.num_rays"]], "num_rays (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.num_rays"]], "rice_factor_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.rice_factor_mean"]], "rice_factor_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.rice_factor_mean"]], "rice_factor_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.rice_factor_mean"]], "rice_factor_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.rice_factor_std"]], "rice_factor_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.rice_factor_std"]], "rice_factor_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.rice_factor_std"]], "yaml_tag (urbanmacrocellslineofsight attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.yaml_tag"]], "yaml_tag (urbanmacrocellsnolineofsight attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.yaml_tag"]], "yaml_tag (urbanmacrocellsoutsidetoinside attribute)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.yaml_tag"]], "zoa_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.zoa_spread_mean"]], "zoa_spread_mean (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zoa_spread_std"]], "zoa_spread_std (urbanmacrocellsnolineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.zoa_spread_std"]], "zoa_spread_std (urbanmacrocellsoutsidetoinside property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.zoa_spread_std"]], "zod_offset (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_offset"]], "zod_offset (urbanmacrocellsnolineofsightbase property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase.zod_offset"]], "zod_spread_mean (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_spread_mean"]], "zod_spread_mean (urbanmacrocellsnolineofsightbase property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase.zod_spread_mean"]], "zod_spread_std (urbanmacrocellslineofsight property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_spread_std"]], "zod_spread_std (urbanmacrocellsnolineofsightbase property)": [[13, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSightBase.zod_spread_std"]], "clusterdelayline (class in hermespy.channel.cluster_delay_lines)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine"]], "clusterdelaylinebase (class in hermespy.channel.cluster_delay_lines)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase"]], "delaynormalization (class in hermespy.channel.cluster_delay_lines)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization"]], "none (delaynormalization attribute)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization.NONE"]], "tof (delaynormalization attribute)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization.TOF"]], "zero (delaynormalization attribute)": [[14, "hermespy.channel.cluster_delay_lines.DelayNormalization.ZERO"]], "aoa_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aoa_spread_mean"]], "aoa_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aoa_spread_mean"]], "aoa_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aoa_spread_std"]], "aoa_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aoa_spread_std"]], "aod_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aod_spread_mean"]], "aod_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aod_spread_mean"]], "aod_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aod_spread_std"]], "aod_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aod_spread_std"]], "cluster_aoa_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_aoa_spread"]], "cluster_aoa_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_aoa_spread"]], "cluster_aod_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_aod_spread"]], "cluster_aod_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_aod_spread"]], "cluster_delay_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_delay_spread"]], "cluster_delay_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_delay_spread"]], "cluster_shadowing_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_shadowing_std"]], "cluster_shadowing_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_shadowing_std"]], "cluster_zoa_spread (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_zoa_spread"]], "cluster_zoa_spread (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_zoa_spread"]], "cross_polarization_power_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cross_polarization_power_mean"]], "cross_polarization_power_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cross_polarization_power_mean"]], "cross_polarization_power_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cross_polarization_power_std"]], "cross_polarization_power_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cross_polarization_power_std"]], "delay_normalization (clusterdelaylinebase attribute)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_normalization"]], "delay_scaling (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_scaling"]], "delay_scaling (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_scaling"]], "delay_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_spread_mean"]], "delay_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_spread_mean"]], "delay_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_spread_std"]], "delay_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_spread_std"]], "hermespy.channel.cluster_delay_lines": [[14, "module-hermespy.channel.cluster_delay_lines"]], "line_of_sight (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.line_of_sight"]], "line_of_sight (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.line_of_sight"]], "num_clusters (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.num_clusters"]], "num_clusters (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.num_clusters"]], "num_rays (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.num_rays"]], "num_rays (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.num_rays"]], "realize() (clusterdelaylinebase method)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.realize"]], "rice_factor_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.rice_factor_mean"]], "rice_factor_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.rice_factor_mean"]], "rice_factor_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.rice_factor_std"]], "rice_factor_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.rice_factor_std"]], "yaml_tag (clusterdelayline attribute)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.yaml_tag"]], "zoa_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zoa_spread_mean"]], "zoa_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zoa_spread_mean"]], "zoa_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zoa_spread_std"]], "zoa_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zoa_spread_std"]], "zod_offset (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_offset"]], "zod_offset (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_offset"]], "zod_spread_mean (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_spread_mean"]], "zod_spread_mean (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_spread_mean"]], "zod_spread_std (clusterdelayline property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_spread_std"]], "zod_spread_std (clusterdelaylinebase property)": [[14, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_spread_std"]], "delaychannelbase (class in hermespy.channel.delay)": [[15, "hermespy.channel.delay.DelayChannelBase"]], "delaychannelrealization (class in hermespy.channel.delay)": [[15, "hermespy.channel.delay.DelayChannelRealization"]], "randomdelaychannel (class in hermespy.channel.delay)": [[15, "hermespy.channel.delay.RandomDelayChannel"]], "spatialdelaychannel (class in hermespy.channel.delay)": [[15, "hermespy.channel.delay.SpatialDelayChannel"]], "delay (randomdelaychannel property)": [[15, "hermespy.channel.delay.RandomDelayChannel.delay"]], "hermespy.channel.delay": [[15, "module-hermespy.channel.delay"]], "model_propagation_loss (delaychannelbase property)": [[15, "hermespy.channel.delay.DelayChannelBase.model_propagation_loss"]], "realize() (delaychannelbase method)": [[15, "hermespy.channel.delay.DelayChannelBase.realize"]], "yaml_tag (delaychannelbase attribute)": [[15, "hermespy.channel.delay.DelayChannelBase.yaml_tag"]], "yaml_tag (randomdelaychannel attribute)": [[15, "hermespy.channel.delay.RandomDelayChannel.yaml_tag"]], "yaml_tag (spatialdelaychannel attribute)": [[15, "hermespy.channel.delay.SpatialDelayChannel.yaml_tag"]], "idealchannel (class in hermespy.channel.ideal)": [[16, "hermespy.channel.ideal.IdealChannel"]], "idealchannelrealization (class in hermespy.channel.ideal)": [[16, "hermespy.channel.ideal.IdealChannelRealization"]], "hermespy.channel.ideal": [[16, "module-hermespy.channel.ideal"]], "realize() (idealchannel method)": [[16, "hermespy.channel.ideal.IdealChannel.realize"]], "yaml_tag (idealchannel attribute)": [[16, "hermespy.channel.ideal.IdealChannel.yaml_tag"]], "antennacorrelation (class in hermespy.channel.multipath_fading_channel)": [[17, "hermespy.channel.multipath_fading_channel.AntennaCorrelation"]], "customantennacorrelation (class in hermespy.channel.multipath_fading_channel)": [[17, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation"]], "multipathfadingchannel (class in hermespy.channel.multipath_fading_channel)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel"]], "alpha_correlation (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.alpha_correlation"]], "beta_correlation (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.beta_correlation"]], "channel (antennacorrelation property)": [[17, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.channel"]], "covariance (antennacorrelation property)": [[17, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.covariance"]], "covariance (customantennacorrelation property)": [[17, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation.covariance"]], "delay_resolution_error (multipathfadingchannel attribute)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.delay_resolution_error"]], "delays (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.delays"]], "device (antennacorrelation property)": [[17, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.device"]], "doppler_frequency (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.doppler_frequency"]], "hermespy.channel.multipath_fading_channel": [[17, "module-hermespy.channel.multipath_fading_channel"]], "interpolate_signals (multipathfadingchannel attribute)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.interpolate_signals"]], "interpolation_filter() (multipathfadingchannel method)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.interpolation_filter"]], "los_angle (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_angle"]], "los_doppler_frequency (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_doppler_frequency"]], "los_gains (multipathfadingchannel attribute)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_gains"]], "max_delay (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.max_delay"]], "num_resolvable_paths (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.num_resolvable_paths"]], "num_sinusoids (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.num_sinusoids"]], "power_profile (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.power_profile"]], "realize() (multipathfadingchannel method)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.realize"]], "receiver (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.receiver"]], "rice_factors (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.rice_factors"]], "serialized_attributes (multipathfadingchannel attribute)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.serialized_attributes"]], "transmitter (multipathfadingchannel property)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.transmitter"]], "yaml_tag (customantennacorrelation attribute)": [[17, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation.yaml_tag"]], "yaml_tag (multipathfadingchannel attribute)": [[17, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.yaml_tag"]], "a (tdltype attribute)": [[18, "hermespy.channel.multipath_fading_templates.TDLType.A"]], "b (tdltype attribute)": [[18, "hermespy.channel.multipath_fading_templates.TDLType.B"]], "base_station (devicetype attribute)": [[18, "hermespy.channel.multipath_fading_templates.DeviceType.BASE_STATION"]], "c (tdltype attribute)": [[18, "hermespy.channel.multipath_fading_templates.TDLType.C"]], "correlationtype (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.CorrelationType"]], "cost256type (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.Cost256Type"]], "d (tdltype attribute)": [[18, "hermespy.channel.multipath_fading_templates.TDLType.D"]], "devicetype (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.DeviceType"]], "e (tdltype attribute)": [[18, "hermespy.channel.multipath_fading_templates.TDLType.E"]], "high (correlationtype attribute)": [[18, "hermespy.channel.multipath_fading_templates.CorrelationType.HIGH"]], "hilly (cost256type attribute)": [[18, "hermespy.channel.multipath_fading_templates.Cost256Type.HILLY"]], "low (correlationtype attribute)": [[18, "hermespy.channel.multipath_fading_templates.CorrelationType.LOW"]], "medium (correlationtype attribute)": [[18, "hermespy.channel.multipath_fading_templates.CorrelationType.MEDIUM"]], "medium_a (correlationtype attribute)": [[18, "hermespy.channel.multipath_fading_templates.CorrelationType.MEDIUM_A"]], "multipathfading5gtdl (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL"]], "multipathfadingcost256 (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256"]], "multipathfadingexponential (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential"]], "rural (cost256type attribute)": [[18, "hermespy.channel.multipath_fading_templates.Cost256Type.RURAL"]], "standardantennacorrelation (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation"]], "tdltype (class in hermespy.channel.multipath_fading_templates)": [[18, "hermespy.channel.multipath_fading_templates.TDLType"]], "terminal (devicetype attribute)": [[18, "hermespy.channel.multipath_fading_templates.DeviceType.TERMINAL"]], "urban (cost256type attribute)": [[18, "hermespy.channel.multipath_fading_templates.Cost256Type.URBAN"]], "correlation (standardantennacorrelation property)": [[18, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.correlation"]], "covariance (standardantennacorrelation property)": [[18, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.covariance"]], "device_type (standardantennacorrelation property)": [[18, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.device_type"]], "hermespy.channel.multipath_fading_templates": [[18, "module-hermespy.channel.multipath_fading_templates"]], "model_type (multipathfading5gtdl property)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.model_type"]], "model_type (multipathfadingcost256 property)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256.model_type"]], "rms_delay (multipathfading5gtdl property)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.rms_delay"]], "rms_delay (multipathfadingexponential property)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.rms_delay"]], "tap_interval (multipathfadingexponential property)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.tap_interval"]], "to_yaml() (multipathfadingcost256 class method)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256.to_yaml"]], "yaml_tag (multipathfading5gtdl attribute)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.yaml_tag"]], "yaml_tag (multipathfadingcost256 attribute)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingCost256.yaml_tag"]], "yaml_tag (multipathfadingexponential attribute)": [[18, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.yaml_tag"]], "yaml_tag (standardantennacorrelation attribute)": [[18, "hermespy.channel.multipath_fading_templates.StandardAntennaCorrelation.yaml_tag"]], "quadrigachannel (class in hermespy.channel.quadriga_channel)": [[19, "hermespy.channel.quadriga_channel.QuadrigaChannel"]], "hermespy.channel.quadriga_channel": [[19, "module-hermespy.channel.quadriga_channel"]], "realize() (quadrigachannel method)": [[19, "hermespy.channel.quadriga_channel.QuadrigaChannel.realize"]], "serialized_attributes (quadrigachannel attribute)": [[19, "hermespy.channel.quadriga_channel.QuadrigaChannel.serialized_attributes"]], "yaml_tag (quadrigachannel attribute)": [[19, "hermespy.channel.quadriga_channel.QuadrigaChannel.yaml_tag"]], "fixedcrosssection (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.FixedCrossSection"]], "impulseresponse() (radarchannelrealization static method)": [[20, "hermespy.channel.radar_channel.RadarChannelRealization.ImpulseResponse"]], "multitargetradarchannel (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannel"]], "multitargetradarchannelrealization (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization"]], "physicalradartarget (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget"]], "rcrt (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RCRT"]], "radarchannelbase (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RadarChannelBase"]], "radarchannelrealization (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RadarChannelRealization"]], "radarcrosssectionmodel (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RadarCrossSectionModel"]], "radarinterferencerealization (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RadarInterferenceRealization"]], "radarpathrealization (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RadarPathRealization"]], "radartarget (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RadarTarget"]], "radartargetrealization (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.RadarTargetRealization"]], "singletargetradarchannel (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel"]], "singletargetradarchannelrealization (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization"]], "virtualradartarget (class in hermespy.channel.radar_channel)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget"]], "add_target() (multitargetradarchannel method)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannel.add_target"]], "attenuate (radarchannelbase property)": [[20, "hermespy.channel.radar_channel.RadarChannelBase.attenuate"]], "cross_section (fixedcrosssection property)": [[20, "hermespy.channel.radar_channel.FixedCrossSection.cross_section"]], "cross_section (physicalradartarget property)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget.cross_section"]], "cross_section (virtualradartarget property)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget.cross_section"]], "delay (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.delay"]], "doppler_shift (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.doppler_shift"]], "doppler_velocity (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.doppler_velocity"]], "gain (radarchannelrealization property)": [[20, "hermespy.channel.radar_channel.RadarChannelRealization.gain"]], "get_backwards_transformation() (physicalradartarget method)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_backwards_transformation"]], "get_backwards_transformation() (radartarget method)": [[20, "hermespy.channel.radar_channel.RadarTarget.get_backwards_transformation"]], "get_backwards_transformation() (virtualradartarget method)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget.get_backwards_transformation"]], "get_cross_section() (fixedcrosssection method)": [[20, "hermespy.channel.radar_channel.FixedCrossSection.get_cross_section"]], "get_cross_section() (physicalradartarget method)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_cross_section"]], "get_cross_section() (radarcrosssectionmodel method)": [[20, "hermespy.channel.radar_channel.RadarCrossSectionModel.get_cross_section"]], "get_cross_section() (radartarget method)": [[20, "hermespy.channel.radar_channel.RadarTarget.get_cross_section"]], "get_cross_section() (virtualradartarget method)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget.get_cross_section"]], "get_forwards_transformation() (physicalradartarget method)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_forwards_transformation"]], "get_forwards_transformation() (radartarget method)": [[20, "hermespy.channel.radar_channel.RadarTarget.get_forwards_transformation"]], "get_forwards_transformation() (virtualradartarget method)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget.get_forwards_transformation"]], "get_velocity() (physicalradartarget method)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_velocity"]], "get_velocity() (radartarget method)": [[20, "hermespy.channel.radar_channel.RadarTarget.get_velocity"]], "get_velocity() (virtualradartarget method)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget.get_velocity"]], "global_position (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.global_position"]], "global_velocity (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.global_velocity"]], "ground_truth() (multitargetradarchannelrealization method)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.ground_truth"]], "ground_truth() (radarchannelrealization method)": [[20, "hermespy.channel.radar_channel.RadarChannelRealization.ground_truth"]], "ground_truth() (singletargetradarchannelrealization method)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.ground_truth"]], "hermespy.channel.radar_channel": [[20, "module-hermespy.channel.radar_channel"]], "interference_realization (multitargetradarchannelrealization property)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.interference_realization"]], "interfernce (multitargetradarchannel attribute)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannel.interfernce"]], "make_target() (multitargetradarchannel method)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannel.make_target"]], "mimo_response (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.mimo_response"]], "moveable (physicalradartarget property)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget.moveable"]], "null_hypothesis() (multitargetradarchannelrealization method)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.null_hypothesis"]], "null_hypothesis() (radarchannelbase method)": [[20, "hermespy.channel.radar_channel.RadarChannelBase.null_hypothesis"]], "null_hypothesis() (radarchannelrealization method)": [[20, "hermespy.channel.radar_channel.RadarChannelRealization.null_hypothesis"]], "null_hypothesis() (singletargetradarchannelrealization method)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.null_hypothesis"]], "num_targets (multitargetradarchannelrealization property)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.num_targets"]], "phase_shift (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.phase_shift"]], "power_factor (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.power_factor"]], "radar_cross_section (singletargetradarchannel property)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.radar_cross_section"]], "realize() (multitargetradarchannel method)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannel.realize"]], "realize() (singletargetradarchannel method)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.realize"]], "serialized_attributes (singletargetradarchannel attribute)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.serialized_attributes"]], "static (radarpathrealization property)": [[20, "hermespy.channel.radar_channel.RadarPathRealization.static"]], "static (radartarget property)": [[20, "hermespy.channel.radar_channel.RadarTarget.static"]], "target_azimuth (singletargetradarchannel property)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_azimuth"]], "target_exists (singletargetradarchannel attribute)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_exists"]], "target_range (singletargetradarchannel property)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_range"]], "target_realization (singletargetradarchannelrealization property)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.target_realization"]], "target_realizations (multitargetradarchannelrealization property)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.target_realizations"]], "target_velocity (singletargetradarchannel property)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_velocity"]], "target_zenith (singletargetradarchannel property)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_zenith"]], "targets (multitargetradarchannel property)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannel.targets"]], "velocity (virtualradartarget property)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget.velocity"]], "yaml_tag (multitargetradarchannel attribute)": [[20, "hermespy.channel.radar_channel.MultiTargetRadarChannel.yaml_tag"]], "yaml_tag (physicalradartarget attribute)": [[20, "hermespy.channel.radar_channel.PhysicalRadarTarget.yaml_tag"]], "yaml_tag (singletargetradarchannel attribute)": [[20, "hermespy.channel.radar_channel.SingleTargetRadarChannel.yaml_tag"]], "yaml_tag (virtualradartarget attribute)": [[20, "hermespy.channel.radar_channel.VirtualRadarTarget.yaml_tag"]], "moveable (class in hermespy.core.animation)": [[22, "hermespy.core.animation.Moveable"]], "hermespy.core.animation": [[22, "module-hermespy.core.animation"]], "velocity (moveable property)": [[22, "hermespy.core.animation.Moveable.velocity"]], "antenna (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.Antenna"]], "antennaarray (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.AntennaArray"]], "antennaarraybase (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.AntennaArrayBase"]], "dipole (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.Dipole"]], "idealantenna (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.IdealAntenna"]], "linearantenna (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.LinearAntenna"]], "patchantenna (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.PatchAntenna"]], "uniformarray (class in hermespy.core.antennas)": [[23, "hermespy.core.antennas.UniformArray"]], "add_antenna() (antennaarray method)": [[23, "hermespy.core.antennas.AntennaArray.add_antenna"]], "antenna (uniformarray property)": [[23, "hermespy.core.antennas.UniformArray.antenna"]], "antennas (antennaarray property)": [[23, "hermespy.core.antennas.AntennaArray.antennas"]], "antennas (antennaarraybase property)": [[23, "hermespy.core.antennas.AntennaArrayBase.antennas"]], "antennas (uniformarray property)": [[23, "hermespy.core.antennas.UniformArray.antennas"]], "array (antenna property)": [[23, "hermespy.core.antennas.Antenna.array"]], "cartesian_array_response() (antennaarraybase method)": [[23, "hermespy.core.antennas.AntennaArrayBase.cartesian_array_response"]], "cartesian_phase_response() (antennaarraybase method)": [[23, "hermespy.core.antennas.AntennaArrayBase.cartesian_phase_response"]], "characteristics() (antennaarraybase method)": [[23, "hermespy.core.antennas.AntennaArrayBase.characteristics"]], "dimensions (uniformarray property)": [[23, "hermespy.core.antennas.UniformArray.dimensions"]], "global_characteristics() (antenna method)": [[23, "hermespy.core.antennas.Antenna.global_characteristics"]], "hermespy.core.antennas": [[23, "module-hermespy.core.antennas"]], "horizontal_phase_response() (antennaarraybase method)": [[23, "hermespy.core.antennas.AntennaArrayBase.horizontal_phase_response"]], "local_characteristics() (antenna method)": [[23, "hermespy.core.antennas.Antenna.local_characteristics"]], "local_characteristics() (dipole method)": [[23, "hermespy.core.antennas.Dipole.local_characteristics"]], "local_characteristics() (idealantenna method)": [[23, "hermespy.core.antennas.IdealAntenna.local_characteristics"]], "local_characteristics() (linearantenna method)": [[23, "hermespy.core.antennas.LinearAntenna.local_characteristics"]], "local_characteristics() (patchantenna method)": [[23, "hermespy.core.antennas.PatchAntenna.local_characteristics"]], "num_antennas (antennaarray property)": [[23, "hermespy.core.antennas.AntennaArray.num_antennas"]], "num_antennas (antennaarraybase property)": [[23, "hermespy.core.antennas.AntennaArrayBase.num_antennas"]], "num_antennas (uniformarray property)": [[23, "hermespy.core.antennas.UniformArray.num_antennas"]], "num_receive_antennas (antennaarraybase property)": [[23, "hermespy.core.antennas.AntennaArrayBase.num_receive_antennas"]], "num_transmit_antennas (antennaarraybase property)": [[23, "hermespy.core.antennas.AntennaArrayBase.num_transmit_antennas"]], "plot_gain() (antenna method)": [[23, "hermespy.core.antennas.Antenna.plot_gain"]], "plot_polarization() (antenna method)": [[23, "hermespy.core.antennas.Antenna.plot_polarization"]], "plot_topology() (antennaarraybase method)": [[23, "hermespy.core.antennas.AntennaArrayBase.plot_topology"]], "property_blacklist (uniformarray attribute)": [[23, "hermespy.core.antennas.UniformArray.property_blacklist"]], "receive() (antenna method)": [[23, "hermespy.core.antennas.Antenna.receive"]], "remove_antenna() (antennaarray method)": [[23, "hermespy.core.antennas.AntennaArray.remove_antenna"]], "slant (linearantenna property)": [[23, "hermespy.core.antennas.LinearAntenna.slant"]], "spacing (uniformarray property)": [[23, "hermespy.core.antennas.UniformArray.spacing"]], "spherical_phase_response() (antennaarraybase method)": [[23, "hermespy.core.antennas.AntennaArrayBase.spherical_phase_response"]], "topology (antennaarraybase property)": [[23, "hermespy.core.antennas.AntennaArrayBase.topology"]], "transmit() (antenna method)": [[23, "hermespy.core.antennas.Antenna.transmit"]], "yaml_tag (antenna attribute)": [[23, "hermespy.core.antennas.Antenna.yaml_tag"]], "yaml_tag (antennaarray attribute)": [[23, "hermespy.core.antennas.AntennaArray.yaml_tag"]], "yaml_tag (dipole attribute)": [[23, "hermespy.core.antennas.Dipole.yaml_tag"]], "yaml_tag (idealantenna attribute)": [[23, "hermespy.core.antennas.IdealAntenna.yaml_tag"]], "yaml_tag (linearantenna attribute)": [[23, "hermespy.core.antennas.LinearAntenna.yaml_tag"]], "yaml_tag (patchantenna attribute)": [[23, "hermespy.core.antennas.PatchAntenna.yaml_tag"]], "yaml_tag (uniformarray attribute)": [[23, "hermespy.core.antennas.UniformArray.yaml_tag"]], "csit (class in hermespy.core.channel_state_information)": [[24, "hermespy.core.channel_state_information.CSIT"]], "channelstatedimension (class in hermespy.core.channel_state_information)": [[24, "hermespy.core.channel_state_information.ChannelStateDimension"]], "channelstateformat (class in hermespy.core.channel_state_information)": [[24, "hermespy.core.channel_state_information.ChannelStateFormat"]], "channelstateinformation (class in hermespy.core.channel_state_information)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation"]], "frequency_selectivity (channelstateformat attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateFormat.FREQUENCY_SELECTIVITY"]], "impulse_response (channelstateformat attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateFormat.IMPULSE_RESPONSE"]], "information (channelstatedimension attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateDimension.INFORMATION"]], "ideal() (channelstateinformation static method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.Ideal"]], "receive_streams (channelstatedimension attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateDimension.RECEIVE_STREAMS"]], "samples (channelstatedimension attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateDimension.SAMPLES"]], "transmit_streams (channelstatedimension attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateDimension.TRANSMIT_STREAMS"]], "__num_delay_taps (channelstateinformation attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.__num_delay_taps"]], "__num_frequency_bins (channelstateinformation attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.__num_frequency_bins"]], "__state (channelstateinformation attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.__state"]], "__state_format (channelstateinformation attribute)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.__state_format"]], "append() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.append"]], "append_linear() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.append_linear"]], "concatenate() (channelstateinformation static method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.concatenate"]], "from_hdf() (channelstateinformation class method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.from_HDF"]], "hermespy.core.channel_state_information": [[24, "module-hermespy.core.channel_state_information"]], "linear (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.linear"]], "num_delay_taps (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.num_delay_taps"]], "num_receive_streams (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.num_receive_streams"]], "num_samples (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.num_samples"]], "num_symbols (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.num_symbols"]], "num_transmit_streams (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.num_transmit_streams"]], "plot() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.plot"]], "received_streams() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.received_streams"]], "reciprocal() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.reciprocal"]], "samples() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.samples"]], "set_state() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.set_state"]], "state (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.state"]], "state_format (channelstateinformation property)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.state_format"]], "to_hdf() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.to_HDF"]], "to_frequency_selectivity() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.to_frequency_selectivity"]], "to_impulse_response() (channelstateinformation method)": [[24, "hermespy.core.channel_state_information.ChannelStateInformation.to_impulse_response"]], "custom (snrtype attribute)": [[25, "hermespy.core.definitions.SNRType.CUSTOM"]], "consolemode (class in hermespy.core.definitions)": [[25, "hermespy.core.definitions.ConsoleMode"]], "ebn0 (snrtype attribute)": [[25, "hermespy.core.definitions.SNRType.EBN0"]], "en0 (snrtype attribute)": [[25, "hermespy.core.definitions.SNRType.EN0"]], "esn0 (snrtype attribute)": [[25, "hermespy.core.definitions.SNRType.ESN0"]], "interactive (consolemode attribute)": [[25, "hermespy.core.definitions.ConsoleMode.INTERACTIVE"]], "linear (consolemode attribute)": [[25, "hermespy.core.definitions.ConsoleMode.LINEAR"]], "n0 (snrtype attribute)": [[25, "hermespy.core.definitions.SNRType.N0"]], "pn0 (snrtype attribute)": [[25, "hermespy.core.definitions.SNRType.PN0"]], "silent (consolemode attribute)": [[25, "hermespy.core.definitions.ConsoleMode.SILENT"]], "snrtype (class in hermespy.core.definitions)": [[25, "hermespy.core.definitions.SNRType"]], "hermespy.core.definitions": [[25, "module-hermespy.core.definitions"]], "drt (class in hermespy.core.device)": [[26, "hermespy.core.device.DRT"]], "device (class in hermespy.core.device)": [[26, "hermespy.core.device.Device"]], "deviceinput (class in hermespy.core.device)": [[26, "hermespy.core.device.DeviceInput"]], "deviceoutput (class in hermespy.core.device)": [[26, "hermespy.core.device.DeviceOutput"]], "devicereception (class in hermespy.core.device)": [[26, "hermespy.core.device.DeviceReception"]], "devicetransmission (class in hermespy.core.device)": [[26, "hermespy.core.device.DeviceTransmission"]], "devicetype (class in hermespy.core.device)": [[26, "hermespy.core.device.DeviceType"]], "floatingerror": [[26, "hermespy.core.device.FloatingError"]], "from_output() (devicetransmission class method)": [[26, "hermespy.core.device.DeviceTransmission.From_Output"]], "from_processeddeviceinput() (devicereception class method)": [[26, "hermespy.core.device.DeviceReception.From_ProcessedDeviceInput"]], "mixingoperator (class in hermespy.core.device)": [[26, "hermespy.core.device.MixingOperator"]], "operationresult (class in hermespy.core.device)": [[26, "hermespy.core.device.OperationResult"]], "operationresulttype (class in hermespy.core.device)": [[26, "hermespy.core.device.OperationResultType"]], "operator (class in hermespy.core.device)": [[26, "hermespy.core.device.Operator"]], "operatorslot (class in hermespy.core.device)": [[26, "hermespy.core.device.OperatorSlot"]], "operatortype (class in hermespy.core.device)": [[26, "hermespy.core.device.OperatorType"]], "processeddeviceinput (class in hermespy.core.device)": [[26, "hermespy.core.device.ProcessedDeviceInput"]], "recall() (devicereception class method)": [[26, "hermespy.core.device.DeviceReception.Recall"]], "recall() (devicetransmission class method)": [[26, "hermespy.core.device.DeviceTransmission.Recall"]], "receiver (class in hermespy.core.device)": [[26, "hermespy.core.device.Receiver"]], "receiverslot (class in hermespy.core.device)": [[26, "hermespy.core.device.ReceiverSlot"]], "reception (class in hermespy.core.device)": [[26, "hermespy.core.device.Reception"]], "receptiontype (class in hermespy.core.device)": [[26, "hermespy.core.device.ReceptionType"]], "slottype (class in hermespy.core.device)": [[26, "hermespy.core.device.SlotType"]], "transmission (class in hermespy.core.device)": [[26, "hermespy.core.device.Transmission"]], "transmitter (class in hermespy.core.device)": [[26, "hermespy.core.device.Transmitter"]], "transmitterslot (class in hermespy.core.device)": [[26, "hermespy.core.device.TransmitterSlot"]], "unsupportedslot (class in hermespy.core.device)": [[26, "hermespy.core.device.UnsupportedSlot"]], "add() (operatorslot method)": [[26, "hermespy.core.device.OperatorSlot.add"]], "add() (transmitterslot method)": [[26, "hermespy.core.device.TransmitterSlot.add"]], "add() (unsupportedslot method)": [[26, "hermespy.core.device.UnsupportedSlot.add"]], "add_transmission() (transmitterslot method)": [[26, "hermespy.core.device.TransmitterSlot.add_transmission"]], "antennas (device property)": [[26, "hermespy.core.device.Device.antennas"]], "attached (operator property)": [[26, "hermespy.core.device.Operator.attached"]], "cache_reception() (receiver method)": [[26, "hermespy.core.device.Receiver.cache_reception"]], "cache_transmission() (device method)": [[26, "hermespy.core.device.Device.cache_transmission"]], "cache_transmission() (transmitter method)": [[26, "hermespy.core.device.Transmitter.cache_transmission"]], "carrier_frequency (device property)": [[26, "hermespy.core.device.Device.carrier_frequency"]], "carrier_frequency (deviceoutput property)": [[26, "hermespy.core.device.DeviceOutput.carrier_frequency"]], "carrier_frequency (mixingoperator property)": [[26, "hermespy.core.device.MixingOperator.carrier_frequency"]], "clear_cache() (transmitterslot method)": [[26, "hermespy.core.device.TransmitterSlot.clear_cache"]], "csi (receiver property)": [[26, "hermespy.core.device.Receiver.csi"]], "device (operator property)": [[26, "hermespy.core.device.Operator.device"]], "device (operatorslot property)": [[26, "hermespy.core.device.OperatorSlot.device"]], "device (receiver property)": [[26, "hermespy.core.device.Receiver.device"]], "device (transmitter property)": [[26, "hermespy.core.device.Transmitter.device"]], "emerging_signals (deviceoutput property)": [[26, "hermespy.core.device.DeviceOutput.emerging_signals"]], "frame_duration (operator property)": [[26, "hermespy.core.device.Operator.frame_duration"]], "from_hdf() (deviceinput class method)": [[26, "hermespy.core.device.DeviceInput.from_HDF"]], "from_hdf() (deviceoutput class method)": [[26, "hermespy.core.device.DeviceOutput.from_HDF"]], "from_hdf() (devicereception class method)": [[26, "hermespy.core.device.DeviceReception.from_HDF"]], "from_hdf() (devicetransmission class method)": [[26, "hermespy.core.device.DeviceTransmission.from_HDF"]], "from_hdf() (operationresult class method)": [[26, "hermespy.core.device.OperationResult.from_HDF"]], "from_hdf() (processeddeviceinput class method)": [[26, "hermespy.core.device.ProcessedDeviceInput.from_HDF"]], "generate_output() (device method)": [[26, "hermespy.core.device.Device.generate_output"]], "get_transmissions() (transmitterslot method)": [[26, "hermespy.core.device.TransmitterSlot.get_transmissions"]], "hermespy.core.device": [[26, "module-hermespy.core.device"]], "impinging_signals (deviceinput property)": [[26, "hermespy.core.device.DeviceInput.impinging_signals"]], "max_frame_duration (device property)": [[26, "hermespy.core.device.Device.max_frame_duration"]], "max_sampling_rate (operatorslot property)": [[26, "hermespy.core.device.OperatorSlot.max_sampling_rate"]], "min_frame_duration (operatorslot property)": [[26, "hermespy.core.device.OperatorSlot.min_frame_duration"]], "min_num_samples_per_frame (operatorslot property)": [[26, "hermespy.core.device.OperatorSlot.min_num_samples_per_frame"]], "mixed_signal (deviceoutput property)": [[26, "hermespy.core.device.DeviceOutput.mixed_signal"]], "noise_power() (receiver method)": [[26, "hermespy.core.device.Receiver.noise_power"]], "num_antennas (device property)": [[26, "hermespy.core.device.Device.num_antennas"]], "num_antennas (deviceoutput property)": [[26, "hermespy.core.device.DeviceOutput.num_antennas"]], "num_emerging_signals (deviceoutput property)": [[26, "hermespy.core.device.DeviceOutput.num_emerging_signals"]], "num_impinging_signals (deviceinput property)": [[26, "hermespy.core.device.DeviceInput.num_impinging_signals"]], "num_operator_inputs (processeddeviceinput property)": [[26, "hermespy.core.device.ProcessedDeviceInput.num_operator_inputs"]], "num_operator_receptions (devicereception property)": [[26, "hermespy.core.device.DeviceReception.num_operator_receptions"]], "num_operator_transmissions (devicetransmission property)": [[26, "hermespy.core.device.DeviceTransmission.num_operator_transmissions"]], "num_operators (operatorslot property)": [[26, "hermespy.core.device.OperatorSlot.num_operators"]], "operator_index() (operatorslot method)": [[26, "hermespy.core.device.OperatorSlot.operator_index"]], "operator_inputs (processeddeviceinput property)": [[26, "hermespy.core.device.ProcessedDeviceInput.operator_inputs"]], "operator_receptions (devicereception property)": [[26, "hermespy.core.device.DeviceReception.operator_receptions"]], "operator_transmissions (devicetransmission property)": [[26, "hermespy.core.device.DeviceTransmission.operator_transmissions"]], "power (device property)": [[26, "hermespy.core.device.Device.power"]], "process_input() (device method)": [[26, "hermespy.core.device.Device.process_input"]], "property_blacklist (operator attribute)": [[26, "hermespy.core.device.Operator.property_blacklist"]], "recall_reception() (receiver method)": [[26, "hermespy.core.device.Receiver.recall_reception"]], "recall_transmission() (transmitter method)": [[26, "hermespy.core.device.Transmitter.recall_transmission"]], "receive() (device method)": [[26, "hermespy.core.device.Device.receive"]], "receive() (receiver method)": [[26, "hermespy.core.device.Receiver.receive"]], "receive_operators() (device method)": [[26, "hermespy.core.device.Device.receive_operators"]], "receivers (device attribute)": [[26, "hermespy.core.device.Device.receivers"]], "reception (receiver property)": [[26, "hermespy.core.device.Receiver.reception"]], "reference (receiver property)": [[26, "hermespy.core.device.Receiver.reference"]], "registered() (operatorslot method)": [[26, "hermespy.core.device.OperatorSlot.registered"]], "remove() (operatorslot method)": [[26, "hermespy.core.device.OperatorSlot.remove"]], "sampling_rate (device property)": [[26, "hermespy.core.device.Device.sampling_rate"]], "sampling_rate (deviceoutput property)": [[26, "hermespy.core.device.DeviceOutput.sampling_rate"]], "sampling_rate (operator property)": [[26, "hermespy.core.device.Operator.sampling_rate"]], "signal (operationresult attribute)": [[26, "hermespy.core.device.OperationResult.signal"]], "signal (receiver property)": [[26, "hermespy.core.device.Receiver.signal"]], "slot (operator property)": [[26, "hermespy.core.device.Operator.slot"]], "slot (receiver property)": [[26, "hermespy.core.device.Receiver.slot"]], "slot (transmitter property)": [[26, "hermespy.core.device.Transmitter.slot"]], "slot_index (operator property)": [[26, "hermespy.core.device.Operator.slot_index"]], "snr (device property)": [[26, "hermespy.core.device.Device.snr"]], "to_hdf() (deviceinput method)": [[26, "hermespy.core.device.DeviceInput.to_HDF"]], "to_hdf() (deviceoutput method)": [[26, "hermespy.core.device.DeviceOutput.to_HDF"]], "to_hdf() (devicereception method)": [[26, "hermespy.core.device.DeviceReception.to_HDF"]], "to_hdf() (devicetransmission method)": [[26, "hermespy.core.device.DeviceTransmission.to_HDF"]], "to_hdf() (operationresult method)": [[26, "hermespy.core.device.OperationResult.to_HDF"]], "to_hdf() (processeddeviceinput method)": [[26, "hermespy.core.device.ProcessedDeviceInput.to_HDF"]], "transmission (transmitter property)": [[26, "hermespy.core.device.Transmitter.transmission"]], "transmit() (device method)": [[26, "hermespy.core.device.Device.transmit"]], "transmit() (transmitter method)": [[26, "hermespy.core.device.Transmitter.transmit"]], "transmit_operators() (device method)": [[26, "hermespy.core.device.Device.transmit_operators"]], "transmitters (device attribute)": [[26, "hermespy.core.device.Device.transmitters"]], "velocity (device property)": [[26, "hermespy.core.device.Device.velocity"]], "wavelength (device property)": [[26, "hermespy.core.device.Device.wavelength"]], "all (verbosity attribute)": [[27, "hermespy.core.executable.Verbosity.ALL"]], "error (verbosity attribute)": [[27, "hermespy.core.executable.Verbosity.ERROR"]], "executable (class in hermespy.core.executable)": [[27, "hermespy.core.executable.Executable"]], "info (verbosity attribute)": [[27, "hermespy.core.executable.Verbosity.INFO"]], "none (verbosity attribute)": [[27, "hermespy.core.executable.Verbosity.NONE"]], "verbosity (class in hermespy.core.executable)": [[27, "hermespy.core.executable.Verbosity"]], "warning (verbosity attribute)": [[27, "hermespy.core.executable.Verbosity.WARNING"]], "console (executable property)": [[27, "hermespy.core.executable.Executable.console"]], "console_mode (executable property)": [[27, "hermespy.core.executable.Executable.console_mode"]], "default_results_dir() (executable static method)": [[27, "hermespy.core.executable.Executable.default_results_dir"]], "execute() (executable method)": [[27, "hermespy.core.executable.Executable.execute"]], "hermespy.core.executable": [[27, "module-hermespy.core.executable"]], "results_dir (executable property)": [[27, "hermespy.core.executable.Executable.results_dir"]], "run() (executable method)": [[27, "hermespy.core.executable.Executable.run"]], "style (executable property)": [[27, "hermespy.core.executable.Executable.style"]], "style_context() (executable static method)": [[27, "hermespy.core.executable.Executable.style_context"]], "verbosity (executable property)": [[27, "hermespy.core.executable.Executable.verbosity"]], "factory (class in hermespy.core.factory)": [[28, "hermespy.core.factory.Factory"]], "hdfserializable (class in hermespy.core.factory)": [[28, "hermespy.core.factory.HDFSerializable"]], "hdfserializabletype (class in hermespy.core.factory)": [[28, "hermespy.core.factory.HDFSerializableType"]], "initializationwrapper() (serializable class method)": [[28, "hermespy.core.factory.Serializable.InitializationWrapper"]], "set (class in hermespy.core.factory)": [[28, "hermespy.core.factory.SET"]], "serializable (class in hermespy.core.factory)": [[28, "hermespy.core.factory.Serializable"]], "serializableenum (class in hermespy.core.factory)": [[28, "hermespy.core.factory.SerializableEnum"]], "serializabletype (class in hermespy.core.factory)": [[28, "hermespy.core.factory.SerializableType"]], "clean (factory property)": [[28, "hermespy.core.factory.Factory.clean"]], "extensions (factory attribute)": [[28, "hermespy.core.factory.Factory.extensions"]], "from_hdf() (hdfserializable class method)": [[28, "hermespy.core.factory.HDFSerializable.from_HDF"]], "from_file() (factory method)": [[28, "hermespy.core.factory.Factory.from_file"]], "from_folder() (factory method)": [[28, "hermespy.core.factory.Factory.from_folder"]], "from_parameters() (serializableenum class method)": [[28, "hermespy.core.factory.SerializableEnum.from_parameters"]], "from_path() (factory method)": [[28, "hermespy.core.factory.Factory.from_path"]], "from_str() (factory method)": [[28, "hermespy.core.factory.Factory.from_str"]], "from_stream() (factory method)": [[28, "hermespy.core.factory.Factory.from_stream"]], "from_yaml() (serializable class method)": [[28, "hermespy.core.factory.Serializable.from_yaml"]], "hermespy.core.factory": [[28, "module-hermespy.core.factory"]], "property_blacklist (serializable attribute)": [[28, "hermespy.core.factory.Serializable.property_blacklist"]], "registered_classes (factory property)": [[28, "hermespy.core.factory.Factory.registered_classes"]], "registered_tags (factory property)": [[28, "hermespy.core.factory.Factory.registered_tags"]], "serialized_attributes (serializable attribute)": [[28, "hermespy.core.factory.Serializable.serialized_attributes"]], "tag_registry (factory property)": [[28, "hermespy.core.factory.Factory.tag_registry"]], "to_hdf() (hdfserializable method)": [[28, "hermespy.core.factory.HDFSerializable.to_HDF"]], "to_file() (factory method)": [[28, "hermespy.core.factory.Factory.to_file"]], "to_folder() (factory method)": [[28, "hermespy.core.factory.Factory.to_folder"]], "to_str() (factory method)": [[28, "hermespy.core.factory.Factory.to_str"]], "to_stream() (factory method)": [[28, "hermespy.core.factory.Factory.to_stream"]], "to_yaml() (serializable class method)": [[28, "hermespy.core.factory.Serializable.to_yaml"]], "yaml_tag (serializable attribute)": [[28, "hermespy.core.factory.Serializable.yaml_tag"]], "db (valuetype attribute)": [[29, "hermespy.core.logarithmic.ValueType.DB"]], "from_tuple() (logarithmic class method)": [[29, "hermespy.core.logarithmic.Logarithmic.From_Tuple"]], "lin (valuetype attribute)": [[29, "hermespy.core.logarithmic.ValueType.LIN"]], "logarithmic (class in hermespy.core.logarithmic)": [[29, "hermespy.core.logarithmic.Logarithmic"]], "logarithmicsequence (class in hermespy.core.logarithmic)": [[29, "hermespy.core.logarithmic.LogarithmicSequence"]], "valuetype (class in hermespy.core.logarithmic)": [[29, "hermespy.core.logarithmic.ValueType"]], "conversion (logarithmic property)": [[29, "hermespy.core.logarithmic.Logarithmic.conversion"]], "conversion (logarithmicsequence property)": [[29, "hermespy.core.logarithmic.LogarithmicSequence.conversion"]], "db() (in module hermespy.core.logarithmic)": [[29, "hermespy.core.logarithmic.dB"]], "hermespy.core.logarithmic": [[29, "module-hermespy.core.logarithmic"]], "tolist() (logarithmicsequence method)": [[29, "hermespy.core.logarithmic.LogarithmicSequence.tolist"]], "value_db (logarithmic property)": [[29, "hermespy.core.logarithmic.Logarithmic.value_db"]], "actorrunresult (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.ActorRunResult"]], "artifact (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.Artifact"]], "artifacttemplate (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.ArtifactTemplate"]], "evaluation (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.Evaluation"]], "evaluationresult (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.EvaluationResult"]], "evaluationtemplate (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.EvaluationTemplate"]], "evaluator (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.Evaluator"]], "from_artifacts() (scalarevaluationresult class method)": [[30, "hermespy.core.monte_carlo.ScalarEvaluationResult.From_Artifacts"]], "griddimension (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.GridDimension"]], "gridsection (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.GridSection"]], "montecarlo (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.MonteCarlo"]], "montecarloactor (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.MonteCarloActor"]], "montecarloresult (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.MonteCarloResult"]], "montecarlosample (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.MonteCarloSample"]], "registereddimension (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.RegisteredDimension"]], "samplegrid (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.SampleGrid"]], "scalarevaluationresult (class in hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.ScalarEvaluationResult"]], "abbreviation (evaluator property)": [[30, "hermespy.core.monte_carlo.Evaluator.abbreviation"]], "add_dimension() (montecarlo method)": [[30, "hermespy.core.monte_carlo.MonteCarlo.add_dimension"]], "add_evaluator() (montecarlo method)": [[30, "hermespy.core.monte_carlo.MonteCarlo.add_evaluator"]], "add_samples() (gridsection method)": [[30, "hermespy.core.monte_carlo.GridSection.add_samples"]], "artifact (artifacttemplate property)": [[30, "hermespy.core.monte_carlo.ArtifactTemplate.artifact"]], "artifact() (evaluation method)": [[30, "hermespy.core.monte_carlo.Evaluation.artifact"]], "artifact_scalars (montecarlosample property)": [[30, "hermespy.core.monte_carlo.MonteCarloSample.artifact_scalars"]], "artifacts (montecarlosample property)": [[30, "hermespy.core.monte_carlo.MonteCarloSample.artifacts"]], "catch_exceptions (montecarlo attribute)": [[30, "hermespy.core.monte_carlo.MonteCarlo.catch_exceptions"]], "catch_exceptions (montecarloactor attribute)": [[30, "hermespy.core.monte_carlo.MonteCarloActor.catch_exceptions"]], "confidence (evaluator property)": [[30, "hermespy.core.monte_carlo.Evaluator.confidence"]], "confidence_status() (gridsection method)": [[30, "hermespy.core.monte_carlo.GridSection.confidence_status"]], "confidences (gridsection property)": [[30, "hermespy.core.monte_carlo.GridSection.confidences"]], "configure_point() (griddimension method)": [[30, "hermespy.core.monte_carlo.GridDimension.configure_point"]], "considered_objects (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.considered_objects"]], "console (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.console"]], "console_mode (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.console_mode"]], "coordinates (gridsection property)": [[30, "hermespy.core.monte_carlo.GridSection.coordinates"]], "cpus_per_actor (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.cpus_per_actor"]], "deleter() (registereddimension method)": [[30, "hermespy.core.monte_carlo.RegisteredDimension.deleter"]], "dimension (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.dimension"]], "dimensions (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.dimensions"]], "evaluate() (evaluator method)": [[30, "hermespy.core.monte_carlo.Evaluator.evaluate"]], "evaluation (evaluationtemplate attribute)": [[30, "hermespy.core.monte_carlo.EvaluationTemplate.evaluation"]], "evaluation_results (montecarloresult property)": [[30, "hermespy.core.monte_carlo.MonteCarloResult.evaluation_results"]], "evaluators (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.evaluators"]], "first_impact (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.first_impact"]], "first_impact (registereddimension property)": [[30, "hermespy.core.monte_carlo.RegisteredDimension.first_impact"]], "generate_result() (evaluator method)": [[30, "hermespy.core.monte_carlo.Evaluator.generate_result"]], "getter() (registereddimension method)": [[30, "hermespy.core.monte_carlo.RegisteredDimension.getter"]], "grid_section (montecarlosample property)": [[30, "hermespy.core.monte_carlo.MonteCarloSample.grid_section"]], "hermespy.core.monte_carlo": [[30, "module-hermespy.core.monte_carlo"]], "investigated_object (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.investigated_object"]], "is_registered() (registereddimension class method)": [[30, "hermespy.core.monte_carlo.RegisteredDimension.is_registered"]], "last_impact (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.last_impact"]], "last_impact (registereddimension property)": [[30, "hermespy.core.monte_carlo.RegisteredDimension.last_impact"]], "max_num_samples (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.max_num_samples"]], "message (actorrunresult attribute)": [[30, "hermespy.core.monte_carlo.ActorRunResult.message"]], "min_num_samples (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.min_num_samples"]], "new_dimension() (montecarlo method)": [[30, "hermespy.core.monte_carlo.MonteCarlo.new_dimension"]], "num_actors (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.num_actors"]], "num_artifacts (montecarlosample property)": [[30, "hermespy.core.monte_carlo.MonteCarloSample.num_artifacts"]], "num_sample_points (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.num_sample_points"]], "num_samples (gridsection property)": [[30, "hermespy.core.monte_carlo.GridSection.num_samples"]], "num_samples (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.num_samples"]], "performance_time (montecarloresult property)": [[30, "hermespy.core.monte_carlo.MonteCarloResult.performance_time"]], "plot() (montecarloresult method)": [[30, "hermespy.core.monte_carlo.MonteCarloResult.plot"]], "plot_scale (evaluator property)": [[30, "hermespy.core.monte_carlo.Evaluator.plot_scale"]], "plot_scale (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.plot_scale"]], "plot_surface (scalarevaluationresult attribute)": [[30, "hermespy.core.monte_carlo.ScalarEvaluationResult.plot_surface"]], "register() (in module hermespy.core.monte_carlo)": [[30, "hermespy.core.monte_carlo.register"]], "run() (montecarloactor method)": [[30, "hermespy.core.monte_carlo.MonteCarloActor.run"]], "runtime_env (montecarlo attribute)": [[30, "hermespy.core.monte_carlo.MonteCarlo.runtime_env"]], "sample_index (montecarlosample property)": [[30, "hermespy.core.monte_carlo.MonteCarloSample.sample_index"]], "sample_points (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.sample_points"]], "samples (actorrunresult attribute)": [[30, "hermespy.core.monte_carlo.ActorRunResult.samples"]], "samples (gridsection property)": [[30, "hermespy.core.monte_carlo.GridSection.samples"]], "save_to_matlab() (montecarloresult method)": [[30, "hermespy.core.monte_carlo.MonteCarloResult.save_to_matlab"]], "section_block_size (montecarlo property)": [[30, "hermespy.core.monte_carlo.MonteCarlo.section_block_size"]], "setter() (registereddimension method)": [[30, "hermespy.core.monte_carlo.RegisteredDimension.setter"]], "simulate() (montecarlo method)": [[30, "hermespy.core.monte_carlo.MonteCarlo.simulate"]], "stage_executors() (montecarloactor method)": [[30, "hermespy.core.monte_carlo.MonteCarloActor.stage_executors"]], "stage_identifiers() (montecarloactor static method)": [[30, "hermespy.core.monte_carlo.MonteCarloActor.stage_identifiers"]], "tick_format (evaluator attribute)": [[30, "hermespy.core.monte_carlo.Evaluator.tick_format"]], "tick_format (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.tick_format"]], "title (evaluator property)": [[30, "hermespy.core.monte_carlo.Evaluator.title"]], "title (griddimension property)": [[30, "hermespy.core.monte_carlo.GridDimension.title"]], "title (registereddimension property)": [[30, "hermespy.core.monte_carlo.RegisteredDimension.title"]], "title (scalarevaluationresult property)": [[30, "hermespy.core.monte_carlo.ScalarEvaluationResult.title"]], "to_array() (evaluationresult method)": [[30, "hermespy.core.monte_carlo.EvaluationResult.to_array"]], "to_array() (scalarevaluationresult method)": [[30, "hermespy.core.monte_carlo.ScalarEvaluationResult.to_array"]], "to_scalar() (artifact method)": [[30, "hermespy.core.monte_carlo.Artifact.to_scalar"]], "to_scalar() (artifacttemplate method)": [[30, "hermespy.core.monte_carlo.ArtifactTemplate.to_scalar"]], "tolerance (evaluator property)": [[30, "hermespy.core.monte_carlo.Evaluator.tolerance"]], "signalreceiver (class in hermespy.core.operators)": [[31, "hermespy.core.operators.SignalReceiver"]], "signaltransmitter (class in hermespy.core.operators)": [[31, "hermespy.core.operators.SignalTransmitter"]], "silenttransmitter (class in hermespy.core.operators)": [[31, "hermespy.core.operators.SilentTransmitter"]], "staticoperator (class in hermespy.core.operators)": [[31, "hermespy.core.operators.StaticOperator"]], "energy (signalreceiver property)": [[31, "hermespy.core.operators.SignalReceiver.energy"]], "frame_duration (staticoperator property)": [[31, "hermespy.core.operators.StaticOperator.frame_duration"]], "hermespy.core.operators": [[31, "module-hermespy.core.operators"]], "num_samples (staticoperator property)": [[31, "hermespy.core.operators.StaticOperator.num_samples"]], "sampling_rate (staticoperator property)": [[31, "hermespy.core.operators.StaticOperator.sampling_rate"]], "serialized_attributes (signalreceiver attribute)": [[31, "hermespy.core.operators.SignalReceiver.serialized_attributes"]], "serialized_attributes (silenttransmitter attribute)": [[31, "hermespy.core.operators.SilentTransmitter.serialized_attributes"]], "yaml_tag (signalreceiver attribute)": [[31, "hermespy.core.operators.SignalReceiver.yaml_tag"]], "yaml_tag (signaltransmitter attribute)": [[31, "hermespy.core.operators.SignalTransmitter.yaml_tag"]], "yaml_tag (silenttransmitter attribute)": [[31, "hermespy.core.operators.SilentTransmitter.yaml_tag"]], "pipeline (class in hermespy.core.pipeline)": [[32, "hermespy.core.pipeline.Pipeline"]], "add_device() (pipeline method)": [[32, "hermespy.core.pipeline.Pipeline.add_device"]], "device_index() (pipeline method)": [[32, "hermespy.core.pipeline.Pipeline.device_index"]], "hermespy.core.pipeline": [[32, "module-hermespy.core.pipeline"]], "new_device() (pipeline method)": [[32, "hermespy.core.pipeline.Pipeline.new_device"]], "num_drops (pipeline property)": [[32, "hermespy.core.pipeline.Pipeline.num_drops"]], "scenario (pipeline property)": [[32, "hermespy.core.pipeline.Pipeline.scenario"]], "randomnode (class in hermespy.core.random_node)": [[33, "hermespy.core.random_node.RandomNode"]], "randomrealization (class in hermespy.core.random_node)": [[33, "hermespy.core.random_node.RandomRealization"]], "generator() (randomrealization method)": [[33, "hermespy.core.random_node.RandomRealization.generator"]], "hermespy.core.random_node": [[33, "module-hermespy.core.random_node"]], "is_random_root (randomnode property)": [[33, "hermespy.core.random_node.RandomNode.is_random_root"]], "random_mother (randomnode property)": [[33, "hermespy.core.random_node.RandomNode.random_mother"]], "seed (randomnode property)": [[33, "hermespy.core.random_node.RandomNode.seed"]], "seed (randomrealization property)": [[33, "hermespy.core.random_node.RandomRealization.seed"]], "default (scenariomode attribute)": [[34, "hermespy.core.scenario.ScenarioMode.DEFAULT"]], "record (scenariomode attribute)": [[34, "hermespy.core.scenario.ScenarioMode.RECORD"]], "replay (scenariomode attribute)": [[34, "hermespy.core.scenario.ScenarioMode.REPLAY"]], "replay() (scenario class method)": [[34, "hermespy.core.scenario.Scenario.Replay"]], "replayscenario (class in hermespy.core.scenario)": [[34, "hermespy.core.scenario.ReplayScenario"]], "scenario (class in hermespy.core.scenario)": [[34, "hermespy.core.scenario.Scenario"]], "scenariomode (class in hermespy.core.scenario)": [[34, "hermespy.core.scenario.ScenarioMode"]], "scenariotype (class in hermespy.core.scenario)": [[34, "hermespy.core.scenario.ScenarioType"]], "add_device() (scenario method)": [[34, "hermespy.core.scenario.Scenario.add_device"]], "campaign (scenario property)": [[34, "hermespy.core.scenario.Scenario.campaign"]], "device_index() (scenario method)": [[34, "hermespy.core.scenario.Scenario.device_index"]], "device_registered() (scenario method)": [[34, "hermespy.core.scenario.Scenario.device_registered"]], "devices (scenario property)": [[34, "hermespy.core.scenario.Scenario.devices"]], "drop() (scenario method)": [[34, "hermespy.core.scenario.Scenario.drop"]], "drop_duration (scenario property)": [[34, "hermespy.core.scenario.Scenario.drop_duration"]], "generate_outputs() (scenario method)": [[34, "hermespy.core.scenario.Scenario.generate_outputs"]], "hermespy.core.scenario": [[34, "module-hermespy.core.scenario"]], "mode (scenario property)": [[34, "hermespy.core.scenario.Scenario.mode"]], "new_device() (scenario method)": [[34, "hermespy.core.scenario.Scenario.new_device"]], "num_devices (scenario property)": [[34, "hermespy.core.scenario.Scenario.num_devices"]], "num_drops (scenario property)": [[34, "hermespy.core.scenario.Scenario.num_drops"]], "num_operators (scenario property)": [[34, "hermespy.core.scenario.Scenario.num_operators"]], "num_receivers (scenario property)": [[34, "hermespy.core.scenario.Scenario.num_receivers"]], "num_transmitters (scenario property)": [[34, "hermespy.core.scenario.Scenario.num_transmitters"]], "operators (scenario property)": [[34, "hermespy.core.scenario.Scenario.operators"]], "process_inputs() (scenario method)": [[34, "hermespy.core.scenario.Scenario.process_inputs"]], "receive_devices() (scenario method)": [[34, "hermespy.core.scenario.Scenario.receive_devices"]], "receive_operators() (scenario method)": [[34, "hermespy.core.scenario.Scenario.receive_operators"]], "receivers (scenario property)": [[34, "hermespy.core.scenario.Scenario.receivers"]], "record() (scenario method)": [[34, "hermespy.core.scenario.Scenario.record"]], "replay() (scenario method)": [[34, "hermespy.core.scenario.Scenario.replay"]], "serialized_attributes (scenario attribute)": [[34, "hermespy.core.scenario.Scenario.serialized_attributes"]], "stop() (scenario method)": [[34, "hermespy.core.scenario.Scenario.stop"]], "transmit_devices() (scenario method)": [[34, "hermespy.core.scenario.Scenario.transmit_devices"]], "transmit_operators() (scenario method)": [[34, "hermespy.core.scenario.Scenario.transmit_operators"]], "transmitters (scenario property)": [[34, "hermespy.core.scenario.Scenario.transmitters"]], "yaml_tag (scenario attribute)": [[34, "hermespy.core.scenario.Scenario.yaml_tag"]], "signal (class in hermespy.core.signal_model)": [[35, "hermespy.core.signal_model.Signal"]], "__carrier_frequency (signal attribute)": [[35, "hermespy.core.signal_model.Signal.__carrier_frequency"]], "__samples (signal attribute)": [[35, "hermespy.core.signal_model.Signal.__samples"]], "__sampling_rate (signal attribute)": [[35, "hermespy.core.signal_model.Signal.__sampling_rate"]], "append_samples() (signal method)": [[35, "hermespy.core.signal_model.Signal.append_samples"]], "append_streams() (signal method)": [[35, "hermespy.core.signal_model.Signal.append_streams"]], "carrier_frequency (signal property)": [[35, "hermespy.core.signal_model.Signal.carrier_frequency"]], "copy() (signal method)": [[35, "hermespy.core.signal_model.Signal.copy"]], "delay (signal attribute)": [[35, "hermespy.core.signal_model.Signal.delay"]], "duration (signal property)": [[35, "hermespy.core.signal_model.Signal.duration"]], "empty() (signal class method)": [[35, "hermespy.core.signal_model.Signal.empty"]], "energy (signal property)": [[35, "hermespy.core.signal_model.Signal.energy"]], "filter_order (signal attribute)": [[35, "hermespy.core.signal_model.Signal.filter_order"]], "frequencies (signal property)": [[35, "hermespy.core.signal_model.Signal.frequencies"]], "from_hdf() (signal class method)": [[35, "hermespy.core.signal_model.Signal.from_HDF"]], "from_interleaved() (signal class method)": [[35, "hermespy.core.signal_model.Signal.from_interleaved"]], "hermespy.core.signal_model": [[35, "module-hermespy.core.signal_model"]], "noise_power (signal property)": [[35, "hermespy.core.signal_model.Signal.noise_power"]], "num_samples (signal property)": [[35, "hermespy.core.signal_model.Signal.num_samples"]], "num_streams (signal property)": [[35, "hermespy.core.signal_model.Signal.num_streams"]], "plot() (signal method)": [[35, "hermespy.core.signal_model.Signal.plot"]], "plot_eye() (signal method)": [[35, "hermespy.core.signal_model.Signal.plot_eye"]], "power (signal property)": [[35, "hermespy.core.signal_model.Signal.power"]], "resample() (signal method)": [[35, "hermespy.core.signal_model.Signal.resample"]], "samples (signal property)": [[35, "hermespy.core.signal_model.Signal.samples"]], "sampling_rate (signal property)": [[35, "hermespy.core.signal_model.Signal.sampling_rate"]], "superimpose() (signal method)": [[35, "hermespy.core.signal_model.Signal.superimpose"]], "timestamps (signal property)": [[35, "hermespy.core.signal_model.Signal.timestamps"]], "title (signal property)": [[35, "hermespy.core.signal_model.Signal.title"]], "to_hdf() (signal method)": [[35, "hermespy.core.signal_model.Signal.to_HDF"]], "to_interleaved() (signal method)": [[35, "hermespy.core.signal_model.Signal.to_interleaved"]], "direction (class in hermespy.core.transformation)": [[36, "hermespy.core.transformation.Direction"]], "from_cartesian() (direction class method)": [[36, "hermespy.core.transformation.Direction.From_Cartesian"]], "from_rpy() (transformation class method)": [[36, "hermespy.core.transformation.Transformation.From_RPY"]], "from_spherical() (direction class method)": [[36, "hermespy.core.transformation.Direction.From_Spherical"]], "from_translation() (transformation class method)": [[36, "hermespy.core.transformation.Transformation.From_Translation"]], "no() (transformation class method)": [[36, "hermespy.core.transformation.Transformation.No"]], "transformable (class in hermespy.core.transformation)": [[36, "hermespy.core.transformation.Transformable"]], "transformablebase (class in hermespy.core.transformation)": [[36, "hermespy.core.transformation.TransformableBase"]], "transformablelink (class in hermespy.core.transformation)": [[36, "hermespy.core.transformation.TransformableLink"]], "transformation (class in hermespy.core.transformation)": [[36, "hermespy.core.transformation.Transformation"]], "add_link() (transformablelink method)": [[36, "hermespy.core.transformation.TransformableLink.add_link"]], "backwards_transformation (transformable property)": [[36, "hermespy.core.transformation.Transformable.backwards_transformation"]], "forwards_transformation (transformable property)": [[36, "hermespy.core.transformation.Transformable.forwards_transformation"]], "forwards_transformation (transformablebase property)": [[36, "hermespy.core.transformation.TransformableBase.forwards_transformation"]], "forwards_transformation (transformablelink property)": [[36, "hermespy.core.transformation.TransformableLink.forwards_transformation"]], "from_yaml() (transformation class method)": [[36, "hermespy.core.transformation.Transformation.from_yaml"]], "global_orientation (transformable property)": [[36, "hermespy.core.transformation.Transformable.global_orientation"]], "global_position (transformable property)": [[36, "hermespy.core.transformation.Transformable.global_position"]], "hermespy.core.transformation": [[36, "module-hermespy.core.transformation"]], "is_base (transformable property)": [[36, "hermespy.core.transformation.Transformable.is_base"]], "linked_frames (transformablelink property)": [[36, "hermespy.core.transformation.TransformableLink.linked_frames"]], "orientation (transformable property)": [[36, "hermespy.core.transformation.Transformable.orientation"]], "pose (transformable property)": [[36, "hermespy.core.transformation.Transformable.pose"]], "position (transformable property)": [[36, "hermespy.core.transformation.Transformable.position"]], "property_blacklist (transformable attribute)": [[36, "hermespy.core.transformation.Transformable.property_blacklist"]], "remove_link() (transformablelink method)": [[36, "hermespy.core.transformation.TransformableLink.remove_link"]], "rotate_direction() (transformation method)": [[36, "hermespy.core.transformation.Transformation.rotate_direction"]], "rotation_rpy (transformation property)": [[36, "hermespy.core.transformation.Transformation.rotation_rpy"]], "set_base() (transformable method)": [[36, "hermespy.core.transformation.Transformable.set_base"]], "set_base() (transformablebase method)": [[36, "hermespy.core.transformation.TransformableBase.set_base"]], "set_base() (transformablelink method)": [[36, "hermespy.core.transformation.TransformableLink.set_base"]], "to_local_coordinates() (transformable method)": [[36, "hermespy.core.transformation.Transformable.to_local_coordinates"]], "to_spherical() (direction method)": [[36, "hermespy.core.transformation.Direction.to_spherical"]], "to_yaml() (transformation class method)": [[36, "hermespy.core.transformation.Transformation.to_yaml"]], "transform_direction() (transformation method)": [[36, "hermespy.core.transformation.Transformation.transform_direction"]], "transform_position() (transformation method)": [[36, "hermespy.core.transformation.Transformation.transform_position"]], "translation (transformation property)": [[36, "hermespy.core.transformation.Transformation.translation"]], "yaml_tag (transformation attribute)": [[36, "hermespy.core.transformation.Transformation.yaml_tag"]], "visualizable (class in hermespy.core.visualize)": [[37, "hermespy.core.visualize.Visualizable"]], "hermespy.core.visualize": [[37, "module-hermespy.core.visualize"]], "plot() (visualizable method)": [[37, "hermespy.core.visualize.Visualizable.plot"]], "title (visualizable property)": [[37, "hermespy.core.visualize.Visualizable.title"]], "blockinterleaver (class in hermespy.fec.block_interleaver)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver"]], "bit_block_size (blockinterleaver property)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.bit_block_size"]], "block_size (blockinterleaver property)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.block_size"]], "code_block_size (blockinterleaver property)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.code_block_size"]], "decode() (blockinterleaver method)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.decode"]], "encode() (blockinterleaver method)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.encode"]], "hermespy.fec.block_interleaver": [[40, "module-hermespy.fec.block_interleaver"]], "interleave_blocks (blockinterleaver property)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.interleave_blocks"]], "rate (blockinterleaver property)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.rate"]], "yaml_tag (blockinterleaver attribute)": [[40, "hermespy.fec.block_interleaver.BlockInterleaver.yaml_tag"]], "encoder (class in hermespy.fec.coding)": [[41, "hermespy.fec.coding.Encoder"]], "encodermanager (class in hermespy.fec.coding)": [[41, "hermespy.fec.coding.EncoderManager"]], "add_encoder() (encodermanager method)": [[41, "hermespy.fec.coding.EncoderManager.add_encoder"]], "allow_padding (encodermanager attribute)": [[41, "hermespy.fec.coding.EncoderManager.allow_padding"]], "allow_truncating (encodermanager attribute)": [[41, "hermespy.fec.coding.EncoderManager.allow_truncating"]], "bit_block_size (encoder property)": [[41, "hermespy.fec.coding.Encoder.bit_block_size"]], "bit_block_size (encodermanager property)": [[41, "hermespy.fec.coding.EncoderManager.bit_block_size"]], "code_block_size (encoder property)": [[41, "hermespy.fec.coding.Encoder.code_block_size"]], "code_block_size (encodermanager property)": [[41, "hermespy.fec.coding.EncoderManager.code_block_size"]], "decode() (encoder method)": [[41, "hermespy.fec.coding.Encoder.decode"]], "decode() (encodermanager method)": [[41, "hermespy.fec.coding.EncoderManager.decode"]], "enabled (encoder property)": [[41, "hermespy.fec.coding.Encoder.enabled"]], "encode() (encoder method)": [[41, "hermespy.fec.coding.Encoder.encode"]], "encode() (encodermanager method)": [[41, "hermespy.fec.coding.EncoderManager.encode"]], "encoders (encodermanager property)": [[41, "hermespy.fec.coding.EncoderManager.encoders"]], "hermespy.fec.coding": [[41, "module-hermespy.fec.coding"]], "manager (encoder property)": [[41, "hermespy.fec.coding.Encoder.manager"]], "modem (encodermanager property)": [[41, "hermespy.fec.coding.EncoderManager.modem"]], "rate (encoder property)": [[41, "hermespy.fec.coding.Encoder.rate"]], "rate (encodermanager property)": [[41, "hermespy.fec.coding.EncoderManager.rate"]], "required_num_data_bits() (encodermanager method)": [[41, "hermespy.fec.coding.EncoderManager.required_num_data_bits"]], "yaml_tag (encoder attribute)": [[41, "hermespy.fec.coding.Encoder.yaml_tag"]], "yaml_tag (encodermanager attribute)": [[41, "hermespy.fec.coding.EncoderManager.yaml_tag"]], "cyclicredundancycheck (class in hermespy.fec.cyclic_redundancy_check)": [[42, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck"]], "bit_block_size (cyclicredundancycheck property)": [[42, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.bit_block_size"]], "check_block_size (cyclicredundancycheck property)": [[42, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.check_block_size"]], "code_block_size (cyclicredundancycheck property)": [[42, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.code_block_size"]], "decode() (cyclicredundancycheck method)": [[42, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.decode"]], "encode() (cyclicredundancycheck method)": [[42, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.encode"]], "hermespy.fec.cyclic_redundancy_check": [[42, "module-hermespy.fec.cyclic_redundancy_check"]], "yaml_tag (cyclicredundancycheck attribute)": [[42, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.yaml_tag"]], "repetitionencoder (class in hermespy.fec.repetition_encoder)": [[45, "hermespy.fec.repetition_encoder.RepetitionEncoder"]], "bit_block_size (repetitionencoder property)": [[45, "hermespy.fec.repetition_encoder.RepetitionEncoder.bit_block_size"]], "code_block_size (repetitionencoder property)": [[45, "hermespy.fec.repetition_encoder.RepetitionEncoder.code_block_size"]], "decode() (repetitionencoder method)": [[45, "hermespy.fec.repetition_encoder.RepetitionEncoder.decode"]], "encode() (repetitionencoder method)": [[45, "hermespy.fec.repetition_encoder.RepetitionEncoder.encode"]], "hermespy.fec.repetition_encoder": [[45, "module-hermespy.fec.repetition_encoder"]], "repetitions (repetitionencoder property)": [[45, "hermespy.fec.repetition_encoder.RepetitionEncoder.repetitions"]], "yaml_tag (repetitionencoder attribute)": [[45, "hermespy.fec.repetition_encoder.RepetitionEncoder.yaml_tag"]], "pseudorandomgenerator (class in hermespy.fec.scrambler)": [[48, "hermespy.fec.scrambler.PseudoRandomGenerator"]], "scrambler3gpp (class in hermespy.fec.scrambler)": [[48, "hermespy.fec.scrambler.Scrambler3GPP"]], "scrambler80211a (class in hermespy.fec.scrambler)": [[48, "hermespy.fec.scrambler.Scrambler80211a"]], "bit_block_size (scrambler3gpp property)": [[48, "hermespy.fec.scrambler.Scrambler3GPP.bit_block_size"]], "bit_block_size (scrambler80211a property)": [[48, "hermespy.fec.scrambler.Scrambler80211a.bit_block_size"]], "code_block_size (scrambler3gpp property)": [[48, "hermespy.fec.scrambler.Scrambler3GPP.code_block_size"]], "code_block_size (scrambler80211a property)": [[48, "hermespy.fec.scrambler.Scrambler80211a.code_block_size"]], "decode() (scrambler3gpp method)": [[48, "hermespy.fec.scrambler.Scrambler3GPP.decode"]], "decode() (scrambler80211a method)": [[48, "hermespy.fec.scrambler.Scrambler80211a.decode"]], "encode() (scrambler3gpp method)": [[48, "hermespy.fec.scrambler.Scrambler3GPP.encode"]], "encode() (scrambler80211a method)": [[48, "hermespy.fec.scrambler.Scrambler80211a.encode"]], "generate() (pseudorandomgenerator method)": [[48, "hermespy.fec.scrambler.PseudoRandomGenerator.generate"]], "generate_sequence() (pseudorandomgenerator method)": [[48, "hermespy.fec.scrambler.PseudoRandomGenerator.generate_sequence"]], "hermespy.fec.scrambler": [[48, "module-hermespy.fec.scrambler"]], "reset() (pseudorandomgenerator method)": [[48, "hermespy.fec.scrambler.PseudoRandomGenerator.reset"]], "seed (scrambler80211a property)": [[48, "hermespy.fec.scrambler.Scrambler80211a.seed"]], "yaml_tag (scrambler3gpp attribute)": [[48, "hermespy.fec.scrambler.Scrambler3GPP.yaml_tag"]], "yaml_tag (scrambler80211a attribute)": [[48, "hermespy.fec.scrambler.Scrambler80211a.yaml_tag"]], "audioantenna (class in hermespy.hardware_loop.audio.device)": [[51, "hermespy.hardware_loop.audio.device.AudioAntenna"]], "audiodevice (class in hermespy.hardware_loop.audio.device)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice"]], "audiodeviceantennas (class in hermespy.hardware_loop.audio.device)": [[51, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas"]], "antennas (audiodeviceantennas property)": [[51, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.antennas"]], "carrier_frequency (audiodevice property)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.carrier_frequency"]], "hermespy.hardware_loop.audio.device": [[51, "module-hermespy.hardware_loop.audio.device"]], "local_characteristics() (audioantenna method)": [[51, "hermespy.hardware_loop.audio.device.AudioAntenna.local_characteristics"]], "max_sampling_rate (audiodevice property)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.max_sampling_rate"]], "num_antennas (audiodeviceantennas property)": [[51, "hermespy.hardware_loop.audio.device.AudioDeviceAntennas.num_antennas"]], "playback_channels (audiodevice property)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.playback_channels"]], "playback_device (audiodevice property)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.playback_device"]], "property_blacklist (audiodevice attribute)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.property_blacklist"]], "record_channels (audiodevice property)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.record_channels"]], "record_device (audiodevice property)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.record_device"]], "sampling_rate (audiodevice property)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.sampling_rate"]], "trigger() (audiodevice method)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.trigger"]], "yaml_tag (audiodevice attribute)": [[51, "hermespy.hardware_loop.audio.device.AudioDevice.yaml_tag"]], "audioscenario (class in hermespy.hardware_loop.audio.scenario)": [[52, "hermespy.hardware_loop.audio.scenario.AudioScenario"]], "hermespy.hardware_loop.audio.scenario": [[52, "module-hermespy.hardware_loop.audio.scenario"]], "new_device() (audioscenario method)": [[52, "hermespy.hardware_loop.audio.scenario.AudioScenario.new_device"]], "yaml_tag (audioscenario attribute)": [[52, "hermespy.hardware_loop.audio.scenario.AudioScenario.yaml_tag"]], "delaycalibration (class in hermespy.hardware_loop.calibration.delay)": [[53, "hermespy.hardware_loop.calibration.delay.DelayCalibration"]], "estimate() (delaycalibration static method)": [[53, "hermespy.hardware_loop.calibration.delay.DelayCalibration.Estimate"]], "delay (delaycalibration property)": [[53, "hermespy.hardware_loop.calibration.delay.DelayCalibration.delay"]], "from_hdf() (delaycalibration class method)": [[53, "hermespy.hardware_loop.calibration.delay.DelayCalibration.from_HDF"]], "hermespy.hardware_loop.calibration.delay": [[53, "module-hermespy.hardware_loop.calibration.delay"]], "to_hdf() (delaycalibration method)": [[53, "hermespy.hardware_loop.calibration.delay.DelayCalibration.to_HDF"]], "yaml_tag (delaycalibration attribute)": [[53, "hermespy.hardware_loop.calibration.delay.DelayCalibration.yaml_tag"]], "mmseestimate() (selectiveleakagecalibration static method)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.MMSEEstimate"]], "selectiveleakagecalibration (class in hermespy.hardware_loop.calibration.leakage)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration"]], "delay (selectiveleakagecalibration property)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.delay"]], "estimate_delay() (selectiveleakagecalibration method)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.estimate_delay"]], "from_hdf() (selectiveleakagecalibration class method)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.from_HDF"]], "hermespy.hardware_loop.calibration.leakage": [[54, "module-hermespy.hardware_loop.calibration.leakage"]], "leakage_response (selectiveleakagecalibration property)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.leakage_response"]], "remove_leakage() (selectiveleakagecalibration method)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.remove_leakage"]], "sampling_rate (selectiveleakagecalibration property)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.sampling_rate"]], "title (selectiveleakagecalibration property)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.title"]], "to_hdf() (selectiveleakagecalibration method)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.to_HDF"]], "yaml_tag (selectiveleakagecalibration attribute)": [[54, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.yaml_tag"]], "artifacts (evaluatorplotmode attribute)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorPlotMode.ARTIFACTS"]], "evaluation (evaluatorplotmode attribute)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorPlotMode.EVALUATION"]], "evaluatorplotmode (class in hermespy.hardware_loop.hardware_loop)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorPlotMode"]], "evaluatorregistration (class in hermespy.hardware_loop.hardware_loop)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration"]], "hide (evaluatorplotmode attribute)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorPlotMode.HIDE"]], "hardwareloop (class in hermespy.hardware_loop.hardware_loop)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop"]], "hardwareloopplot (class in hermespy.hardware_loop.hardware_loop)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot"]], "hardwareloopsample (class in hermespy.hardware_loop.hardware_loop)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample"]], "abbreviation (evaluatorregistration property)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.abbreviation"]], "add_dimension() (hardwareloop method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_dimension"]], "add_evaluator() (hardwareloop method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_evaluator"]], "add_plot() (hardwareloop method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_plot"]], "artifacts (hardwareloopsample property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample.artifacts"]], "axes (hardwareloopplot property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.axes"]], "confidence (evaluatorregistration property)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.confidence"]], "drop (hardwareloopsample property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample.drop"]], "evaluate() (evaluatorregistration method)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.evaluate"]], "evaluations (hardwareloopsample property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopSample.evaluations"]], "evaluator (evaluatorregistration property)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.evaluator"]], "evaluator_index() (hardwareloop method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.evaluator_index"]], "evaluators (hardwareloop property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.evaluators"]], "figure (hardwareloopplot property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.figure"]], "from_yaml() (hardwareloop class method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.from_yaml"]], "generate_result() (evaluatorregistration method)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.generate_result"]], "hardware_loop (hardwareloopplot property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.hardware_loop"]], "hermespy.hardware_loop.hardware_loop": [[55, "module-hermespy.hardware_loop.hardware_loop"]], "manual_triggering (hardwareloop attribute)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.manual_triggering"]], "new_dimension() (hardwareloop method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.new_dimension"]], "num_evaluators (hardwareloop property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.num_evaluators"]], "plot_information (hardwareloop attribute)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.plot_information"]], "plot_mode (evaluatorregistration property)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.plot_mode"]], "prepare_figure() (hardwareloopplot method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.prepare_figure"]], "property_blacklist (hardwareloop attribute)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.property_blacklist"]], "replay() (hardwareloop method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.replay"]], "run() (hardwareloop method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.run"]], "serialized_attributes (hardwareloop attribute)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.serialized_attributes"]], "title (evaluatorregistration property)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.title"]], "title (hardwareloopplot property)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.title"]], "to_yaml() (hardwareloop class method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.to_yaml"]], "tolerance (evaluatorregistration property)": [[55, "hermespy.hardware_loop.hardware_loop.EvaluatorRegistration.tolerance"]], "update_plot() (hardwareloopplot method)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.update_plot"]], "yaml_tag (hardwareloop attribute)": [[55, "hermespy.hardware_loop.hardware_loop.HardwareLoop.yaml_tag"]], "ct (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.CT"]], "calibration (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.Calibration"]], "delaycalibrationbase (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.DelayCalibrationBase"]], "leakagecalibrationbase (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.LeakageCalibrationBase"]], "load() (calibration class method)": [[56, "hermespy.hardware_loop.physical_device.Calibration.Load"]], "nodelaycalibration (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.NoDelayCalibration"]], "noleakagecalibration (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.NoLeakageCalibration"]], "pdt (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.PDT"]], "physicaldevice (class in hermespy.hardware_loop.physical_device)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice"]], "adaptive_sampling (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.adaptive_sampling"]], "correct_receive_delay() (delaycalibrationbase method)": [[56, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.correct_receive_delay"]], "correct_receive_delay() (nodelaycalibration method)": [[56, "hermespy.hardware_loop.physical_device.NoDelayCalibration.correct_receive_delay"]], "correct_transmit_delay() (delaycalibrationbase method)": [[56, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.correct_transmit_delay"]], "correct_transmit_delay() (nodelaycalibration method)": [[56, "hermespy.hardware_loop.physical_device.NoDelayCalibration.correct_transmit_delay"]], "delay (delaycalibrationbase property)": [[56, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.delay"]], "delay (nodelaycalibration property)": [[56, "hermespy.hardware_loop.physical_device.NoDelayCalibration.delay"]], "delay_calibration (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.delay_calibration"]], "device (calibration property)": [[56, "hermespy.hardware_loop.physical_device.Calibration.device"]], "estimate_noise_power() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.estimate_noise_power"]], "from_hdf() (nodelaycalibration class method)": [[56, "hermespy.hardware_loop.physical_device.NoDelayCalibration.from_HDF"]], "from_hdf() (noleakagecalibration class method)": [[56, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.from_HDF"]], "hdf_group_name (calibration attribute)": [[56, "hermespy.hardware_loop.physical_device.Calibration.hdf_group_name"]], "hdf_group_name (delaycalibrationbase attribute)": [[56, "hermespy.hardware_loop.physical_device.DelayCalibrationBase.hdf_group_name"]], "hdf_group_name (leakagecalibrationbase attribute)": [[56, "hermespy.hardware_loop.physical_device.LeakageCalibrationBase.hdf_group_name"]], "hermespy.hardware_loop.physical_device": [[56, "module-hermespy.hardware_loop.physical_device"]], "leakage_calibration (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.leakage_calibration"]], "load_calibration() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.load_calibration"]], "lowpass_bandwidth (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_bandwidth"]], "lowpass_filter (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_filter"]], "max_receive_delay (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_receive_delay"]], "max_sampling_rate (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_sampling_rate"]], "noise_power (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.noise_power"]], "process_input() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.process_input"]], "receive() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.receive"]], "remove_leakage() (leakagecalibrationbase method)": [[56, "hermespy.hardware_loop.physical_device.LeakageCalibrationBase.remove_leakage"]], "remove_leakage() (noleakagecalibration method)": [[56, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.remove_leakage"]], "save() (calibration method)": [[56, "hermespy.hardware_loop.physical_device.Calibration.save"]], "save_calibration() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.save_calibration"]], "to_hdf() (nodelaycalibration method)": [[56, "hermespy.hardware_loop.physical_device.NoDelayCalibration.to_HDF"]], "to_hdf() (noleakagecalibration method)": [[56, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.to_HDF"]], "transmit() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.transmit"]], "trigger() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.trigger"]], "trigger_direct() (physicaldevice method)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.trigger_direct"]], "velocity (physicaldevice property)": [[56, "hermespy.hardware_loop.physical_device.PhysicalDevice.velocity"]], "yaml_tag (nodelaycalibration attribute)": [[56, "hermespy.hardware_loop.physical_device.NoDelayCalibration.yaml_tag"]], "yaml_tag (noleakagecalibration attribute)": [[56, "hermespy.hardware_loop.physical_device.NoLeakageCalibration.yaml_tag"]], "physicaldevicedummy (class in hermespy.hardware_loop.physical_device_dummy)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy"]], "physicalscenariodummy (class in hermespy.hardware_loop.physical_device_dummy)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy"]], "hermespy.hardware_loop.physical_device_dummy": [[57, "module-hermespy.hardware_loop.physical_device_dummy"]], "max_sampling_rate (physicaldevicedummy property)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.max_sampling_rate"]], "new_device() (physicalscenariodummy method)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.new_device"]], "process_input() (physicaldevicedummy method)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.process_input"]], "receive() (physicaldevicedummy method)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.receive"]], "receive_transmission (physicaldevicedummy property)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.receive_transmission"]], "transmit() (physicaldevicedummy method)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.transmit"]], "trigger() (physicaldevicedummy method)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.trigger"]], "trigger_direct() (physicaldevicedummy method)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.trigger_direct"]], "yaml_tag (physicaldevicedummy attribute)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.yaml_tag"]], "yaml_tag (physicalscenariodummy attribute)": [[57, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.yaml_tag"]], "physicalscenario (class in hermespy.hardware_loop.scenario)": [[58, "hermespy.hardware_loop.scenario.PhysicalScenario"]], "physicalscenariotype (class in hermespy.hardware_loop.scenario)": [[58, "hermespy.hardware_loop.scenario.PhysicalScenarioType"]], "simulatedphysicalscenario (class in hermespy.hardware_loop.scenario)": [[58, "hermespy.hardware_loop.scenario.SimulatedPhysicalScenario"]], "add_device() (physicalscenario method)": [[58, "hermespy.hardware_loop.scenario.PhysicalScenario.add_device"]], "hermespy.hardware_loop.scenario": [[58, "module-hermespy.hardware_loop.scenario"]], "receive_devices() (physicalscenario method)": [[58, "hermespy.hardware_loop.scenario.PhysicalScenario.receive_devices"]], "receive_devices() (simulatedphysicalscenario method)": [[58, "hermespy.hardware_loop.scenario.SimulatedPhysicalScenario.receive_devices"]], "usrpdevice (class in hermespy.hardware_loop.uhd.usrp)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice"]], "usrpsystem (class in hermespy.hardware_loop.uhd.system)": [[59, "hermespy.hardware_loop.uhd.system.UsrpSystem"]], "add_device() (usrpsystem method)": [[59, "hermespy.hardware_loop.uhd.system.UsrpSystem.add_device"]], "carrier_frequency (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.carrier_frequency"]], "hermespy.hardware_loop.uhd.system": [[59, "module-hermespy.hardware_loop.uhd.system"]], "hermespy.hardware_loop.uhd.usrp": [[59, "module-hermespy.hardware_loop.uhd.usrp"]], "ip (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.ip"]], "max_sampling_rate (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.max_sampling_rate"]], "new_device() (usrpsystem method)": [[59, "hermespy.hardware_loop.uhd.system.UsrpSystem.new_device"]], "num_appended_zeros (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_appended_zeros"]], "num_prepeneded_zeros (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_prepeneded_zeros"]], "port (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.port"]], "property_blacklist (usrpdevice attribute)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.property_blacklist"]], "rx_gain (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.rx_gain"]], "sampling_rate (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.sampling_rate"]], "scale_transmission (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.scale_transmission"]], "trigger() (usrpdevice method)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.trigger"]], "tx_gain (usrpdevice property)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.tx_gain"]], "yaml_tag (usrpdevice attribute)": [[59, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.yaml_tag"]], "yaml_tag (usrpsystem attribute)": [[59, "hermespy.hardware_loop.uhd.system.UsrpSystem.yaml_tag"]], "artifactplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.ArtifactPlot"]], "devicereceptionplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.DeviceReceptionPlot"]], "devicetransmissionplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.DeviceTransmissionPlot"]], "evaluationplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.EvaluationPlot"]], "eyeplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.EyePlot"]], "hardwareloopdeviceplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot"]], "hardwareloopevaluatorplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot"]], "radarrangeplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.RadarRangePlot"]], "receivedconstellationplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.ReceivedConstellationPlot"]], "signalplot (class in hermespy.hardware_loop.visualizers)": [[60, "hermespy.hardware_loop.visualizers.SignalPlot"]], "device (hardwareloopdeviceplot property)": [[60, "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot.device"]], "evaluator (hardwareloopevaluatorplot property)": [[60, "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot.evaluator"]], "hermespy.hardware_loop.visualizers": [[60, "module-hermespy.hardware_loop.visualizers"]], "jcasreception (class in hermespy.jcas.matched_filtering)": [[62, "hermespy.jcas.matched_filtering.JCASReception"]], "jcastransmission (class in hermespy.jcas.matched_filtering)": [[62, "hermespy.jcas.matched_filtering.JCASTransmission"]], "matchedfilterjcas (class in hermespy.jcas.matched_filtering)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas"]], "device (matchedfilterjcas property)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas.device"]], "frame_duration (matchedfilterjcas property)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas.frame_duration"]], "from_hdf() (jcasreception class method)": [[62, "hermespy.jcas.matched_filtering.JCASReception.from_HDF"]], "from_hdf() (jcastransmission class method)": [[62, "hermespy.jcas.matched_filtering.JCASTransmission.from_HDF"]], "hermespy.jcas.matched_filtering": [[62, "module-hermespy.jcas.matched_filtering"]], "max_range (matchedfilterjcas property)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas.max_range"]], "property_blacklist (matchedfilterjcas attribute)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas.property_blacklist"]], "range_resolution (matchedfilterjcas property)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas.range_resolution"]], "sampling_rate (matchedfilterjcas property)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas.sampling_rate"]], "to_hdf() (jcasreception method)": [[62, "hermespy.jcas.matched_filtering.JCASReception.to_HDF"]], "yaml_tag (matchedfilterjcas attribute)": [[62, "hermespy.jcas.matched_filtering.MatchedFilterJcas.yaml_tag"]], "bitssource (class in hermespy.modem.bits_source)": [[64, "hermespy.modem.bits_source.BitsSource"]], "randombitssource (class in hermespy.modem.bits_source)": [[64, "hermespy.modem.bits_source.RandomBitsSource"]], "streambitssource (class in hermespy.modem.bits_source)": [[64, "hermespy.modem.bits_source.StreamBitsSource"]], "generate_bits() (bitssource method)": [[64, "hermespy.modem.bits_source.BitsSource.generate_bits"]], "generate_bits() (randombitssource method)": [[64, "hermespy.modem.bits_source.RandomBitsSource.generate_bits"]], "generate_bits() (streambitssource method)": [[64, "hermespy.modem.bits_source.StreamBitsSource.generate_bits"]], "hermespy.modem.bits_source": [[64, "module-hermespy.modem.bits_source"]], "yaml_tag (randombitssource attribute)": [[64, "hermespy.modem.bits_source.RandomBitsSource.yaml_tag"]], "biterrorartifact (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.BitErrorArtifact"]], "biterrorevaluation (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.BitErrorEvaluation"]], "biterrorevaluator (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.BitErrorEvaluator"]], "blockerrorartifact (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.BlockErrorArtifact"]], "blockerrorevaluation (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluation"]], "blockerrorevaluator (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluator"]], "communicationevaluator (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.CommunicationEvaluator"]], "frameerrorartifact (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.FrameErrorArtifact"]], "frameerrorevaluation (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluation"]], "frameerrorevaluator (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluator"]], "throughputartifact (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.ThroughputArtifact"]], "throughputevaluation (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.ThroughputEvaluation"]], "throughputevaluator (class in hermespy.modem.evaluators)": [[65, "hermespy.modem.evaluators.ThroughputEvaluator"]], "abbreviation (biterrorevaluator property)": [[65, "hermespy.modem.evaluators.BitErrorEvaluator.abbreviation"]], "abbreviation (blockerrorevaluator property)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluator.abbreviation"]], "abbreviation (frameerrorevaluator property)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluator.abbreviation"]], "abbreviation (throughputevaluator property)": [[65, "hermespy.modem.evaluators.ThroughputEvaluator.abbreviation"]], "artifact() (biterrorevaluation method)": [[65, "hermespy.modem.evaluators.BitErrorEvaluation.artifact"]], "artifact() (blockerrorevaluation method)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluation.artifact"]], "artifact() (frameerrorevaluation method)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluation.artifact"]], "artifact() (throughputevaluation method)": [[65, "hermespy.modem.evaluators.ThroughputEvaluation.artifact"]], "evaluate() (biterrorevaluator method)": [[65, "hermespy.modem.evaluators.BitErrorEvaluator.evaluate"]], "evaluate() (blockerrorevaluator method)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluator.evaluate"]], "evaluate() (frameerrorevaluator method)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluator.evaluate"]], "evaluate() (throughputevaluator method)": [[65, "hermespy.modem.evaluators.ThroughputEvaluator.evaluate"]], "generate_result() (communicationevaluator method)": [[65, "hermespy.modem.evaluators.CommunicationEvaluator.generate_result"]], "hermespy.modem.evaluators": [[65, "module-hermespy.modem.evaluators"]], "receiving_modem (communicationevaluator property)": [[65, "hermespy.modem.evaluators.CommunicationEvaluator.receiving_modem"]], "title (biterrorevaluation property)": [[65, "hermespy.modem.evaluators.BitErrorEvaluation.title"]], "title (biterrorevaluator property)": [[65, "hermespy.modem.evaluators.BitErrorEvaluator.title"]], "title (blockerrorevaluation property)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluation.title"]], "title (blockerrorevaluator property)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluator.title"]], "title (frameerrorevaluation property)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluation.title"]], "title (frameerrorevaluator property)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluator.title"]], "title (throughputevaluation property)": [[65, "hermespy.modem.evaluators.ThroughputEvaluation.title"]], "title (throughputevaluator property)": [[65, "hermespy.modem.evaluators.ThroughputEvaluator.title"]], "transmitting_modem (communicationevaluator property)": [[65, "hermespy.modem.evaluators.CommunicationEvaluator.transmitting_modem"]], "yaml_tag (biterrorevaluator attribute)": [[65, "hermespy.modem.evaluators.BitErrorEvaluator.yaml_tag"]], "yaml_tag (blockerrorevaluator attribute)": [[65, "hermespy.modem.evaluators.BlockErrorEvaluator.yaml_tag"]], "yaml_tag (frameerrorevaluator attribute)": [[65, "hermespy.modem.evaluators.FrameErrorEvaluator.yaml_tag"]], "yaml_tag (throughputevaluator attribute)": [[65, "hermespy.modem.evaluators.ThroughputEvaluator.yaml_tag"]], "basemodem (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.BaseModem"]], "communicationreception (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.CommunicationReception"]], "communicationreceptionframe (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame"]], "communicationtransmission (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.CommunicationTransmission"]], "communicationtransmissionframe (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame"]], "duplexmodem (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.DuplexModem"]], "receivingmodem (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.ReceivingModem"]], "simplexlink (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.SimplexLink"]], "transmittingmodem (class in hermespy.modem.modem)": [[66, "hermespy.modem.modem.TransmittingModem"]], "bits (communicationreception property)": [[66, "hermespy.modem.modem.CommunicationReception.bits"]], "bits (communicationtransmission property)": [[66, "hermespy.modem.modem.CommunicationTransmission.bits"]], "bits (communicationtransmissionframe attribute)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.bits"]], "bits_source (transmittingmodem property)": [[66, "hermespy.modem.modem.TransmittingModem.bits_source"]], "csi (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.csi"]], "csi (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.csi"]], "csi (duplexmodem property)": [[66, "hermespy.modem.modem.DuplexModem.csi"]], "csi (receivingmodem property)": [[66, "hermespy.modem.modem.ReceivingModem.csi"]], "decoded_bits (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_bits"]], "decoded_signal (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_signal"]], "decoded_symbols (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_symbols"]], "device (duplexmodem property)": [[66, "hermespy.modem.modem.DuplexModem.device"]], "device (receivingmodem property)": [[66, "hermespy.modem.modem.ReceivingModem.device"]], "device (transmittingmodem property)": [[66, "hermespy.modem.modem.TransmittingModem.device"]], "encoded_bits (communicationreception property)": [[66, "hermespy.modem.modem.CommunicationReception.encoded_bits"]], "encoded_bits (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.encoded_bits"]], "encoded_bits (communicationtransmissionframe attribute)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_bits"]], "encoded_symbols (communicationtransmissionframe attribute)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_symbols"]], "encoder_manager (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.encoder_manager"]], "equalized_symbols (communicationreception property)": [[66, "hermespy.modem.modem.CommunicationReception.equalized_symbols"]], "equalized_symbols (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.equalized_symbols"]], "frame_duration (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.frame_duration"]], "frames (communicationreception attribute)": [[66, "hermespy.modem.modem.CommunicationReception.frames"]], "frames (communicationtransmission attribute)": [[66, "hermespy.modem.modem.CommunicationTransmission.frames"]], "from_hdf() (communicationreception class method)": [[66, "hermespy.modem.modem.CommunicationReception.from_HDF"]], "from_hdf() (communicationreceptionframe class method)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.from_HDF"]], "from_hdf() (communicationtransmission class method)": [[66, "hermespy.modem.modem.CommunicationTransmission.from_HDF"]], "from_hdf() (communicationtransmissionframe class method)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.from_HDF"]], "hermespy.modem.modem": [[66, "module-hermespy.modem.modem"]], "num_data_bits_per_frame (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.num_data_bits_per_frame"]], "num_frames (communicationreception property)": [[66, "hermespy.modem.modem.CommunicationReception.num_frames"]], "num_frames (communicationtransmission property)": [[66, "hermespy.modem.modem.CommunicationTransmission.num_frames"]], "num_receive_streams (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.num_receive_streams"]], "num_transmit_streams (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.num_transmit_streams"]], "precoding (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.precoding"]], "receive_stream_coding (receivingmodem property)": [[66, "hermespy.modem.modem.ReceivingModem.receive_stream_coding"]], "receiving_device (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.receiving_device"]], "receiving_device (duplexmodem property)": [[66, "hermespy.modem.modem.DuplexModem.receiving_device"]], "receiving_device (receivingmodem property)": [[66, "hermespy.modem.modem.ReceivingModem.receiving_device"]], "receiving_device (simplexlink property)": [[66, "hermespy.modem.modem.SimplexLink.receiving_device"]], "receiving_device (transmittingmodem property)": [[66, "hermespy.modem.modem.TransmittingModem.receiving_device"]], "reference (simplexlink property)": [[66, "hermespy.modem.modem.SimplexLink.reference"]], "sampling_rate (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.sampling_rate"]], "signal (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.signal"]], "signal (communicationtransmissionframe attribute)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.signal"]], "symbols (communicationreception property)": [[66, "hermespy.modem.modem.CommunicationReception.symbols"]], "symbols (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.symbols"]], "symbols (communicationtransmission property)": [[66, "hermespy.modem.modem.CommunicationTransmission.symbols"]], "symbols (communicationtransmissionframe attribute)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.symbols"]], "timestamp (communicationreceptionframe attribute)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.timestamp"]], "timestamp (communicationtransmissionframe attribute)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.timestamp"]], "to_hdf() (communicationreception method)": [[66, "hermespy.modem.modem.CommunicationReception.to_HDF"]], "to_hdf() (communicationreceptionframe method)": [[66, "hermespy.modem.modem.CommunicationReceptionFrame.to_HDF"]], "to_hdf() (communicationtransmission method)": [[66, "hermespy.modem.modem.CommunicationTransmission.to_HDF"]], "to_hdf() (communicationtransmissionframe method)": [[66, "hermespy.modem.modem.CommunicationTransmissionFrame.to_HDF"]], "transmit_stream_coding (transmittingmodem property)": [[66, "hermespy.modem.modem.TransmittingModem.transmit_stream_coding"]], "transmitting_device (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.transmitting_device"]], "transmitting_device (duplexmodem property)": [[66, "hermespy.modem.modem.DuplexModem.transmitting_device"]], "transmitting_device (receivingmodem property)": [[66, "hermespy.modem.modem.ReceivingModem.transmitting_device"]], "transmitting_device (simplexlink property)": [[66, "hermespy.modem.modem.SimplexLink.transmitting_device"]], "transmitting_device (transmittingmodem property)": [[66, "hermespy.modem.modem.TransmittingModem.transmitting_device"]], "waveform_generator (basemodem property)": [[66, "hermespy.modem.modem.BaseModem.waveform_generator"]], "yaml_tag (duplexmodem attribute)": [[66, "hermespy.modem.modem.DuplexModem.yaml_tag"]], "yaml_tag (receivingmodem attribute)": [[66, "hermespy.modem.modem.ReceivingModem.yaml_tag"]], "yaml_tag (simplexlink attribute)": [[66, "hermespy.modem.modem.SimplexLink.yaml_tag"]], "yaml_tag (transmittingmodem attribute)": [[66, "hermespy.modem.modem.TransmittingModem.yaml_tag"]], "dft (class in hermespy.modem.precoding.dft)": [[67, "hermespy.modem.precoding.dft.DFT"]], "decode() (dft method)": [[67, "hermespy.modem.precoding.dft.DFT.decode"]], "encode() (dft method)": [[67, "hermespy.modem.precoding.dft.DFT.encode"]], "hermespy.modem.precoding.dft": [[67, "module-hermespy.modem.precoding.dft"]], "num_input_streams (dft property)": [[67, "hermespy.modem.precoding.dft.DFT.num_input_streams"]], "num_output_streams (dft property)": [[67, "hermespy.modem.precoding.dft.DFT.num_output_streams"]], "yaml_tag (dft attribute)": [[67, "hermespy.modem.precoding.dft.DFT.yaml_tag"]], "maximumratiocombining (class in hermespy.modem.precoding.ratio_combining)": [[68, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining"]], "decode() (maximumratiocombining method)": [[68, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.decode"]], "encode() (maximumratiocombining method)": [[68, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.encode"]], "hermespy.modem.precoding.ratio_combining": [[68, "module-hermespy.modem.precoding.ratio_combining"]], "num_input_streams (maximumratiocombining property)": [[68, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.num_input_streams"]], "num_output_streams (maximumratiocombining property)": [[68, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.num_output_streams"]], "yaml_tag (maximumratiocombining attribute)": [[68, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.yaml_tag"]], "singlecarrier (class in hermespy.modem.precoding.single_carrier)": [[69, "hermespy.modem.precoding.single_carrier.SingleCarrier"]], "decode() (singlecarrier method)": [[69, "hermespy.modem.precoding.single_carrier.SingleCarrier.decode"]], "encode() (singlecarrier method)": [[69, "hermespy.modem.precoding.single_carrier.SingleCarrier.encode"]], "hermespy.modem.precoding.single_carrier": [[69, "module-hermespy.modem.precoding.single_carrier"]], "num_input_streams (singlecarrier property)": [[69, "hermespy.modem.precoding.single_carrier.SingleCarrier.num_input_streams"]], "num_output_streams (singlecarrier property)": [[69, "hermespy.modem.precoding.single_carrier.SingleCarrier.num_output_streams"]], "yaml_tag (singlecarrier attribute)": [[69, "hermespy.modem.precoding.single_carrier.SingleCarrier.yaml_tag"]], "alamouti (class in hermespy.modem.precoding.space_time_block_coding)": [[70, "hermespy.modem.precoding.space_time_block_coding.Alamouti"]], "decode() (alamouti method)": [[70, "hermespy.modem.precoding.space_time_block_coding.Alamouti.decode"]], "encode() (alamouti method)": [[70, "hermespy.modem.precoding.space_time_block_coding.Alamouti.encode"]], "hermespy.modem.precoding.space_time_block_coding": [[70, "module-hermespy.modem.precoding.space_time_block_coding"]], "num_input_streams (alamouti property)": [[70, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_input_streams"]], "num_output_streams (alamouti property)": [[70, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_output_streams"]], "yaml_tag (alamouti attribute)": [[70, "hermespy.modem.precoding.space_time_block_coding.Alamouti.yaml_tag"]], "spatialmultiplexing (class in hermespy.modem.precoding.spatial_multiplexing)": [[71, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing"]], "decode() (spatialmultiplexing method)": [[71, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.decode"]], "encode() (spatialmultiplexing method)": [[71, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.encode"]], "hermespy.modem.precoding.spatial_multiplexing": [[71, "module-hermespy.modem.precoding.spatial_multiplexing"]], "num_input_streams (spatialmultiplexing property)": [[71, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.num_input_streams"]], "num_output_streams (spatialmultiplexing property)": [[71, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.num_output_streams"]], "rate (spatialmultiplexing property)": [[71, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.rate"]], "yaml_tag (spatialmultiplexing attribute)": [[71, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.yaml_tag"]], "symbolprecoder (class in hermespy.modem.precoding.symbol_precoding)": [[72, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder"]], "symbolprecoding (class in hermespy.modem.precoding.symbol_precoding)": [[72, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding"]], "decode() (symbolprecoder method)": [[72, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder.decode"]], "decode() (symbolprecoding method)": [[72, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding.decode"]], "encode() (symbolprecoder method)": [[72, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder.encode"]], "encode() (symbolprecoding method)": [[72, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding.encode"]], "hermespy.modem.precoding.symbol_precoding": [[72, "module-hermespy.modem.precoding.symbol_precoding"]], "yaml_tag (symbolprecoding attribute)": [[72, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding.yaml_tag"]], "data (symboltype attribute)": [[73, "hermespy.modem.symbols.SymbolType.DATA"]], "pilot (symboltype attribute)": [[73, "hermespy.modem.symbols.SymbolType.PILOT"]], "reference (symboltype attribute)": [[73, "hermespy.modem.symbols.SymbolType.REFERENCE"]], "statedsymbols (class in hermespy.modem.symbols)": [[73, "hermespy.modem.symbols.StatedSymbols"]], "symbol (class in hermespy.modem.symbols)": [[73, "hermespy.modem.symbols.Symbol"]], "symboltype (class in hermespy.modem.symbols)": [[73, "hermespy.modem.symbols.SymbolType"]], "symbols (class in hermespy.modem.symbols)": [[73, "hermespy.modem.symbols.Symbols"]], "append_stream() (symbols method)": [[73, "hermespy.modem.symbols.Symbols.append_stream"]], "append_symbols() (symbols method)": [[73, "hermespy.modem.symbols.Symbols.append_symbols"]], "copy() (statedsymbols method)": [[73, "hermespy.modem.symbols.StatedSymbols.copy"]], "copy() (symbols method)": [[73, "hermespy.modem.symbols.Symbols.copy"]], "flag (symbol attribute)": [[73, "hermespy.modem.symbols.Symbol.flag"]], "from_hdf() (statedsymbols class method)": [[73, "hermespy.modem.symbols.StatedSymbols.from_HDF"]], "from_hdf() (symbols class method)": [[73, "hermespy.modem.symbols.Symbols.from_HDF"]], "hermespy.modem.symbols": [[73, "module-hermespy.modem.symbols"]], "num_blocks (symbols property)": [[73, "hermespy.modem.symbols.Symbols.num_blocks"]], "num_streams (symbols property)": [[73, "hermespy.modem.symbols.Symbols.num_streams"]], "num_symbols (symbols property)": [[73, "hermespy.modem.symbols.Symbols.num_symbols"]], "num_transmit_streams (statedsymbols property)": [[73, "hermespy.modem.symbols.StatedSymbols.num_transmit_streams"]], "plot_constellation() (symbols method)": [[73, "hermespy.modem.symbols.Symbols.plot_constellation"]], "raw (symbols property)": [[73, "hermespy.modem.symbols.Symbols.raw"]], "states (statedsymbols property)": [[73, "hermespy.modem.symbols.StatedSymbols.states"]], "to_hdf() (statedsymbols method)": [[73, "hermespy.modem.symbols.StatedSymbols.to_HDF"]], "to_hdf() (symbols method)": [[73, "hermespy.modem.symbols.Symbols.to_HDF"]], "value (symbol attribute)": [[73, "hermespy.modem.symbols.Symbol.value"]], "channelequalization (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.ChannelEqualization"]], "channelestimation (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.ChannelEstimation"]], "configurablepilotwaveform (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.ConfigurablePilotWaveform"]], "custompilotsymbolsequence (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.CustomPilotSymbolSequence"]], "idealchannelestimation (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.IdealChannelEstimation"]], "mappedpilotsymbolsequence (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.MappedPilotSymbolSequence"]], "pilotsymbolsequence (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.PilotSymbolSequence"]], "pilotwaveformgenerator (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.PilotWaveformGenerator"]], "synchronization (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.Synchronization"]], "uniformpilotsymbolsequence (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.UniformPilotSymbolSequence"]], "waveformgenerator (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.WaveformGenerator"]], "waveformtype (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.WaveformType"]], "zeroforcingchannelequalization (class in hermespy.modem.waveform)": [[74, "hermespy.modem.waveform.ZeroForcingChannelEqualization"]], "bandwidth (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.bandwidth"]], "bit_energy (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.bit_energy"]], "bits_per_frame (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.bits_per_frame"]], "bits_per_symbol (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.bits_per_symbol"]], "channel_equalization (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.channel_equalization"]], "channel_estimation (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.channel_estimation"]], "data_rate (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.data_rate"]], "demodulate() (waveformgenerator method)": [[74, "hermespy.modem.waveform.WaveformGenerator.demodulate"]], "equalize_channel() (channelequalization method)": [[74, "hermespy.modem.waveform.ChannelEqualization.equalize_channel"]], "equalize_channel() (zeroforcingchannelequalization method)": [[74, "hermespy.modem.waveform.ZeroForcingChannelEqualization.equalize_channel"]], "equalize_symbols() (waveformgenerator method)": [[74, "hermespy.modem.waveform.WaveformGenerator.equalize_symbols"]], "estimate_channel() (channelestimation method)": [[74, "hermespy.modem.waveform.ChannelEstimation.estimate_channel"]], "estimate_channel() (waveformgenerator method)": [[74, "hermespy.modem.waveform.WaveformGenerator.estimate_channel"]], "frame_duration (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.frame_duration"]], "hermespy.modem.waveform": [[74, "module-hermespy.modem.waveform"]], "map() (waveformgenerator method)": [[74, "hermespy.modem.waveform.WaveformGenerator.map"]], "modem (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.modem"]], "modulate() (waveformgenerator method)": [[74, "hermespy.modem.waveform.WaveformGenerator.modulate"]], "modulation_order (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.modulation_order"]], "oversampling_factor (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.oversampling_factor"]], "pilot_signal (pilotwaveformgenerator property)": [[74, "hermespy.modem.waveform.PilotWaveformGenerator.pilot_signal"]], "pilot_symbol_sequence (configurablepilotwaveform attribute)": [[74, "hermespy.modem.waveform.ConfigurablePilotWaveform.pilot_symbol_sequence"]], "pilot_symbols() (configurablepilotwaveform method)": [[74, "hermespy.modem.waveform.ConfigurablePilotWaveform.pilot_symbols"]], "power (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.power"]], "property_blacklist (channelequalization attribute)": [[74, "hermespy.modem.waveform.ChannelEqualization.property_blacklist"]], "property_blacklist (channelestimation attribute)": [[74, "hermespy.modem.waveform.ChannelEstimation.property_blacklist"]], "property_blacklist (synchronization attribute)": [[74, "hermespy.modem.waveform.Synchronization.property_blacklist"]], "property_blacklist (waveformgenerator attribute)": [[74, "hermespy.modem.waveform.WaveformGenerator.property_blacklist"]], "repeat_pilot_symbol_sequence (configurablepilotwaveform attribute)": [[74, "hermespy.modem.waveform.ConfigurablePilotWaveform.repeat_pilot_symbol_sequence"]], "samples_in_frame (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.samples_in_frame"]], "sampling_rate (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.sampling_rate"]], "sequence (custompilotsymbolsequence property)": [[74, "hermespy.modem.waveform.CustomPilotSymbolSequence.sequence"]], "sequence (pilotsymbolsequence property)": [[74, "hermespy.modem.waveform.PilotSymbolSequence.sequence"]], "sequence (uniformpilotsymbolsequence property)": [[74, "hermespy.modem.waveform.UniformPilotSymbolSequence.sequence"]], "symbol_energy (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.symbol_energy"]], "symbol_precoding_support (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.symbol_precoding_support"]], "symbol_type (waveformgenerator attribute)": [[74, "hermespy.modem.waveform.WaveformGenerator.symbol_type"]], "symbols_per_frame (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.symbols_per_frame"]], "synchronization (waveformgenerator property)": [[74, "hermespy.modem.waveform.WaveformGenerator.synchronization"]], "synchronize() (synchronization method)": [[74, "hermespy.modem.waveform.Synchronization.synchronize"]], "unmap() (waveformgenerator method)": [[74, "hermespy.modem.waveform.WaveformGenerator.unmap"]], "waveform_generator (channelequalization property)": [[74, "hermespy.modem.waveform.ChannelEqualization.waveform_generator"]], "waveform_generator (channelestimation property)": [[74, "hermespy.modem.waveform.ChannelEstimation.waveform_generator"]], "waveform_generator (synchronization property)": [[74, "hermespy.modem.waveform.Synchronization.waveform_generator"]], "yaml_tag (channelequalization attribute)": [[74, "hermespy.modem.waveform.ChannelEqualization.yaml_tag"]], "yaml_tag (channelestimation attribute)": [[74, "hermespy.modem.waveform.ChannelEstimation.yaml_tag"]], "yaml_tag (idealchannelestimation attribute)": [[74, "hermespy.modem.waveform.IdealChannelEstimation.yaml_tag"]], "yaml_tag (synchronization attribute)": [[74, "hermespy.modem.waveform.Synchronization.yaml_tag"]], "yaml_tag (zeroforcingchannelequalization attribute)": [[74, "hermespy.modem.waveform.ZeroForcingChannelEqualization.yaml_tag"]], "chirpfskcorrelationsynchronization (class in hermespy.modem.waveform_chirp_fsk)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKCorrelationSynchronization"]], "chirpfsksynchronization (class in hermespy.modem.waveform_chirp_fsk)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKSynchronization"]], "chirpfskwaveform (class in hermespy.modem.waveform_chirp_fsk)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform"]], "bandwidth (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bandwidth"]], "bit_energy (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bit_energy"]], "bits_per_frame (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bits_per_frame"]], "bits_per_symbol (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bits_per_symbol"]], "chirp_bandwidth (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirp_bandwidth"]], "chirp_duration (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirp_duration"]], "chirps_in_frame (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirps_in_frame"]], "demodulate() (chirpfskwaveform method)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.demodulate"]], "frame_duration (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.frame_duration"]], "freq_difference (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.freq_difference"]], "guard_interval (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.guard_interval"]], "hermespy.modem.waveform_chirp_fsk": [[75, "module-hermespy.modem.waveform_chirp_fsk"]], "map() (chirpfskwaveform method)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.map"]], "modulate() (chirpfskwaveform method)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.modulate"]], "modulation_order (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.modulation_order"]], "num_data_chirps (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_data_chirps"]], "num_pilot_chirps (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_pilot_chirps"]], "pilot_signal (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.pilot_signal"]], "power (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.power"]], "samples_in_chirp (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.samples_in_chirp"]], "samples_in_frame (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.samples_in_frame"]], "sampling_rate (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.sampling_rate"]], "symbol_energy (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_energy"]], "symbol_precoding_support (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_precoding_support"]], "symbol_type (chirpfskwaveform attribute)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_type"]], "symbols_per_frame (chirpfskwaveform property)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbols_per_frame"]], "unmap() (chirpfskwaveform method)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.unmap"]], "yaml_tag (chirpfskcorrelationsynchronization attribute)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKCorrelationSynchronization.yaml_tag"]], "yaml_tag (chirpfsksynchronization attribute)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKSynchronization.yaml_tag"]], "yaml_tag (chirpfskwaveform attribute)": [[75, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.yaml_tag"]], "correlationsynchronization (class in hermespy.modem.waveform_correlation_synchronization)": [[76, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization"]], "pgt (class in hermespy.modem.waveform_correlation_synchronization)": [[76, "hermespy.modem.waveform_correlation_synchronization.PGT"]], "guard_ratio (correlationsynchronization property)": [[76, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.guard_ratio"]], "hermespy.modem.waveform_correlation_synchronization": [[76, "module-hermespy.modem.waveform_correlation_synchronization"]], "synchronize() (correlationsynchronization method)": [[76, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.synchronize"]], "threshold (correlationsynchronization property)": [[76, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.threshold"]], "yaml_tag (correlationsynchronization attribute)": [[76, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.yaml_tag"]], "cyclic (prefixtype attribute)": [[77, "hermespy.modem.waveform_ofdm.PrefixType.CYCLIC"]], "data (elementtype attribute)": [[77, "hermespy.modem.waveform_ofdm.ElementType.DATA"]], "elementtype (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.ElementType"]], "frameelement (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.FrameElement"]], "frameguardsection (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.FrameGuardSection"]], "frameresource (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.FrameResource"]], "framesection (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.FrameSection"]], "framesymbolsection (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection"]], "ideal (referenceposition attribute)": [[77, "hermespy.modem.waveform_ofdm.ReferencePosition.IDEAL"]], "ideal_midamble (referenceposition attribute)": [[77, "hermespy.modem.waveform_ofdm.ReferencePosition.IDEAL_MIDAMBLE"]], "ideal_postamble (referenceposition attribute)": [[77, "hermespy.modem.waveform_ofdm.ReferencePosition.IDEAL_POSTAMBLE"]], "ideal_preamble (referenceposition attribute)": [[77, "hermespy.modem.waveform_ofdm.ReferencePosition.IDEAL_PREAMBLE"]], "none (prefixtype attribute)": [[77, "hermespy.modem.waveform_ofdm.PrefixType.NONE"]], "null (elementtype attribute)": [[77, "hermespy.modem.waveform_ofdm.ElementType.NULL"]], "ofdmchannelequalization (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.OFDMChannelEqualization"]], "ofdmcorrelationsynchronization (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.OFDMCorrelationSynchronization"]], "ofdmidealchannelestimation (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.OFDMIdealChannelEstimation"]], "ofdmleastsquareschannelestimation (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation"]], "ofdmsynchronization (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.OFDMSynchronization"]], "ofdmwaveform (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform"]], "ofdmzeroforcingchannelequalization (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.OFDMZeroForcingChannelEqualization"]], "pilotsection (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.PilotSection"]], "prefixtype (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.PrefixType"]], "reference (elementtype attribute)": [[77, "hermespy.modem.waveform_ofdm.ElementType.REFERENCE"]], "referenceposition (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.ReferencePosition"]], "schmidlcoxpilotsection (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection"]], "schmidlcoxsynchronization (class in hermespy.modem.waveform_ofdm)": [[77, "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization"]], "zeropad (prefixtype attribute)": [[77, "hermespy.modem.waveform_ofdm.PrefixType.ZEROPAD"]], "add_resource() (ofdmwaveform method)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.add_resource"]], "add_section() (ofdmwaveform method)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.add_section"]], "bandwidth (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.bandwidth"]], "bit_energy (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.bit_energy"]], "bits_per_frame (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.bits_per_frame"]], "dc_suppression (ofdmwaveform attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.dc_suppression"]], "demodulate() (frameguardsection method)": [[77, "hermespy.modem.waveform_ofdm.FrameGuardSection.demodulate"]], "demodulate() (framesection method)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.demodulate"]], "demodulate() (framesymbolsection method)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.demodulate"]], "demodulate() (ofdmwaveform method)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.demodulate"]], "demodulate() (pilotsection method)": [[77, "hermespy.modem.waveform_ofdm.PilotSection.demodulate"]], "demodulate() (schmidlcoxpilotsection method)": [[77, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection.demodulate"]], "duration (frameguardsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameGuardSection.duration"]], "elements (frameresource attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.elements"]], "estimate_channel() (ofdmidealchannelestimation method)": [[77, "hermespy.modem.waveform_ofdm.OFDMIdealChannelEstimation.estimate_channel"]], "estimate_channel() (ofdmleastsquareschannelestimation method)": [[77, "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation.estimate_channel"]], "frame (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.frame"]], "frame_duration (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.frame_duration"]], "from_yaml() (pilotsection class method)": [[77, "hermespy.modem.waveform_ofdm.PilotSection.from_yaml"]], "hermespy.modem.waveform_ofdm": [[77, "module-hermespy.modem.waveform_ofdm"]], "map() (ofdmwaveform method)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.map"]], "mask (frameresource property)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.mask"]], "modulate() (frameguardsection method)": [[77, "hermespy.modem.waveform_ofdm.FrameGuardSection.modulate"]], "modulate() (framesection method)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.modulate"]], "modulate() (framesymbolsection method)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.modulate"]], "modulate() (ofdmwaveform method)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.modulate"]], "modulate() (pilotsection method)": [[77, "hermespy.modem.waveform_ofdm.PilotSection.modulate"]], "modulation_order (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.modulation_order"]], "num_references (frameresource property)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.num_references"]], "num_references (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.num_references"]], "num_references (framesymbolsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_references"]], "num_repetitions (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.num_repetitions"]], "num_samples (frameguardsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameGuardSection.num_samples"]], "num_samples (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.num_samples"]], "num_samples (framesymbolsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_samples"]], "num_samples (pilotsection property)": [[77, "hermespy.modem.waveform_ofdm.PilotSection.num_samples"]], "num_samples (schmidlcoxpilotsection property)": [[77, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection.num_samples"]], "num_subcarriers (frameresource property)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.num_subcarriers"]], "num_subcarriers (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.num_subcarriers"]], "num_subcarriers (framesymbolsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_subcarriers"]], "num_subcarriers (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.num_subcarriers"]], "num_symbols (frameresource property)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.num_symbols"]], "num_symbols (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.num_symbols"]], "num_symbols (framesymbolsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_symbols"]], "num_words (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.num_words"]], "num_words (framesymbolsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_words"]], "pattern (framesymbolsection attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.pattern"]], "pick_symbols() (framesection method)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.pick_symbols"]], "pilot_elements (pilotsection property)": [[77, "hermespy.modem.waveform_ofdm.PilotSection.pilot_elements"]], "pilot_section (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.pilot_section"]], "pilot_signal (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.pilot_signal"]], "place_symbols() (framesection method)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.place_symbols"]], "power (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.power"]], "prefix_ratio (frameresource property)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.prefix_ratio"]], "prefix_type (frameresource attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.prefix_type"]], "reference_position (ofdmidealchannelestimation attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMIdealChannelEstimation.reference_position"]], "references_per_frame (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.references_per_frame"]], "repetitions (frameelement attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameElement.repetitions"]], "repetitions (frameresource property)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.repetitions"]], "resource_mask (framesection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSection.resource_mask"]], "resource_mask (framesymbolsection property)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.resource_mask"]], "resources (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.resources"]], "samples_in_frame (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.samples_in_frame"]], "sampling_rate (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.sampling_rate"]], "serialized_attributes (frameelement attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameElement.serialized_attributes"]], "serialized_attributes (frameresource attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.serialized_attributes"]], "serialized_attributes (framesymbolsection attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.serialized_attributes"]], "serialized_attributes (ofdmidealchannelestimation attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMIdealChannelEstimation.serialized_attributes"]], "structure (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.structure"]], "subcarrier_spacing (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.subcarrier_spacing"]], "symbol_energy (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.symbol_energy"]], "symbols_per_frame (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.symbols_per_frame"]], "synchronize() (schmidlcoxsynchronization method)": [[77, "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization.synchronize"]], "to_yaml() (pilotsection class method)": [[77, "hermespy.modem.waveform_ofdm.PilotSection.to_yaml"]], "type (frameelement attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameElement.type"]], "unmap() (ofdmwaveform method)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.unmap"]], "words_per_frame (ofdmwaveform property)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.words_per_frame"]], "yaml_tag (frameelement attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameElement.yaml_tag"]], "yaml_tag (frameguardsection attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameGuardSection.yaml_tag"]], "yaml_tag (frameresource attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameResource.yaml_tag"]], "yaml_tag (framesymbolsection attribute)": [[77, "hermespy.modem.waveform_ofdm.FrameSymbolSection.yaml_tag"]], "yaml_tag (ofdmchannelequalization attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMChannelEqualization.yaml_tag"]], "yaml_tag (ofdmcorrelationsynchronization attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMCorrelationSynchronization.yaml_tag"]], "yaml_tag (ofdmidealchannelestimation attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMIdealChannelEstimation.yaml_tag"]], "yaml_tag (ofdmleastsquareschannelestimation attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation.yaml_tag"]], "yaml_tag (ofdmwaveform attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMWaveform.yaml_tag"]], "yaml_tag (ofdmzeroforcingchannelequalization attribute)": [[77, "hermespy.modem.waveform_ofdm.OFDMZeroForcingChannelEqualization.yaml_tag"]], "yaml_tag (pilotsection attribute)": [[77, "hermespy.modem.waveform_ofdm.PilotSection.yaml_tag"]], "yaml_tag (schmidlcoxpilotsection attribute)": [[77, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection.yaml_tag"]], "yaml_tag (schmidlcoxsynchronization attribute)": [[77, "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization.yaml_tag"]], "fmcwwaveform (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.FMCWWaveform"]], "filteredsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform"]], "raisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform"]], "rectangularwaveform (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.RectangularWaveform"]], "rolledoffsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform"]], "rootraisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform"]], "singlecarrierchannelequalization (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierChannelEqualization"]], "singlecarrierchannelestimation (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierChannelEstimation"]], "singlecarriercorrelationsynchronization (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierCorrelationSynchronization"]], "singlecarrieridealchannelestimation (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation"]], "singlecarrierleastsquareschannelestimation (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation"]], "singlecarrierminimummeansquarechannelequalization (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization"]], "singlecarrierzeroforcingchannelequalization (class in hermespy.modem.waveform_single_carrier)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierZeroForcingChannelEqualization"]], "bandwidth (fmcwwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FMCWWaveform.bandwidth"]], "bandwidth (rectangularwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.RectangularWaveform.bandwidth"]], "bandwidth (rolledoffsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.bandwidth"]], "bit_energy (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.bit_energy"]], "bits_per_frame (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.bits_per_frame"]], "chirp_duration (fmcwwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_duration"]], "chirp_slope (fmcwwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_slope"]], "demodulate() (filteredsinglecarrierwaveform method)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.demodulate"]], "equalize_channel() (singlecarrierminimummeansquarechannelequalization method)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization.equalize_channel"]], "estimate_channel() (singlecarrieridealchannelestimation method)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation.estimate_channel"]], "estimate_channel() (singlecarrierleastsquareschannelestimation method)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation.estimate_channel"]], "filter_length (rolledoffsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.filter_length"]], "guard_interval (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.guard_interval"]], "hermespy.modem.waveform_single_carrier": [[78, "module-hermespy.modem.waveform_single_carrier"]], "map() (filteredsinglecarrierwaveform method)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.map"]], "modulate() (filteredsinglecarrierwaveform method)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulate"]], "modulation_order (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulation_order"]], "num_data_symbols (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_data_symbols"]], "num_guard_samples (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_guard_samples"]], "num_postamble_symbols (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_postamble_symbols"]], "num_preamble_symbols (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_preamble_symbols"]], "pilot_rate (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_rate"]], "pilot_signal (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_signal"]], "plot_filter() (filteredsinglecarrierwaveform method)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter"]], "plot_filter_correlation() (filteredsinglecarrierwaveform method)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter_correlation"]], "power (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.power"]], "property_blacklist (fmcwwaveform attribute)": [[78, "hermespy.modem.waveform_single_carrier.FMCWWaveform.property_blacklist"]], "relative_bandwidth (rectangularwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.RectangularWaveform.relative_bandwidth"]], "relative_bandwidth (rolledoffsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.relative_bandwidth"]], "roll_off (rolledoffsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.roll_off"]], "samples_in_frame (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.samples_in_frame"]], "sampling_rate (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.sampling_rate"]], "symbol_energy (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_energy"]], "symbol_rate (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_rate"]], "symbols_per_frame (filteredsinglecarrierwaveform property)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbols_per_frame"]], "unmap() (filteredsinglecarrierwaveform method)": [[78, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.unmap"]], "yaml_tag (fmcwwaveform attribute)": [[78, "hermespy.modem.waveform_single_carrier.FMCWWaveform.yaml_tag"]], "yaml_tag (raisedcosinewaveform attribute)": [[78, "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform.yaml_tag"]], "yaml_tag (rectangularwaveform attribute)": [[78, "hermespy.modem.waveform_single_carrier.RectangularWaveform.yaml_tag"]], "yaml_tag (rootraisedcosinewaveform attribute)": [[78, "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform.yaml_tag"]], "yaml_tag (singlecarriercorrelationsynchronization attribute)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierCorrelationSynchronization.yaml_tag"]], "yaml_tag (singlecarrieridealchannelestimation attribute)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierIdealChannelEstimation.yaml_tag"]], "yaml_tag (singlecarrierleastsquareschannelestimation attribute)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierLeastSquaresChannelEstimation.yaml_tag"]], "yaml_tag (singlecarrierminimummeansquarechannelequalization attribute)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierMinimumMeanSquareChannelEqualization.yaml_tag"]], "yaml_tag (singlecarrierzeroforcingchannelequalization attribute)": [[78, "hermespy.modem.waveform_single_carrier.SingleCarrierZeroForcingChannelEqualization.yaml_tag"]], "precoder (class in hermespy.precoding.precoding)": [[80, "hermespy.precoding.precoding.Precoder"]], "precodertype (class in hermespy.precoding.precoding)": [[80, "hermespy.precoding.precoding.PrecoderType"]], "precoding (class in hermespy.precoding.precoding)": [[80, "hermespy.precoding.precoding.Precoding"]], "__modem (precoding attribute)": [[80, "hermespy.precoding.precoding.Precoding.__modem"]], "__precoders (precoding attribute)": [[80, "hermespy.precoding.precoding.Precoding.__precoders"]], "from_yaml() (precoding class method)": [[80, "hermespy.precoding.precoding.Precoding.from_yaml"]], "hermespy.precoding.precoding": [[80, "module-hermespy.precoding.precoding"]], "modem (precoding property)": [[80, "hermespy.precoding.precoding.Precoding.modem"]], "num_input_streams (precoder property)": [[80, "hermespy.precoding.precoding.Precoder.num_input_streams"]], "num_input_streams (precoding property)": [[80, "hermespy.precoding.precoding.Precoding.num_input_streams"]], "num_output_streams (precoder property)": [[80, "hermespy.precoding.precoding.Precoder.num_output_streams"]], "num_output_streams (precoding property)": [[80, "hermespy.precoding.precoding.Precoding.num_output_streams"]], "pop_precoder() (precoding method)": [[80, "hermespy.precoding.precoding.Precoding.pop_precoder"]], "precoding (precoder property)": [[80, "hermespy.precoding.precoding.Precoder.precoding"]], "rate (precoder property)": [[80, "hermespy.precoding.precoding.Precoder.rate"]], "rate (precoding property)": [[80, "hermespy.precoding.precoding.Precoding.rate"]], "required_inputs() (precoding method)": [[80, "hermespy.precoding.precoding.Precoding.required_inputs"]], "required_num_input_streams (precoder property)": [[80, "hermespy.precoding.precoding.Precoder.required_num_input_streams"]], "required_num_output_streams (precoder property)": [[80, "hermespy.precoding.precoding.Precoder.required_num_output_streams"]], "required_outputs() (precoding method)": [[80, "hermespy.precoding.precoding.Precoding.required_outputs"]], "to_yaml() (precoding class method)": [[80, "hermespy.precoding.precoding.Precoding.to_yaml"]], "yaml_tag (precoder attribute)": [[80, "hermespy.precoding.precoding.Precoder.yaml_tag"]], "receivestreamcoding (class in hermespy.precoding.stream_precoding)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamCoding"]], "receivestreamdecoder (class in hermespy.precoding.stream_precoding)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder"]], "transmitstreamcoding (class in hermespy.precoding.stream_precoding)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamCoding"]], "transmitstreamencoder (class in hermespy.precoding.stream_precoding)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamEncoder"]], "decode() (receivestreamcoding method)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamCoding.decode"]], "decode_streams() (receivestreamdecoder method)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.decode_streams"]], "encode() (transmitstreamcoding method)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamCoding.encode"]], "encode_streams() (transmitstreamencoder method)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.encode_streams"]], "hermespy.precoding.stream_precoding": [[81, "module-hermespy.precoding.stream_precoding"]], "num_input_streams (receivestreamdecoder property)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_input_streams"]], "num_input_streams (transmitstreamencoder property)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_input_streams"]], "num_output_streams (receivestreamdecoder property)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_output_streams"]], "num_output_streams (transmitstreamencoder property)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_output_streams"]], "num_receive_input_streams (receivestreamdecoder property)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_receive_input_streams"]], "num_receive_output_streams (receivestreamdecoder property)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_receive_output_streams"]], "num_transmit_input_streams (transmitstreamencoder property)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_transmit_input_streams"]], "num_transmit_output_streams (transmitstreamencoder property)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_transmit_output_streams"]], "yaml_tag (receivestreamcoding attribute)": [[81, "hermespy.precoding.stream_precoding.ReceiveStreamCoding.yaml_tag"]], "yaml_tag (transmitstreamcoding attribute)": [[81, "hermespy.precoding.stream_precoding.TransmitStreamCoding.yaml_tag"]], "radarcube (class in hermespy.radar.cube)": [[83, "hermespy.radar.cube.RadarCube"]], "angle_bins (radarcube property)": [[83, "hermespy.radar.cube.RadarCube.angle_bins"]], "data (radarcube property)": [[83, "hermespy.radar.cube.RadarCube.data"]], "doppler_bins (radarcube property)": [[83, "hermespy.radar.cube.RadarCube.doppler_bins"]], "from_hdf() (radarcube class method)": [[83, "hermespy.radar.cube.RadarCube.from_HDF"]], "hermespy.radar.cube": [[83, "module-hermespy.radar.cube"]], "normalize_power() (radarcube method)": [[83, "hermespy.radar.cube.RadarCube.normalize_power"]], "plot_range() (radarcube method)": [[83, "hermespy.radar.cube.RadarCube.plot_range"]], "plot_range_velocity() (radarcube method)": [[83, "hermespy.radar.cube.RadarCube.plot_range_velocity"]], "range_bins (radarcube property)": [[83, "hermespy.radar.cube.RadarCube.range_bins"]], "to_hdf() (radarcube method)": [[83, "hermespy.radar.cube.RadarCube.to_HDF"]], "velocity_bins (radarcube property)": [[83, "hermespy.radar.cube.RadarCube.velocity_bins"]], "fromspherical() (pointdetection class method)": [[84, "hermespy.radar.detection.PointDetection.FromSpherical"]], "maxdetector (class in hermespy.radar.detection)": [[84, "hermespy.radar.detection.MaxDetector"]], "pointdetection (class in hermespy.radar.detection)": [[84, "hermespy.radar.detection.PointDetection"]], "radardetector (class in hermespy.radar.detection)": [[84, "hermespy.radar.detection.RadarDetector"]], "radarpointcloud (class in hermespy.radar.detection)": [[84, "hermespy.radar.detection.RadarPointCloud"]], "thresholddetector (class in hermespy.radar.detection)": [[84, "hermespy.radar.detection.ThresholdDetector"]], "add_point() (radarpointcloud method)": [[84, "hermespy.radar.detection.RadarPointCloud.add_point"]], "detect() (maxdetector method)": [[84, "hermespy.radar.detection.MaxDetector.detect"]], "detect() (radardetector method)": [[84, "hermespy.radar.detection.RadarDetector.detect"]], "detect() (thresholddetector method)": [[84, "hermespy.radar.detection.ThresholdDetector.detect"]], "hermespy.radar.detection": [[84, "module-hermespy.radar.detection"]], "max_range (radarpointcloud property)": [[84, "hermespy.radar.detection.RadarPointCloud.max_range"]], "min_power (thresholddetector property)": [[84, "hermespy.radar.detection.ThresholdDetector.min_power"]], "normalize (thresholddetector property)": [[84, "hermespy.radar.detection.ThresholdDetector.normalize"]], "num_points (radarpointcloud property)": [[84, "hermespy.radar.detection.RadarPointCloud.num_points"]], "peak_detection (thresholddetector property)": [[84, "hermespy.radar.detection.ThresholdDetector.peak_detection"]], "points (radarpointcloud property)": [[84, "hermespy.radar.detection.RadarPointCloud.points"]], "position (pointdetection property)": [[84, "hermespy.radar.detection.PointDetection.position"]], "power (pointdetection property)": [[84, "hermespy.radar.detection.PointDetection.power"]], "title (radarpointcloud property)": [[84, "hermespy.radar.detection.RadarPointCloud.title"]], "velocity (pointdetection property)": [[84, "hermespy.radar.detection.PointDetection.velocity"]], "yaml_tag (maxdetector attribute)": [[84, "hermespy.radar.detection.MaxDetector.yaml_tag"]], "yaml_tag (thresholddetector attribute)": [[84, "hermespy.radar.detection.ThresholdDetector.yaml_tag"]], "detectionprobartifact (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.DetectionProbArtifact"]], "detectionprobevaluator (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.DetectionProbEvaluator"]], "detectionprobabilityevaluation (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.DetectionProbabilityEvaluation"]], "from_hdf() (receiveroperatingcharacteristic class method)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.From_HDF"]], "from_scenarios() (receiveroperatingcharacteristic class method)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.From_Scenarios"]], "radarevaluator (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RadarEvaluator"]], "receiveroperatingcharacteristic (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic"]], "rocartifact (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RocArtifact"]], "rocevaluation (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RocEvaluation"]], "rocevaluationresult (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RocEvaluationResult"]], "rootmeansquareartifact (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RootMeanSquareArtifact"]], "rootmeansquareerror (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RootMeanSquareError"]], "rootmeansquareerrorresult (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RootMeanSquareErrorResult"]], "rootmeansquareevaluation (class in hermespy.radar.evaluators)": [[85, "hermespy.radar.evaluators.RootMeanSquareEvaluation"]], "abbreviation (detectionprobevaluator property)": [[85, "hermespy.radar.evaluators.DetectionProbEvaluator.abbreviation"]], "abbreviation (receiveroperatingcharacteristic property)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.abbreviation"]], "abbreviation (rootmeansquareerror property)": [[85, "hermespy.radar.evaluators.RootMeanSquareError.abbreviation"]], "artifact() (detectionprobabilityevaluation method)": [[85, "hermespy.radar.evaluators.DetectionProbabilityEvaluation.artifact"]], "artifact() (rocevaluation method)": [[85, "hermespy.radar.evaluators.RocEvaluation.artifact"]], "artifact() (rootmeansquareevaluation method)": [[85, "hermespy.radar.evaluators.RootMeanSquareEvaluation.artifact"]], "cummulation (rootmeansquareartifact property)": [[85, "hermespy.radar.evaluators.RootMeanSquareArtifact.cummulation"]], "data_h0 (rocevaluation attribute)": [[85, "hermespy.radar.evaluators.RocEvaluation.data_h0"]], "data_h1 (rocevaluation attribute)": [[85, "hermespy.radar.evaluators.RocEvaluation.data_h1"]], "evaluate() (detectionprobevaluator method)": [[85, "hermespy.radar.evaluators.DetectionProbEvaluator.evaluate"]], "evaluate() (receiveroperatingcharacteristic method)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.evaluate"]], "evaluate() (rootmeansquareerror method)": [[85, "hermespy.radar.evaluators.RootMeanSquareError.evaluate"]], "generate_result() (detectionprobevaluator method)": [[85, "hermespy.radar.evaluators.DetectionProbEvaluator.generate_result"]], "generate_result() (radarevaluator method)": [[85, "hermespy.radar.evaluators.RadarEvaluator.generate_result"]], "generate_result() (receiveroperatingcharacteristic method)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.generate_result"]], "generate_result() (rootmeansquareerror method)": [[85, "hermespy.radar.evaluators.RootMeanSquareError.generate_result"]], "h0_value (rocartifact property)": [[85, "hermespy.radar.evaluators.RocArtifact.h0_value"]], "h1_value (rocartifact property)": [[85, "hermespy.radar.evaluators.RocArtifact.h1_value"]], "hermespy.radar.evaluators": [[85, "module-hermespy.radar.evaluators"]], "num_errors (rootmeansquareartifact property)": [[85, "hermespy.radar.evaluators.RootMeanSquareArtifact.num_errors"]], "radar_channel (radarevaluator property)": [[85, "hermespy.radar.evaluators.RadarEvaluator.radar_channel"]], "receiving_radar (radarevaluator property)": [[85, "hermespy.radar.evaluators.RadarEvaluator.receiving_radar"]], "title (detectionprobevaluator property)": [[85, "hermespy.radar.evaluators.DetectionProbEvaluator.title"]], "title (receiveroperatingcharacteristic property)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.title"]], "title (rocevaluationresult property)": [[85, "hermespy.radar.evaluators.RocEvaluationResult.title"]], "title (rootmeansquareerror property)": [[85, "hermespy.radar.evaluators.RootMeanSquareError.title"]], "to_array() (rocevaluationresult method)": [[85, "hermespy.radar.evaluators.RocEvaluationResult.to_array"]], "to_scalar() (rootmeansquareartifact method)": [[85, "hermespy.radar.evaluators.RootMeanSquareArtifact.to_scalar"]], "yaml_tag (detectionprobevaluator attribute)": [[85, "hermespy.radar.evaluators.DetectionProbEvaluator.yaml_tag"]], "yaml_tag (receiveroperatingcharacteristic attribute)": [[85, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.yaml_tag"]], "fmcw (class in hermespy.radar.fmcw)": [[86, "hermespy.radar.fmcw.FMCW"]], "adc_sampling_rate (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.adc_sampling_rate"]], "bandwidth (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.bandwidth"]], "chirp_duration (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.chirp_duration"]], "energy (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.energy"]], "estimate() (fmcw method)": [[86, "hermespy.radar.fmcw.FMCW.estimate"]], "frame_duration (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.frame_duration"]], "hermespy.radar.fmcw": [[86, "module-hermespy.radar.fmcw"]], "max_range (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.max_range"]], "max_relative_doppler (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.max_relative_doppler"]], "num_chirps (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.num_chirps"]], "ping() (fmcw method)": [[86, "hermespy.radar.fmcw.FMCW.ping"]], "power (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.power"]], "pulse_rep_interval (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.pulse_rep_interval"]], "range_resolution (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.range_resolution"]], "relative_doppler_bins (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.relative_doppler_bins"]], "relative_doppler_resolution (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.relative_doppler_resolution"]], "sampling_rate (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.sampling_rate"]], "slope (fmcw property)": [[86, "hermespy.radar.fmcw.FMCW.slope"]], "yaml_tag (fmcw attribute)": [[86, "hermespy.radar.fmcw.FMCW.yaml_tag"]], "radar (class in hermespy.radar.radar)": [[87, "hermespy.radar.radar.Radar"]], "radarreception (class in hermespy.radar.radar)": [[87, "hermespy.radar.radar.RadarReception"]], "radartransmission (class in hermespy.radar.radar)": [[87, "hermespy.radar.radar.RadarTransmission"]], "radarwaveform (class in hermespy.radar.radar)": [[87, "hermespy.radar.radar.RadarWaveform"]], "cloud (radarreception attribute)": [[87, "hermespy.radar.radar.RadarReception.cloud"]], "cube (radarreception attribute)": [[87, "hermespy.radar.radar.RadarReception.cube"]], "detector (radar property)": [[87, "hermespy.radar.radar.Radar.detector"]], "energy (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.energy"]], "estimate() (radarwaveform method)": [[87, "hermespy.radar.radar.RadarWaveform.estimate"]], "frame_duration (radar property)": [[87, "hermespy.radar.radar.Radar.frame_duration"]], "frame_duration (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.frame_duration"]], "from_hdf() (radarreception class method)": [[87, "hermespy.radar.radar.RadarReception.from_HDF"]], "hermespy.radar.radar": [[87, "module-hermespy.radar.radar"]], "max_range (radar property)": [[87, "hermespy.radar.radar.Radar.max_range"]], "max_range (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.max_range"]], "max_relative_doppler (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.max_relative_doppler"]], "ping() (radarwaveform method)": [[87, "hermespy.radar.radar.RadarWaveform.ping"]], "power (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.power"]], "property_blacklist (radar attribute)": [[87, "hermespy.radar.radar.Radar.property_blacklist"]], "range_bins (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.range_bins"]], "range_resolution (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.range_resolution"]], "receive_beamformer (radar property)": [[87, "hermespy.radar.radar.Radar.receive_beamformer"]], "relative_doppler_bins (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.relative_doppler_bins"]], "relative_doppler_resolution (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.relative_doppler_resolution"]], "sampling_rate (radar property)": [[87, "hermespy.radar.radar.Radar.sampling_rate"]], "sampling_rate (radarwaveform property)": [[87, "hermespy.radar.radar.RadarWaveform.sampling_rate"]], "to_hdf() (radarreception method)": [[87, "hermespy.radar.radar.RadarReception.to_HDF"]], "transmit_beamformer (radar property)": [[87, "hermespy.radar.radar.Radar.transmit_beamformer"]], "velocity_resolution (radar property)": [[87, "hermespy.radar.radar.Radar.velocity_resolution"]], "waveform (radar property)": [[87, "hermespy.radar.radar.Radar.waveform"]], "yaml_tag (radar attribute)": [[87, "hermespy.radar.radar.Radar.yaml_tag"]], "analogdigitalconverter (class in hermespy.simulation.analog_digital_converter)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter"]], "automaticgaincontrol (class in hermespy.simulation.analog_digital_converter)": [[89, "hermespy.simulation.analog_digital_converter.AutomaticGainControl"]], "gain (class in hermespy.simulation.analog_digital_converter)": [[89, "hermespy.simulation.analog_digital_converter.Gain"]], "gaincontrolbase (class in hermespy.simulation.analog_digital_converter)": [[89, "hermespy.simulation.analog_digital_converter.GainControlBase"]], "gaincontroltype (class in hermespy.simulation.analog_digital_converter)": [[89, "hermespy.simulation.analog_digital_converter.GainControlType"]], "gaintype (class in hermespy.simulation.analog_digital_converter)": [[89, "hermespy.simulation.analog_digital_converter.GainType"]], "max_amplitude (gaincontroltype attribute)": [[89, "hermespy.simulation.analog_digital_converter.GainControlType.MAX_AMPLITUDE"]], "mid_riser (quantizertype attribute)": [[89, "hermespy.simulation.analog_digital_converter.QuantizerType.MID_RISER"]], "mid_tread (quantizertype attribute)": [[89, "hermespy.simulation.analog_digital_converter.QuantizerType.MID_TREAD"]], "none (gaincontroltype attribute)": [[89, "hermespy.simulation.analog_digital_converter.GainControlType.NONE"]], "quantizertype (class in hermespy.simulation.analog_digital_converter)": [[89, "hermespy.simulation.analog_digital_converter.QuantizerType"]], "rms_amplitude (gaincontroltype attribute)": [[89, "hermespy.simulation.analog_digital_converter.GainControlType.RMS_AMPLITUDE"]], "adjust_signal() (gaincontrolbase method)": [[89, "hermespy.simulation.analog_digital_converter.GainControlBase.adjust_signal"]], "agc_type (automaticgaincontrol property)": [[89, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.agc_type"]], "backoff (automaticgaincontrol property)": [[89, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.backoff"]], "convert() (analogdigitalconverter method)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.convert"]], "estimate_gain() (automaticgaincontrol method)": [[89, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.estimate_gain"]], "estimate_gain() (gain method)": [[89, "hermespy.simulation.analog_digital_converter.Gain.estimate_gain"]], "estimate_gain() (gaincontrolbase method)": [[89, "hermespy.simulation.analog_digital_converter.GainControlBase.estimate_gain"]], "gain (analogdigitalconverter attribute)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.gain"]], "gain (gain property)": [[89, "hermespy.simulation.analog_digital_converter.Gain.gain"]], "hermespy.simulation.analog_digital_converter": [[89, "module-hermespy.simulation.analog_digital_converter"]], "num_quantization_bits (analogdigitalconverter property)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.num_quantization_bits"]], "num_quantization_levels (analogdigitalconverter property)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.num_quantization_levels"]], "plot_quantizer() (analogdigitalconverter method)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.plot_quantizer"]], "quantizer_type (analogdigitalconverter property)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.quantizer_type"]], "rescale_quantization (gaincontrolbase property)": [[89, "hermespy.simulation.analog_digital_converter.GainControlBase.rescale_quantization"]], "scale_quantized_signal() (gaincontrolbase method)": [[89, "hermespy.simulation.analog_digital_converter.GainControlBase.scale_quantized_signal"]], "yaml_tag (analogdigitalconverter attribute)": [[89, "hermespy.simulation.analog_digital_converter.AnalogDigitalConverter.yaml_tag"]], "yaml_tag (automaticgaincontrol attribute)": [[89, "hermespy.simulation.analog_digital_converter.AutomaticGainControl.yaml_tag"]], "yaml_tag (gain attribute)": [[89, "hermespy.simulation.analog_digital_converter.Gain.yaml_tag"]], "coupling (class in hermespy.simulation.coupling.coupling)": [[90, "hermespy.simulation.coupling.coupling.Coupling"]], "device (coupling property)": [[90, "hermespy.simulation.coupling.coupling.Coupling.device"]], "hermespy.simulation.coupling.coupling": [[90, "module-hermespy.simulation.coupling.coupling"]], "receive() (coupling method)": [[90, "hermespy.simulation.coupling.coupling.Coupling.receive"]], "transmit() (coupling method)": [[90, "hermespy.simulation.coupling.coupling.Coupling.transmit"]], "impedancecoupling (class in hermespy.simulation.coupling.impedance)": [[91, "hermespy.simulation.coupling.impedance.ImpedanceCoupling"]], "hermespy.simulation.coupling.impedance": [[91, "module-hermespy.simulation.coupling.impedance"]], "matching_impedance (impedancecoupling property)": [[91, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.matching_impedance"]], "receive_correlation (impedancecoupling property)": [[91, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_correlation"]], "receive_impedance (impedancecoupling property)": [[91, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_impedance"]], "transmit_correlation (impedancecoupling property)": [[91, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_correlation"]], "transmit_impedance (impedancecoupling property)": [[91, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_impedance"]], "yaml_tag (impedancecoupling attribute)": [[91, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.yaml_tag"]], "perfectcoupling (class in hermespy.simulation.coupling.perfect)": [[92, "hermespy.simulation.coupling.perfect.PerfectCoupling"]], "hermespy.simulation.coupling.perfect": [[92, "module-hermespy.simulation.coupling.perfect"]], "yaml_tag (perfectcoupling attribute)": [[92, "hermespy.simulation.coupling.perfect.PerfectCoupling.yaml_tag"]], "isolation (class in hermespy.simulation.isolation.isolation)": [[93, "hermespy.simulation.isolation.isolation.Isolation"]], "device (isolation property)": [[93, "hermespy.simulation.isolation.isolation.Isolation.device"]], "hermespy.simulation.isolation.isolation": [[93, "module-hermespy.simulation.isolation.isolation"]], "leak() (isolation method)": [[93, "hermespy.simulation.isolation.isolation.Isolation.leak"]], "hermespy.simulation.isolation.impedance": [[94, "module-hermespy.simulation.isolation.impedance"]], "perfectisolation (class in hermespy.simulation.isolation.perfect)": [[95, "hermespy.simulation.isolation.perfect.PerfectIsolation"]], "hermespy.simulation.isolation.perfect": [[95, "module-hermespy.simulation.isolation.perfect"]], "leak() (perfectisolation method)": [[95, "hermespy.simulation.isolation.perfect.PerfectIsolation.leak"]], "yaml_tag (perfectisolation attribute)": [[95, "hermespy.simulation.isolation.perfect.PerfectIsolation.yaml_tag"]], "specificisolation (class in hermespy.simulation.isolation.specific)": [[96, "hermespy.simulation.isolation.specific.SpecificIsolation"]], "hermespy.simulation.isolation.specific": [[96, "module-hermespy.simulation.isolation.specific"]], "isolation (specificisolation property)": [[96, "hermespy.simulation.isolation.specific.SpecificIsolation.isolation"]], "yaml_tag (specificisolation attribute)": [[96, "hermespy.simulation.isolation.specific.SpecificIsolation.yaml_tag"]], "awgn (class in hermespy.simulation.noise.noise)": [[97, "hermespy.simulation.noise.noise.AWGN"]], "awgnrealization (class in hermespy.simulation.noise.noise)": [[97, "hermespy.simulation.noise.noise.AWGNRealization"]], "noise (class in hermespy.simulation.noise.noise)": [[97, "hermespy.simulation.noise.noise.Noise"]], "noiserealization (class in hermespy.simulation.noise.noise)": [[97, "hermespy.simulation.noise.noise.NoiseRealization"]], "noiserealizationtype (class in hermespy.simulation.noise.noise)": [[97, "hermespy.simulation.noise.noise.NoiseRealizationType"]], "add() (noise method)": [[97, "hermespy.simulation.noise.noise.Noise.add"]], "add_to() (awgnrealization method)": [[97, "hermespy.simulation.noise.noise.AWGNRealization.add_to"]], "add_to() (noiserealization method)": [[97, "hermespy.simulation.noise.noise.NoiseRealization.add_to"]], "hermespy.simulation.noise.noise": [[97, "module-hermespy.simulation.noise.noise"]], "power (noise property)": [[97, "hermespy.simulation.noise.noise.Noise.power"]], "power (noiserealization property)": [[97, "hermespy.simulation.noise.noise.NoiseRealization.power"]], "property_blacklist (awgn attribute)": [[97, "hermespy.simulation.noise.noise.AWGN.property_blacklist"]], "realize() (awgn method)": [[97, "hermespy.simulation.noise.noise.AWGN.realize"]], "realize() (noise method)": [[97, "hermespy.simulation.noise.noise.Noise.realize"]], "yaml_tag (awgn attribute)": [[97, "hermespy.simulation.noise.noise.AWGN.yaml_tag"]], "rfchain (class in hermespy.simulation.rf_chain.rf_chain)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain"]], "add_iq_imbalance() (rfchain method)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.add_iq_imbalance"]], "amplitude_imbalance (rfchain property)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.amplitude_imbalance"]], "hermespy.simulation.rf_chain.rf_chain": [[98, "module-hermespy.simulation.rf_chain.rf_chain"]], "phase_noise (rfchain property)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_noise"]], "phase_offset (rfchain property)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_offset"]], "power_amplifier (rfchain property)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.power_amplifier"]], "receive() (rfchain method)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.receive"]], "transmit() (rfchain method)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.transmit"]], "yaml_tag (rfchain attribute)": [[98, "hermespy.simulation.rf_chain.rf_chain.RfChain.yaml_tag"]], "k0 (oscillatorphasenoise property)": [[99, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K0"]], "k2 (oscillatorphasenoise property)": [[99, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K2"]], "k3 (oscillatorphasenoise property)": [[99, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K3"]], "nophasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[99, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise"]], "oscillatorphasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[99, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise"]], "phasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[99, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise"]], "add_noise() (nophasenoise method)": [[99, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.add_noise"]], "add_noise() (oscillatorphasenoise method)": [[99, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.add_noise"]], "add_noise() (phasenoise method)": [[99, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise.add_noise"]], "hermespy.simulation.rf_chain.phase_noise": [[99, "module-hermespy.simulation.rf_chain.phase_noise"]], "yaml_tag (nophasenoise attribute)": [[99, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.yaml_tag"]], "yaml_tag (oscillatorphasenoise attribute)": [[99, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.yaml_tag"]], "clippingpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[100, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier"]], "custompoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[100, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier"]], "poweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier"]], "rapppoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[100, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier"]], "salehpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier"]], "adjust_power (poweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.adjust_power"]], "amplitude_alpha (salehpoweramplifier property)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_alpha"]], "amplitude_beta (salehpoweramplifier property)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_beta"]], "gain (custompoweramplifier property)": [[100, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.gain"]], "hermespy.simulation.rf_chain.power_amplifier": [[100, "module-hermespy.simulation.rf_chain.power_amplifier"]], "input (custompoweramplifier property)": [[100, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.input"]], "model() (clippingpoweramplifier method)": [[100, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.model"]], "model() (custompoweramplifier method)": [[100, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.model"]], "model() (poweramplifier method)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.model"]], "model() (rapppoweramplifier method)": [[100, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.model"]], "model() (salehpoweramplifier method)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.model"]], "phase (custompoweramplifier property)": [[100, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.phase"]], "phase_alpha (salehpoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_alpha"]], "phase_beta (salehpoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_beta"]], "plot() (poweramplifier method)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.plot"]], "saturation_amplitude (poweramplifier property)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.saturation_amplitude"]], "send() (poweramplifier method)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.send"]], "serialized_attributes (custompoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.serialized_attributes"]], "serialized_attributes (poweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.serialized_attributes"]], "serialized_attributes (salehpoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.serialized_attributes"]], "smoothness_factor (rapppoweramplifier property)": [[100, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.smoothness_factor"]], "yaml_tag (clippingpoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.yaml_tag"]], "yaml_tag (custompoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.yaml_tag"]], "yaml_tag (poweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.yaml_tag"]], "yaml_tag (rapppoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.yaml_tag"]], "yaml_tag (salehpoweramplifier attribute)": [[100, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.yaml_tag"]], "from_deviceoutput() (simulateddeviceoutput class method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.From_DeviceOutput"]], "from_processedsimulateddeviceinput() (simulateddevicereception class method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceReception.From_ProcessedSimulatedDeviceInput"]], "from_simulateddeviceoutput() (simulateddevicetransmission class method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission.From_SimulatedDeviceOutput"]], "offsettrigger (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.OffsetTrigger"]], "processedsimulateddeviceinput (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput"]], "randomtrigger (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.RandomTrigger"]], "simulateddevice (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice"]], "simulateddeviceoutput (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceOutput"]], "simulateddevicereceiverealization (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization"]], "simulateddevicereception (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceReception"]], "simulateddevicetransmission (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission"]], "statictrigger (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.StaticTrigger"]], "triggermodel (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.TriggerModel"]], "triggerrealization (class in hermespy.simulation.simulated_device)": [[101, "hermespy.simulation.simulated_device.TriggerRealization"]], "adc (simulateddevice attribute)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.adc"]], "add_device() (triggermodel method)": [[101, "hermespy.simulation.simulated_device.TriggerModel.add_device"]], "attached (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.attached"]], "baseband_signal (processedsimulateddeviceinput property)": [[101, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.baseband_signal"]], "carrier_frequency (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.carrier_frequency"]], "compute_num_offset_samples() (triggerrealization method)": [[101, "hermespy.simulation.simulated_device.TriggerRealization.compute_num_offset_samples"]], "coupling (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.coupling"]], "devices (triggermodel property)": [[101, "hermespy.simulation.simulated_device.TriggerModel.devices"]], "emerging_signals (simulateddeviceoutput property)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.emerging_signals"]], "from_hdf() (processedsimulateddeviceinput class method)": [[101, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.from_HDF"]], "from_hdf() (simulateddeviceoutput class method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.from_HDF"]], "from_hdf() (simulateddevicereception class method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceReception.from_HDF"]], "from_hdf() (simulateddevicetransmission class method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission.from_HDF"]], "from_hdf() (triggerrealization class method)": [[101, "hermespy.simulation.simulated_device.TriggerRealization.from_HDF"]], "generate_output() (simulateddevice method)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.generate_output"]], "hermespy.simulation.simulated_device": [[101, "module-hermespy.simulation.simulated_device"]], "input (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.input"]], "isolation (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.isolation"]], "leaking_signal (processedsimulateddeviceinput property)": [[101, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.leaking_signal"]], "noise (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.noise"]], "noise_realizations (simulateddevicereceiverealization property)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceReceiveRealization.noise_realizations"]], "num_devices (triggermodel property)": [[101, "hermespy.simulation.simulated_device.TriggerModel.num_devices"]], "num_offset_samples (offsettrigger property)": [[101, "hermespy.simulation.simulated_device.OffsetTrigger.num_offset_samples"]], "num_offset_samples (triggerrealization property)": [[101, "hermespy.simulation.simulated_device.TriggerRealization.num_offset_samples"]], "operator_separation (processedsimulateddeviceinput property)": [[101, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.operator_separation"]], "operator_separation (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.operator_separation"]], "operator_separation (simulateddeviceoutput property)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.operator_separation"]], "output (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.output"]], "process_from_realization() (simulateddevice method)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.process_from_realization"]], "process_input() (simulateddevice method)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.process_input"]], "property_blacklist (simulateddevice attribute)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.property_blacklist"]], "realization (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.realization"]], "realize() (offsettrigger method)": [[101, "hermespy.simulation.simulated_device.OffsetTrigger.realize"]], "realize() (randomtrigger method)": [[101, "hermespy.simulation.simulated_device.RandomTrigger.realize"]], "realize() (statictrigger method)": [[101, "hermespy.simulation.simulated_device.StaticTrigger.realize"]], "realize() (triggermodel method)": [[101, "hermespy.simulation.simulated_device.TriggerModel.realize"]], "realize_reception() (simulateddevice method)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.realize_reception"]], "receive() (simulateddevice method)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.receive"]], "remove_device() (triggermodel method)": [[101, "hermespy.simulation.simulated_device.TriggerModel.remove_device"]], "rf_chain (simulateddevice attribute)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.rf_chain"]], "sampling_rate (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.sampling_rate"]], "sampling_rate (triggerrealization property)": [[101, "hermespy.simulation.simulated_device.TriggerRealization.sampling_rate"]], "scenario (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.scenario"]], "serialized_attribute (simulateddevice attribute)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.serialized_attribute"]], "snr (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.snr"]], "to_hdf() (processedsimulateddeviceinput method)": [[101, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.to_HDF"]], "to_hdf() (simulateddeviceoutput method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.to_HDF"]], "to_hdf() (simulateddevicereception method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceReception.to_HDF"]], "to_hdf() (simulateddevicetransmission method)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission.to_HDF"]], "to_hdf() (triggerrealization method)": [[101, "hermespy.simulation.simulated_device.TriggerRealization.to_HDF"]], "transmit() (simulateddevice method)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.transmit"]], "trigger_delay (triggerrealization property)": [[101, "hermespy.simulation.simulated_device.TriggerRealization.trigger_delay"]], "trigger_model (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.trigger_model"]], "trigger_realization (processedsimulateddeviceinput property)": [[101, "hermespy.simulation.simulated_device.ProcessedSimulatedDeviceInput.trigger_realization"]], "trigger_realization (simulateddeviceoutput property)": [[101, "hermespy.simulation.simulated_device.SimulatedDeviceOutput.trigger_realization"]], "velocity (simulateddevice property)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.velocity"]], "yaml_tag (offsettrigger attribute)": [[101, "hermespy.simulation.simulated_device.OffsetTrigger.yaml_tag"]], "yaml_tag (randomtrigger attribute)": [[101, "hermespy.simulation.simulated_device.RandomTrigger.yaml_tag"]], "yaml_tag (simulateddevice attribute)": [[101, "hermespy.simulation.simulated_device.SimulatedDevice.yaml_tag"]], "yaml_tag (statictrigger attribute)": [[101, "hermespy.simulation.simulated_device.StaticTrigger.yaml_tag"]], "simulateddrop (class in hermespy.simulation.simulation)": [[102, "hermespy.simulation.simulation.SimulatedDrop"]], "simulation (class in hermespy.simulation.simulation)": [[102, "hermespy.simulation.simulation.Simulation"]], "simulationrunner (class in hermespy.simulation.simulation)": [[102, "hermespy.simulation.simulation.SimulationRunner"]], "simulationscenario (class in hermespy.simulation.simulation)": [[102, "hermespy.simulation.simulation.SimulationScenario"]], "add_device() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.add_device"]], "arriving_channels() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.arriving_channels"]], "channel() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.channel"]], "channel_realizations (simulateddrop property)": [[102, "hermespy.simulation.simulation.SimulatedDrop.channel_realizations"]], "channels (simulationscenario property)": [[102, "hermespy.simulation.simulation.SimulationScenario.channels"]], "console (simulation property)": [[102, "hermespy.simulation.simulation.Simulation.console"]], "console_mode (simulation property)": [[102, "hermespy.simulation.simulation.Simulation.console_mode"]], "departing_channels() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.departing_channels"]], "dump_results (simulation attribute)": [[102, "hermespy.simulation.simulation.Simulation.dump_results"]], "from_hdf() (simulateddrop class method)": [[102, "hermespy.simulation.simulation.SimulatedDrop.from_HDF"]], "from_yaml() (simulation class method)": [[102, "hermespy.simulation.simulation.Simulation.from_yaml"]], "generate_outputs() (simulationrunner method)": [[102, "hermespy.simulation.simulation.SimulationRunner.generate_outputs"]], "hermespy.simulation.simulation": [[102, "module-hermespy.simulation.simulation"]], "new_device() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.new_device"]], "num_samples (simulation property)": [[102, "hermespy.simulation.simulation.Simulation.num_samples"]], "plot_results (simulation attribute)": [[102, "hermespy.simulation.simulation.Simulation.plot_results"]], "process_inputs() (simulationrunner method)": [[102, "hermespy.simulation.simulation.SimulationRunner.process_inputs"]], "process_inputs() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.process_inputs"]], "propagate() (simulationrunner method)": [[102, "hermespy.simulation.simulation.SimulationRunner.propagate"]], "propagate() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.propagate"]], "property_blacklist (simulation attribute)": [[102, "hermespy.simulation.simulation.Simulation.property_blacklist"]], "receive_devices() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.receive_devices"]], "receive_operators() (simulationrunner method)": [[102, "hermespy.simulation.simulation.SimulationRunner.receive_operators"]], "run() (simulation method)": [[102, "hermespy.simulation.simulation.Simulation.run"]], "set_channel() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.set_channel"]], "snr (simulationscenario property)": [[102, "hermespy.simulation.simulation.SimulationScenario.snr"]], "snr_type (simulationscenario property)": [[102, "hermespy.simulation.simulation.SimulationScenario.snr_type"]], "to_hdf() (simulateddrop method)": [[102, "hermespy.simulation.simulation.SimulatedDrop.to_HDF"]], "to_yaml() (simulation class method)": [[102, "hermespy.simulation.simulation.Simulation.to_yaml"]], "transmit_devices() (simulationscenario method)": [[102, "hermespy.simulation.simulation.SimulationScenario.transmit_devices"]], "transmit_operators() (simulationrunner method)": [[102, "hermespy.simulation.simulation.SimulationRunner.transmit_operators"]], "yaml_tag (simulation attribute)": [[102, "hermespy.simulation.simulation.Simulation.yaml_tag"]], "yaml_tag (simulationscenario attribute)": [[102, "hermespy.simulation.simulation.SimulationScenario.yaml_tag"]], "amplitude (dbconversiontype attribute)": [[104, "hermespy.tools.math.DbConversionType.AMPLITUDE"]], "dbconversiontype (class in hermespy.tools.math)": [[104, "hermespy.tools.math.DbConversionType"]], "power (dbconversiontype attribute)": [[104, "hermespy.tools.math.DbConversionType.POWER"]], "amplitude_path_loss() (in module hermespy.tools.math)": [[104, "hermespy.tools.math.amplitude_path_loss"]], "db2lin() (in module hermespy.tools.math)": [[104, "hermespy.tools.math.db2lin"]], "hermespy.tools.math": [[104, "module-hermespy.tools.math"]], "lin2db() (in module hermespy.tools.math)": [[104, "hermespy.tools.math.lin2db"]], "marcum_q() (in module hermespy.tools.math)": [[104, "hermespy.tools.math.marcum_q"]], "rms_value() (in module hermespy.tools.math)": [[104, "hermespy.tools.math.rms_value"]], "delay_resampling_matrix() (in module hermespy.tools.resampling)": [[105, "hermespy.tools.resampling.delay_resampling_matrix"]], "hermespy.tools.resampling": [[105, "module-hermespy.tools.resampling"]], "get_monitors() (in module hermespy.tools.tile)": [[106, "hermespy.tools.tile.get_monitors"]], "hermespy.tools.tile": [[106, "module-hermespy.tools.tile"]], "screen_geometry() (in module hermespy.tools.tile)": [[106, "hermespy.tools.tile.screen_geometry"]], "set_figure_geometry() (in module hermespy.tools.tile)": [[106, "hermespy.tools.tile.set_figure_geometry"]], "tile_figures() (in module hermespy.tools.tile)": [[106, "hermespy.tools.tile.tile_figures"]]}})
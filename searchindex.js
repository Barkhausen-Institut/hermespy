Search.setIndex({"docnames": ["api/api", "api/beamforming", "api/beamforming.beamformer", "api/beamforming.capon", "api/beamforming.conventional", "api/bin", "api/bin.hermes", "api/channel", "api/channel.channel.Channel", "api/channel.channel.ChannelPropagation", "api/channel.channel.ChannelRealization", "api/channel.channel.DirectiveChannelRealization", "api/channel.channel.InterpolationMode", "api/channel.cluster_delay_line_indoor_factory.IndoorFactoryBase", "api/channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight", "api/channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight", "api/channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight", "api/channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight", "api/channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight", "api/channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight", "api/channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside", "api/channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight", "api/channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight", "api/channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside", "api/channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight", "api/channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight", "api/channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside", "api/channel.cluster_delay_lines", "api/channel.cluster_delay_lines.ClusterDelayLine", "api/channel.cluster_delay_lines.ClusterDelayLineBase", "api/channel.cluster_delay_lines.ClusterDelayLineRealization", "api/channel.cluster_delay_lines.DelayNormalization", "api/channel.delay", "api/channel.delay.DelayChannelBase", "api/channel.delay.DelayChannelRealization", "api/channel.delay.RandomDelayChannel", "api/channel.delay.RandomDelayChannelRealization", "api/channel.delay.SpatialDelayChannel", "api/channel.delay.SpatialDelayChannelRealization", "api/channel.ideal", "api/channel.ideal.IdealChannel", "api/channel.ideal.IdealChannelRealization", "api/channel.multipath_fading_channel", "api/channel.multipath_fading_channel.AntennaCorrelation", "api/channel.multipath_fading_channel.CustomAntennaCorrelation", "api/channel.multipath_fading_channel.MultipathFadingChannel", "api/channel.multipath_fading_channel.MultipathFadingRealization", "api/channel.multipath_fading_channel.PathRealization", "api/channel.multipath_fading_templates.MultipathFading5GTDL", "api/channel.multipath_fading_templates.MultipathFadingCost259", "api/channel.multipath_fading_templates.MultipathFadingExponential", "api/channel.quadriga", "api/channel.quadriga.QuadrigaChannel", "api/channel.quadriga.QuadrigaChannelRealization", "api/channel.quadriga.QuadrigaInterface", "api/channel.radar", "api/channel.radar.FixedCrossSection", "api/channel.radar.MultiTargetRadarChannel", "api/channel.radar.MultiTargetRadarChannelRealization", "api/channel.radar.PhysicalRadarTarget", "api/channel.radar.RadarChannelBase", "api/channel.radar.RadarChannelRealization", "api/channel.radar.RadarCrossSectionModel", "api/channel.radar.RadarInterferenceRealization", "api/channel.radar.RadarPathRealization", "api/channel.radar.RadarTarget", "api/channel.radar.RadarTargetRealization", "api/channel.radar.SingleTargetRadarChannel", "api/channel.radar.SingleTargetRadarChannelRealization", "api/channel.radar.VirtualRadarTarget", "api/core", "api/core.animation", "api/core.antennas", "api/core.channel_state_information", "api/core.definitions", "api/core.device.Device", "api/core.device.DeviceOutput", "api/core.device.OperationResult", "api/core.device.Receiver", "api/core.device.Reception", "api/core.device.Transmission", "api/core.device.Transmitter", "api/core.drop.Drop", "api/core.duplex", "api/core.executable", "api/core.factory", "api/core.logarithmic", "api/core.monte_carlo", "api/core.monte_carlo.Evaluator", "api/core.operators", "api/core.pipeline", "api/core.random_node", "api/core.scenario", "api/core.signal_model.Signal", "api/core.transformation", "api/core.visualize", "api/fec", "api/fec.bch", "api/fec.block_interleaver", "api/fec.coding", "api/fec.crc", "api/fec.ldpc", "api/fec.polar", "api/fec.repetition", "api/fec.rs", "api/fec.rsc", "api/fec.scrambler", "api/fec.turbo", "api/hardware_loop", "api/hardware_loop.audio.device.AudioDevice", "api/hardware_loop.audio.scenario.AudioScenario", "api/hardware_loop.calibration.delay", "api/hardware_loop.calibration.leakage", "api/hardware_loop.hardware_loop.HardwareLoop", "api/hardware_loop.hardware_loop.HardwareLoopPlot", "api/hardware_loop.physical_device.PhysicalDevice", "api/hardware_loop.physical_device_dummy.PhysicalDeviceDummy", "api/hardware_loop.physical_device_dummy.PhysicalScenarioDummy", "api/hardware_loop.scenario.PhysicalScenario", "api/hardware_loop.uhd.system.UsrpSystem", "api/hardware_loop.uhd.usrp.UsrpDevice", "api/hardware_loop.visualizers", "api/jcas", "api/jcas.matched_filtering", "api/modem", "api/modem.bits_source", "api/modem.evaluators", "api/modem.evaluators.CommunicationEvaluator", "api/modem.evaluators._table", "api/modem.evaluators.ber", "api/modem.evaluators.bler", "api/modem.evaluators.fer", "api/modem.evaluators.throughput", "api/modem.modem.BaseModem", "api/modem.modem.CommunicationReception", "api/modem.modem.CommunicationReceptionFrame", "api/modem.modem.CommunicationTransmission", "api/modem.modem.CommunicationTransmissionFrame", "api/modem.modem.DuplexModem", "api/modem.modem.ReceivingModem", "api/modem.modem.SimplexLink", "api/modem.modem.TransmittingModem", "api/modem.precoding", "api/modem.precoding.dft", "api/modem.precoding.ratio_combining", "api/modem.precoding.single_carrier", "api/modem.precoding.space_time_block_coding", "api/modem.precoding.spatial_multiplexing", "api/modem.precoding.symbol_precoding.SymbolPrecoder", "api/modem.precoding.symbol_precoding.SymbolPrecoding", "api/modem.symbols", "api/modem.waveform", "api/modem.waveform.ChannelEqualization", "api/modem.waveform.ChannelEstimation", "api/modem.waveform.Synchronization", "api/modem.waveform.ZeroForcingChannelEqualization", "api/modem.waveform._table", "api/modem.waveform.chirp_fsk", "api/modem.waveform.correlation_synchronization", "api/modem.waveform.ofdm", "api/modem.waveform.ofdm.FrameElement", "api/modem.waveform.ofdm.FrameGuardSection", "api/modem.waveform.ofdm.FrameResource", "api/modem.waveform.ofdm.FrameSection", "api/modem.waveform.ofdm.FrameSymbolSection", "api/modem.waveform.ofdm.OFDMChannelEqualization", "api/modem.waveform.ofdm.OFDMCorrelationSynchronization", "api/modem.waveform.ofdm.OFDMLeastSquaresChannelEstimation", "api/modem.waveform.ofdm.OFDMSynchronization", "api/modem.waveform.ofdm.OFDMWaveform", "api/modem.waveform.ofdm.OFDMZeroForcingChannelEqualization", "api/modem.waveform.ofdm.PilotSection", "api/modem.waveform.ofdm.SchmidlCoxPilotSection", "api/modem.waveform.ofdm.SchmidlCoxSynchronization", "api/modem.waveform.single_carrier", "api/modem.waveform.single_carrier.FMCW", "api/modem.waveform.single_carrier.RaisedCosine", "api/modem.waveform.single_carrier.Rectangular", "api/modem.waveform.single_carrier.RootRaisedCosine", "api/precoding", "api/precoding.precoding", "api/precoding.stream_precoding", "api/radar", "api/radar.cube.RadarCube", "api/radar.detection.MaxDetector", "api/radar.detection.PointDetection", "api/radar.detection.RadarDetector", "api/radar.detection.RadarPointCloud", "api/radar.detection.ThresholdDetector", "api/radar.evaluators.DetectionProbEvaluator", "api/radar.evaluators.RadarEvaluator", "api/radar.evaluators.ReceiverOperatingCharacteristic", "api/radar.evaluators.RootMeanSquareError", "api/radar.fmcw", "api/radar.radar.Radar", "api/radar.radar.RadarReception", "api/radar.radar.RadarTransmission", "api/radar.radar.RadarWaveform", "api/simulation", "api/simulation.antennas", "api/simulation.antennas.SimulatedAntenna", "api/simulation.antennas.SimulatedAntennaPort", "api/simulation.antennas.SimulatedAntennas", "api/simulation.antennas.SimulatedCustomArray", "api/simulation.antennas.SimulatedDipole", "api/simulation.antennas.SimulatedIdealAntenna", "api/simulation.antennas.SimulatedLinearAntenna", "api/simulation.antennas.SimulatedPatchAntenna", "api/simulation.antennas.SimulatedUniformArray", "api/simulation.coupling", "api/simulation.coupling.impedance", "api/simulation.coupling.perfect", "api/simulation.isolation", "api/simulation.isolation.impedance", "api/simulation.isolation.perfect", "api/simulation.isolation.specific", "api/simulation.noise", "api/simulation.rf_chain", "api/simulation.rf_chain.adc", "api/simulation.rf_chain.adc.AnalogDigitalConverter", "api/simulation.rf_chain.adc.AutomaticGainControl", "api/simulation.rf_chain.adc.Gain", "api/simulation.rf_chain.adc.GainControlBase", "api/simulation.rf_chain.phase_noise", "api/simulation.rf_chain.power_amplifier", "api/simulation.simulated_device.SimulatedDevice", "api/simulation.simulated_device.SimulatedDeviceReception", "api/simulation.simulated_device.SimulatedDeviceTransmission", "api/simulation.simulation.SimulatedDrop", "api/simulation.simulation.Simulation", "api/simulation.simulation.SimulationScenario", "api/tools", "api/tools.math", "api/tools.resampling", "api/tools.tile", "developer_hints", "examples/audio", "examples/chirp_fsk_lora", "examples/chirp_qam", "examples/examples", "examples/hardware_model", "examples/interference_ofdm_single_carrier", "examples/jcas", "examples/ofdm_5g", "examples/ofdm_single_carrier", "examples/operator_separation", "examples/uhd", "getting_started", "index", "installation", "license", "matlab", "notebooks/audio", "notebooks/beamformer", "notebooks/beamforming_implementation", "notebooks/beamforming_usage", "notebooks/channel", "notebooks/datasets", "notebooks/evaluator", "notebooks/fec_coding", "notebooks/precoding", "notebooks/roc", "notebooks/waveform", "references", "tutorials"], "filenames": ["api/api.rst", "api/beamforming.rst", "api/beamforming.beamformer.rst", "api/beamforming.capon.rst", "api/beamforming.conventional.rst", "api/bin.rst", "api/bin.hermes.rst", "api/channel.rst", "api/channel.channel.Channel.rst", "api/channel.channel.ChannelPropagation.rst", "api/channel.channel.ChannelRealization.rst", "api/channel.channel.DirectiveChannelRealization.rst", "api/channel.channel.InterpolationMode.rst", "api/channel.cluster_delay_line_indoor_factory.IndoorFactoryBase.rst", "api/channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.rst", "api/channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.rst", "api/channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.rst", "api/channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.rst", "api/channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.rst", "api/channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.rst", "api/channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.rst", "api/channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.rst", "api/channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.rst", "api/channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.rst", "api/channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.rst", "api/channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.rst", "api/channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.rst", "api/channel.cluster_delay_lines.rst", "api/channel.cluster_delay_lines.ClusterDelayLine.rst", "api/channel.cluster_delay_lines.ClusterDelayLineBase.rst", "api/channel.cluster_delay_lines.ClusterDelayLineRealization.rst", "api/channel.cluster_delay_lines.DelayNormalization.rst", "api/channel.delay.rst", "api/channel.delay.DelayChannelBase.rst", "api/channel.delay.DelayChannelRealization.rst", "api/channel.delay.RandomDelayChannel.rst", "api/channel.delay.RandomDelayChannelRealization.rst", "api/channel.delay.SpatialDelayChannel.rst", "api/channel.delay.SpatialDelayChannelRealization.rst", "api/channel.ideal.rst", "api/channel.ideal.IdealChannel.rst", "api/channel.ideal.IdealChannelRealization.rst", "api/channel.multipath_fading_channel.rst", "api/channel.multipath_fading_channel.AntennaCorrelation.rst", "api/channel.multipath_fading_channel.CustomAntennaCorrelation.rst", "api/channel.multipath_fading_channel.MultipathFadingChannel.rst", "api/channel.multipath_fading_channel.MultipathFadingRealization.rst", "api/channel.multipath_fading_channel.PathRealization.rst", "api/channel.multipath_fading_templates.MultipathFading5GTDL.rst", "api/channel.multipath_fading_templates.MultipathFadingCost259.rst", "api/channel.multipath_fading_templates.MultipathFadingExponential.rst", "api/channel.quadriga.rst", "api/channel.quadriga.QuadrigaChannel.rst", "api/channel.quadriga.QuadrigaChannelRealization.rst", "api/channel.quadriga.QuadrigaInterface.rst", "api/channel.radar.rst", "api/channel.radar.FixedCrossSection.rst", "api/channel.radar.MultiTargetRadarChannel.rst", "api/channel.radar.MultiTargetRadarChannelRealization.rst", "api/channel.radar.PhysicalRadarTarget.rst", "api/channel.radar.RadarChannelBase.rst", "api/channel.radar.RadarChannelRealization.rst", "api/channel.radar.RadarCrossSectionModel.rst", "api/channel.radar.RadarInterferenceRealization.rst", "api/channel.radar.RadarPathRealization.rst", "api/channel.radar.RadarTarget.rst", "api/channel.radar.RadarTargetRealization.rst", "api/channel.radar.SingleTargetRadarChannel.rst", "api/channel.radar.SingleTargetRadarChannelRealization.rst", "api/channel.radar.VirtualRadarTarget.rst", "api/core.rst", "api/core.animation.rst", "api/core.antennas.rst", "api/core.channel_state_information.rst", "api/core.definitions.rst", "api/core.device.Device.rst", "api/core.device.DeviceOutput.rst", "api/core.device.OperationResult.rst", "api/core.device.Receiver.rst", "api/core.device.Reception.rst", "api/core.device.Transmission.rst", "api/core.device.Transmitter.rst", "api/core.drop.Drop.rst", "api/core.duplex.rst", "api/core.executable.rst", "api/core.factory.rst", "api/core.logarithmic.rst", "api/core.monte_carlo.rst", "api/core.monte_carlo.Evaluator.rst", "api/core.operators.rst", "api/core.pipeline.rst", "api/core.random_node.rst", "api/core.scenario.rst", "api/core.signal_model.Signal.rst", "api/core.transformation.rst", "api/core.visualize.rst", "api/fec.rst", "api/fec.bch.rst", "api/fec.block_interleaver.rst", "api/fec.coding.rst", "api/fec.crc.rst", "api/fec.ldpc.rst", "api/fec.polar.rst", "api/fec.repetition.rst", "api/fec.rs.rst", "api/fec.rsc.rst", "api/fec.scrambler.rst", "api/fec.turbo.rst", "api/hardware_loop.rst", "api/hardware_loop.audio.device.AudioDevice.rst", "api/hardware_loop.audio.scenario.AudioScenario.rst", "api/hardware_loop.calibration.delay.rst", "api/hardware_loop.calibration.leakage.rst", "api/hardware_loop.hardware_loop.HardwareLoop.rst", "api/hardware_loop.hardware_loop.HardwareLoopPlot.rst", "api/hardware_loop.physical_device.PhysicalDevice.rst", "api/hardware_loop.physical_device_dummy.PhysicalDeviceDummy.rst", "api/hardware_loop.physical_device_dummy.PhysicalScenarioDummy.rst", "api/hardware_loop.scenario.PhysicalScenario.rst", "api/hardware_loop.uhd.system.UsrpSystem.rst", "api/hardware_loop.uhd.usrp.UsrpDevice.rst", "api/hardware_loop.visualizers.rst", "api/jcas.rst", "api/jcas.matched_filtering.rst", "api/modem.rst", "api/modem.bits_source.rst", "api/modem.evaluators.rst", "api/modem.evaluators.CommunicationEvaluator.rst", "api/modem.evaluators._table.rst", "api/modem.evaluators.ber.rst", "api/modem.evaluators.bler.rst", "api/modem.evaluators.fer.rst", "api/modem.evaluators.throughput.rst", "api/modem.modem.BaseModem.rst", "api/modem.modem.CommunicationReception.rst", "api/modem.modem.CommunicationReceptionFrame.rst", "api/modem.modem.CommunicationTransmission.rst", "api/modem.modem.CommunicationTransmissionFrame.rst", "api/modem.modem.DuplexModem.rst", "api/modem.modem.ReceivingModem.rst", "api/modem.modem.SimplexLink.rst", "api/modem.modem.TransmittingModem.rst", "api/modem.precoding.rst", "api/modem.precoding.dft.rst", "api/modem.precoding.ratio_combining.rst", "api/modem.precoding.single_carrier.rst", "api/modem.precoding.space_time_block_coding.rst", "api/modem.precoding.spatial_multiplexing.rst", "api/modem.precoding.symbol_precoding.SymbolPrecoder.rst", "api/modem.precoding.symbol_precoding.SymbolPrecoding.rst", "api/modem.symbols.rst", "api/modem.waveform.rst", "api/modem.waveform.ChannelEqualization.rst", "api/modem.waveform.ChannelEstimation.rst", "api/modem.waveform.Synchronization.rst", "api/modem.waveform.ZeroForcingChannelEqualization.rst", "api/modem.waveform._table.rst", "api/modem.waveform.chirp_fsk.rst", "api/modem.waveform.correlation_synchronization.rst", "api/modem.waveform.ofdm.rst", "api/modem.waveform.ofdm.FrameElement.rst", "api/modem.waveform.ofdm.FrameGuardSection.rst", "api/modem.waveform.ofdm.FrameResource.rst", "api/modem.waveform.ofdm.FrameSection.rst", "api/modem.waveform.ofdm.FrameSymbolSection.rst", "api/modem.waveform.ofdm.OFDMChannelEqualization.rst", "api/modem.waveform.ofdm.OFDMCorrelationSynchronization.rst", "api/modem.waveform.ofdm.OFDMLeastSquaresChannelEstimation.rst", "api/modem.waveform.ofdm.OFDMSynchronization.rst", "api/modem.waveform.ofdm.OFDMWaveform.rst", "api/modem.waveform.ofdm.OFDMZeroForcingChannelEqualization.rst", "api/modem.waveform.ofdm.PilotSection.rst", "api/modem.waveform.ofdm.SchmidlCoxPilotSection.rst", "api/modem.waveform.ofdm.SchmidlCoxSynchronization.rst", "api/modem.waveform.single_carrier.rst", "api/modem.waveform.single_carrier.FMCW.rst", "api/modem.waveform.single_carrier.RaisedCosine.rst", "api/modem.waveform.single_carrier.Rectangular.rst", "api/modem.waveform.single_carrier.RootRaisedCosine.rst", "api/precoding.rst", "api/precoding.precoding.rst", "api/precoding.stream_precoding.rst", "api/radar.rst", "api/radar.cube.RadarCube.rst", "api/radar.detection.MaxDetector.rst", "api/radar.detection.PointDetection.rst", "api/radar.detection.RadarDetector.rst", "api/radar.detection.RadarPointCloud.rst", "api/radar.detection.ThresholdDetector.rst", "api/radar.evaluators.DetectionProbEvaluator.rst", "api/radar.evaluators.RadarEvaluator.rst", "api/radar.evaluators.ReceiverOperatingCharacteristic.rst", "api/radar.evaluators.RootMeanSquareError.rst", "api/radar.fmcw.rst", "api/radar.radar.Radar.rst", "api/radar.radar.RadarReception.rst", "api/radar.radar.RadarTransmission.rst", "api/radar.radar.RadarWaveform.rst", "api/simulation.rst", "api/simulation.antennas.rst", "api/simulation.antennas.SimulatedAntenna.rst", "api/simulation.antennas.SimulatedAntennaPort.rst", "api/simulation.antennas.SimulatedAntennas.rst", "api/simulation.antennas.SimulatedCustomArray.rst", "api/simulation.antennas.SimulatedDipole.rst", "api/simulation.antennas.SimulatedIdealAntenna.rst", "api/simulation.antennas.SimulatedLinearAntenna.rst", "api/simulation.antennas.SimulatedPatchAntenna.rst", "api/simulation.antennas.SimulatedUniformArray.rst", "api/simulation.coupling.rst", "api/simulation.coupling.impedance.rst", "api/simulation.coupling.perfect.rst", "api/simulation.isolation.rst", "api/simulation.isolation.impedance.rst", "api/simulation.isolation.perfect.rst", "api/simulation.isolation.specific.rst", "api/simulation.noise.rst", "api/simulation.rf_chain.rst", "api/simulation.rf_chain.adc.rst", "api/simulation.rf_chain.adc.AnalogDigitalConverter.rst", "api/simulation.rf_chain.adc.AutomaticGainControl.rst", "api/simulation.rf_chain.adc.Gain.rst", "api/simulation.rf_chain.adc.GainControlBase.rst", "api/simulation.rf_chain.phase_noise.rst", "api/simulation.rf_chain.power_amplifier.rst", "api/simulation.simulated_device.SimulatedDevice.rst", "api/simulation.simulated_device.SimulatedDeviceReception.rst", "api/simulation.simulated_device.SimulatedDeviceTransmission.rst", "api/simulation.simulation.SimulatedDrop.rst", "api/simulation.simulation.Simulation.rst", "api/simulation.simulation.SimulationScenario.rst", "api/tools.rst", "api/tools.math.rst", "api/tools.resampling.rst", "api/tools.tile.rst", "developer_hints.rst", "examples/audio.rst", "examples/chirp_fsk_lora.rst", "examples/chirp_qam.rst", "examples/examples.rst", "examples/hardware_model.rst", "examples/interference_ofdm_single_carrier.rst", "examples/jcas.rst", "examples/ofdm_5g.rst", "examples/ofdm_single_carrier.rst", "examples/operator_separation.rst", "examples/uhd.rst", "getting_started.rst", "index.rst", "installation.rst", "license.rst", "matlab.rst", "notebooks/audio.ipynb", "notebooks/beamformer.ipynb", "notebooks/beamforming_implementation.ipynb", "notebooks/beamforming_usage.ipynb", "notebooks/channel.ipynb", "notebooks/datasets.ipynb", "notebooks/evaluator.ipynb", "notebooks/fec_coding.ipynb", "notebooks/precoding.ipynb", "notebooks/roc.ipynb", "notebooks/waveform.ipynb", "references.rst", "tutorials.rst"], "titles": ["HermesPy API", "Beamforming", "Beamformer", "Capon Beamformer", "Conventional Beamformer", "Entry Points", "Hermes Command Line Interface", "Channel Modeling", "Channel Model", "Channel Propagation", "Channel Realization", "Directive Channel Realization", "Interpolation Mode", "Indoor Factory Base", "Indoor Factory LOS", "Indoor Factory NLOS", "Indoor Office LOS", "Indoor Office NLOS", "Rural Marocells LOS", "Rural Marocells NLOS", "Rural Marocells O2I", "Street Canyon LOS", "Street Canyon NLOS", "Street Canyon O2I", "Urban Macrocells LOS", "Urban Macrocells NLOS", "Urban Macrocells O2I", "3GPP Cluster Delay Line Models", "Custom Cluster Delay Line", "Cluster Delay Line Base", "Cluster Delay Line Realization", "Delay Normalization", "Delay Channels", "Delay Channel Base", "Delay Channel Realization", "Random Delay Channel", "Random Delay Channel Realization", "Spatial Delay Channel", "Spatial Delay Channel Realization", "Ideal Channel", "Ideal Channel", "Ideal Channel Realization", "Multipath Fading Channels", "Antenna Correlation", "Custom Antenna Correlation", "Multipath Fading Channel", "Multipath Fading Realization", "Path Realization", "5G TDL Channel Model", "Cost 259 Channel Model", "Exponential Channel Model", "Quadriga", "Quadriga Channel", "Quadriga Channel Realization", "Quadriga Interface", "Radar Channels", "Fixed Cross Section", "Multi Target Channel", "Multi Target Channel Realization", "Physical Target", "Radar Channel Base", "Radar Channel Realization", "Radar Cross Section", "Radar Interference Realization", "Radar Path Realization", "Radar Target", "Radar Target Realization", "Single Target Channel", "Single Target Channel Realization", "Virtual Target", "Core", "Animation", "Antenna Descriptions", "Channel State Information", "General Definitions", "Device", "Device Output", "Operation Result", "Receiver", "Reception", "Transmission", "Transmitter", "Drop", "Duplex Operation", "Executable", "Serialization Factory", "Logarithmics", "PyMonte", "Evaluator", "Extra Operators", "Pipeline", "Random Graph", "Wireless Scenario", "Signal", "Coordinate System Transformations", "Visualization", "Error Correction", "&lt;no title&gt;", "Interleaving", "Coding Pipeline", "Cyclic Redundancy Checks", "&lt;no title&gt;", "&lt;no title&gt;", "Repetition Coding", "&lt;no title&gt;", "&lt;no title&gt;", "Scrambling", "&lt;no title&gt;", "Hardware Loop", "Audio Device", "Audio Scenario", "Delay Calibration", "Leakage Calibration", "Hardaware Loop", "Hardware Loop Plot", "Physical Device", "Physical Device Dummy", "Physical Scenario Dummy", "Physical Scenario", "USRP System", "USRP Device", "Visualizers", "JCAS", "Matched Filter JCAS", "Communication", "Bit Sources", "Evaluators", "Communication Evaluator", "&lt;no title&gt;", "Bit Error Rate", "Block Error Rate", "Frame Error Rate", "Throughput", "Base Modem", "Reception", "Reception Frame", "Transmission", "Transmission Frame", "Duplex Modem", "Receiving Modem", "Simplex Link", "Transmitting Modem", "Communication Precoding", "Discrete Fourier Transform", "Maximal Ratio Combining", "Single Carrier Decoding", "Space-Time Block Codes", "Spatial Multiplexing", "Symbol Precoder", "Symbol Precoding", "Communication Symbols", "Waveforms", "Channel Equalization", "Channel Estimation", "Synchronization", "Zero-Forcing", "&lt;no title&gt;", "C-FSK", "Correlation", "OFDM", "Frame Element", "Guard Section", "Resource", "Section", "Symbol Section", "Channel Equalization", "Correlation Synchronization", "Least Squares Channel Estimation", "Synchronization", "OFDM Waveform", "Zero Forcing Equalization", "Pilot Section", "Schmidl Cox Pilot", "Schmidl Cox Synchronization", "Single Carrier", "FMCW", "Raised Cosine", "Rectangular", "Root Raised Cosine", "Precoding", "Precoding Configuration", "Stream Precoding", "Sensing", "Radar Cube", "Max", "Point Detection", "Radar Detector", "Radar Point Cloud", "Threshold", "Detection Probability Evaluator", "Radar Evaluator", "Reiver Operating Characteristic", "Root Mean Square Error", "FMCW", "Radar", "Radar Reception", "Radar Transmission", "Radar Waveform", "Simulation", "Antenna Arrays Modeling", "Simulated Antenna", "Simulated Antenna Port", "Simulated Antennas", "Simulated Custom Array", "Simulated Dipole Antenna", "Simulated Ideal Antenna", "Simulated Linear Antenna", "Simulated Patch Antenna", "Simulated Uniform Array", "Mutual Coupling", "Impedance Coupling", "Perfect Coupling", "Antenna Isolation Modeling", "Impedance Isolation", "Perfect Isolation", "Specific Isolation", "Noise Modeling", "Hardware Radio Frequency Chain Modeling", "Analog-to-Digital Conversion", "Analog Digital Converter", "Automatic Gain Control", "Constant Gain", "Gain Control Base", "Phase Noise Modeling", "Power Amplifier Modeling", "Simulated Device", "Device Reception", "Device Transmission", "Simulated Drop", "Simulation", "Simulation Scenario", "Tools", "Math Tools", "Resampling Routines", "Tile Figures", "For Developers", "Audio Hardware Binding", "Chirp FSK LORA", "Chirp QAM", "YAML Examples", "Hardware Modeling", "OFDM Interference", "JCAS", "OFDM 5G", "OFDM Single Carrier", "Operator Separation", "USRP Hardware Driver", "Getting Started", "HermesPy", "Installation", "License", "Matlab", "Using Audio Equipment", "Implementing Beamformers", "Implementing Beamformers", "Using Beamformers", "Implementing Channels", "Recording Datasets", "Implementing Evaluators", "Implementing FEC codings", "Implementing Precodings", "Receiver Operating Characteristics", "Implementing Communication Waveforms", "References", "Tutorials"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 53, 54, 57, 58, 59, 61, 64, 67, 68, 72, 73, 75, 78, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 98, 99, 100, 106, 114, 115, 116, 120, 123, 124, 129, 130, 131, 132, 133, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 180, 181, 182, 187, 189, 191, 192, 193, 194, 197, 200, 201, 203, 204, 205, 206, 207, 208, 219, 220, 221, 223, 224, 225, 229, 230, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "section": [0, 55, 57, 59, 60, 65, 66, 67, 69, 85, 87, 98, 99, 106, 154, 157, 158, 159, 162, 169, 172, 173, 174, 182, 229, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 256, 258, 260, 261, 264], "describ": [0, 2, 6, 7, 69, 98, 103, 106, 151, 219, 224, 247, 249, 255, 256, 262], "all": [0, 2, 3, 4, 7, 8, 10, 11, 27, 40, 42, 54, 60, 70, 72, 73, 75, 78, 81, 82, 84, 85, 86, 87, 88, 92, 99, 103, 108, 117, 118, 126, 127, 134, 151, 169, 182, 198, 222, 228, 229, 230, 235, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263], "part": [0, 8, 49, 89, 151, 157, 169, 174, 219, 220, 250, 255, 263], "applic": [0, 2, 92, 119, 157, 158, 166, 248, 250, 253, 254], "program": [0, 87, 247, 250, 253, 258, 260], "interfac": [0, 5, 7, 27, 32, 52, 85, 133, 159, 239, 247, 248, 249, 250, 251, 255, 257, 258, 259, 260], "consist": [0, 7, 42, 92, 96, 99, 108, 182, 193, 247, 250, 255, 256, 257, 258, 260, 261], "self": [0, 237, 242, 243, 244, 253, 254, 256, 258, 259, 260, 262], "titl": [0, 30, 87, 88, 93, 95, 112, 114, 121, 125, 129, 130, 131, 132, 150, 182, 183, 187, 189, 190, 191, 192, 202, 224, 234, 238, 249, 252, 254, 255, 257, 258, 260, 261], "namespac": [0, 85, 247], "featur": [0, 3, 4, 27, 32, 35, 37, 39, 42, 57, 67, 85, 129, 130, 131, 132, 143, 144, 145, 146, 147, 148, 169, 180, 189, 191, 192, 193, 194, 235, 247, 248, 250, 251, 253, 254, 258, 259, 262], "multipl": [0, 42, 55, 57, 85, 86, 87, 92, 99, 141, 142, 144, 145, 146, 147, 149, 159, 171, 180, 194, 247, 255, 256, 258, 261, 262, 263], "sub": [0, 70, 85, 87, 98, 113, 162, 231, 241], "modul": [0, 1, 5, 6, 7, 12, 27, 31, 42, 48, 49, 70, 72, 74, 84, 85, 86, 87, 89, 92, 96, 99, 106, 108, 122, 133, 139, 141, 142, 143, 149, 150, 151, 157, 160, 161, 162, 163, 164, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 193, 198, 199, 219, 220, 231, 232, 234, 235, 236, 237, 238, 241, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 256, 259, 260, 262, 263], "each": [0, 7, 8, 12, 27, 30, 37, 42, 45, 46, 49, 54, 58, 61, 68, 72, 75, 87, 89, 90, 92, 93, 113, 115, 129, 130, 131, 132, 139, 143, 151, 157, 169, 171, 175, 176, 177, 178, 180, 191, 193, 194, 219, 224, 226, 228, 229, 236, 237, 238, 241, 243, 244, 245, 246, 247, 250, 255, 256, 258, 259, 261, 262, 264], "tackl": 0, "differ": [0, 32, 48, 72, 87, 93, 129, 130, 131, 132, 157, 190, 191, 193, 237, 247, 250, 252, 255], "aspect": [0, 49, 263], "signal": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 42, 45, 46, 47, 48, 49, 50, 53, 55, 57, 58, 61, 63, 64, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 89, 92, 96, 109, 112, 115, 116, 117, 118, 120, 121, 123, 124, 134, 135, 136, 137, 138, 139, 140, 141, 142, 146, 148, 151, 153, 154, 157, 158, 161, 163, 164, 166, 169, 171, 172, 173, 174, 180, 181, 182, 193, 194, 195, 196, 197, 200, 202, 204, 205, 206, 207, 209, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "process": [0, 1, 2, 12, 75, 77, 78, 85, 87, 88, 92, 96, 98, 99, 115, 116, 117, 118, 123, 124, 126, 127, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 146, 147, 148, 151, 152, 153, 154, 157, 169, 174, 175, 176, 177, 178, 180, 182, 184, 186, 188, 189, 191, 192, 193, 194, 195, 197, 224, 225, 230, 238, 247, 248, 249, 253, 254, 257, 258, 259, 260, 262, 263], "wireless": [0, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 42, 49, 70, 73, 106, 133, 138, 139, 141, 146, 149, 152, 153, 154, 155, 167, 179, 180, 228, 239, 247, 248, 256, 258, 263], "system": [0, 2, 3, 4, 5, 6, 7, 40, 49, 69, 70, 72, 75, 85, 87, 90, 92, 106, 108, 110, 113, 124, 125, 127, 139, 141, 154, 185, 191, 217, 224, 234, 235, 236, 239, 240, 241, 247, 249, 250, 251, 252, 255, 256, 258, 261, 263], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 67, 68, 69, 70, 72, 73, 75, 78, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 99, 100, 103, 106, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 158, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 214, 216, 217, 218, 220, 222, 223, 224, 225, 226, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "subpackag": 0, "mai": [0, 2, 42, 55, 71, 73, 87, 88, 92, 93, 99, 111, 113, 116, 129, 130, 131, 132, 141, 143, 144, 145, 147, 148, 149, 150, 153, 169, 180, 181, 200, 202, 204, 220, 224, 225, 235, 247, 248, 249, 250, 252, 253, 254, 255, 257, 259, 260, 261, 262, 264], "have": [0, 8, 75, 85, 87, 92, 144, 145, 153, 173, 183, 194, 219, 220, 237, 238, 247, 249, 250, 252, 255, 261, 262], "interdepend": [0, 70], "gener": [0, 2, 3, 4, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 34, 36, 37, 38, 40, 41, 45, 46, 47, 49, 50, 51, 53, 54, 55, 58, 60, 61, 68, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 95, 98, 99, 106, 108, 110, 113, 118, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 141, 146, 147, 149, 151, 152, 153, 154, 155, 157, 158, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 216, 219, 223, 224, 225, 226, 227, 228, 229, 230, 233, 235, 236, 237, 245, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 262, 263], "root": [0, 7, 28, 48, 50, 72, 91, 124, 151, 156, 174, 176, 182, 190, 223, 232, 235, 243, 244, 247, 252], "depend": [0, 2, 7, 8, 32, 37, 39, 55, 67, 71, 72, 73, 78, 87, 91, 93, 94, 133, 141, 217, 220, 224, 235, 246, 247, 249, 263], "i": [0, 1, 2, 3, 4, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 51, 53, 54, 55, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 81, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 98, 99, 100, 103, 106, 109, 111, 112, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 189, 190, 191, 192, 193, 194, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "provid": [0, 1, 2, 7, 8, 27, 42, 60, 70, 75, 78, 85, 86, 87, 92, 93, 96, 99, 108, 115, 120, 122, 124, 146, 150, 174, 179, 182, 191, 198, 225, 229, 233, 235, 239, 247, 249, 250, 251, 255, 256, 263, 264], "core": [0, 8, 77, 79, 80, 87, 90, 92, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 175, 176, 177, 178, 192, 199, 247, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "packag": [0, 1, 124, 247, 249, 250, 252, 253], "commun": [0, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 42, 45, 48, 49, 50, 93, 96, 98, 99, 122, 123, 125, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 151, 152, 153, 154, 155, 157, 158, 167, 169, 172, 173, 174, 175, 176, 177, 178, 180, 224, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 252, 255, 256, 257, 259, 260, 263, 264], "sens": [0, 1, 55, 122, 123, 190, 193, 194, 197, 242, 247, 248, 256, 261], "channel": [0, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 43, 46, 47, 51, 54, 64, 70, 72, 78, 98, 99, 100, 103, 106, 109, 111, 115, 116, 124, 138, 139, 140, 144, 145, 146, 149, 150, 151, 154, 155, 156, 159, 161, 163, 164, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 182, 189, 190, 191, 192, 193, 225, 228, 229, 230, 236, 237, 238, 241, 242, 243, 244, 245, 246, 247, 249, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264], "model": [0, 2, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 51, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 77, 78, 79, 80, 87, 92, 93, 99, 109, 112, 116, 120, 138, 139, 140, 141, 151, 154, 159, 169, 174, 182, 190, 192, 193, 194, 197, 198, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 214, 218, 219, 220, 221, 222, 225, 226, 227, 230, 235, 237, 238, 239, 241, 242, 243, 244, 245, 247, 249, 250, 255, 256, 258, 260, 262, 263], "simul": [0, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 39, 42, 45, 48, 49, 50, 54, 55, 57, 67, 70, 71, 74, 84, 85, 87, 88, 90, 113, 117, 124, 127, 129, 130, 131, 132, 138, 139, 140, 141, 143, 144, 145, 146, 147, 151, 153, 154, 157, 158, 169, 173, 174, 175, 177, 182, 189, 190, 191, 192, 193, 199, 226, 227, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "hardwar": [0, 113, 115, 116, 124, 153, 154, 198, 218, 224, 225, 239, 245, 248, 249, 252, 255, 258, 261, 262], "loop": [0, 124, 153, 252, 258, 261], "error": [0, 7, 74, 84, 98, 100, 112, 124, 126, 128, 132, 133, 135, 138, 139, 140, 141, 154, 182, 190, 217, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 253, 256, 259, 263], "correct": [0, 100, 112, 124, 126, 128, 133, 135, 138, 139, 140, 141, 152, 250, 257, 259, 263], "jca": [0, 239, 247], "precod": [0, 1, 2, 124, 133, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 151, 157, 169, 241, 243, 244, 247, 258, 264], "beamform": [0, 194, 247, 258, 264], "entri": [0, 6, 84, 87, 99, 154, 158, 173, 228], "point": [0, 1, 2, 3, 4, 6, 7, 35, 42, 67, 72, 84, 87, 90, 92, 93, 94, 113, 120, 139, 141, 182, 184, 186, 188, 189, 191, 192, 194, 195, 219, 223, 224, 238, 239, 243, 248, 249, 250, 251, 255, 256], "tool": [0, 51, 174, 235, 249, 250, 251, 258], "hermespi": [1, 5, 6, 7, 8, 27, 70, 75, 77, 79, 80, 84, 85, 87, 90, 92, 93, 108, 109, 113, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 157, 158, 159, 174, 175, 176, 177, 178, 179, 182, 189, 191, 192, 193, 198, 229, 235, 239, 245, 246, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "routin": [1, 6, 10, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 34, 36, 38, 41, 46, 78, 81, 84, 85, 87, 88, 93, 95, 98, 99, 100, 103, 106, 108, 115, 125, 138, 139, 140, 148, 151, 152, 153, 154, 155, 157, 158, 165, 167, 168, 170, 173, 175, 176, 177, 178, 180, 182, 194, 197, 224, 231, 235, 244, 247, 251, 252, 253, 254, 256, 257, 258, 260, 262], "spatial": [1, 3, 7, 32, 42, 46, 57, 58, 59, 62, 69, 72, 142, 154, 179, 225, 241, 242, 243, 244, 247, 248, 253, 254, 263], "mimo": [1, 2, 40, 42, 51, 135, 139, 141, 142, 146, 147, 150, 181, 243, 244, 255, 258, 262, 263], "antenna": [1, 2, 3, 4, 7, 8, 27, 32, 35, 37, 39, 40, 42, 45, 46, 51, 54, 63, 64, 66, 67, 70, 75, 76, 78, 81, 109, 112, 116, 120, 133, 139, 141, 144, 145, 146, 147, 149, 180, 194, 198, 203, 208, 209, 210, 211, 214, 225, 227, 237, 243, 244, 247, 248, 253, 254, 255, 256, 258, 260, 261, 263], "stream": [1, 2, 3, 4, 7, 73, 75, 78, 85, 93, 99, 109, 112, 115, 124, 125, 126, 128, 129, 130, 131, 132, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 157, 169, 171, 174, 179, 180, 193, 194, 197, 200, 202, 204, 209, 212, 214, 245, 253, 254, 257, 260, 262], "dure": [1, 2, 3, 4, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 57, 63, 64, 65, 66, 71, 73, 74, 78, 81, 82, 84, 87, 90, 92, 93, 98, 99, 100, 103, 106, 110, 112, 113, 115, 117, 118, 133, 139, 141, 142, 143, 146, 147, 148, 149, 151, 153, 169, 180, 181, 188, 189, 192, 193, 194, 209, 225, 227, 228, 229, 230, 236, 243, 244, 246, 247, 249, 255, 256, 257, 258, 259, 260, 261, 262], "transmiss": [1, 2, 7, 32, 70, 75, 76, 81, 82, 89, 92, 98, 99, 100, 103, 106, 109, 111, 115, 116, 120, 123, 133, 139, 141, 142, 143, 144, 145, 147, 148, 149, 151, 153, 154, 157, 175, 176, 177, 178, 180, 181, 182, 194, 198, 200, 202, 204, 209, 217, 225, 228, 230, 237, 241, 245, 247, 248, 250, 252, 257, 260, 262], "allow": [1, 45, 55, 90, 92, 93, 113, 115, 120, 151, 159, 174, 177, 239, 245, 247, 250, 259], "steer": [1, 2, 3, 4, 253, 254, 255], "power": [1, 2, 3, 4, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 45, 46, 47, 48, 49, 50, 58, 61, 67, 68, 74, 75, 78, 86, 93, 112, 115, 116, 117, 146, 151, 157, 169, 174, 182, 183, 185, 188, 193, 197, 198, 215, 216, 223, 225, 230, 232, 235, 237, 238, 240, 241, 242, 243, 244, 245, 250, 253, 254, 255, 258, 261, 262, 263], "emit": [1, 3, 4, 7, 8, 72, 92, 133, 182, 236, 237, 243, 244, 245, 246, 247, 253, 254], "an": [1, 2, 3, 4, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 41, 45, 48, 51, 55, 57, 67, 72, 73, 75, 84, 85, 87, 88, 90, 92, 93, 94, 98, 99, 106, 109, 111, 113, 119, 122, 127, 129, 130, 131, 132, 141, 142, 143, 144, 145, 146, 147, 148, 149, 153, 154, 157, 162, 163, 171, 180, 182, 189, 190, 191, 192, 193, 194, 200, 201, 203, 204, 205, 206, 207, 217, 219, 224, 225, 229, 230, 232, 233, 238, 240, 241, 242, 243, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "arrai": [1, 2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 32, 35, 37, 39, 42, 43, 44, 45, 57, 63, 64, 66, 72, 75, 78, 81, 87, 88, 93, 94, 95, 106, 109, 115, 116, 120, 127, 134, 136, 141, 150, 175, 176, 177, 178, 183, 189, 190, 191, 192, 193, 194, 197, 198, 200, 201, 202, 204, 205, 206, 207, 210, 211, 215, 225, 232, 243, 244, 247, 253, 254, 255, 257, 260], "toward": [1, 2, 3, 4, 27, 37, 72, 94, 194, 235, 247, 253, 254, 255], "desir": [1, 190, 191, 192, 219, 232], "direct": [1, 2, 3, 4, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 45, 49, 56, 59, 62, 65, 69, 72, 87, 94, 115, 116, 169, 194, 234, 250, 253, 254, 257, 263], "within": [1, 3, 4, 6, 7, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 37, 41, 45, 46, 47, 48, 49, 50, 53, 54, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 72, 73, 75, 82, 85, 86, 87, 91, 92, 93, 94, 98, 99, 100, 103, 106, 113, 115, 127, 129, 130, 131, 132, 139, 141, 142, 146, 150, 151, 153, 154, 157, 159, 160, 161, 163, 164, 169, 171, 172, 174, 175, 176, 177, 178, 180, 182, 187, 189, 191, 192, 193, 194, 200, 201, 203, 204, 205, 206, 207, 223, 224, 225, 229, 230, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "refer": [1, 2, 3, 6, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 40, 45, 47, 49, 51, 71, 72, 78, 83, 87, 88, 94, 98, 99, 100, 103, 106, 110, 113, 116, 119, 133, 138, 140, 142, 143, 144, 146, 147, 150, 151, 152, 153, 154, 157, 160, 161, 162, 163, 164, 169, 171, 172, 173, 174, 175, 176, 177, 178, 182, 194, 224, 225, 235, 238, 241, 242, 243, 244, 246, 247, 250, 256, 257], "focu": [1, 2, 3, 4, 154, 253, 254, 255], "recept": [1, 2, 7, 8, 10, 11, 70, 75, 78, 82, 89, 92, 98, 99, 100, 103, 106, 109, 112, 115, 116, 117, 120, 133, 139, 142, 143, 144, 145, 147, 148, 149, 151, 153, 157, 175, 176, 177, 178, 180, 181, 182, 189, 194, 198, 200, 204, 209, 217, 225, 228, 230, 247, 252, 255, 257, 258, 260], "invers": [1, 3, 99, 143, 151, 175, 253, 254, 260], "can": [1, 2, 5, 6, 7, 42, 49, 55, 56, 72, 85, 87, 92, 99, 103, 124, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 154, 157, 159, 162, 163, 164, 169, 175, 176, 177, 178, 182, 194, 219, 221, 234, 235, 239, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "us": [1, 2, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 40, 42, 45, 46, 47, 48, 49, 50, 55, 75, 78, 81, 85, 86, 87, 88, 91, 92, 106, 110, 112, 115, 116, 117, 118, 124, 125, 126, 129, 130, 131, 132, 133, 139, 146, 151, 153, 157, 169, 171, 174, 175, 177, 180, 182, 187, 189, 191, 192, 193, 194, 202, 223, 229, 230, 232, 234, 235, 241, 242, 243, 247, 249, 250, 251, 253, 254, 257, 258, 259, 261, 262, 264], "well": [1, 55, 96, 99, 108, 124, 133, 143, 144, 145, 147, 148, 149, 153, 157, 175, 176, 177, 178, 190, 202, 235, 242, 250, 261], "order": [1, 6, 7, 55, 86, 87, 93, 98, 99, 100, 106, 149, 151, 157, 169, 174, 175, 176, 177, 178, 180, 223, 225, 235, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 249, 250, 255, 258, 261, 262, 264], "receiv": [1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 34, 35, 37, 39, 40, 41, 42, 45, 46, 48, 49, 50, 53, 54, 55, 57, 58, 61, 63, 64, 66, 67, 68, 70, 72, 73, 75, 79, 81, 82, 83, 89, 92, 98, 99, 100, 103, 106, 109, 111, 112, 115, 116, 117, 118, 120, 121, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 138, 140, 141, 144, 145, 146, 150, 152, 153, 154, 155, 157, 158, 167, 169, 173, 174, 175, 176, 177, 178, 180, 182, 190, 191, 192, 193, 194, 195, 197, 200, 202, 204, 205, 206, 207, 209, 210, 212, 214, 215, 217, 225, 226, 228, 229, 230, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 250, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 264], "By": [1, 2, 6, 45, 69, 71, 72, 73, 87, 88, 91, 92, 93, 94, 99, 109, 116, 117, 150, 151, 171, 172, 175, 191, 200, 204, 205, 206, 207, 219, 223, 225, 230, 250], "focus": [1, 2, 3, 4, 253, 254, 255], "dictionari": [1, 253, 254], "angl": [1, 2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 42, 45, 46, 47, 49, 67, 72, 93, 94, 183, 185, 206, 224, 253, 254, 255], "interest": [1, 2, 3, 4, 72, 87, 88, 194, 248, 250, 251, 253, 254], "algorithm": [1, 2, 87, 100, 148, 158, 172, 173, 180, 181, 186, 188, 242, 247, 248, 253, 254, 259, 263], "ma": 1, "creat": [1, 2, 6, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 54, 57, 67, 72, 84, 87, 90, 92, 93, 110, 113, 119, 124, 126, 129, 130, 131, 132, 143, 144, 145, 146, 147, 150, 180, 189, 191, 192, 193, 203, 219, 229, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "imag": [1, 12, 183, 253, 254, 263], "": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 78, 81, 82, 83, 87, 92, 93, 94, 109, 111, 112, 115, 116, 120, 124, 129, 130, 131, 132, 133, 138, 139, 140, 141, 144, 145, 146, 151, 152, 153, 154, 157, 167, 175, 176, 177, 178, 183, 185, 189, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 220, 221, 222, 224, 225, 228, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "environ": [1, 6, 7, 54, 84, 87, 194, 235, 239, 247, 249, 251, 255, 257, 258], "probe": [1, 2, 3, 4, 112, 194, 255], "convent": [1, 2, 254, 255, 263], "capon": [1, 4, 253, 254, 263], "split": [2, 70, 99], "prototyp": [2, 224, 253, 254], "class": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 247, 250, 253, 254, 256, 258, 259, 260, 262, 263], "transmitbeamform": [2, 4, 194], "receivebeamform": [2, 3, 4, 194, 253, 254], "oper": [2, 4, 7, 57, 58, 61, 67, 68, 70, 72, 73, 75, 76, 78, 79, 80, 81, 82, 84, 86, 87, 92, 96, 98, 99, 100, 103, 106, 109, 115, 116, 117, 118, 120, 122, 123, 133, 138, 139, 141, 143, 144, 145, 147, 148, 149, 150, 153, 180, 181, 182, 190, 192, 194, 200, 204, 205, 206, 207, 221, 225, 226, 227, 230, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 264], "respect": [2, 3, 4, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 37, 39, 40, 41, 42, 45, 46, 47, 48, 53, 55, 58, 59, 61, 63, 64, 65, 66, 68, 69, 71, 72, 73, 75, 85, 87, 88, 92, 94, 98, 99, 100, 103, 106, 115, 116, 124, 127, 129, 130, 131, 132, 138, 140, 141, 148, 150, 153, 154, 167, 173, 180, 183, 194, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212, 214, 224, 225, 228, 230, 235, 247, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260], "thei": [2, 5, 10, 32, 42, 55, 86, 100, 124, 125, 138, 140, 143, 144, 145, 146, 151, 174, 193, 194, 247, 250, 251, 252, 256, 258, 262], "ar": [2, 5, 6, 7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 42, 45, 48, 54, 55, 57, 71, 72, 73, 75, 84, 85, 87, 88, 91, 92, 93, 99, 103, 109, 117, 124, 125, 126, 127, 138, 140, 141, 142, 146, 147, 151, 157, 169, 174, 177, 180, 182, 190, 193, 194, 197, 203, 219, 223, 224, 225, 226, 230, 234, 235, 239, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "both": [2, 7, 27, 32, 37, 42, 55, 58, 83, 93, 106, 122, 124, 142, 153, 161, 163, 164, 171, 181, 220, 235, 237, 242, 247, 248, 250, 256, 258, 260], "deriv": [2, 87, 250], "from": [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 48, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 75, 76, 78, 81, 85, 87, 88, 90, 91, 92, 93, 94, 98, 99, 112, 115, 116, 118, 120, 124, 125, 126, 127, 129, 130, 131, 132, 139, 144, 145, 151, 153, 154, 157, 162, 169, 171, 172, 174, 180, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 197, 203, 209, 217, 224, 225, 226, 227, 229, 230, 232, 235, 242, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "base": [2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 235, 242, 247, 248, 249, 250, 255, 256, 260, 261, 262], "beamformerbas": 2, "due": [2, 233, 247, 263], "fact": 2, "some": [2, 27, 78, 124, 235, 247, 249, 250, 260], "exclus": [2, 139, 141, 250], "case": [2, 3, 7, 8, 27, 54, 57, 84, 87, 115, 124, 129, 130, 131, 132, 154, 189, 224, 247, 250, 255, 256, 257, 258], "should": [2, 6, 8, 9, 10, 11, 30, 33, 34, 36, 37, 38, 41, 46, 53, 57, 58, 61, 63, 64, 66, 68, 72, 73, 85, 87, 92, 93, 95, 99, 111, 115, 126, 143, 150, 157, 175, 176, 177, 178, 216, 219, 224, 230, 233, 235, 250, 251, 256, 261], "inherit": [2, 85, 99, 125, 126, 190, 224, 235, 247, 253, 254, 256, 259, 260], "exampl": [2, 6, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 58, 61, 67, 68, 93, 124, 126, 129, 130, 131, 132, 142, 146, 147, 180, 182, 189, 191, 192, 193, 235, 236, 237, 238, 240, 241, 243, 246, 247, 248, 250, 251, 253, 254, 264], "implement": [2, 3, 4, 7, 8, 10, 11, 27, 32, 42, 45, 48, 54, 60, 84, 85, 87, 88, 96, 99, 103, 106, 122, 124, 125, 126, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 157, 158, 169, 174, 175, 176, 177, 178, 181, 182, 189, 190, 191, 192, 209, 217, 219, 224, 232, 235, 247, 248, 249, 250, 251, 263, 264], "beamfocu": 2, "sourc": [2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 248, 250, 251, 253, 254, 263], "abc": [2, 8, 43, 62, 65, 72, 75, 84, 87, 88, 92, 99, 114, 115, 121, 125, 127, 129, 130, 131, 132, 133, 148, 151, 152, 154, 155, 158, 165, 180, 181, 190, 209, 212, 222, 223], "serializ": [2, 3, 4, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 44, 45, 49, 57, 59, 67, 69, 72, 75, 85, 87, 94, 98, 99, 100, 103, 106, 109, 111, 112, 113, 116, 117, 119, 120, 123, 125, 129, 130, 131, 132, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 164, 167, 169, 171, 175, 176, 177, 178, 180, 181, 184, 188, 189, 191, 193, 194, 210, 211, 214, 215, 216, 217, 219, 220, 221, 223, 224, 225, 229], "singl": [2, 3, 4, 40, 42, 47, 55, 57, 72, 73, 83, 85, 87, 88, 92, 93, 98, 99, 100, 103, 106, 116, 123, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 157, 169, 175, 176, 177, 178, 182, 185, 189, 191, 192, 193, 194, 197, 200, 204, 205, 206, 207, 224, 225, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "abstract": [2, 7, 8, 10, 29, 43, 61, 62, 64, 65, 72, 75, 78, 81, 83, 84, 87, 88, 94, 99, 114, 115, 116, 125, 133, 148, 151, 152, 154, 163, 180, 181, 182, 186, 190, 197, 216, 222, 223, 247, 253, 254, 259, 260, 262], "copi": [2, 54, 87, 93, 150, 239, 249, 250, 257, 259, 260], "return": [2, 3, 4, 6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 78, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 161, 162, 163, 164, 167, 169, 171, 172, 173, 174, 175, 177, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 200, 202, 203, 204, 209, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 250, 253, 254, 256, 258, 259, 260, 262], "type": [2, 3, 4, 6, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 73, 74, 75, 78, 81, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 127, 129, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 167, 169, 171, 172, 173, 174, 175, 177, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 200, 202, 203, 204, 208, 209, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 232, 233, 234, 236, 241, 242, 243, 244, 246, 247, 256, 258], "typevar": [2, 8, 10, 11, 34, 60, 61, 72, 78, 81, 85, 87, 90, 92, 151, 180, 216], "ft": 2, "bound": [2, 8, 10, 11, 34, 60, 61, 72, 78, 81, 85, 87, 88, 90, 92, 151, 180, 216, 263], "A": [2, 3, 4, 7, 8, 12, 32, 35, 37, 42, 47, 48, 49, 55, 58, 59, 61, 65, 68, 69, 72, 73, 78, 86, 87, 91, 92, 93, 94, 98, 99, 100, 103, 106, 110, 119, 123, 125, 135, 137, 140, 141, 143, 146, 148, 150, 151, 154, 171, 174, 175, 180, 182, 183, 185, 187, 189, 191, 192, 193, 194, 197, 203, 208, 217, 219, 223, 224, 229, 230, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 250, 255, 263, 264], "properti": [2, 3, 4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 40, 43, 44, 45, 46, 47, 48, 49, 50, 53, 54, 56, 57, 58, 59, 60, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 109, 111, 112, 113, 114, 115, 116, 120, 121, 123, 127, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 157, 158, 161, 162, 163, 164, 169, 171, 172, 174, 180, 181, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 200, 201, 204, 209, 210, 212, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 238, 243, 247, 250, 253, 254, 258, 259, 260, 262], "none": [2, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 37, 40, 43, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 60, 64, 68, 69, 71, 72, 73, 74, 75, 78, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 99, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 133, 134, 136, 138, 139, 140, 141, 149, 150, 151, 152, 153, 154, 155, 157, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 180, 181, 183, 187, 191, 192, 193, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 223, 224, 225, 229, 230, 232, 234, 253, 254, 256, 258], "assign": [2, 78, 81, 83, 87, 103, 123, 138, 139, 141, 142, 169, 194, 197, 247, 252, 255, 262], "spherical_angl": 2, "ndarrai": [2, 3, 4, 30, 43, 44, 45, 46, 47, 53, 54, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 86, 87, 88, 93, 94, 98, 99, 100, 103, 106, 109, 112, 115, 116, 125, 127, 129, 130, 131, 132, 134, 135, 136, 137, 150, 151, 154, 157, 158, 161, 162, 163, 164, 169, 171, 172, 173, 174, 183, 185, 189, 190, 191, 192, 193, 197, 210, 215, 217, 219, 224, 225, 230, 232, 233, 253, 254, 258, 259, 262], "azimuth": [2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 67, 72, 94, 183, 185, 253, 254], "zenith": [2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 67, 72, 94, 183, 185, 253, 254], "radian": [2, 3, 4, 30, 45, 46, 47, 66, 67, 72, 94, 183, 185, 206, 217], "which": [2, 7, 8, 9, 10, 11, 29, 30, 34, 35, 36, 37, 38, 40, 41, 45, 46, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 65, 67, 68, 69, 73, 75, 76, 78, 82, 84, 85, 87, 88, 91, 92, 93, 95, 98, 99, 109, 111, 112, 113, 115, 116, 120, 121, 122, 124, 125, 126, 130, 131, 132, 135, 137, 151, 157, 158, 166, 169, 171, 172, 174, 177, 190, 216, 219, 220, 223, 224, 225, 226, 228, 229, 233, 235, 237, 238, 240, 241, 242, 243, 244, 245, 247, 250, 253, 254, 255, 259, 260, 261], "beam": [2, 255], "spheric": [2, 3, 4, 56, 67, 72, 94, 185, 253, 254, 255], "coordin": [2, 3, 4, 55, 58, 61, 67, 68, 69, 70, 71, 72, 75, 87, 116, 185, 225, 253, 254, 255], "ot": 2, "arg": [2, 6, 35, 52, 57, 60, 78, 81, 85, 87, 89, 90, 92, 110, 113, 115, 116, 117, 119, 138, 139, 140, 141, 157, 158, 166, 174, 175, 176, 177, 178, 225, 229, 230, 253, 254], "option": [2, 3, 4, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 37, 40, 41, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 78, 81, 83, 84, 85, 86, 87, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 149, 150, 151, 152, 153, 154, 155, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 187, 188, 191, 192, 193, 194, 195, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 219, 220, 221, 222, 223, 224, 225, 229, 230, 232, 233, 250], "attach": [2, 59, 72, 99, 114, 116, 149, 151, 152, 153, 154, 155, 157, 165, 167, 168, 170, 173, 180, 181, 203, 225, 250], "default": [2, 3, 6, 7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 33, 37, 39, 40, 45, 46, 47, 48, 49, 50, 52, 53, 54, 57, 59, 60, 63, 64, 65, 66, 67, 69, 71, 72, 73, 75, 81, 84, 86, 87, 88, 90, 91, 92, 93, 94, 99, 106, 109, 111, 112, 113, 115, 116, 117, 118, 120, 125, 127, 129, 130, 131, 132, 141, 150, 151, 157, 158, 166, 169, 171, 172, 174, 175, 176, 177, 178, 180, 183, 188, 191, 192, 193, 200, 201, 202, 204, 205, 206, 207, 210, 219, 220, 221, 222, 223, 225, 229, 230, 232, 234, 256, 262], "consid": [2, 3, 4, 7, 8, 9, 10, 11, 12, 30, 32, 34, 39, 40, 41, 43, 45, 46, 48, 53, 54, 55, 57, 58, 60, 61, 63, 64, 66, 67, 68, 72, 73, 78, 81, 83, 87, 88, 91, 93, 94, 99, 116, 123, 126, 129, 130, 131, 132, 138, 139, 140, 141, 151, 153, 154, 157, 163, 167, 169, 174, 175, 176, 177, 178, 180, 190, 191, 209, 212, 218, 220, 223, 225, 230, 237, 238, 240, 243, 244, 247, 250, 255, 256, 257, 260, 261], "float": [2, 3, 4, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 43, 45, 46, 47, 48, 49, 50, 53, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 72, 75, 76, 78, 81, 82, 83, 86, 87, 88, 89, 92, 93, 94, 98, 99, 109, 111, 112, 115, 116, 117, 120, 123, 131, 132, 133, 135, 137, 138, 139, 141, 151, 152, 153, 154, 157, 158, 161, 162, 163, 166, 167, 169, 173, 174, 175, 176, 177, 178, 180, 183, 185, 187, 188, 191, 192, 193, 194, 197, 206, 208, 209, 212, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 253, 254, 256, 258, 262], "handl": [2, 8, 43, 45, 49, 54, 59, 68, 78, 84, 87, 90, 92, 99, 110, 115, 119, 139, 140, 141, 150, 151, 152, 153, 154, 163, 171, 174, 180, 191, 209, 212, 217, 225, 229], "coordinatefocu": 2, "local": [2, 71, 72, 94, 116, 225, 235, 250, 253, 255], "certain": [2, 72, 99, 250, 263], "cartesian": [2, 55, 59, 65, 66, 69, 71, 72, 75, 94, 115, 185, 225, 255], "paramet": [2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 100, 103, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 125, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 255, 256, 260, 261], "numpi": [2, 3, 4, 43, 44, 45, 46, 63, 64, 66, 69, 72, 73, 87, 88, 91, 93, 94, 95, 98, 99, 100, 103, 106, 112, 115, 116, 125, 127, 134, 136, 143, 150, 183, 189, 190, 191, 192, 193, 197, 215, 225, 228, 253, 254, 255, 256, 257, 258, 259, 260, 262], "m": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 34, 41, 42, 46, 53, 56, 59, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 75, 87, 88, 93, 94, 98, 103, 112, 123, 146, 172, 173, 182, 183, 185, 187, 193, 194, 197, 208, 224, 232, 233, 235, 237, 242, 245, 249, 253, 254, 261, 263], "str": [2, 4, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 44, 54, 72, 84, 85, 87, 88, 92, 93, 95, 98, 99, 100, 103, 106, 112, 113, 114, 115, 117, 119, 120, 123, 125, 129, 130, 131, 132, 138, 139, 140, 143, 150, 155, 157, 158, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 183, 184, 187, 189, 191, 192, 205, 207, 219, 220, 221, 223, 224, 229, 230, 256, 258], "frame": [2, 71, 72, 75, 83, 92, 93, 94, 98, 99, 115, 116, 123, 124, 126, 128, 132, 133, 134, 136, 139, 141, 147, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 182, 193, 194, 197, 219, 225, 226, 227, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 252, 256, 257, 258, 260, 261, 262], "liter": [2, 72, 93, 183], "global": [2, 54, 55, 58, 59, 61, 65, 66, 68, 69, 72, 87, 94, 238, 243, 261, 263], "devicefocu": [2, 255], "devic": [2, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 53, 55, 57, 58, 61, 63, 64, 66, 67, 68, 70, 72, 77, 78, 79, 80, 81, 82, 83, 89, 90, 92, 108, 110, 111, 112, 117, 118, 119, 121, 122, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 154, 182, 189, 190, 191, 192, 193, 194, 198, 201, 202, 203, 208, 209, 210, 211, 212, 214, 215, 223, 228, 230, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "target": [2, 55, 56, 60, 61, 63, 64, 72, 182, 189, 190, 191, 192, 193, 242, 247, 248, 254, 255, 261, 263], "alia": [2, 10, 34, 61, 72, 85, 92, 95, 151, 157, 180, 216], "receivestreamdecod": [2, 181], "characteris": 2, "its": [2, 3, 4, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 37, 40, 42, 45, 52, 55, 57, 59, 67, 71, 72, 75, 85, 87, 88, 94, 99, 106, 116, 118, 175, 182, 194, 200, 201, 202, 203, 204, 205, 206, 207, 208, 225, 226, 230, 242, 247, 248, 249, 250, 253, 254, 255, 260], "requir": [2, 3, 4, 7, 8, 37, 40, 51, 78, 84, 87, 88, 93, 98, 99, 106, 108, 111, 113, 124, 125, 133, 141, 142, 143, 144, 145, 146, 147, 151, 157, 163, 164, 169, 173, 174, 175, 177, 180, 181, 182, 188, 193, 194, 197, 212, 214, 220, 221, 222, 225, 234, 235, 236, 246, 247, 249, 250, 251, 252, 253, 254, 257, 258, 259, 260, 262, 263], "number": [2, 3, 4, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 34, 39, 40, 41, 45, 46, 47, 48, 53, 58, 61, 68, 72, 73, 75, 76, 78, 81, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 98, 99, 100, 103, 106, 110, 111, 112, 113, 115, 117, 118, 120, 124, 125, 129, 130, 131, 132, 133, 134, 136, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 157, 161, 162, 163, 164, 169, 171, 172, 174, 175, 176, 177, 178, 180, 181, 183, 187, 191, 192, 193, 202, 208, 209, 212, 214, 219, 220, 223, 227, 229, 230, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 250, 253, 254, 256, 258, 260, 262], "input": [2, 3, 4, 75, 82, 92, 98, 99, 100, 103, 106, 113, 115, 116, 117, 118, 143, 144, 145, 146, 147, 180, 181, 217, 219, 220, 221, 222, 224, 225, 226, 230, 232, 233, 252, 259, 260, 263], "n": [2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 35, 37, 42, 45, 47, 99, 100, 106, 112, 146, 151, 157, 169, 174, 233, 243, 245, 249, 253, 254, 257, 259], "result": [2, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 37, 42, 45, 48, 49, 50, 55, 57, 66, 67, 70, 72, 81, 84, 85, 87, 88, 90, 93, 94, 95, 98, 99, 116, 124, 127, 129, 130, 131, 132, 139, 141, 143, 144, 145, 146, 147, 151, 154, 157, 169, 174, 175, 180, 181, 184, 186, 188, 189, 190, 191, 192, 193, 194, 209, 219, 224, 225, 229, 235, 247, 248, 249, 250, 253, 254, 255, 256, 258, 259, 260, 261, 262], "output": [2, 3, 4, 6, 52, 70, 75, 77, 84, 86, 87, 88, 92, 98, 99, 100, 103, 106, 129, 130, 131, 132, 143, 144, 145, 146, 147, 174, 180, 181, 189, 190, 191, 192, 219, 225, 227, 229, 233, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "support": [2, 5, 48, 49, 74, 78, 124, 132, 142, 143, 144, 145, 146, 147, 148, 149, 151, 157, 169, 219, 231, 232, 249, 250, 251], "f": [2, 3, 4, 12, 27, 49, 51, 72, 83, 131, 132, 154, 193, 194, 197, 223, 224, 250, 257, 258, 259, 262, 263], "matrix": [2, 3, 4, 8, 35, 39, 43, 44, 46, 58, 59, 61, 63, 64, 65, 66, 68, 69, 72, 73, 93, 112, 150, 183, 193, 197, 210, 215, 217, 228, 229, 230, 233, 253, 254], "t": [2, 3, 4, 6, 7, 8, 12, 27, 32, 35, 37, 39, 42, 45, 47, 55, 60, 72, 78, 81, 92, 93, 129, 130, 131, 132, 150, 154, 172, 173, 183, 224, 237, 253, 254, 255, 260, 263], "baseband": [2, 141, 193, 226, 253, 254, 262], "sampl": [2, 3, 4, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 34, 40, 41, 45, 46, 47, 48, 53, 58, 61, 64, 68, 72, 73, 75, 76, 81, 83, 87, 88, 89, 93, 109, 112, 113, 114, 115, 116, 118, 120, 123, 133, 139, 141, 151, 154, 157, 158, 161, 163, 164, 169, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 192, 193, 194, 197, 219, 220, 221, 222, 224, 225, 227, 229, 233, 237, 238, 240, 241, 242, 243, 244, 245, 247, 253, 254, 255, 256, 258, 262], "mathbf": [2, 3, 4, 7, 8, 9, 10, 11, 12, 27, 30, 32, 34, 35, 37, 39, 41, 42, 45, 46, 53, 55, 59, 61, 65, 66, 69, 72, 98, 103, 129, 130, 131, 132, 153, 154, 253, 254, 259], "x": [2, 3, 4, 7, 8, 10, 11, 72, 73, 87, 88, 93, 94, 98, 103, 151, 154, 157, 158, 162, 169, 173, 174, 208, 217, 219, 224, 232, 234, 236, 241, 243, 244, 246, 255], "mathbb": [2, 3, 4, 7, 8, 9, 10, 11, 12, 30, 34, 39, 41, 45, 46, 53, 61, 72, 87, 88, 130, 131, 132, 183, 224, 253, 254], "c": [2, 3, 4, 7, 8, 9, 10, 11, 12, 27, 30, 32, 34, 35, 37, 39, 41, 42, 45, 46, 48, 53, 55, 61, 63, 64, 66, 72, 86, 172, 173, 183, 194, 224, 235, 249, 250, 251, 253, 254, 255, 263], "time": [2, 3, 4, 7, 8, 9, 10, 11, 12, 30, 31, 34, 39, 41, 42, 45, 46, 51, 53, 55, 58, 61, 68, 71, 72, 73, 82, 87, 93, 94, 103, 111, 112, 116, 121, 123, 133, 135, 137, 141, 142, 150, 151, 154, 157, 158, 159, 160, 161, 162, 163, 164, 169, 171, 172, 173, 174, 183, 194, 224, 225, 226, 227, 228, 236, 237, 238, 241, 243, 244, 245, 246, 247, 248, 250, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263], "y": [2, 3, 4, 7, 8, 10, 11, 72, 94, 98, 103, 208, 234, 253, 254, 255], "mathcal": [2, 3, 4, 35], "b": [2, 3, 4, 42, 48, 86, 129, 130, 131, 132, 183, 232, 237, 247, 250, 263], "lbrace": [2, 3, 4, 7, 12, 39, 98, 103, 129, 130, 131, 132, 224], "rbrace": [2, 3, 4, 7, 12, 39, 98, 103, 129, 130, 131, 132, 224], "quad": [2, 12, 154, 223], "text": [2, 7, 8, 10, 11, 12, 35, 37, 39, 42, 55, 85, 87, 129, 130, 131, 132, 154, 223, 224, 239], "function": [2, 7, 8, 12, 27, 58, 61, 68, 70, 87, 90, 92, 108, 122, 139, 141, 179, 182, 232, 249, 250, 251, 252, 257, 259, 262], "compress": [2, 258], "while": [2, 55, 81, 99, 247, 251, 258, 260], "_decod": [2, 3, 4, 253, 254], "carrier_frequ": [2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 63, 64, 66, 67, 72, 75, 76, 93, 109, 116, 120, 124, 138, 139, 140, 141, 182, 183, 189, 191, 192, 193, 202, 225, 227, 232, 237, 241, 242, 243, 244, 245, 246, 247, 253, 254, 255, 256, 257, 259, 261], "decod": [2, 3, 4, 98, 99, 100, 103, 106, 133, 134, 135, 139, 142, 143, 144, 146, 147, 148, 149, 180, 181, 253, 254, 259, 260, 263], "method": [2, 3, 4, 7, 8, 9, 10, 11, 53, 58, 68, 73, 78, 81, 84, 85, 87, 99, 114, 134, 135, 136, 137, 139, 141, 150, 159, 174, 182, 189, 190, 194, 195, 196, 197, 229, 232, 247, 249, 250, 253, 254, 255, 256, 258, 260, 262, 263], "call": [2, 3, 4, 7, 8, 40, 45, 48, 72, 75, 78, 81, 87, 88, 92, 114, 115, 117, 118, 134, 135, 136, 137, 138, 139, 140, 141, 182, 194, 195, 196, 197, 202, 224, 225, 230, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260], "subroutin": [2, 3, 4, 8, 10, 139, 194, 197, 224, 253, 254, 257], "np": [2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 45, 47, 53, 54, 57, 64, 66, 67, 69, 71, 72, 73, 75, 87, 88, 93, 94, 98, 99, 100, 103, 106, 109, 112, 115, 116, 125, 127, 132, 137, 146, 150, 151, 154, 157, 158, 161, 162, 163, 164, 169, 171, 172, 173, 174, 175, 176, 177, 178, 183, 185, 189, 190, 191, 192, 210, 217, 219, 224, 225, 230, 232, 233, 253, 254, 255, 256, 257, 258, 259, 260, 262], "first": [2, 3, 4, 7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 45, 46, 48, 49, 50, 53, 55, 58, 61, 68, 87, 109, 113, 116, 150, 154, 158, 173, 174, 191, 193, 197, 225, 235, 241, 245, 246, 250, 252, 256, 257, 259, 261], "dimens": [2, 3, 4, 7, 39, 72, 73, 87, 88, 106, 112, 113, 116, 127, 150, 162, 183, 189, 190, 191, 192, 193, 197, 208, 225, 230, 237, 238, 240, 241, 242, 243, 244, 245, 255, 256, 260], "being": [2, 3, 4, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 41, 42, 45, 46, 48, 49, 50, 55, 58, 61, 68, 86, 90, 98, 113, 174, 177, 182, 247, 250, 251, 253, 254, 258], "second": [2, 3, 4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 53, 58, 61, 63, 64, 66, 68, 75, 83, 87, 92, 93, 111, 112, 115, 116, 123, 132, 133, 135, 137, 141, 150, 151, 153, 157, 161, 167, 174, 175, 177, 183, 193, 194, 197, 219, 224, 225, 229, 233, 237, 241, 243, 244, 245, 256, 261, 263], "assum": [2, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 35, 37, 39, 45, 54, 56, 59, 62, 65, 67, 69, 71, 72, 78, 86, 87, 92, 93, 112, 115, 116, 117, 146, 150, 151, 169, 174, 175, 176, 178, 189, 191, 194, 200, 201, 202, 203, 204, 205, 206, 207, 208, 225, 230, 242, 243, 244, 247, 250, 251, 253, 254, 255, 257, 259, 261], "carrier": [2, 3, 4, 32, 63, 64, 66, 75, 76, 93, 109, 115, 116, 120, 142, 144, 146, 147, 154, 159, 169, 173, 175, 176, 177, 178, 183, 223, 225, 227, 232, 237, 239, 240, 241, 242, 243, 247, 252, 253, 254, 257, 261, 263], "central": [2, 3, 4, 75, 87, 93, 109, 120, 151, 183, 225], "frequenc": [2, 3, 4, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 45, 46, 47, 48, 49, 63, 64, 66, 72, 73, 75, 76, 93, 109, 112, 115, 116, 120, 146, 151, 157, 159, 160, 162, 169, 172, 173, 174, 175, 177, 183, 193, 197, 198, 199, 200, 202, 204, 223, 224, 225, 227, 232, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 253, 254, 255, 256, 257, 261, 263], "f_": [2, 3, 4, 7, 12, 32, 35, 37, 55, 63, 64, 66, 72, 83, 193, 194, 197], "mathrm": [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 37, 41, 42, 46, 47, 53, 55, 56, 61, 63, 64, 66, 72, 83, 87, 88, 99, 100, 103, 120, 129, 130, 131, 132, 154, 169, 182, 183, 193, 194, 197, 223, 224, 252, 253, 254, 261], "arriv": [2, 3, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 72, 116, 183, 225, 230], "three": [2, 3, 4, 75, 94, 115, 146, 150, 183, 185, 190, 223, 225, 247, 249, 250, 253, 254, 255, 260], "dimension": [2, 3, 4, 8, 43, 44, 72, 75, 87, 94, 115, 116, 127, 129, 130, 131, 132, 145, 147, 149, 150, 180, 183, 185, 192, 215, 225, 228, 256], "repres": [2, 3, 4, 7, 8, 9, 10, 11, 12, 30, 34, 41, 43, 44, 45, 46, 47, 53, 55, 59, 61, 65, 66, 69, 72, 85, 86, 87, 88, 91, 92, 94, 98, 99, 100, 103, 106, 109, 115, 125, 127, 129, 130, 131, 132, 138, 139, 140, 141, 148, 150, 171, 180, 183, 187, 189, 190, 191, 192, 194, 224, 229, 236, 241, 243, 244, 246, 247, 250, 255, 258, 259, 260, 262], "magnitud": [2, 3, 4, 72, 255], "third": [2, 3, 4, 150, 250, 256], "contain": [2, 3, 4, 5, 6, 7, 27, 58, 61, 68, 72, 73, 82, 85, 87, 89, 92, 93, 99, 106, 116, 124, 134, 151, 154, 157, 169, 171, 174, 175, 176, 177, 178, 187, 189, 191, 194, 225, 228, 231, 249, 250, 257, 263], "antennaarrai": [2, 3, 4, 72, 75, 202, 254], "amount": [2, 3, 4, 39, 72, 93], "decode_stream": [2, 181], "encod": [2, 4, 98, 99, 100, 103, 106, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 157, 159, 161, 163, 164, 171, 180, 181, 194, 237, 238, 243, 244, 245, 259, 260, 262], "recepept": [2, 181], "modifi": [2, 143, 144, 145, 147, 148, 149, 181, 202, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "focus_point": 2, "two": [2, 4, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 43, 44, 45, 48, 49, 50, 55, 57, 72, 87, 116, 124, 125, 126, 127, 128, 129, 130, 131, 132, 140, 144, 145, 146, 147, 150, 151, 157, 191, 192, 193, 210, 211, 215, 224, 225, 228, 230, 245, 247, 250, 252, 255, 257, 258, 260, 261], "valu": [2, 11, 12, 13, 31, 35, 45, 48, 49, 72, 73, 74, 75, 84, 85, 86, 87, 88, 92, 93, 120, 129, 130, 131, 132, 150, 151, 157, 158, 160, 161, 162, 163, 164, 166, 169, 171, 172, 174, 177, 183, 188, 189, 191, 219, 220, 223, 224, 232, 247, 252, 262], "sequenc": [2, 3, 4, 45, 46, 47, 58, 72, 75, 76, 78, 81, 82, 85, 86, 87, 88, 92, 93, 106, 109, 115, 116, 117, 118, 125, 127, 141, 142, 150, 151, 157, 158, 161, 163, 164, 169, 171, 172, 174, 175, 176, 177, 178, 180, 189, 190, 191, 192, 193, 194, 201, 203, 208, 219, 225, 226, 227, 228, 230, 262], "If": [2, 3, 4, 6, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 40, 45, 48, 49, 54, 60, 64, 67, 72, 73, 75, 78, 81, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 98, 99, 100, 103, 106, 109, 112, 113, 114, 115, 116, 117, 118, 120, 123, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 158, 162, 171, 173, 174, 175, 180, 183, 185, 190, 191, 192, 193, 194, 200, 201, 202, 203, 204, 209, 212, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 227, 229, 230, 232, 234, 249, 250, 252], "receive_focu": [2, 3, 4], "specifi": [2, 6, 7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 40, 42, 45, 48, 49, 50, 52, 54, 55, 64, 72, 75, 78, 81, 87, 92, 93, 95, 112, 115, 116, 117, 118, 140, 151, 157, 171, 175, 176, 177, 178, 183, 194, 201, 202, 203, 209, 212, 214, 216, 220, 224, 225, 229, 230, 234, 243, 244, 249, 250, 253, 254, 255, 257, 260], "request": [2, 73, 92, 99, 248], "rais": [2, 3, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 40, 45, 48, 49, 50, 54, 56, 60, 67, 72, 73, 75, 78, 81, 84, 85, 87, 88, 90, 92, 93, 94, 98, 99, 100, 103, 106, 109, 112, 113, 114, 115, 116, 117, 118, 120, 123, 124, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 156, 157, 158, 162, 171, 173, 174, 175, 177, 180, 183, 185, 187, 188, 190, 192, 193, 200, 202, 203, 204, 209, 212, 214, 216, 217, 219, 221, 223, 224, 225, 227, 229, 230, 232, 247, 252, 253, 258], "floatingerror": [2, 81, 209, 212, 214], "yet": [2, 8, 60, 78, 81, 225], "runtimeerror": [2, 60, 75, 78, 90, 92, 93, 94, 99, 114, 117, 118, 146, 151, 154, 158, 173, 180, 183, 225, 230, 258], "doe": [2, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 54, 67, 75, 78, 85, 87, 90, 92, 94, 98, 99, 100, 103, 106, 115, 116, 117, 118, 132, 202, 209, 212, 214, 230, 247, 250, 251], "match": [2, 39, 75, 78, 81, 87, 92, 93, 99, 115, 116, 117, 118, 122, 150, 183, 202, 209, 210, 212, 214, 230], "valueerror": [2, 3, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 45, 48, 49, 50, 54, 56, 67, 72, 73, 75, 78, 81, 84, 85, 87, 88, 90, 92, 93, 94, 98, 99, 100, 103, 106, 109, 112, 113, 115, 116, 117, 118, 120, 123, 146, 150, 157, 158, 162, 171, 174, 175, 177, 180, 183, 185, 187, 188, 190, 192, 193, 200, 202, 203, 204, 209, 212, 214, 216, 217, 219, 221, 223, 224, 225, 227, 229, 230, 232], "num_receive_focus_point": [2, 3, 4, 254], "int": [2, 3, 4, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 34, 40, 41, 45, 46, 47, 48, 53, 54, 58, 61, 72, 73, 75, 76, 78, 81, 82, 85, 86, 87, 89, 90, 91, 92, 93, 98, 99, 100, 103, 106, 109, 110, 111, 112, 113, 115, 118, 120, 125, 132, 133, 134, 136, 139, 141, 143, 144, 145, 146, 147, 149, 150, 151, 154, 157, 158, 160, 161, 162, 163, 164, 169, 171, 172, 173, 174, 177, 180, 181, 187, 191, 192, 193, 194, 208, 219, 223, 227, 229, 230, 233, 234, 253, 254, 256, 259, 260, 262], "1": [2, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 37, 39, 40, 42, 45, 47, 48, 49, 50, 51, 55, 57, 67, 72, 73, 74, 75, 83, 84, 85, 86, 87, 88, 90, 92, 93, 98, 99, 103, 106, 120, 129, 130, 131, 132, 141, 142, 143, 144, 145, 146, 147, 150, 151, 154, 157, 158, 160, 161, 162, 163, 164, 166, 169, 172, 173, 174, 175, 176, 177, 178, 182, 189, 191, 192, 193, 194, 197, 200, 204, 205, 206, 207, 217, 219, 220, 221, 224, 225, 232, 233, 236, 238, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "otherwis": [2, 3, 4, 39, 225, 250], "multi": [2, 3, 4, 7, 51, 139, 149, 180, 194, 248, 263], "num_receive_input_stream": [2, 3, 4, 181, 253, 254], "num_receive_output_stream": [2, 3, 4, 181, 253, 254], "access": [2, 48, 49, 54, 58, 61, 67, 68, 72, 73, 87, 106, 149, 150, 151, 153, 157, 169, 174, 180, 217, 230, 247, 248, 250, 255, 256, 257, 263, 264], "configur": [2, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 35, 37, 42, 43, 45, 48, 49, 50, 54, 55, 57, 67, 75, 78, 81, 84, 85, 87, 88, 92, 98, 99, 109, 112, 113, 115, 118, 120, 124, 125, 126, 129, 130, 131, 132, 133, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 157, 158, 162, 163, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 189, 191, 192, 193, 194, 202, 209, 210, 211, 212, 214, 216, 217, 225, 229, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "current": [2, 5, 6, 27, 32, 43, 54, 55, 71, 73, 78, 81, 83, 84, 87, 92, 93, 94, 99, 122, 123, 124, 125, 126, 132, 138, 139, 141, 150, 151, 154, 169, 174, 180, 182, 190, 197, 218, 219, 225, 229, 235, 239, 247, 248, 258], "probe_focus_point": [2, 253, 254], "index": [2, 55, 72, 87, 90, 92, 103, 113, 180, 229, 230, 234, 235, 249, 258], "On": [2, 50, 75, 87, 88, 109, 120, 174, 177, 188, 225, 230, 255, 256, 263], "invalid": [2, 50, 72, 73, 87, 94, 250], "argument": [2, 33, 37, 50, 57, 72, 87, 93, 109, 113, 120, 157, 183, 224], "either": [2, 7, 51, 67, 93, 142, 191, 219, 247, 249, 250, 257], "sphericalfocu": [2, 255], "transmitt": [2, 7, 8, 9, 10, 11, 30, 34, 41, 42, 46, 53, 54, 57, 61, 63, 64, 66, 70, 75, 78, 83, 89, 92, 106, 123, 129, 130, 131, 132, 138, 140, 141, 152, 154, 180, 194, 217, 225, 229, 230, 236, 237, 238, 243, 244, 245, 246, 247, 256], "transmitstreamencod": [2, 181], "encode_stream": [2, 181], "transmit": [2, 4, 7, 8, 9, 10, 11, 30, 32, 34, 39, 40, 41, 42, 46, 53, 55, 61, 63, 64, 66, 67, 72, 73, 75, 76, 80, 81, 82, 83, 89, 92, 93, 98, 99, 100, 103, 106, 108, 109, 111, 112, 115, 116, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 144, 145, 146, 147, 150, 151, 153, 154, 157, 161, 163, 164, 169, 171, 174, 175, 176, 177, 178, 182, 189, 190, 191, 192, 193, 194, 196, 197, 200, 202, 204, 205, 206, 207, 209, 210, 212, 214, 215, 217, 224, 225, 226, 227, 228, 230, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263], "transmit_focu": [2, 4, 255], "num_transmit_focus_point": [2, 4], "num_transmit_input_stream": [2, 4, 181], "num_transmit_output_stream": [2, 4, 181], "caponbeamform": [3, 253, 254], "load": [3, 85, 115, 251], "0": [3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 37, 39, 40, 42, 45, 47, 48, 49, 50, 57, 67, 72, 74, 75, 81, 84, 86, 87, 88, 89, 92, 93, 98, 103, 106, 111, 112, 115, 116, 120, 124, 129, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 153, 157, 158, 160, 162, 164, 166, 167, 169, 174, 175, 176, 177, 178, 183, 187, 189, 192, 193, 194, 206, 216, 219, 220, 221, 224, 225, 229, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "kwarg": [3, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 33, 35, 37, 45, 48, 49, 50, 52, 57, 60, 67, 78, 81, 87, 89, 90, 92, 93, 109, 110, 113, 115, 116, 117, 119, 120, 123, 138, 139, 140, 141, 151, 157, 158, 166, 169, 174, 175, 176, 177, 178, 224, 225, 230, 253, 254], "also": [3, 4, 7, 12, 60, 72, 116, 143, 169, 224, 225, 238, 241, 247, 249, 250, 253, 254, 255, 261], "minimum": [3, 87, 88, 112, 139, 141, 154, 157, 158, 166, 237, 238, 240, 241, 242, 243, 244, 245, 253, 254], "varianc": [3, 115, 216, 253, 254], "distortionless": [3, 253, 254], "respons": [3, 4, 27, 32, 35, 37, 39, 42, 46, 51, 54, 55, 63, 64, 66, 72, 73, 112, 200, 202, 204, 218, 219, 250, 252, 253, 254, 256], "mvdr": [3, 253, 254], "estim": [3, 4, 12, 60, 78, 87, 88, 111, 112, 115, 123, 124, 127, 132, 138, 139, 140, 150, 151, 154, 156, 157, 159, 165, 169, 174, 175, 176, 177, 178, 183, 189, 192, 193, 194, 197, 220, 221, 222, 236, 242, 243, 244, 246, 247, 248, 253, 254, 255, 256, 257, 258, 260, 261, 263], "hat": [3, 4, 12, 253, 254], "p": [3, 4, 37, 42, 55, 58, 61, 66, 68, 87, 88, 106, 146, 253, 254, 263], "theta": [3, 4, 27, 72, 253, 254], "phi": [3, 4, 27, 72, 223, 224, 253, 254], "where": [3, 4, 35, 55, 57, 58, 61, 68, 72, 87, 92, 93, 99, 112, 116, 171, 183, 193, 197, 223, 224, 225, 233, 250, 253, 254, 255], "let": [3, 4, 7, 8, 10, 11, 98, 103, 109, 250, 253, 254, 255, 257, 258, 259, 260, 261, 262], "discret": [3, 4, 7, 9, 10, 11, 12, 30, 34, 41, 46, 53, 61, 73, 93, 133, 142, 151, 157, 169, 174, 183, 193, 197, 253, 254], "acquir": [3, 4, 250, 253, 254], "arrari": [3, 4, 253, 254], "r": [3, 45, 51, 72, 87, 88, 98, 99, 106, 183, 193, 197, 224, 243, 253, 254, 259, 263], "left": [3, 7, 8, 10, 11, 12, 39, 42, 45, 47, 55, 72, 83, 87, 88, 98, 99, 103, 129, 130, 131, 132, 193, 194, 197, 224], "mathsf": [3, 4, 12, 39, 45, 47, 55, 129, 130, 131, 132, 253, 254], "h": [3, 4, 6, 7, 8, 9, 10, 11, 27, 30, 32, 34, 35, 37, 39, 41, 42, 46, 53, 55, 61, 72, 87, 88, 153, 154, 234, 253, 254, 263], "lambda": [3, 193, 197], "right": [3, 7, 8, 10, 11, 12, 39, 42, 45, 47, 55, 72, 83, 87, 88, 98, 99, 103, 129, 130, 131, 132, 193, 194, 197, 224, 250, 258, 260], "correl": [3, 7, 42, 45, 46, 157, 159, 210, 237, 253, 254, 263], "factor": [3, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 58, 61, 68, 72, 141, 151, 174, 176, 177, 178, 224, 237, 238, 241, 252], "_": [3, 4, 27, 45, 55, 56, 72, 87, 88, 129, 130, 131, 132, 171, 172, 224, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "far": [3, 4, 56, 59, 62, 65, 69, 72, 174, 253, 254], "field": [3, 4, 51, 56, 59, 62, 65, 69, 72, 182, 253, 254, 263], "small": [3, 4, 253, 254], "rel": [3, 4, 37, 55, 63, 64, 66, 87, 93, 94, 113, 158, 174, 176, 177, 178, 188, 193, 197, 253, 254], "bandwidth": [3, 4, 57, 67, 115, 151, 157, 169, 174, 175, 176, 177, 178, 193, 237, 238, 241, 245, 253, 254, 261, 262], "Then": [3, 4, 124, 253, 254], "defin": [3, 6, 27, 48, 49, 72, 87, 88, 98, 99, 108, 124, 129, 130, 131, 132, 151, 157, 169, 174, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 253, 254, 255, 257, 258, 260, 261, 262], "frac": [3, 7, 12, 27, 32, 35, 37, 42, 47, 55, 72, 87, 88, 98, 99, 100, 103, 129, 132, 146, 193, 194, 197, 223, 224, 253, 254, 259], "w": [3, 4, 193, 197, 234, 253, 254, 255], "weight": [3, 4, 63, 64, 66, 73, 200, 204, 205, 206, 207, 253, 254], "sensor": [3, 4, 35, 37, 63, 64, 66, 67, 72, 253, 254], "characterist": [3, 4, 27, 55, 57, 58, 61, 67, 68, 72, 174, 182, 190, 199, 200, 202, 204, 219, 224, 242, 253, 254, 264], "so": [3, 4, 8, 12, 31, 42, 72, 146, 153, 188, 194, 224, 233, 247, 250, 251, 252, 253, 254, 257, 259, 260], "equat": [3, 4, 8, 9, 10, 11, 30, 34, 41, 42, 45, 46, 47, 53, 59, 61, 63, 64, 65, 66, 69, 86, 98, 99, 100, 103, 106, 127, 224, 232, 253, 254, 259], "diagon": [3, 39], "covari": [3, 43, 44, 112, 253, 254], "coeffici": 3, "zero": [3, 7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31, 39, 45, 48, 56, 67, 72, 73, 75, 87, 88, 92, 93, 99, 100, 109, 111, 112, 115, 116, 120, 123, 129, 130, 131, 132, 157, 158, 159, 162, 169, 174, 175, 176, 177, 178, 183, 185, 187, 188, 193, 216, 219, 221, 224, 225, 227, 230, 232, 236, 240, 241, 244, 246, 256], "robust": [3, 172, 173, 263], "rank": 3, "defici": 3, "For": [3, 7, 8, 13, 27, 39, 40, 42, 45, 56, 87, 88, 90, 92, 109, 115, 120, 138, 139, 140, 146, 147, 157, 174, 175, 176, 177, 178, 180, 182, 187, 193, 194, 224, 234, 247, 248, 249, 250, 252, 253, 254, 255, 257, 262], "smaller": [3, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 45, 48, 56, 67, 72, 75, 87, 90, 92, 93, 99, 100, 103, 115, 123, 157, 158, 174, 175, 177, 185, 187, 188, 193, 216, 221, 224, 227, 229, 230, 233], "than": [3, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 45, 48, 56, 67, 72, 75, 87, 88, 90, 92, 93, 98, 99, 100, 103, 109, 115, 120, 146, 158, 162, 174, 175, 187, 193, 200, 204, 216, 217, 219, 224, 225, 227, 229, 230, 233, 234, 250, 255], "j": [3, 42, 47, 55, 72, 224, 263], "high": [3, 106, 248, 261, 263], "resolut": [3, 72, 123, 193, 194, 197, 219, 263], "wavenumb": [3, 263], "spectrum": [3, 263], "analysi": [3, 4, 263], "proceed": [3, 12, 144, 263], "ieee": [3, 12, 42, 49, 51, 72, 106, 146, 172, 173, 217, 224, 248, 263], "57": [3, 243, 263], "8": [3, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 35, 37, 42, 45, 48, 49, 50, 124, 129, 130, 131, 132, 146, 157, 158, 166, 189, 237, 241, 242, 247, 250, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263], "1408": [3, 263], "1418": [3, 263], "1969": [3, 263], "doi": [3, 12, 42, 49, 51, 72, 87, 88, 106, 144, 146, 154, 172, 173, 217, 224, 248, 263], "10": [3, 7, 8, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 35, 37, 42, 45, 48, 49, 50, 51, 57, 67, 72, 86, 87, 88, 93, 106, 111, 124, 129, 130, 131, 132, 144, 146, 154, 172, 173, 192, 193, 217, 223, 224, 235, 236, 237, 238, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263], "1109": [3, 12, 42, 49, 51, 72, 106, 144, 146, 172, 173, 217, 224, 248, 263], "proc": [3, 263], "7278": [3, 263], "refererd": 4, "delai": [4, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 39, 40, 41, 42, 45, 46, 47, 48, 50, 53, 54, 55, 58, 61, 63, 64, 66, 68, 73, 93, 108, 112, 115, 116, 153, 154, 167, 225, 226, 227, 233, 237, 243, 244, 245, 255, 256, 263], "sum": [4, 27, 42, 55, 86, 151, 157, 169, 174, 192, 255, 258, 263], "conventionalbeamform": [4, 138, 139, 140, 141, 253, 254, 255], "bartlett": [4, 263], "known": [4, 12, 106, 153, 158, 183, 253, 254], "maxim": [4, 67, 109, 115, 116, 120, 123, 142, 154, 187, 242], "_encod": 4, "focus_angl": 4, "departur": [4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "elev": [4, 72], "yaml_tag": [4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 44, 54, 72, 92, 98, 99, 100, 103, 106, 110, 113, 119, 120, 123, 131, 132, 138, 139, 140, 155, 157, 158, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 184, 205, 207, 219, 220, 221, 223, 224, 230], "yaml": [4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 44, 49, 72, 85, 98, 99, 100, 103, 106, 113, 119, 120, 123, 131, 132, 138, 139, 140, 155, 157, 158, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 184, 205, 207, 219, 220, 221, 223, 224, 229, 247, 248], "serial": [4, 8, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 34, 35, 36, 37, 38, 40, 44, 45, 46, 49, 52, 53, 57, 58, 67, 68, 70, 72, 92, 98, 99, 100, 103, 106, 113, 119, 120, 123, 131, 132, 138, 139, 140, 155, 157, 158, 166, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 184, 205, 207, 219, 220, 221, 223, 224, 229], "tag": [4, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 44, 72, 85, 98, 99, 100, 103, 106, 113, 119, 120, 123, 131, 132, 138, 139, 140, 155, 157, 158, 166, 167, 170, 171, 172, 173, 175, 176, 177, 178, 181, 184, 205, 207, 219, 220, 221, 223, 224], "periodogram": [4, 263], "continu": [4, 7, 12, 175, 193, 250, 263], "spectra": [4, 263], "biometrika": [4, 263], "37": [4, 263], "2": [4, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 35, 37, 42, 45, 47, 48, 49, 50, 51, 55, 56, 57, 59, 62, 65, 66, 67, 69, 72, 74, 84, 87, 88, 92, 106, 129, 130, 131, 132, 143, 144, 145, 146, 147, 150, 151, 157, 158, 160, 162, 166, 169, 174, 175, 176, 177, 178, 182, 183, 189, 193, 219, 220, 223, 224, 234, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 250, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "16": [4, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 45, 48, 49, 50, 124, 129, 130, 131, 132, 138, 139, 140, 141, 144, 145, 146, 147, 151, 157, 169, 174, 175, 176, 177, 178, 237, 238, 240, 241, 242, 244, 245, 247, 250, 255, 256, 259, 260, 262, 263], "1950": [4, 263], "url": [4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 224, 263], "http": [4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 217, 224, 234, 246, 250, 263], "www": [4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 250, 263], "jstor": [4, 263], "org": [4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 217, 246, 250, 263], "stabl": [4, 263], "2332141": [4, 263], "visit": [4, 248, 263], "2022": [4, 248, 263], "06": [4, 193, 263], "28": [4, 28, 35, 37, 250, 263], "binari": [5, 87, 191, 249, 261, 262, 263], "definit": [5, 70, 159, 250, 255], "execut": [5, 6, 7, 51, 54, 70, 87, 90, 92, 99, 180, 182, 191, 194, 229, 235, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "launch": [5, 6, 54, 87, 229, 235, 236, 239, 246, 247, 255], "command": [5, 235, 239, 247, 249, 250, 261], "line": [5, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 42, 45, 46, 47, 49, 55, 58, 63, 93, 154, 194, 239, 247, 249, 250, 253, 255, 257, 261], "ani": [5, 6, 7, 8, 32, 45, 48, 49, 50, 83, 84, 85, 86, 87, 113, 114, 115, 157, 158, 166, 169, 174, 177, 189, 224, 239, 247, 248, 249, 250, 251, 255, 256, 260], "herm": [5, 51, 52, 54, 55, 85, 86, 129, 130, 131, 132, 153, 154, 182, 235, 239, 246, 247, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262], "primari": [6, 154], "In": [6, 7, 8, 32, 42, 51, 84, 87, 98, 99, 100, 103, 106, 124, 129, 130, 131, 132, 141, 149, 151, 157, 169, 174, 175, 176, 177, 178, 180, 193, 224, 235, 237, 238, 239, 240, 241, 243, 247, 249, 250, 255, 256, 258, 263, 264], "conveni": [6, 42, 72, 89, 90, 92, 123, 133, 140, 194, 203, 229, 239, 247, 250, 262], "make": [6, 87, 246, 248, 249, 250, 257], "sure": [6, 246, 249, 250, 257], "virtual": [6, 51, 55, 87, 237, 243, 244, 245, 249, 251, 263], "python": [6, 51, 235, 239, 247, 248, 249, 251, 253], "you": [6, 246, 249, 250, 252, 258, 264], "instal": [6, 51, 235, 239, 246, 247, 250, 251], "activ": [6, 230, 239, 249, 250, 251, 257], "conda": [6, 249, 251], "venv": [6, 249], "window": [6, 249, 250], "linux": [6, 249], "envnam": [6, 249, 251], "script": [6, 51, 54, 235, 249, 250, 251], "bat": 6, "bin": [6, 73, 93, 183, 189, 193, 197, 249], "termin": [6, 237, 242, 249, 250, 253, 255], "usual": [6, 87, 98, 100, 106, 184, 186, 188, 247], "indic": [6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 42, 54, 72, 78, 81, 87, 88, 93, 94, 109, 115, 116, 120, 124, 126, 128, 129, 130, 131, 132, 146, 147, 150, 151, 154, 157, 158, 173, 174, 180, 183, 185, 189, 191, 192, 193, 197, 216, 225, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 248, 250, 252, 256, 257, 258, 262], "front": [6, 120, 261], "your": [6, 235, 239, 247, 248, 249, 250, 251], "afterward": [6, 124, 139, 157, 175, 176, 177, 178, 182, 239, 249], "o": [6, 199, 261, 263], "output_dir": 6, "file": [6, 54, 85, 87, 92, 113, 115, 125, 191, 229, 235, 239, 247, 248, 249, 250, 251, 253, 257, 261, 264], "scenario": [6, 8, 14, 15, 16, 17, 18, 19, 20, 24, 25, 26, 48, 54, 70, 75, 82, 85, 87, 90, 108, 113, 116, 119, 151, 157, 169, 174, 175, 177, 182, 189, 191, 192, 193, 198, 225, 228, 229, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 253, 254, 255, 256, 257, 258, 259, 261, 262], "repositori": [6, 235, 249, 250, 251, 264], "avail": [6, 72, 75, 78, 81, 84, 87, 92, 93, 124, 125, 147, 153, 174, 197, 203, 225, 242, 243, 244, 247, 249, 250, 258, 262], "path": [6, 27, 42, 45, 46, 48, 53, 54, 63, 66, 84, 85, 87, 92, 115, 125, 154, 174, 235, 239, 249, 251, 261], "yml": [6, 85], "descript": [6, 27, 45, 70, 87, 96, 133, 138, 140, 151, 157, 169, 172, 173, 175, 176, 177, 178, 182, 194, 197, 199, 247, 249], "help": [6, 248], "displai": [6, 87, 93, 250, 264], "directori": [6, 84, 85, 229, 235, 247, 249, 251], "style": [6, 84, 87, 239, 247, 248], "plot": [6, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 72, 73, 87, 88, 93, 95, 108, 113, 121, 124, 126, 127, 129, 130, 131, 132, 150, 174, 182, 183, 189, 191, 192, 219, 224, 229, 247, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "run": [6, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 54, 57, 67, 84, 87, 90, 92, 113, 119, 124, 129, 130, 131, 132, 188, 189, 191, 192, 193, 229, 235, 239, 247, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 264], "test": [6, 63, 64, 65, 66, 116, 117, 190, 191, 192, 247], "mode": [6, 7, 9, 10, 53, 72, 73, 84, 87, 90, 92, 93, 117, 118, 153, 200, 204, 205, 206, 207, 229, 230, 250], "No": [6, 27, 31, 42, 74, 94, 124, 151, 156, 162, 223, 242, 250, 263], "artifact": [6, 84, 87, 88, 126, 127, 129, 130, 131, 132, 189, 190, 191, 192, 229, 258], "save": [6, 84, 87, 92, 115, 239, 261], "folder": [6, 85], "wa": [6, 8, 9, 29, 35, 37, 40, 45, 52, 57, 60, 67, 68, 78, 82, 87, 93, 135, 137, 140, 189, 195, 225, 228, 239, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "new": [6, 7, 8, 51, 54, 57, 72, 73, 87, 88, 90, 91, 92, 93, 94, 95, 99, 106, 110, 113, 117, 118, 119, 124, 125, 129, 130, 131, 132, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 171, 180, 187, 189, 191, 192, 193, 203, 219, 224, 229, 230, 235, 239, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "work": [6, 247, 250, 253, 254, 255, 264], "hermes_simul": 6, "via": [6, 51, 73, 85, 120, 123, 235, 247, 248, 249, 251, 257, 264], "list": [6, 29, 54, 72, 75, 76, 85, 86, 87, 88, 92, 99, 109, 110, 113, 116, 117, 118, 123, 134, 136, 154, 158, 162, 164, 169, 173, 180, 187, 225, 230, 235, 249, 250, 258, 263, 264], "vector": [6, 8, 12, 59, 65, 66, 67, 69, 71, 72, 75, 87, 93, 94, 98, 99, 100, 103, 106, 109, 115, 125, 151, 154, 157, 158, 161, 163, 164, 169, 171, 172, 173, 174, 183, 185, 193, 197, 224, 225, 232, 253, 254], "interpret": [6, 56, 115, 154, 249, 250], "link": [7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 48, 49, 50, 53, 55, 57, 58, 61, 68, 69, 72, 73, 85, 94, 99, 106, 116, 124, 126, 129, 130, 131, 132, 138, 144, 145, 146, 147, 154, 157, 175, 176, 177, 178, 225, 226, 228, 236, 237, 243, 246, 247, 248, 250, 252, 256, 257, 258, 263, 264], "between": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 39, 42, 45, 48, 49, 50, 54, 55, 57, 58, 63, 64, 66, 72, 73, 87, 88, 98, 99, 106, 111, 116, 124, 126, 127, 129, 130, 131, 132, 140, 143, 144, 145, 146, 147, 149, 152, 154, 157, 158, 162, 169, 174, 176, 177, 178, 180, 192, 193, 208, 210, 211, 212, 214, 215, 220, 221, 225, 226, 227, 230, 232, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 255, 256, 257, 258, 260, 261, 263], "physic": [7, 8, 55, 75, 106, 108, 111, 112, 113, 121, 124, 237, 238, 240, 241, 242, 243, 244, 245, 247, 250, 255, 256, 261, 263], "level": [7, 87, 88, 96, 133, 146, 154, 181, 219, 220, 223, 235, 243, 244, 248, 250, 256, 262, 263], "n_": [7, 8, 9, 10, 11, 30, 34, 39, 41, 46, 53, 61], "tx": [7, 8, 9, 10, 11, 30, 34, 41, 46, 53, 61, 72, 124, 129, 130, 131, 132, 146, 147, 247, 255], "lead": [7, 103, 153, 247, 250], "excit": 7, "rx": [7, 8, 9, 10, 11, 30, 34, 41, 46, 53, 61, 72, 124, 129, 130, 131, 132, 144, 145, 146, 147, 247], "reve": 7, "natur": [7, 250], "strongli": 7, "wavelength": [7, 72, 75, 255], "veloc": [7, 55, 59, 63, 64, 65, 66, 67, 69, 71, 75, 115, 116, 182, 183, 185, 194, 225, 243], "distanc": [7, 37, 55, 57, 67, 93, 182, 185, 192, 223, 232, 242, 261], "orient": [7, 37, 71, 72, 94, 200, 201, 202, 204, 205, 206, 207, 225, 247], "environment": 7, "scatter": [7, 27, 30, 56, 59, 62, 65, 66, 69, 72, 261], "posit": [7, 37, 57, 58, 59, 61, 66, 67, 68, 71, 72, 94, 98, 106, 112, 161, 163, 164, 185, 189, 192, 200, 201, 202, 204, 205, 206, 207, 219, 225, 229, 230, 247, 255, 257], "extent": [7, 250], "just": [7, 85, 247, 257], "name": [7, 12, 31, 32, 48, 49, 55, 72, 74, 84, 85, 86, 87, 92, 113, 126, 150, 153, 160, 162, 219, 220, 232, 247, 250, 251, 260, 262], "few": [7, 257], "assumpt": [7, 247, 250, 261], "linear": [7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 45, 46, 48, 49, 50, 58, 61, 68, 72, 73, 74, 75, 85, 86, 87, 117, 174, 188, 198, 199, 215, 220, 221, 222, 224, 225, 230, 232, 233, 238, 254, 255, 258, 259, 263], "tau": [7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 37, 39, 41, 42, 45, 46, 53, 55, 61, 154], "convolut": [7, 174, 263], "int_": 7, "infti": 7, "d": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 48, 51, 72, 154, 172, 173, 247, 250, 253, 254, 263], "neither": [7, 39, 250], "nor": [7, 39, 250], "differenti": 7, "therefor": [7, 27, 39, 54, 72, 86, 87, 98, 99, 100, 106, 144, 145, 146, 154, 247, 249, 250, 254], "instead": [7, 42, 72, 73, 86, 142, 154, 203, 239, 247, 251, 255], "rate": [7, 8, 9, 10, 11, 12, 30, 34, 40, 41, 46, 53, 58, 61, 64, 68, 75, 76, 83, 89, 93, 98, 99, 100, 103, 106, 109, 112, 115, 116, 120, 123, 124, 126, 128, 133, 146, 147, 151, 157, 169, 174, 175, 176, 177, 178, 180, 193, 194, 197, 225, 227, 233, 237, 238, 240, 241, 242, 243, 244, 247, 248, 252, 256, 259, 262, 263], "dot": [7, 8, 10, 11, 39, 72, 98, 103], "m_": [7, 8, 10, 11, 72, 87, 88], "uniformli": [7, 35, 72, 93], "equival": [7, 55, 154, 158, 216, 232, 249, 250, 262], "express": [7, 250], "same": [7, 72, 87, 124, 146, 169, 202, 217, 219, 241, 247, 250, 253, 254, 255], "substack": 7, "enabl": [7, 8, 33, 37, 51, 57, 60, 63, 64, 66, 75, 81, 84, 87, 92, 93, 94, 99, 112, 113, 115, 116, 117, 118, 120, 151, 169, 174, 177, 183, 188, 192, 220, 221, 222, 224, 225, 226, 229, 230, 236, 245, 246, 248, 249, 250, 258, 263], "sum_": [7, 8, 10, 11, 12, 42, 47, 55, 87, 88, 151, 157, 169, 174], "note": [7, 42, 55, 73, 86, 115, 132, 139, 141, 144, 145, 146, 150, 216, 219, 220, 247, 249, 251, 252], "mani": [7, 250], "tap": [7, 9, 10, 11, 30, 34, 41, 42, 45, 46, 50, 51, 53, 61, 72, 73, 237, 263], "tau_0": 7, "dotsc": [7, 12, 39, 45, 47], "tau_": [7, 35, 42, 45, 47, 55, 63, 64, 66], "ast": [7, 63, 64, 66], "mean": [7, 8, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 40, 42, 45, 48, 50, 72, 87, 88, 112, 116, 174, 176, 178, 182, 190, 203, 221, 225, 232, 243, 244, 247, 248, 250, 255, 258, 259, 261], "spars": [7, 73, 150, 184, 186, 187, 188], "domain": [7, 9, 10, 11, 30, 34, 41, 45, 46, 53, 61, 73, 93, 150, 151, 154, 157, 158, 162, 163, 169, 173, 174, 236, 241, 243, 244, 246, 252, 255, 256, 260, 262], "notin": 7, "outsid": [7, 20, 23, 26, 27, 250], "set": [7, 8, 31, 35, 42, 54, 57, 72, 73, 84, 85, 87, 88, 92, 94, 114, 124, 141, 221, 225, 229, 230, 236, 238, 240, 241, 242, 243, 244, 246, 247, 249, 251, 252, 256, 261, 262], "instanc": [7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 45, 46, 48, 49, 50, 52, 53, 54, 57, 58, 61, 65, 67, 68, 84, 87, 88, 93, 99, 111, 112, 124, 125, 126, 134, 135, 136, 137, 142, 143, 144, 145, 146, 147, 171, 174, 176, 178, 180, 224, 229, 230, 247, 251, 256], "propag": [7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 46, 47, 48, 49, 50, 51, 55, 57, 58, 60, 61, 63, 64, 66, 68, 72, 73, 152, 153, 154, 174, 179, 182, 193, 194, 197, 224, 225, 228, 230, 232, 247, 250, 255, 256, 257, 259, 261, 263], "sinc": [7, 12, 55, 73, 86, 93, 219, 253, 254, 259, 260, 262], "fall": [7, 249], "directli": [7, 42, 45, 115, 116, 142, 153, 235, 247, 248, 250, 264], "To": [7, 27, 248, 249, 250, 255, 256, 257, 260], "avoid": [7, 73, 150], "resampl": [7, 8, 12, 40, 75, 93, 231], "interpol": [7, 8, 9, 10, 11, 30, 40, 41, 46, 53, 58, 61, 68, 183, 233, 256, 263], "kernel": [7, 12, 250], "round": [7, 93, 262], "closest": 7, "behaviour": [7, 8, 10, 11, 12, 30, 40, 41, 46, 58, 61, 68, 74, 84, 87, 93, 99, 116, 124, 219, 224, 225, 229, 247, 256, 258], "control": [7, 87, 106, 113, 115, 120, 198, 218, 219, 240, 242, 250, 251, 258, 261, 262, 263], "interpolationmod": [7, 8, 9, 10, 11, 12, 30, 40, 41, 46, 53, 58, 61, 68, 256], "flag": [7, 33, 60, 84, 85, 92, 93, 115, 120, 150, 151, 157, 188, 224, 225, 226], "expos": [7, 143, 144, 145, 146, 147], "sever": [7, 42, 70, 92, 141, 153, 239, 251, 253, 254, 255, 257, 262], "conist": 7, "tandem": 7, "act": [7, 75, 86, 94, 247], "basic": [7, 8, 55, 70, 96, 103, 125, 232, 248, 250, 256, 259], "realiz": [7, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 33, 35, 37, 40, 42, 45, 48, 49, 50, 51, 52, 57, 60, 67, 87, 91, 116, 117, 182, 216, 225, 226, 227, 228, 230, 247, 256, 258], "specif": [7, 8, 54, 55, 67, 87, 96, 106, 108, 124, 139, 154, 162, 194, 198, 212, 230, 233, 242, 247, 248, 250, 251, 252, 260, 262, 263], "follow": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 35, 37, 45, 48, 49, 50, 57, 67, 85, 124, 129, 130, 131, 132, 139, 141, 142, 146, 151, 153, 158, 169, 174, 182, 194, 218, 220, 223, 224, 238, 239, 240, 247, 249, 250, 258, 259, 260, 261, 263], "diagram": [7, 93, 235], "visual": [7, 70, 72, 73, 87, 93, 108, 113, 124, 126, 182, 183, 187, 191, 218, 224, 237, 238, 240, 241, 242, 243, 244, 245, 247, 249, 252, 255, 258, 259, 261], "interact": [7, 74, 84, 86, 87, 229, 250, 258], "invoc": 7, "object": [7, 10, 30, 34, 36, 38, 46, 49, 53, 54, 55, 58, 59, 68, 71, 72, 73, 78, 81, 83, 85, 87, 88, 89, 91, 93, 94, 95, 106, 113, 116, 123, 127, 129, 130, 131, 132, 138, 139, 141, 145, 147, 149, 150, 163, 171, 180, 181, 185, 186, 189, 190, 191, 192, 194, 197, 224, 225, 226, 229, 238, 242, 247, 250, 251, 255, 257, 258, 262], "channelr": [7, 8, 9, 10, 11, 30, 34, 41, 46, 53, 61, 73, 256], "fix": [7, 8, 120, 247, 250], "random": [7, 8, 40, 42, 46, 47, 54, 70, 75, 78, 81, 87, 88, 92, 100, 106, 110, 118, 125, 133, 139, 171, 172, 194, 216, 223, 225, 229, 256, 259, 262], "variabl": [7, 8, 46, 47, 54, 216, 235, 249, 256, 262], "ident": [7, 35, 45, 87, 106, 113, 126, 210, 224, 245, 247, 255, 257, 261], "alwai": [7, 35, 59, 73, 86, 116, 253, 254, 255, 262], "channelpropag": [7, 8, 9, 10, 11, 116, 225, 230], "intern": [7, 8, 73, 75, 78, 86, 92, 93, 106, 114, 115, 117, 118, 151, 157, 169, 174, 194, 224, 230, 252, 257, 258, 263], "least": [7, 159, 236, 243, 246, 250, 252], "over": [7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 41, 45, 46, 48, 49, 50, 58, 60, 61, 63, 64, 66, 68, 73, 75, 79, 80, 81, 87, 88, 92, 93, 98, 108, 109, 113, 115, 116, 117, 118, 123, 124, 125, 127, 133, 134, 135, 136, 137, 146, 153, 154, 182, 189, 190, 192, 195, 196, 200, 202, 204, 212, 214, 225, 226, 227, 228, 230, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 252, 255, 256, 257, 258, 260, 261, 262, 263], "addit": [7, 10, 30, 34, 39, 40, 46, 48, 53, 57, 58, 68, 85, 87, 90, 92, 93, 115, 120, 124, 138, 139, 140, 141, 151, 157, 175, 176, 177, 178, 216, 235, 245, 246, 249, 250, 260, 262], "inform": [7, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 34, 40, 41, 46, 49, 53, 58, 61, 64, 68, 70, 72, 74, 75, 78, 79, 80, 81, 82, 84, 92, 93, 95, 106, 113, 115, 116, 117, 118, 121, 123, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 144, 145, 146, 150, 151, 153, 154, 157, 161, 163, 164, 171, 175, 176, 177, 178, 180, 182, 194, 195, 196, 224, 225, 226, 227, 228, 229, 230, 235, 242, 243, 247, 250, 252, 256, 257, 258, 260, 261, 262, 263], "about": [7, 87, 250, 255], "propagt": [7, 45], "import": [7, 8, 54, 182, 189, 191, 192, 193, 234, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "simulateddevic": [7, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 33, 37, 40, 43, 45, 46, 48, 49, 50, 116, 117, 190, 209, 210, 211, 212, 214, 225, 229, 230, 237, 238, 240, 241, 242, 243, 244, 245, 247], "cannot": [7, 250], "instanti": [7, 262], "concret": 7, "ideal": [7, 45, 72, 73, 111, 116, 117, 153, 174, 198, 199, 210, 211, 225, 230, 238, 240, 243, 244, 252, 255, 256, 258], "must": [7, 85, 87, 106, 113, 144, 145, 146, 151, 183, 219, 220, 235, 250, 253, 254, 260], "now": [7, 234, 239, 247, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262], "initi": [7, 8, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 33, 35, 36, 37, 38, 40, 45, 46, 47, 48, 49, 50, 53, 57, 58, 67, 68, 71, 72, 73, 75, 78, 81, 85, 86, 87, 91, 92, 93, 94, 106, 110, 111, 112, 115, 116, 118, 119, 124, 125, 126, 133, 138, 139, 140, 141, 142, 145, 146, 147, 149, 151, 157, 158, 166, 169, 174, 175, 176, 177, 178, 180, 181, 182, 194, 223, 224, 225, 226, 229, 237, 247, 250, 251, 252, 253, 254, 255, 257, 259, 261, 262], "alpha_devic": [7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 45, 46, 48, 49, 50, 53, 58, 61, 68, 230, 256], "beta_devic": [7, 8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 45, 46, 48, 49, 50, 53, 58, 61, 68, 230, 256], "reciproc": [7, 73, 247], "simulatan": [7, 242], "joint": [7, 122, 123, 242, 247], "final": [7, 87, 139, 141, 153, 191, 247, 250, 257, 258], "alpha_transmiss": 7, "beta_transmiss": 7, "channel_r": [7, 78, 225, 228], "alpha_propag": 7, "beta_propag": 7, "alpha_recept": 7, "beta_recept": 7, "snippet": [7, 139, 141, 182, 247], "essenti": [7, 87, 147, 150, 250, 257, 260], "summari": [7, 250, 255], "what": [7, 250, 257, 258], "happen": 7, "drop": [7, 70, 84, 90, 92, 113, 116, 153, 167, 182, 198, 225, 226, 227, 229, 236, 243, 246, 247, 255, 257, 258, 261], "howev": [7, 42, 54, 86, 87, 120, 124, 235, 241, 247, 250], "won": 7, "waveform": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 72, 77, 79, 80, 98, 108, 123, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 178, 180, 182, 189, 191, 192, 193, 194, 195, 196, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 252, 253, 254, 256, 257, 258, 259, 260, 261, 264], "simplexlink": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 133, 140, 144, 145, 146, 147, 237, 247, 257, 258], "cosin": [7, 124, 151, 156, 174, 247, 252], "postprocess": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50], "rootraisedcosinewaveform": [7, 124, 129, 130, 131, 132, 138, 139, 140, 141, 144, 145, 146, 147, 178, 247, 252, 259], "symbol_r": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 129, 130, 131, 132, 138, 139, 140, 141, 144, 145, 146, 147, 174, 175, 176, 177, 178, 238, 240, 241, 242, 247, 252, 259], "1e8": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 129, 130, 131, 132], "oversampling_factor": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 138, 139, 140, 141, 143, 144, 145, 146, 147, 151, 169, 174, 175, 176, 177, 178, 238, 240, 242, 247, 252, 259, 262], "num_data_symbol": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 129, 130, 131, 132, 138, 139, 140, 141, 144, 145, 146, 147, 151, 157, 169, 174, 175, 176, 177, 178, 238, 240, 241, 242, 247, 252, 259, 262], "1000": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 115, 129, 130, 131, 132, 169, 192, 237, 238, 240, 242, 243, 244, 245, 253, 254, 256, 259, 261, 262], "num_preamble_symbol": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 129, 130, 131, 132, 138, 139, 140, 141, 144, 145, 146, 147, 174, 175, 176, 177, 178, 238, 240, 241, 242, 247, 252, 259], "pilot_r": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 174, 177, 238, 240, 241, 242, 252], "channel_estim": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 138, 139, 140, 144, 145, 146, 151, 175, 176, 177, 178, 236, 238, 242, 243, 244, 246, 247, 252, 256, 257], "singlecarrierleastsquareschannelestim": [7, 124, 138, 139, 140, 175, 176, 177, 178, 247, 252], "channel_equ": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 138, 139, 140, 151, 175, 176, 177, 178, 236, 238, 242, 243, 244, 246, 247, 252, 256, 257], "singlecarrierzeroforcingchannelequ": [7, 124, 138, 139, 140, 175, 176, 177, 178, 247, 252], "investig": [7, 32, 87, 88, 113, 129, 130, 131, 132, 189, 191, 192, 247, 248, 255, 258, 259], "perform": [7, 73, 87, 88, 124, 126, 127, 128, 129, 130, 131, 132, 139, 141, 180, 189, 190, 191, 192, 194, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 258, 260, 261, 263], "ad": [7, 57, 72, 87, 90, 92, 99, 110, 113, 116, 117, 118, 119, 124, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 157, 169, 175, 176, 177, 178, 180, 187, 203, 216, 223, 225, 230, 235, 240, 247, 250, 251, 255, 256, 262], "alreadi": [7, 54, 72, 87, 90, 92, 113, 117, 118, 203, 230, 247, 249, 250, 260, 262], "exist": [7, 54, 55, 67, 69, 85, 87, 90, 92, 113, 117, 118, 119, 230, 235, 247, 249, 251], "add": [7, 57, 64, 72, 87, 90, 92, 93, 113, 117, 118, 124, 138, 139, 140, 141, 142, 169, 187, 203, 216, 217, 223, 230, 247, 250, 255, 256, 258, 260, 261], "add_devic": [7, 90, 92, 117, 118, 119, 230], "appropri": [7, 221, 250], "set_channel": [7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 124, 182, 189, 191, 192, 193, 229, 230, 247, 253, 254, 255, 256, 257, 261], "evalu": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 58, 61, 68, 70, 87, 113, 121, 124, 129, 130, 131, 132, 157, 175, 176, 177, 178, 182, 191, 192, 193, 219, 224, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 255, 256, 257, 260, 261, 263, 264], "bit": [7, 74, 96, 98, 99, 100, 103, 106, 124, 126, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 149, 151, 157, 169, 174, 180, 219, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 252, 256, 259, 260, 261, 262], "pipelin": [7, 70, 87, 96, 113, 124, 139, 142, 153, 194, 229, 235, 247, 248, 262], "analyz": 7, "add_evalu": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 87, 113, 124, 129, 130, 131, 132, 189, 191, 192, 193, 247, 253, 254, 255, 256, 258, 259, 260, 261, 262], "biterrorevalu": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 126, 129, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 252, 256, 259, 260, 262], "new_dimens": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 87, 113, 124, 129, 130, 131, 132, 189, 192, 247, 253, 254, 255, 256, 258, 259, 260, 261, 262], "snr": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 74, 75, 78, 116, 117, 124, 129, 130, 131, 132, 144, 146, 192, 193, 225, 230, 237, 238, 240, 241, 242, 243, 244, 245, 247, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263], "db": [7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 35, 37, 45, 48, 49, 50, 57, 67, 85, 86, 120, 124, 129, 130, 131, 132, 192, 223, 232, 237, 238, 240, 241, 242, 243, 244, 245, 247, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "4": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 32, 35, 37, 45, 48, 49, 50, 55, 74, 84, 106, 124, 129, 130, 131, 132, 138, 139, 140, 141, 144, 145, 146, 147, 174, 176, 177, 178, 189, 223, 224, 234, 236, 238, 240, 242, 243, 244, 247, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "12": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 42, 45, 48, 49, 50, 72, 124, 129, 130, 131, 132, 172, 173, 247, 250, 252, 253, 255, 259, 260, 263], "20": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 35, 37, 45, 46, 47, 48, 49, 50, 86, 121, 124, 129, 130, 131, 132, 192, 237, 238, 240, 241, 243, 244, 245, 246, 247, 250, 259, 260, 261, 263], "server": [7, 119, 235, 250], "pure": [7, 42], "statist": [7, 42, 43, 45, 48, 49, 154, 263], "do": [7, 32, 42, 54, 87, 98, 100, 106, 150, 236, 243, 246, 249, 250, 257, 258], "multipath": [7, 47, 48, 49, 50, 63, 64, 66, 154, 247, 258], "fade": [7, 32, 47, 48, 49, 50, 237, 245, 247, 263], "geometri": [7, 234], "stochast": [7, 45], "determinist": [7, 8, 39, 125], "collect": [7, 87, 88, 127, 134, 136, 189, 190, 192, 230, 231, 247, 250, 255, 258, 261], "might": [7, 99, 233, 243, 255, 260], "3gpp": [7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 48, 49, 106, 237, 255, 263], "cluster": [7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 248], "radar": [7, 57, 58, 59, 67, 68, 69, 121, 123, 182, 184, 185, 188, 189, 191, 192, 193, 242, 247, 253, 254, 261, 263], "quadriga": [7, 263], "gain": [8, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 40, 41, 42, 45, 46, 47, 48, 49, 50, 53, 58, 61, 68, 72, 120, 198, 218, 219, 224, 230, 237, 240, 242, 245, 255, 256, 258, 260, 261], "interpolation_mod": [8, 9, 10, 11, 30, 34, 36, 38, 40, 41, 46, 53, 58, 61, 68], "nearest": [8, 10, 12, 30, 40, 41, 46, 53, 58, 61, 68], "seed": [8, 40, 54, 75, 78, 81, 83, 91, 92, 106, 110, 117, 118, 124, 125, 133, 138, 139, 140, 141, 194, 216, 223, 229, 247, 252, 255], "randomnod": [8, 54, 75, 78, 81, 91, 92, 99, 100, 125, 133, 216, 223], "crt": [8, 9, 10, 11], "exchang": [8, 98, 106, 129, 130, 131, 132, 236, 246, 256, 263], "electromagnet": [8, 65, 72, 75, 76, 92, 247, 248, 256, 262], "invok": 8, "_realiz": [8, 256], "addition": [8, 124, 151, 157, 169, 174, 235, 249, 260, 261, 262], "wrap": [8, 10, 11, 87], "zeta": [8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 72], "paramter": 8, "synonym": 8, "draw": 8, "distribut": [8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 32, 35, 42, 45, 48, 49, 87, 98, 145, 146, 147, 153, 232, 248, 249, 250, 258, 262], "except": [8, 40, 45, 48, 84, 87, 250, 253], "compon": [8, 10, 11, 27, 30, 40, 41, 42, 45, 46, 47, 49, 55, 58, 61, 68, 72, 138, 139, 140, 141, 154, 169, 212, 214, 223, 236, 243, 244, 246, 250], "proagat": [8, 10, 11, 30, 40, 41, 46, 58, 61, 68], "tupl": [8, 35, 40, 67, 72, 86, 87, 113, 114, 234], "connect": [8, 40, 72, 111, 201, 202, 203, 250, 255], "pseudo": [8, 40, 75, 78, 81, 91, 92, 106, 110, 118, 125, 133, 139, 171, 172, 223, 229, 262], "realzat": 8, "own": [8, 32, 42, 116, 239, 247, 248, 250], "cach": [8, 75, 78, 81, 92, 115, 116, 117, 118, 182, 194, 225, 226, 230], "true": [8, 28, 30, 33, 37, 57, 60, 63, 64, 66, 67, 75, 78, 81, 85, 87, 92, 93, 94, 99, 112, 113, 115, 116, 117, 118, 120, 127, 129, 130, 131, 132, 151, 169, 174, 183, 188, 189, 191, 192, 193, 225, 229, 230, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 257, 261], "radio": [8, 10, 51, 93, 108, 116, 198, 199, 224, 225, 240, 246, 248, 255, 258, 261], "band": [8, 10, 75, 77, 79, 80, 93, 106, 109, 115, 116, 120, 121, 123, 134, 135, 136, 137, 139, 141, 142, 149, 151, 154, 157, 158, 161, 163, 164, 169, 171, 172, 173, 174, 180, 181, 225, 237, 243, 244, 245, 247, 260, 262, 263], "deviceoutput": [8, 10, 11, 75, 76, 92, 230], "associ": [8, 54, 124, 250], "after": [8, 9, 10, 72, 73, 87, 92, 93, 99, 100, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 154, 158, 180, 181, 191, 224, 229, 237, 238, 240, 241, 242, 243, 244, 245, 247, 250, 251, 253, 254, 257, 259, 261], "bool": [8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 54, 57, 59, 60, 63, 64, 65, 66, 67, 69, 72, 75, 78, 81, 84, 85, 87, 92, 93, 94, 99, 112, 113, 115, 116, 117, 118, 120, 127, 129, 130, 131, 132, 151, 157, 169, 174, 177, 183, 188, 189, 192, 220, 221, 222, 224, 225, 226, 229, 230], "updat": [8, 72, 78, 81, 94, 114, 115, 225, 247, 250], "newli": [8, 57, 72, 84, 87, 95, 113, 117, 180, 203, 229, 230, 249, 253, 254, 256, 258, 259, 260, 262], "recall_r": [8, 29, 35, 37, 40, 45, 52, 57, 67, 256], "group": [8, 10, 29, 30, 34, 35, 36, 37, 38, 40, 45, 46, 52, 53, 57, 58, 67, 68, 256, 263], "recal": [8, 10, 29, 30, 35, 36, 37, 38, 40, 45, 46, 52, 53, 57, 58, 67, 68, 85, 171, 180, 229, 257], "hdf": [8, 29, 35, 37, 40, 45, 52, 57, 67, 85], "h5py": [8, 10, 29, 30, 34, 35, 36, 37, 38, 40, 45, 46, 52, 53, 57, 58, 67, 68, 191, 256], "alpha": [8, 27, 32, 35, 37, 39, 45, 55, 63, 64, 66, 127, 129, 130, 131, 132, 224, 229, 245], "e": [8, 12, 42, 45, 47, 48, 51, 54, 55, 72, 73, 86, 87, 88, 93, 94, 98, 99, 106, 111, 115, 117, 130, 131, 132, 151, 157, 163, 164, 169, 174, 177, 191, 193, 194, 219, 224, 230, 235, 236, 237, 241, 242, 243, 244, 246, 247, 249, 250, 255, 263], "beta": [8, 27, 32, 35, 37, 39, 45, 55, 127, 129, 130, 131, 132, 224, 229], "realist": [8, 72, 154], "less": [8, 40, 72, 98, 157, 162, 217, 219, 224, 255], "one": [8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 54, 67, 72, 73, 75, 87, 88, 90, 93, 98, 103, 125, 146, 147, 148, 149, 154, 157, 158, 162, 174, 176, 178, 180, 188, 193, 200, 202, 204, 217, 219, 224, 227, 229, 236, 241, 243, 244, 246, 247, 249, 250, 258, 262], "logarithm": [8, 70], "attribut": [8, 9, 11, 47, 48, 87, 113, 133, 143, 144, 145, 146, 147, 194, 202, 250, 255], "shorthand": [8, 75, 87], "last": [8, 87, 99, 150, 154, 253, 263], "everi": [8, 72, 85, 94, 125, 193], "ha": [8, 42, 54, 72, 73, 75, 78, 81, 87, 88, 92, 139, 141, 146, 169, 174, 200, 202, 204, 225, 235, 237, 238, 240, 241, 242, 243, 244, 245, 249, 250, 251, 253, 254, 255, 258, 259, 260], "been": [8, 54, 60, 73, 78, 81, 87, 88, 144, 145, 225, 247, 249, 250, 251, 252, 253, 254, 259], "simulationscenario": [8, 117, 229, 230, 247, 257], "belong": [8, 72, 87, 113, 163, 171, 172], "asign": 8, "recommend": [8, 249], "wai": [8, 32, 249, 250, 257], "new_devic": [8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 90, 92, 110, 117, 119, 124, 129, 130, 131, 132, 138, 139, 140, 141, 143, 144, 145, 146, 147, 182, 189, 191, 192, 193, 230, 247, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "emerg": [9, 73, 76, 227], "state": [9, 10, 11, 30, 34, 36, 38, 41, 46, 48, 53, 58, 61, 64, 68, 70, 78, 85, 87, 88, 92, 106, 129, 130, 131, 132, 144, 145, 146, 150, 152, 153, 154, 155, 161, 163, 164, 167, 180, 189, 191, 192, 194, 225, 243, 250, 256, 257, 260], "sampling_r": [9, 10, 11, 30, 34, 41, 46, 53, 61, 64, 75, 76, 83, 89, 93, 109, 112, 116, 120, 123, 133, 151, 157, 169, 174, 193, 194, 197, 225, 227, 233, 255, 256, 262], "num_sampl": [9, 10, 11, 30, 34, 35, 37, 41, 46, 53, 57, 61, 67, 73, 87, 89, 93, 115, 129, 130, 131, 132, 154, 158, 161, 163, 164, 171, 172, 173, 192, 229, 237, 238, 240, 241, 242, 243, 244, 245, 253, 254, 256, 259, 262], "max_num_tap": [9, 10, 11, 30, 34, 41, 46, 53, 61, 256], "resolv": [9, 87, 113, 194, 229, 235, 250, 263], "denot": [9, 10, 11, 30, 34, 41, 45, 46, 53, 59, 61, 63, 64, 65, 66, 69, 72, 83, 127, 129, 130, 131, 132, 150, 183, 193, 194, 197, 223, 224, 256], "hz": [9, 10, 11, 30, 34, 41, 45, 46, 47, 53, 61, 63, 64, 66, 72, 75, 76, 83, 93, 109, 112, 115, 116, 120, 123, 133, 151, 157, 169, 174, 175, 176, 177, 178, 183, 193, 194, 197, 225, 227, 232, 233, 236, 237, 241, 243, 244, 245, 246, 262], "chanel": [9, 10, 11, 30, 34, 41, 46, 53, 61], "maximum": [9, 10, 11, 30, 34, 41, 45, 46, 53, 61, 75, 87, 92, 111, 115, 120, 123, 144, 146, 169, 182, 183, 184, 193, 194, 197, 220, 224, 238, 263], "per": [9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 34, 41, 46, 53, 61, 87, 88, 89, 98, 100, 103, 112, 132, 133, 143, 144, 145, 147, 148, 149, 150, 151, 157, 169, 174, 193, 194, 229, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 253, 254, 255, 256], "channelstateinform": [9, 10, 11, 30, 34, 41, 46, 53, 61, 73, 256, 260], "directivechannelr": [9, 11, 225, 228], "experi": [10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 41, 45, 46, 48, 49, 50, 58, 61, 68, 249], "when": [10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 33, 34, 36, 37, 38, 41, 45, 46, 48, 49, 50, 58, 61, 68, 86, 93, 134, 135, 136, 137, 153, 154, 194, 197, 202, 225, 247, 249, 250, 252, 254, 255], "classmethod": [10, 30, 36, 38, 46, 47, 49, 53, 54, 58, 68, 85, 86, 87, 92, 93, 94, 171, 180, 185, 191, 226, 227, 229, 256], "from_hdf": [10, 30, 36, 38, 46, 53, 58, 68, 85, 191, 256, 261], "de": [10, 30, 36, 38, 46, 53, 58, 68, 85, 171, 224, 263], "hdf5": [10, 30, 34, 36, 38, 46, 53, 58, 68, 85, 92, 257], "_propag": [10, 256], "It": [10, 39, 51, 54, 70, 75, 96, 108, 124, 144, 145, 147, 148, 180, 182, 192, 219, 235, 243, 248, 250, 255, 256, 262], "appli": [10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 57, 87, 88, 93, 112, 115, 124, 142, 143, 162, 169, 173, 174, 193, 194, 200, 204, 205, 206, 207, 209, 216, 219, 220, 221, 222, 247, 249, 250, 252, 253, 254, 263], "to_hdf": [10, 30, 34, 46, 53, 58, 68, 85, 256], "dump": [10, 30, 34, 46, 53, 58, 68, 85, 229], "non": [11, 27, 42, 45, 46, 47, 58, 61, 68, 73, 87, 88, 151, 153, 154, 189, 238, 240, 250, 263], "qualnam": [12, 31, 48, 49, 72, 74, 84, 85, 86, 92, 150, 160, 162, 219, 220, 232], "start": [12, 31, 42, 48, 49, 72, 74, 84, 85, 86, 92, 93, 116, 150, 153, 157, 160, 162, 167, 219, 220, 223, 225, 226, 227, 232, 239, 248, 250, 251, 257, 261], "boundari": [12, 31, 48, 49, 72, 74, 84, 85, 86, 92, 150, 160, 162, 219, 220, 232], "serializableenum": [12, 48, 49, 72, 74, 84, 85, 160, 162, 219, 220], "complex": [12, 42, 55, 72, 93, 141, 148, 150, 151, 154, 157, 158, 161, 163, 164, 169, 171, 172, 173, 174, 180, 200, 204, 205, 206, 207, 220, 224, 247, 248, 252, 253, 254, 256, 258, 260, 262], "seri": [12, 150, 260], "s_": [12, 223, 224], "underli": [12, 81, 87, 191, 192], "given": [12, 32, 35, 37, 55, 58, 61, 64, 68, 78, 87, 88, 113, 115, 116, 144, 145, 161, 163, 164, 180, 182, 189, 191, 220, 223, 232, 237, 239, 250, 253, 254, 258, 259], "onli": [12, 31, 42, 54, 55, 57, 67, 69, 72, 84, 85, 93, 99, 100, 106, 124, 133, 139, 141, 146, 150, 151, 153, 154, 157, 169, 174, 188, 191, 194, 217, 219, 222, 230, 247, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261], "mathscr": 12, "origin": [12, 69, 75, 106, 185, 220, 221, 222, 250], "lfloor": 12, "rfloor": 12, "veri": [12, 258, 259], "fast": [12, 258, 263], "accur": [12, 42], "whittak": 12, "kotel": 12, "nikov": 12, "shannon": [12, 263], "formula": [12, 32], "operatornam": 12, "perfect": [12, 116, 161, 163, 164, 198, 209, 212, 225, 247, 261], "bandlimit": 12, "meijer": [12, 263], "chronologi": [12, 263], "ancient": [12, 263], "astronomi": [12, 263], "modern": [12, 263], "90": [12, 57, 67, 241, 263], "3": [12, 13, 14, 15, 28, 29, 45, 49, 51, 55, 58, 61, 68, 72, 74, 84, 103, 106, 138, 139, 140, 141, 143, 146, 175, 176, 177, 178, 193, 223, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263], "319": [12, 263], "342": [12, 263], "2002": [12, 42, 263], "5": [12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 42, 45, 48, 49, 57, 67, 106, 154, 182, 192, 193, 217, 241, 242, 244, 250, 253, 254, 255, 257, 258, 259, 261, 262, 263], "993400": [12, 263], "indoorfactorybas": [13, 14, 15], "volum": [13, 14, 15, 42, 51, 250, 252, 263], "surfac": [13, 14, 15, 87, 127, 129, 130, 131, 132, 192], "clusterdelaylinebas": [13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 31], "hall": [13, 14, 15], "total": [13, 14, 15, 27, 247], "area": [13, 14, 15, 49, 146, 234, 263], "wall": [13, 14, 15], "floor": [13, 14, 15, 115, 223, 261], "ceil": [13, 14, 15], "clusterdelaylin": [13, 14, 15, 28], "equal": [13, 67, 72, 75, 93, 98, 99, 100, 103, 106, 123, 124, 130, 131, 132, 134, 135, 138, 139, 140, 146, 147, 151, 153, 155, 156, 157, 159, 169, 174, 175, 176, 177, 178, 185, 188, 193, 221, 227, 230, 236, 238, 241, 243, 244, 246, 247, 256, 257, 262], "indoorfactorylineofsight": 14, "preset": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "sight": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 42, 45, 46, 47, 49, 55, 58, 63, 154, 255, 257], "tudi": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 263], "100": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 57, 67, 124, 129, 130, 131, 132, 143, 229, 235, 238, 241, 242, 243, 244, 246, 247, 255, 263], "ghz": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 57, 67, 106, 182, 193, 241, 261, 263], "detail": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 45, 87, 106, 110, 119, 138, 140, 143, 169, 172, 173, 182, 224, 246, 247, 250, 253], "minim": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 31, 35, 37, 45, 48, 49, 50, 57, 67, 129, 130, 131, 132, 151, 157, 169, 174, 175, 177, 188, 189, 191, 192, 193, 235, 247, 248, 251, 263], "outlin": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 129, 130, 131, 132, 252, 253, 254, 259, 261], "how": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 129, 130, 131, 132, 139, 141, 142, 146, 157, 174, 175, 176, 177, 178, 234, 247, 248, 250, 252, 255, 261], "context": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 84, 85, 129, 130, 131, 132, 142, 182, 189, 191, 192, 193, 247, 250, 262], "pose": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 57, 69, 71, 72, 75, 94, 116, 200, 201, 202, 203, 204, 205, 206, 207, 208, 225, 255], "transform": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 30, 57, 59, 65, 69, 70, 71, 72, 73, 75, 116, 142, 200, 201, 202, 203, 204, 205, 206, 207, 208, 225, 233, 252, 255], "from_transl": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 57, 94, 255], "40": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37], "10000": [14, 15, 223, 238, 240], "30000": [14, 15], "rrcwaveform": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50], "scleastsquareschannelestim": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50], "sczeroforcingchannelequ": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50], "ber": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 124, 129, 247, 252, 256, 260], "sweep": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 87, 113, 189, 192, 193, 229, 237, 238, 240, 241, 242, 243, 244, 245, 255, 256, 258, 260, 261], "6": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 45, 48, 49, 50, 51, 189, 193, 236, 238, 240, 241, 242, 243, 246, 250, 252, 254, 255, 257, 258, 259, 261, 263], "14": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 45, 48, 49, 50, 129, 130, 131, 132, 157, 223, 250, 252, 255, 263], "18": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 45, 48, 49, 50, 129, 130, 131, 132, 146, 253, 254, 259, 263], "curv": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 35, 37, 45, 48, 49, 50, 57, 67, 191, 224], "plt": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 72, 93, 114, 150, 183, 219, 254, 255, 256, 257, 258, 259, 260, 261, 262], "show": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 139, 141, 146, 254, 255, 256, 257, 258, 259, 260, 261, 262], "aoa_spread_mean": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "arriav": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "spread": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 42, 154, 237, 243], "asa": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "mu_": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "lgasa": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "standard": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 42, 48, 49, 85, 87, 89, 99, 106, 237, 250, 263], "aoa_spread_std": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "deviat": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "sigma_": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 55, 59, 65, 66, 69], "aod_spread_mean": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "asd": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "lgasd": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "aod_spread_std": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "cluster_aoa_spread": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "individu": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 45, 46, 55, 72, 87, 93, 123, 134, 136, 139, 144, 145, 162, 169, 180, 182, 193, 236, 243, 244, 246, 247, 250, 255], "c_": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "degre": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "cluster_aod_spread": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "cluster_delay_spread": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30], "cluster_shadowing_std": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "shadow": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "cluster_zoa_spread": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "zsa": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "cross_polarization_power_mean": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "cross": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 45, 55, 57, 59, 60, 65, 66, 67, 69, 87, 88, 182, 242, 250, 261], "polar": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 63, 64, 66, 72, 199, 263], "xpr": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "cross_polarization_power_std": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "delay_sc": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "scale": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 86, 87, 88, 93, 120, 183, 220, 222, 232, 255], "proportion": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "r_": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 100, 193, 194, 197], "delay_spread_mean": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "lgd": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "delay_spread_std": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "line_of_sight": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30], "num_clust": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30], "num_rai": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30], "rai": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 87, 229, 253, 258, 263], "rice_factor_mean": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "rice": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 42, 45], "k": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 45, 72, 98, 99, 103, 146, 151, 157, 169, 174, 259, 263], "mu_k": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "rice_factor_std": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "sigma_k": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "zoa_spread_mean": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "lgzsa": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "zoa_spread_std": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29], "zod_offset": [14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 29], "offset": [14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 29, 94, 106, 153, 154, 157, 167, 169, 173, 217, 234, 237, 245], "zod": [14, 15, 16, 17, 18, 19, 20, 21, 24, 27, 28, 29], "zod_spread_mean": [14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 29], "lgzsd": [14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 29], "zod_spread_std": [14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 29], "lgzod": [14, 15, 16, 17, 18, 19, 20, 21, 24, 28, 29], "tsg": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 263], "ran": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 246, 263], "2020": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 263], "version": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 87, 106, 217, 249, 250, 251, 263, 264], "17": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 48, 106, 250, 253, 255, 263], "releas": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 249, 250, 263], "etsi": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 263], "deliv": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 263], "etsi_tr": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 263], "138900_138999": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 263], "138901": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 263], "00": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 253, 263], "00_60": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 106, 263], "tr_138901v170000p": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 263], "pdf": [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 48, 49, 93, 106, 175, 176, 177, 178, 193, 218, 224, 263], "indoorfactorynolineofsight": 15, "without": [15, 17, 19, 22, 25, 73, 115, 158, 214, 239, 247, 250, 257], "lo": [15, 17, 19, 20, 22, 23, 25, 26, 27, 28, 29, 55], "indoorofficelineofsight": 16, "delay_norm": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29], "delaynorm": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31], "normal": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 94, 183, 188, 189, 224, 250, 256, 262], "indoorofficelo": 16, "indoorofficenolineofsight": [17, 257], "indoorofficenlo": 17, "ruralmacrocellslineofsight": 18, "rmalo": [18, 19], "ruralmacrocellsnolineofsight": 19, "ruralmacrocellsoutsidetoinsid": 20, "insid": [20, 23, 26, 27], "build": [20, 23, 26, 235, 249], "rmao2i": 20, "streetcanyonlineofsight": [21, 255], "urban": [21, 22, 23, 27, 49, 255], "streetcanyonlo": 21, "streetcanyonnolineofsight": 22, "urbanmicrocellsnolineofsight": [22, 23], "streetcanyonnlo": 22, "streetcanyonoutsidetoinsid": 23, "streetcanyono2i": 23, "urbanmacrocellslineofsight": 24, "umalo": 24, "urbanmacrocellsnolineofsight": 25, "urbanmacrocellsnolineofsightbas": [25, 26], "umanlo": 25, "urbanmacrocellsoutsidetoinsid": 26, "uma02i": 26, "impuls": [27, 32, 35, 37, 39, 51, 54, 55, 73, 112, 200, 202, 204, 252, 256], "compos": [27, 42], "perceiv": [27, 55, 67, 154], "l": [27, 42, 45, 55, 87, 88, 99, 112, 130, 131, 132, 151, 157, 167, 169, 174, 236, 242, 246, 263], "cdot": [27, 98, 99, 103, 224], "pair": [27, 54], "sqrt": [27, 42, 47, 72, 256], "nlo": [27, 42, 263], "balanc": [27, 42, 45], "ricean": 27, "theta_": [27, 42, 45, 47], "zoa": 27, "phi_": [27, 42, 47, 55, 66], "aoa": 27, "aod": 27, "comprehens": 27, "involv": 27, "pleas": [27, 51, 182, 239, 247, 248, 249, 251], "document": [27, 87, 88, 182, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "parameter": [27, 42, 48, 191, 261], "Of": [27, 194, 255, 262], "indoor": [27, 42, 257, 263], "factori": [27, 70, 77, 79, 80, 125, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 158, 175, 176, 177, 178], "offic": [27, 257], "rural": [27, 49], "macrocel": [27, 49, 263], "marocel": 27, "o2i": 27, "street": [27, 255], "canyon": [27, 255], "These": [27, 250, 255], "distinguish": [27, 250], "condit": [27, 250], "custom": [27, 42, 74, 89, 138, 139, 140, 141, 142, 157, 159, 169, 175, 176, 177, 178, 198, 199, 224, 247, 250, 255, 258, 260], "offer": [27, 32, 108, 124, 247, 250, 257, 258], "extend": [27, 42, 138, 139, 140, 141, 199, 249, 250, 255, 263], "7": [28, 29, 45, 50, 106, 112, 250, 255, 257, 261, 263], "38": [28, 35, 37, 48], "21": [28, 253, 254], "41": 28, "73": 28, "34": [28, 35, 37, 253], "9": [28, 29, 45, 48, 124, 143, 144, 145, 146, 147, 154, 157, 158, 166, 176, 178, 237, 240, 241, 242, 243, 244, 245, 247, 250, 251, 252, 255, 263], "5e": [28, 193], "09": 28, "siumulateddevic": 28, "delay_spread": 28, "squar": [28, 44, 48, 50, 112, 159, 182, 183, 190, 223, 232, 233, 236, 243, 244, 246], "clusterdelayliner": [29, 30], "subcluster_indic": 29, "19": [29, 45, 250, 263], "11": [29, 45, 106, 144, 223, 224, 240, 249, 250, 252, 255, 257, 263], "13": [29, 45, 49, 250, 252, 255, 263], "15": [29, 45, 106, 250, 252, 253, 255, 261, 263], "rice_factor": [30, 45, 237, 245], "azimuth_of_arriv": 30, "zenith_of_arriv": 30, "azimuth_of_departur": 30, "zenith_of_departur": 30, "cluster_delai": 30, "cluster_pow": 30, "polarization_transform": 30, "visualiz": [30, 46, 87, 93, 95, 112, 129, 130, 131, 132, 187, 224], "plot_angl": 30, "center_lo": 30, "figur": [30, 72, 87, 93, 95, 114, 150, 174, 183, 202, 218, 219, 224, 231], "plot_power_delai": 30, "plot_rai": 30, "delay_offset": [30, 34], "azimuth_arrival_spread": 30, "angular": 30, "azimuth_departure_spread": 30, "includ": [30, 63, 64, 66, 161, 163, 164, 171, 198, 219, 235, 247, 250, 257], "max_delai": [30, 45, 46, 111], "expect": [30, 75, 85, 87, 88, 92, 99, 111, 115, 116, 125, 151, 190, 225, 250, 252, 255, 256, 260, 261], "zenith_arrival_spread": 30, "zenith_departure_spread": 30, "enum": [31, 85, 86, 150, 232], "relev": [31, 150, 161, 163, 164, 250], "debug": [31, 84, 247, 258], "purpos": [31, 247, 250, 255, 257, 259, 260], "tof": 31, "flight": [31, 55, 123, 256], "simpl": [32, 146, 247, 263], "network": [32, 51, 154, 210, 250, 263], "impact": [32, 87, 152], "interfer": [32, 55, 57, 58, 93, 115, 169, 174, 176, 178, 238, 239, 242, 243, 244, 248, 255], "synchron": [32, 35, 37, 118, 124, 135, 137, 138, 139, 140, 151, 153, 156, 157, 158, 159, 169, 172, 175, 176, 177, 178, 236, 246, 247, 252, 262, 263], "design": [32, 250], "effect": [32, 87, 93, 153, 224, 240, 250, 256, 258, 260, 262, 263], "attenu": [32, 57, 60, 63, 64, 66, 67, 111, 189, 191, 192, 193, 253, 254, 261], "accord": [32, 93, 217, 223, 224, 250], "frii": 32, "delaychannel": [32, 34, 36, 38], "randomdelaychannel": [32, 35, 36, 37], "spatialdelaychannel": [32, 37, 38], "delaychannelr": [32, 34, 36, 38], "randomdelaychannelr": [32, 35, 36], "spatialdelaychannelr": [32, 37, 38], "pi": [32, 35, 37, 42, 47, 55, 72, 175, 176, 177, 178, 253, 254, 255, 256], "overlin": [32, 35, 37, 55], "delta": [32, 35, 37, 39, 42, 55, 87, 88, 193, 194, 197, 219, 223], "delaychannelbas": [33, 35, 37], "model_propagation_loss": [33, 34, 36, 37, 38], "dcrt": [33, 34], "free": [33, 34, 36, 37, 38, 60, 154, 169, 232, 250], "space": [33, 34, 36, 37, 38, 56, 60, 71, 72, 85, 93, 121, 142, 154, 169, 208, 232, 236, 237, 243, 244, 246, 255, 263], "loss": [33, 34, 36, 37, 38, 45, 60, 63, 64, 66, 67, 232, 250, 260], "kawrg": [33, 37], "Its": [35, 37], "drawn": [35, 87], "uniform": [35, 72, 151, 174, 177, 198, 199, 219, 243, 244, 254, 255], "sim": 35, "u": [35, 257, 259], "min": [35, 87, 88, 154, 224], "max": [35, 87, 88, 154, 182, 186, 193, 194, 197], "li": 35, "interv": [35, 50, 87, 88, 93, 151, 154, 157, 158, 166, 169, 174, 177, 193, 255], "1e": [35, 37, 45, 48, 50, 157, 193, 223, 238, 240, 241, 242, 244, 258], "10e": [35, 37, 243, 244], "sccorrelationsynchron": [35, 37], "22": [35, 37, 57, 67, 224, 263], "24": [35, 37, 224, 256, 258, 263], "26": [35, 37, 172, 173, 263], "30": [35, 37, 86, 192, 250, 261], "32": [35, 37, 103, 138, 139, 140, 141, 144, 145, 146, 147, 175, 176, 177, 178, 241, 255], "36": [35, 37, 87, 88, 241, 255, 263], "scalar": [35, 86, 87, 88, 191, 192], "constant": [35, 198, 218, 253, 254, 255], "mininum": 35, "maxium": 35, "neg": [35, 75, 87, 88, 109, 112, 115, 120, 151, 219, 223, 225, 233], "greater": [35, 75, 87, 88, 109, 120, 151, 157, 158, 169, 174, 225, 227, 230], "relat": [37, 98, 99], "_2": [37, 55, 130, 131, 132], "c_0": [37, 55, 194], "locat": [37, 55, 67, 72, 87, 92, 113, 150, 191, 235, 242, 249, 255, 257, 261, 262], "other": [37, 54, 87, 98, 99, 100, 103, 106, 153, 224, 236, 237, 241, 243, 244, 245, 246, 247, 250, 257, 258], "complet": [39, 87, 248, 251, 255], "lossless": 39, "introduc": [39, 98, 99, 100, 106, 154, 235, 247, 249, 256], "phase": [39, 42, 45, 47, 49, 66, 72, 174, 198, 200, 204, 205, 206, 207, 217, 224, 240, 256, 263], "shift": [39, 42, 45, 48, 49, 55, 157, 183, 193, 197, 200, 204, 205, 206, 207, 233, 256, 262], "amplitud": [39, 174, 200, 204, 205, 206, 207, 217, 219, 220, 224, 232, 240, 262], "chang": [39, 71, 72, 73, 92, 94, 146, 193, 202, 250, 255], "begin": [39, 72, 169, 174, 238, 253, 254, 259, 264], "cr": 39, "bmatrix": 39, "vdot": 39, "ddot": 39, "end": [39, 72, 93, 120, 174, 217, 249, 250, 253, 254, 259], "independ": [39, 54, 87, 99, 224, 250, 263], "unequ": [39, 72], "ones": [39, 146, 255, 256], "pad": [39, 73, 99, 120, 129, 130, 131, 132, 162], "bigger": [39, 99, 233], "noth": [39, 84, 250], "idealchannel": [40, 41, 247], "idealchannelr": [40, 41], "distort": [40, 73, 141, 200, 202, 204, 217, 224], "further": [40, 72, 75, 92, 106, 110, 115, 117, 118, 119, 120, 133, 138, 140, 144, 146, 224, 230, 246, 247, 249, 250, 255, 257], "miso": 40, "simo": [40, 144, 145], "num_tap": 41, "variant": 42, "rician": [42, 263], "sinusoid": [42, 45, 46, 47, 48, 255, 263], "approach": [42, 122, 146, 263], "h_": [42, 47], "ell": [42, 45, 47, 55, 59, 65, 66, 69], "k_": [42, 45, 47, 99], "omega_": [42, 45, 47], "co": [42, 47, 72, 255], "propos": 42, "xiao": [42, 263], "et": [42, 49, 72, 87, 88, 154, 217, 248], "al": [42, 49, 72, 87, 88, 154, 217, 248], "specular": [42, 47], "diffus": 42, "more": [42, 49, 55, 67, 87, 146, 154, 157, 175, 176, 177, 178, 182, 200, 204, 217, 219, 234, 247, 250, 252, 258], "good": [42, 157, 158, 166], "accuraci": 42, "comput": [42, 72, 73, 78, 87, 88, 93, 99, 133, 191, 194, 212, 214, 232, 248, 250, 253, 254, 258, 261, 262, 263], "overal": [42, 46, 55, 193], "doppler": [42, 45, 46, 47, 48, 49, 55, 183, 193, 194, 197], "approxim": [42, 232, 250, 256], "rayleigh": [42, 237, 245, 263], "g_": [42, 45, 47], "th": [42, 55, 72, 87, 99], "matric": 42, "yu": [42, 263], "wave": [42, 56, 59, 62, 63, 64, 65, 66, 69, 72, 232, 256], "imping": [42, 56, 59, 62, 65, 69, 72, 75, 92, 115, 117, 118, 150, 226, 230, 247, 253, 254, 255, 261], "user": [42, 55, 113, 153, 236, 239, 246, 247, 248, 249, 250, 251, 253, 255, 258, 260, 261], "5g": [42, 239, 242, 244, 247], "tdl": [42, 242, 243, 244], "cost": [42, 250, 263], "259": [42, 263], "exponenti": 42, "chengshan": [42, 263], "yahong": [42, 263], "rosa": [42, 263], "zheng": [42, 263], "norman": [42, 263], "beaulieu": [42, 263], "novel": [42, 263], "transact": [42, 49, 51, 72, 146, 172, 173, 217, 224, 250, 263], "3667": [42, 263], "3679": [42, 263], "2006": [42, 49, 263], "twc": [42, 49, 263], "256990": [42, 263], "kai": [42, 51, 72, 263], "bengtsson": [42, 263], "ottersten": [42, 263], "mcnamara": [42, 263], "karlsson": [42, 263], "beach": [42, 263], "wideband": [42, 263], "vehicular": [42, 263], "technologi": [42, 263], "confer": [42, 51, 263], "55th": [42, 263], "vtc": [42, 263], "spring": [42, 263], "cat": [42, 263], "02ch37367": [42, 263], "370": [42, 263], "374": [42, 263], "vol": [42, 263], "1002729": [42, 263], "antennacorrel": [43, 44, 45, 46], "upon": 43, "unknown": [43, 75, 87, 115, 187, 225, 253], "customantennacorrel": 44, "customiz": [44, 124], "postiv": 44, "defint": 44, "customcorrel": 44, "multipathfadingchannel": [45, 46, 48, 49, 50], "power_profil": [45, 46, 237, 245], "num_sinusoid": [45, 46, 47, 48], "los_angl": [45, 46, 47, 48, 49], "doppler_frequ": [45, 48, 49], "los_doppler_frequ": [45, 48, 49], "alpha_correl": [45, 46, 237], "beta_correl": [45, 46, 237], "multipathfadingr": [45, 46], "g": [45, 146, 263], "3819": 45, "4025": 45, "5868": 45, "4610": 45, "5375": 45, "6708": 45, "5750": 45, "7618": 45, "8978": 45, "2242": 45, "1717": 45, "4942": 45, "5119": 45, "0582": 45, "0810": 45, "4579": 45, "5695": 45, "7966": 45, "0066": 45, "3043": 45, "6586": 45, "29": [45, 224, 263], "zeros_lik": 45, "otion": [45, 48], "length": [45, 73, 93, 98, 99, 100, 103, 106, 115, 130, 131, 132, 141, 151, 157, 162, 174, 176, 178, 193, 224, 230, 243], "omega": 45, "num_resolvable_path": 45, "dedic": [45, 57, 87, 90, 124, 140, 193, 237, 245, 247, 255, 257], "path_real": 46, "spatial_respons": 46, "pathreal": [46, 47], "los_gain": [46, 47], "nlos_gain": [46, 47], "los_doppl": [46, 47], "nlos_doppl": [46, 47], "rng": [46, 47, 106, 262], "propgat": [46, 63], "lof": 46, "proapgat": 46, "dopller": 46, "antennna": 46, "los_phas": 47, "nlos_angl": 47, "nlos_phas": 47, "hdfserializ": [47, 64, 73, 76, 77, 79, 80, 82, 85, 93, 134, 135, 136, 137, 150, 183], "watt": [47, 75, 216], "_type_": 47, "along": [47, 162, 194, 250, 255], "multipathfading5gtdl": [48, 124, 247], "model_typ": [48, 49, 242, 243, 244], "tdltype": [48, 242, 243, 244], "rms_delai": [48, 50, 243, 244], "tr": [48, 263], "900": 48, "five": 48, "combin": [48, 76, 87, 99, 123, 138, 140, 142, 145, 193, 194, 247, 249, 250, 255, 261], "multipathfadingcost259": 49, "cost259typ": 49, "action": [49, 249, 250], "molisch": [49, 263], "asplund": [49, 263], "parametr": 49, "found": [49, 235, 247, 250], "univers": [49, 108, 246, 263], "mobil": [49, 51, 248, 263], "telecommun": [49, 106, 263], "umt": [49, 263], "deploy": [49, 248, 263], "1e7": 49, "cost256typ": 49, "hilli": 49, "to_yaml": [49, 171, 180, 229], "represent": [49, 72, 75, 86, 87, 88, 94, 113, 129, 130, 131, 132, 138, 139, 141, 171, 180, 183, 189, 191, 192, 219, 225, 229, 237, 243, 244, 245, 262], "node": [49, 51, 87, 91, 125, 171, 180, 223, 229], "saferepresent": [49, 171, 180, 229], "valid": [49, 94, 171, 180, 229, 250, 252], "code": [49, 93, 96, 98, 100, 106, 124, 133, 139, 141, 142, 148, 153, 171, 175, 176, 177, 178, 179, 180, 181, 193, 218, 224, 229, 239, 243, 247, 249, 250, 260, 262, 263, 264], "get": [49, 54, 90, 126, 146, 147, 171, 180, 219, 229, 237, 238, 245, 248, 250, 258, 260], "pass": [49, 57, 72, 87, 120, 171, 180, 203, 229, 235, 247, 263], "down": [49, 55, 106, 171, 180, 229, 248, 252], "tree": [49, 171, 180, 229], "multipathfadingcost256": 49, "mappingnod": [49, 171], "cost256": 49, "terrain": 49, "andrea": [49, 263], "henrik": [49, 263], "ralf": [49, 263], "heddergott": [49, 263], "martin": [49, 263], "steinbauer": [49, 263], "thoma": [49, 263], "zwick": [49, 263], "cost259": [49, 263], "overview": [49, 154, 247, 263], "methodologi": [49, 263], "3421": [49, 263], "3433": [49, 263], "256966": [49, 263], "andr": [49, 263], "alayon": [49, 263], "glazunov": [49, 263], "klau": [49, 263], "pedersen": [49, 263], "ii": [49, 263], "3434": [49, 263], "3450": [49, 263], "256967": [49, 263], "2016": [49, 154, 263], "125900_125999": [49, 263], "125943": [49, 263], "tr_125943v130000p": [49, 263], "multipathfadingexponenti": 50, "tap_interv": 50, "quasi": 51, "determinst": 51, "matlab": [51, 54, 87, 248, 249, 257], "integr": [51, 235, 247, 248, 251], "plugin": 51, "trigger": [51, 90, 109, 113, 115, 116, 117, 118, 120, 194, 225, 226, 227, 230, 236, 246, 247, 252], "api": [51, 86, 182, 235, 247, 248, 250, 255, 256, 257, 258, 261, 264], "octav": [51, 249], "hint": [51, 151, 235, 260], "setup": [51, 108, 247, 249, 252], "stephan": [51, 72, 263], "jaeckel": [51, 72, 263], "leszek": [51, 263], "raschkowski": [51, 263], "b\u00f6rner": [51, 263], "lar": [51, 72, 263], "thiel": [51, 72, 263], "cell": [51, 263], "evolut": [51, 263], "trial": [51, 263], "62": [51, 263], "3242": [51, 263], "3256": [51, 263], "2014": [51, 87, 88, 263], "2310220": [51, 263], "burkhardt": [51, 263], "eberlein": [51, 263], "prieto": [51, 263], "cerdeira": [51, 263], "land": [51, 263], "satellit": [51, 263], "8th": [51, 263], "european": [51, 224, 263], "eucap": [51, 263], "1274": [51, 263], "1278": [51, 263], "6902008": [51, 263], "quadrigachannel": [52, 53, 54], "map": [52, 54, 85, 125, 141, 143, 149, 151, 157, 169, 171, 172, 174, 180, 182, 193, 194, 197, 237, 238, 243, 244, 245, 247, 256, 260, 262], "quadrigainterfac": [52, 54], "fit": [52, 250], "softwar": [52, 108, 246, 247, 248, 250, 258, 261], "architectur": 52, "consisd": 52, "quadrigachannelr": [52, 53], "path_gain": 53, "path_delai": 53, "path_quadriga_src": 54, "antenna_kind": 54, "omni": 54, "scenario_label": 54, "3gpp_38": 54, "901_uma_lo": 54, "mention": [54, 262], "modem": [54, 73, 92, 99, 121, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 169, 174, 175, 176, 177, 178, 180, 181, 224, 230, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 252, 256, 257, 258, 259, 260, 262], "we": [54, 182, 194, 237, 238, 240, 241, 242, 243, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "need": [54, 247, 249, 250, 257, 258], "background": 54, "done": [54, 85, 98], "hermes_quadriga": [54, 249], "label": [54, 87, 88, 129, 130, 131, 132, 189, 191, 192, 219], "globalinst": 54, "globalinstanceexist": 54, "check": [54, 87, 92, 96, 238, 263], "boolean": [54, 87, 94, 120, 151, 157, 162, 189], "setglobalinst": 54, "new_inst": 54, "regist": [54, 75, 81, 85, 87, 92, 94, 99, 106, 113, 115, 117, 118, 119, 180, 230, 249], "made": [54, 189, 248, 250], "channel_regist": 54, "question": [54, 87, 180, 234, 248], "get_impulse_respons": 54, "Will": [54, 93, 234], "fetch": [54, 252], "cir": 54, "siso": [54, 236, 246, 252], "register_channel": 54, "unregister_channel": 54, "unregist": [54, 85], "remov": [54, 58, 61, 68, 72, 87, 94, 112, 146, 147, 151, 157, 169, 174, 180, 203, 250, 253, 255, 261], "path_launch_script": 54, "filesystem": [54, 85, 257], "thought": 55, "strip": 55, "raytrac": 55, "reflect": [55, 57, 66, 67, 182, 254], "There": [55, 125, 190, 247, 249, 250], "easi": [55, 85, 249], "singletargetradarchannel": [55, 67, 68, 182, 189, 191, 192, 193, 253, 254, 261], "reflector": [55, 65, 67], "multitargetradarchannel": [55, 57, 58], "move": 55, "v": [55, 59, 65, 66, 69, 72, 194, 255, 263], "d_": 55, "exp": [55, 175, 176, 177, 178, 255, 256], "mono": 55, "static": [55, 57, 58, 59, 61, 63, 64, 65, 66, 68, 69, 73, 84, 87, 89, 111, 112, 169, 248, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "leakag": [55, 108, 115, 116, 212, 214, 215, 225, 242, 261], "chain": [55, 94, 96, 99, 115, 116, 138, 140, 180, 182, 198, 199, 201, 202, 212, 214, 215, 225, 226, 238, 240, 249, 253, 254, 255, 260, 261], "fixedcrosssect": [56, 57], "cross_sect": [56, 57, 59, 66, 69], "radarcrosssectionmodel": [56, 57, 59, 62, 69], "get_cross_sect": [56, 59, 62, 65, 69], "__": 56, "queri": [56, 59, 62, 64, 65, 69, 72, 75, 141, 180, 194, 225, 234, 252, 253, 254], "impinging_direct": [56, 59, 62, 65, 69], "onto": [56, 59, 62, 65, 69, 72, 75, 92, 93, 115, 117, 118, 150, 151, 157, 169, 174, 226, 230, 253, 254, 261], "emerging_direct": [56, 59, 62, 65, 69], "leav": [56, 59, 62, 65, 69], "radarchannelbas": [57, 60, 61, 67, 190, 191, 192], "multitargetradarchannelr": [57, 58], "78": [57, 67], "5e9": [57, 67, 241], "10m": [57, 67, 237, 243], "50m": 57, "fals": [57, 59, 63, 64, 65, 66, 67, 69, 84, 85, 87, 92, 93, 94, 113, 189, 191, 192, 220, 221, 222, 224, 225, 229, 230, 236, 238, 241, 243, 244, 246, 248, 253, 254, 257, 258, 259, 261], "first_target": 57, "virtualradartarget": [57, 69], "second_target": 57, "50": [57, 157, 237, 240, 245, 255, 257], "add_target": 57, "fmcw": [57, 67, 124, 151, 156, 157, 174, 182, 189, 191, 192, 197, 253, 254, 261], "illumin": [57, 67, 189, 191, 192, 193, 255], "evluat": [57, 67], "receiveroperatingcharacterist": [57, 67, 191, 193, 253, 254, 261], "arang": [57, 67, 255, 258, 262], "tolist": [57, 67, 86], "roc": [57, 67, 191, 242, 261], "radartarget": [57, 59, 65, 69], "make_target": 57, "moveabl": [57, 59, 71, 116, 225], "declar": [57, 247], "constructor": [57, 171, 180, 229], "keyword": 57, "physicalradartarget": [57, 59], "interfernc": [57, 237], "bistat": 57, "interference_r": 58, "target_r": [58, 68], "radarchannelr": [58, 60, 61, 68], "radarinterferencer": [58, 63], "radartargetr": [58, 66, 68], "ground_truth": [58, 61, 68, 192], "ground": [58, 61, 68, 192], "truth": [58, 61, 68, 192], "row": [58, 61, 68, 234], "null_hypothesi": [58, 60, 61, 68], "null": [58, 60, 61, 63, 64, 65, 66, 68, 160, 169, 191, 236, 243], "hypothesi": [58, 60, 61, 63, 64, 65, 66, 68, 191], "num_target": 58, "see": [59, 60, 69, 93, 106, 143, 224, 235, 246, 250], "disabl": [59, 63, 64, 65, 66, 69, 85, 87, 92, 94, 99, 113, 220, 221, 222, 229, 256], "get_backwards_transform": [59, 65, 69], "backward": [59, 65, 69], "radr": [59, 65, 69], "get_forwards_transform": [59, 65, 69], "forward": [59, 65, 69, 96, 124, 133, 138, 139, 140, 141, 247, 259, 263], "get_veloc": [59, 65, 69], "movebl": 59, "rcrt": [60, 61], "miss": [60, 261], "hasn": 60, "realize_interfer": 61, "radarpathr": [63, 64, 66], "remain": [63, 64, 66, 124, 249, 250], "propagation_delai": [63, 64, 66], "propagation_respons": [63, 64, 66], "relative_veloc": [63, 64, 66], "v_": [63, 64, 66, 193, 197], "add_propag": 64, "propagated_sampl": 64, "buffer": 64, "written": [64, 235, 250], "add_stat": 64, "radarchannel": [65, 242], "visibl": [65, 250, 252], "reflection_phas": 66, "target_rang": [67, 242, 253, 254, 261], "radar_cross_sect": [67, 189, 242, 253, 254, 261], "target_azimuth": 67, "target_zenith": 67, "target_exist": [67, 261], "singletargetradarchannelr": [67, 68], "absolut": [67, 73, 84, 232, 250, 261], "meter": [67, 193, 194, 197], "rang": [67, 93, 120, 123, 182, 183, 185, 187, 193, 194, 197, 220, 221, 222, 242, 247, 255, 257], "rc": [67, 189], "nois": [67, 74, 75, 78, 93, 112, 115, 116, 117, 146, 191, 198, 217, 219, 225, 226, 230, 237, 238, 240, 241, 242, 243, 244, 245, 247, 259, 261, 262, 263], "clutter": [67, 263], "3d": [67, 255], "coordiant": [67, 72, 185], "target_veloc": 67, "present": [68, 234, 250, 261], "chann": 69, "rest": [69, 71, 116, 225], "pymont": 70, "extra": 70, "duplex": [70, 72, 200, 204, 205, 206, 207], "graph": [70, 150, 247], "anim": 70, "runtim": [71, 74, 84, 87, 113, 124, 153, 229, 247, 249, 255, 256, 257, 258], "unit": [71, 72, 78, 83, 94, 116, 132, 151, 157, 169, 174, 183, 193, 194, 197, 221, 225, 262], "aat": 72, "apt": [72, 203], "port": [72, 75, 78, 81, 119, 120, 133, 139, 141, 198, 199, 202, 203, 246, 255], "antennaport": [72, 139, 201, 255], "AT": [72, 87, 129, 130, 131, 132, 189, 203], "antennamod": [72, 144, 145, 146, 147, 200, 204, 205, 206, 207, 254, 255], "full": [72, 85, 120, 148, 162, 180, 200, 204, 205, 206, 207, 247, 250, 251, 255, 257, 259, 261], "global_characterist": 72, "global_direct": 72, "local_characterist": 72, "character": [72, 250], "pmatrix": 72, "horizont": 72, "vertic": 72, "lvert": [72, 129, 154], "rvert": 72, "ploariz": 72, "plot_gain": 72, "angle_resolut": 72, "180": [72, 154, 263], "matplotlib": [72, 84, 87, 88, 93, 95, 150, 174, 219, 224, 234, 254, 255, 256, 257, 258, 259, 260, 261, 262], "plot_polar": 72, "cartesian_array_respons": 72, "center": [72, 93, 116, 225, 236, 237, 243, 244, 245, 246], "nativ": [72, 248, 249, 252], "element": [72, 73, 87, 111, 116, 120, 143, 159, 162, 169, 203, 208, 225, 229, 236, 241, 243, 244, 246, 255, 256, 257, 258, 260], "charactersit": [72, 261], "cartesian_phase_respons": 72, "rvert_2": [72, 129], "gg": 72, "q": [72, 100, 217, 232, 240], "_m": [72, 87, 88], "respond": 72, "a_": 72, "refor": 72, "a_1": 72, "a_2": 72, "interc": [72, 98, 103], "arg_0": [72, 94, 202], "count_antenna": 72, "count": [72, 76], "subset": 72, "indexerror": 72, "encount": 72, "count_receive_antenna": 72, "count_transmit_antenna": 72, "horizontal_phase_respons": 72, "sin": [72, 255], "planar": [72, 255], "plot_topologi": [72, 255], "topologi": [72, 75, 247, 255], "spherical_phase_respons": [72, 253, 254], "num_antenna": [72, 75, 76, 227], "num_port": 72, "num_receive_antenna": [72, 75, 78, 253, 254, 256], "num_receive_port": [72, 75, 78, 120, 133, 139, 254], "num_transmit_antenna": [72, 75, 81, 256], "num_transmit_port": [72, 75, 81, 120, 133, 141], "receive_antenna": 72, "receive_port": 72, "receive_topologi": 72, "transmit_antenna": 72, "transmit_port": [72, 255], "transmit_topologi": 72, "add_antenna": [72, 203], "antennas_upd": 72, "callback": [72, 87], "whenev": [72, 73], "remove_antenna": 72, "customantennaarrai": [72, 203], "arbitrari": [72, 85, 87, 88, 99, 109, 125, 129, 130, 131, 132, 155, 158, 174, 189, 191, 192, 255], "automat": [72, 85, 115, 198, 202, 203, 218, 219, 235, 240, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262], "empti": [72, 86, 93, 160, 189, 201, 203, 229, 253, 254, 258], "anntena": [72, 203, 208], "wrapper": [72, 78, 81, 123, 133, 203], "around": [72, 78, 81, 174, 203, 219, 258], "add_port": [72, 203], "anoth": [72, 154, 158, 203], "remove_port": [72, 203], "dipol": [72, 198, 199], "half": [72, 182, 255], "dipoleantenna": 72, "idealantenna": [72, 205, 253], "theoret": [72, 151, 157, 169, 174], "linearantenna": [72, 206], "slant": [72, 206], "linearli": 72, "patchantenna": [72, 207], "patch": [72, 111, 198, 199, 247, 252], "uniformarrai": [72, 208, 253], "repeat": [72, 103, 141, 162, 237, 238, 245, 259, 262], "across": [72, 250], "z": [72, 94, 208, 255], "tranform": [72, 203, 208], "base_port": 72, "borner": [72, 263], "volker": [72, 263], "jungnickel": [72, 263], "geometr": [72, 263], "rotat": [72, 94, 263], "60": [72, 182, 250, 263], "5966": [72, 263], "5977": [72, 263], "2012": [72, 263], "2214017": [72, 263], "state_format": 73, "num_delay_tap": 73, "num_frequency_bin": 73, "__state_format": 73, "format": [73, 85, 87, 150, 191, 243, 250], "most": [73, 78, 98, 103, 106, 116, 124, 153, 154, 157, 158, 166, 225, 235, 249, 250, 253, 256, 259, 261, 264], "recent": [73, 78, 81, 116, 153, 225, 253, 264], "channelstateformat": [73, 256], "__state": 73, "tensor": [73, 150, 183, 256], "num_receive_stream": 73, "num_transmit_stream": [73, 150], "state_inform": 73, "select": [73, 78, 81, 87, 109, 112, 126, 146, 162, 247, 251, 255, 259, 263], "fourier": [73, 142], "__num_delay_tap": 73, "recov": 73, "4th": 73, "convers": [73, 85, 86, 87, 120, 138, 139, 140, 141, 191, 192, 193, 198, 220, 232, 240, 247, 261], "__num_frequency_bin": 73, "sparsearrai": [73, 150], "timestamp": [73, 82, 93, 135, 137, 228], "data": [73, 87, 90, 92, 93, 98, 99, 100, 103, 106, 132, 133, 135, 137, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 157, 159, 160, 161, 162, 163, 164, 169, 171, 172, 174, 175, 176, 177, 178, 180, 183, 191, 195, 219, 236, 237, 241, 243, 244, 245, 246, 247, 250, 255, 256, 257, 258, 259, 260, 261, 262], "feed": [73, 82, 224, 255], "befor": [73, 134, 135, 136, 138, 140, 143, 144, 145, 147, 148, 149, 153, 188, 220, 221, 222, 237, 238, 240, 241, 242, 243, 244, 245, 247, 249, 251, 253, 254, 255, 257, 258], "concaten": [73, 150, 247], "dense_st": [73, 150], "dens": [73, 150], "convert": [73, 75, 86, 87, 93, 94, 109, 120, 150, 186, 191, 198, 217, 218, 225, 232, 252, 255, 262], "computation": [73, 87, 150], "expens": [73, 150], "possibl": [73, 149, 150, 180, 247, 250, 251], "costli": 73, "prefer": [73, 83, 183, 194, 250], "received_stream": 73, "iter": [73, 87, 92, 109, 111, 113, 117, 124, 150, 230, 247], "slice": 73, "set_stat": 73, "to_frequency_select": 73, "num_bin": 73, "fft": [73, 143, 169, 193], "to_impulse_respons": 73, "n_rx": 73, "n_tx": 73, "n_out": 73, "n_in": 73, "num_symbol": [73, 150, 151, 162, 163, 164], "symbol": [73, 74, 93, 98, 124, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 151, 152, 153, 155, 157, 159, 161, 162, 163, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 252, 256, 257, 258, 260, 262, 263], "consolemod": [74, 84, 87, 229, 253, 254, 255, 256, 258, 259, 260, 261, 262], "print": [74, 84, 86, 87, 255, 259, 262], "refresh": 74, "shell": 74, "append": [74, 93, 100, 115, 120, 150, 249], "silent": [74, 89, 253, 254, 255, 256, 258, 259, 260, 261, 262], "exept": 74, "snrtype": [74, 78, 116, 117, 225, 230, 261], "ratio": [74, 75, 78, 116, 117, 142, 157, 158, 162, 166, 220, 225, 230, 232, 237, 238, 240, 241, 242, 243, 244, 245, 247, 259, 263], "ebn0": [74, 237, 238, 240, 241, 242, 243, 244, 245], "energi": [74, 89, 93, 151, 157, 169, 174, 193, 197, 230, 237, 238, 240, 241, 242, 243, 244, 245, 262], "en0": 74, "esn0": 74, "n0": [74, 261], "pn0": [74, 116, 225, 230], "basi": [75, 198, 257, 258], "averag": [75, 129, 151, 157, 169, 174, 192, 258, 262], "cache_transmiss": [75, 81], "generate_output": [75, 92, 225], "operator_transmiss": [75, 225, 227, 247, 257], "were": [75, 92, 93, 150, 225, 228, 250], "process_input": [75, 92, 115, 116, 117, 118, 225, 230], "impinging_sign": [75, 92, 115, 116, 117, 118, 202, 225, 226, 230], "union": [75, 84, 85, 86, 87, 92, 109, 115, 117, 150, 191, 229, 230], "deviceinput": [75, 92, 115, 116, 117, 118, 225, 230], "processeddeviceinput": [75, 92, 115], "receive_oper": [75, 92, 115, 117, 230], "devicerecept": [75, 82, 92, 115, 118, 226], "operator_input": [75, 82, 92, 226], "fed": [75, 92, 255], "operator": [75, 92], "clear_cach": [75, 115], "clear": [75, 78, 81, 115, 250], "devicetransmiss": [75, 82, 92, 115, 227, 228], "transmit_oper": [75, 92], "transmisison": 75, "emiss": [75, 109, 120, 225], "rf": [75, 109, 116, 120, 141, 201, 202, 212, 214, 215, 217, 225, 237, 238, 240, 243, 244, 245, 247, 261, 263], "max_frame_dur": 75, "durat": [75, 81, 83, 92, 93, 123, 132, 133, 141, 151, 157, 158, 161, 166, 169, 174, 175, 193, 194, 197, 219, 229, 236, 237, 238, 241, 243, 244, 245, 246], "max_dur": 75, "short": [75, 87, 88, 129, 130, 131, 132, 189, 191, 192, 250], "hand": 75, "receiverslot": [75, 78], "captur": 75, "analog": [75, 109, 120, 138, 139, 140, 141, 193, 198, 217, 220, 225, 240, 247, 255, 261], "digit": [75, 109, 115, 120, 138, 139, 140, 141, 159, 193, 198, 217, 220, 224, 225, 240, 247, 255, 261, 263], "transmitterslot": [75, 81], "broadcast": [75, 224, 247, 263], "notimplementederror": [75, 93, 115, 143, 144, 145, 147, 148, 149, 225], "emmiss": 75, "mixed_sign": 76, "mix": [76, 93, 116, 193, 225], "emerging_sign": [76, 227], "num_emerging_sign": 76, "operationresult": [77, 79, 80, 134, 135, 136, 137], "selected_receive_port": 78, "mixingoper": [78, 81], "receptiontyp": [78, 83], "shall": [78, 250], "cache_recept": 78, "next": [78, 99, 106, 250, 260], "channelrealizationbas": 78, "noise_pow": [78, 93, 112, 115, 116], "strength": 78, "snr_type": [78, 116, 117, 225, 230, 237, 238, 240, 241, 242, 243, 244, 245, 261], "_noise_pow": 78, "_receiv": [78, 138, 139, 140, 194], "rceiv": 78, "unassign": [78, 81, 83, 123, 138, 139, 141, 169], "infer": [78, 81, 87, 92, 139, 194, 226, 242], "referenc": [78, 140, 255], "don": [78, 81, 93, 150, 183, 260], "selected_transmit_port": 81, "transmissiontyp": [81, 83], "latest": [81, 249], "_transmit": [81, 138, 140, 141, 194], "device_transmiss": [82, 228, 247, 257], "device_recept": [82, 228, 247, 257], "num_device_recept": 82, "num_device_transmiss": 82, "duplexoper": [83, 194], "bind": [83, 108, 109, 110, 118, 239, 249], "slot": [83, 146, 147, 180, 243, 262], "frame_dur": [83, 89, 123, 132, 133, 151, 157, 193, 194, 197, 202, 219], "t_": [83, 132, 154, 193, 194, 197], "literatur": [83, 193, 194, 197], "tfrac": [83, 193, 194, 197, 247, 256], "results_dir": [84, 124, 229, 247, 261], "verbos": [84, 229], "info": [84, 229], "consol": [84, 87, 88, 129, 130, 131, 132, 189, 191, 192, 229], "console_mod": [84, 87, 229, 253, 254, 255, 256, 258, 259, 260, 261, 262], "handler": 84, "re": [84, 87, 93, 193, 194, 197, 257, 258, 260], "stop": [84, 87, 88, 92, 157, 191, 192, 237, 238, 240, 241, 242, 243, 244, 245, 257, 263], "default_results_dir": [84, 124, 247, 261], "store": [84, 87, 92, 113, 115, 191, 257, 258], "up": [84, 87, 106, 124, 139, 141, 247, 248, 249, 252, 255, 261], "style_context": [84, 258], "manag": [84, 85, 99, 110, 118, 119, 140, 247], "write": [84, 87, 229, 250], "returm": [84, 87, 229], "color": 84, "scheme": [84, 98, 99, 100, 103, 157, 169, 175, 176, 177, 178, 259, 260], "everyth": 84, "warn": [84, 111, 252], "main": [85, 231, 250, 255], "mutabl": 85, "detect": [85, 87, 100, 123, 150, 154, 157, 158, 166, 173, 182, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 197, 242, 247, 248, 249, 252, 254, 258], "As": [85, 154, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 260], "to_fil": 85, "again": 85, "easili": [85, 258], "from_fil": 85, "helper": 85, "from_fold": 85, "recurs": [85, 99, 249], "follow_link": 85, "from_path": 85, "config": 85, "from_str": 85, "string": [85, 87, 88, 113, 129, 130, 131, 132, 189, 191, 192], "from_stream": 85, "textiobas": 85, "deseri": [85, 257], "constructorerror": 85, "pars": 85, "fail": [85, 250], "representererror": 85, "to_fold": 85, "to_str": 85, "to_stream": 85, "clean": 85, "deactiv": [85, 260], "extens": [85, 142, 235, 249, 250, 260], "cfg": 85, "recogn": [85, 250], "filenam": 85, "registered_class": 85, "valuesview": 85, "registered_tag": 85, "keysview": 85, "read": [85, 250], "tag_registri": 85, "structur": [85, 143, 169, 236, 241, 243, 244, 246, 247, 253, 254, 256, 257, 258, 260], "hdfserializabletyp": 85, "enumer": [85, 253, 254], "from_paramet": 85, "serializabletyp": 85, "value_typ": 86, "valuetyp": [86, 87, 88], "dbconversiontyp": [86, 232], "decibel": 86, "preserv": [86, 224, 250], "compat": 86, "20db": 86, "41392685158225": 86, "30db": 86, "from_tupl": 86, "value_db": 86, "logarithmicsequ": 86, "content": [86, 87, 191, 192, 250, 252], "lin": [86, 183], "stand": 87, "alon": 87, "effici": [87, 258, 263], "flexibl": [87, 159, 169], "mont": [87, 88, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 255, 256, 258, 260, 261, 263], "carlo": [87, 88, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 255, 256, 258, 260, 261, 263], "project": [87, 150, 235, 247, 248, 250], "pickl": 87, "becom": [87, 154, 188, 248, 250, 258], "campaign": [87, 92, 113, 129, 130, 131, 132, 191, 247, 255, 257, 261, 262], "gridsect": [87, 88], "grid": [87, 88, 113, 127, 129, 130, 131, 132, 159, 160, 161, 162, 163, 164, 169, 189, 190, 191, 192, 229, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 255, 258], "settabl": 87, "treat": [87, 250], "potenti": 87, "axi": [87, 93, 95, 162, 163, 183, 219, 224, 236, 241, 243, 244, 246, 255, 258, 259, 260, 262], "multidimension": [87, 148, 179, 180], "extract": [87, 88, 126, 129, 130, 131, 132, 161, 163, 164, 171, 180, 184, 188, 189, 191, 192, 229, 247, 249, 258], "montecarlosampl": 87, "abort": [87, 88], "prematur": [87, 88, 191, 192, 237, 238, 240, 241, 242, 243, 244, 245], "reach": 87, "confid": [87, 88, 237, 238, 240, 241, 242, 243, 244, 245], "threshold": [87, 88, 157, 158, 166, 182, 186, 191, 242, 263], "bayer": [87, 88, 263], "actual": [87, 88, 200, 202, 204, 247, 250, 253, 254, 262], "workload": [87, 258], "previou": [87, 92, 250], "flowchart": 87, "spawn": 87, "montecarloactor": [87, 88], "actor": [87, 243], "resourc": [87, 143, 159, 160, 169, 236, 241, 243, 244, 246, 256, 257, 258, 260], "cpu": [87, 247, 258], "schedul": [87, 263], "task": 87, "actorrunresult": 87, "messag": [87, 263], "runner": 87, "remot": [87, 120, 250], "word": [87, 98, 99, 100, 103, 106, 163, 164, 169, 224, 236, 237, 241, 243, 244, 245, 246, 247, 260], "sort": [87, 92, 154, 158, 173, 219], "encourag": [87, 250], "to_scalar": [87, 191, 192, 258], "criteria": [87, 88, 191, 192, 263], "imposs": [87, 191, 192], "artifacttempl": [87, 129, 130, 131, 132, 189], "fat": 87, "numer": [87, 251, 263], "common": [87, 124, 126, 127, 250, 256, 260], "evaluationresult": [87, 88, 190, 191, 258], "step": [87, 96, 98, 99, 100, 106, 141, 142, 144, 145, 147, 148, 149, 151, 153, 157, 175, 176, 177, 178, 180, 194, 219, 224, 247, 249, 250, 253, 254, 259, 262, 264], "griddimens": [87, 88, 113, 127, 189, 190, 191, 192, 258], "readabl": [87, 250], "rich": 87, "to_arrai": [87, 191, 258], "raw": [87, 150, 151, 157, 169, 174, 183, 191, 195, 260, 262], "paramt": 87, "evaluationtempl": [87, 129, 130, 131, 132, 189], "x_m": [87, 88, 129, 130, 131, 132, 189, 191, 192], "form": [87, 88, 99, 247, 250, 262], "onc": [87, 88, 219, 258], "report": [87, 88, 99, 235, 248, 249], "confidence_level": [87, 88], "suggest": [87, 88, 125], "toler": [87, 88, 99, 237, 238, 240, 241, 242, 243, 244, 245], "tol": [87, 88], "bar": [87, 88, 234], "suffici": [87, 88, 99], "leq": [87, 88, 154], "upper": [87, 88], "limit": [87, 88, 169, 174, 243, 250, 255, 261, 263], "generate_result": [87, 88, 127, 189, 190, 191, 192, 258], "whole": [87, 88, 93, 99, 127, 189, 190, 192, 219, 247, 250], "whose": [87, 88, 126, 127, 189, 190, 192, 250], "abbrevi": [87, 88, 129, 130, 131, 132, 189, 190, 191, 192, 258], "ax": [87, 88, 93, 95, 114, 129, 130, 131, 132, 150, 183, 189, 191, 192, 219, 224, 258], "annot": [87, 88, 129, 130, 131, 132, 189, 191, 192, 235, 256, 258], "lower": [87, 88], "plot_scal": [87, 88, 237, 238, 240, 241, 242, 243, 244, 245], "accept": [87, 88, 250], "identifi": [87, 88, 92, 109, 191, 249, 250], "tick_format": [87, 88], "long": [87, 88, 106, 129, 130, 131, 132, 189, 191, 192, 250], "diverg": [87, 88], "considered_object": 87, "sample_point": [87, 113], "vari": [87, 255], "observ": [87, 153, 258, 262], "samplepoint": [87, 255], "tick": 87, "configure_point": 87, "point_index": 87, "first_impact": 87, "stage": [87, 135, 143, 153, 260], "last_impact": 87, "num_sample_point": 87, "num_evalu": [87, 113], "add_sampl": 87, "confidence_statu": 87, "thershold": 87, "conid": 87, "give": [87, 239, 247, 250], "feedback": 87, "cofid": 87, "statu": [87, 92, 250, 253], "probabl": [87, 182, 190, 191, 192, 193, 242, 248, 254, 258], "montecarlo": [87, 229], "investigated_object": 87, "min_num_sampl": [87, 237, 238, 240, 241, 242, 243, 244, 245], "num_actor": [87, 229, 243], "section_block_s": 87, "ray_address": [87, 229], "cpus_per_actor": 87, "runtime_env": 87, "catch_except": 87, "progress_log_interv": 87, "mo": 87, "montecarloevalu": 87, "block": [87, 98, 99, 100, 103, 106, 124, 126, 128, 131, 132, 142, 149, 150, 151, 153, 157, 162, 169, 174, 237, 238, 243, 245, 248, 259, 263], "size": [87, 98, 99, 100, 103, 106, 146, 169, 237, 238, 245, 259], "address": [87, 120, 229, 250, 256], "head": [87, 229], "machin": [87, 229, 250], "reserv": 87, "One": [87, 90, 174, 176, 178], "host": [87, 120, 250, 251, 252], "catch": 87, "occur": [87, 90, 93, 149, 180, 250], "log": [87, 237, 238, 240, 241, 242, 243, 244, 245], "add_dimens": [87, 113], "remove_dimens": [87, 255], "max_num_sampl": 87, "argument_tupl": 87, "worker": [87, 253, 258], "privat": [87, 250], "_ray_trace_ctx": 87, "stage_executor": 87, "here": [87, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "callabl": 87, "stage_identifi": 87, "montecarloresult": [87, 229, 258], "sample_grid": 87, "performance_tim": 87, "swept": [87, 193], "samplegrid": 87, "suppli": 87, "figurebas": [87, 93, 95, 224], "save_to_matlab": 87, "evaluation_result": 87, "grid_sect": 87, "sample_index": 87, "artifact_scalar": 87, "num_artifact": 87, "registereddimens": 87, "_properti": 87, "getter": 87, "significantli": [87, 255], "increas": [87, 146, 255], "demand": [87, 243, 259], "calcul": [87, 220, 232, 263], "reduc": 87, "manipul": [87, 142], "delet": [87, 250], "fdel": 87, "descriptor": 87, "obtain": [87, 248], "fget": 87, "is_regist": 87, "setter": 87, "fset": 87, "grid_configur": 87, "hold": [87, 142], "acces": 87, "dynam": [87, 93, 250, 255], "reconfigur": 87, "out": [87, 124, 247, 250], "attempt": [87, 250], "adequ": [87, 151, 157, 169, 174, 175, 177], "scalarevaluationresult": [87, 127, 189, 192], "scalar_result": [87, 192], "plot_surfac": [87, 127, 129, 130, 131, 132, 192, 238], "from_artifact": 87, "whether": [87, 116, 120, 189, 250, 255], "sert": 87, "christian": [87, 88, 263], "\u00e5": [87, 88, 263], "kon": [87, 88, 263], "hoel": [87, 88, 263], "erik": [87, 88, 263], "von": [87, 88, 263], "schwerin": [87, 88, 263], "ra": [87, 88, 263], "\u00fa": [87, 88, 263], "tempon": [87, 88, 263], "asymptot": [87, 88, 263], "optim": [87, 88, 144, 154, 258, 262, 263], "siam": [87, 88, 263], "journal": [87, 88, 146, 154, 263], "scientif": [87, 88, 263], "a869": [87, 88, 263], "a885": [87, 88, 263], "1137": [87, 88, 263], "130911433": [87, 88, 263], "librari": [89, 120, 247, 250, 258], "signalreceiv": [89, 255], "expected_pow": 89, "staticoper": 89, "signaltransmitt": 89, "silenttransmitt": 89, "mock": [89, 100, 261], "num_drop": [90, 92, 124, 236, 246, 247, 255, 257, 261], "scenariotyp": [90, 92], "devicetyp": [90, 92], "consecut": [90, 193], "exst": 90, "creation": [90, 92, 249], "device_index": [90, 92, 257], "search": [90, 113, 158, 188, 249], "mother_nod": [91, 223], "mother": [91, 223], "randomr": [91, 216], "random_nod": [91, 125, 133], "sign": [91, 250], "integ": [91, 93, 99, 262], "replayscenario": 92, "unabl": [92, 249], "transformablebas": [92, 94], "simultan": [92, 138, 217, 230, 247, 250, 263], "replai": [92, 113, 247, 257], "lookup": 92, "device_regist": 92, "registr": 92, "receive_devic": [92, 117, 118, 230], "record": [92, 113, 247, 255, 264], "overwrit": [92, 113, 257, 261], "permit": [92, 250], "measur": [92, 113, 191, 247, 250, 257, 261, 263], "savefil": [92, 113, 191], "playback": 92, "session": 92, "transmit_devic": [92, 230], "drop_dur": [92, 229], "scenariomod": 92, "num_devic": 92, "represnt": 92, "num_oper": 92, "num_receiv": 92, "num_transmitt": 92, "uniqu": [92, 151, 247], "serialized_attribut": [92, 225], "intenum": 92, "dataset": [92, 247, 261, 264], "__sampl": 93, "mxt": 93, "__sampling_r": 93, "__carrier_frequ": 93, "superimpos": 93, "append_sampl": 93, "align": 93, "append_stream": [93, 150], "num_stream": [93, 150, 154, 158, 173], "pipe": 93, "through": [93, 250], "init": 93, "from_interleav": 93, "interleaved_sampl": 93, "interleav": [93, 96, 151, 157, 169, 174], "legend": 93, "png": [93, 175, 176, 177, 178, 193, 218, 224], "hire": [93, 175, 176, 177, 178, 193, 218, 224], "plot_ey": 93, "symbol_dur": [93, 133, 151, 157, 169, 174, 262], "linewidth": 93, "75": [93, 255, 261], "symbol_cutoff": 93, "ey": [93, 253, 254], "render": [93, 235, 247, 250, 254, 258], "plane": [93, 150, 255, 262], "repetit": [93, 96, 143, 151, 160, 162, 163, 174, 177, 193, 236, 237, 238, 241, 243, 244, 245, 246, 257, 259], "line_width": 93, "width": 93, "abov": [93, 224, 247, 250, 255], "ignor": [93, 99, 151, 154, 157, 169, 174, 225, 236, 243, 246], "properli": [93, 247, 249, 251, 257, 262], "intersymbol": 93, "special": [93, 250], "aliasing_filt": 93, "anti": [93, 250], "alias": 93, "filter": [93, 115, 122, 158, 174, 175, 176, 177, 178, 241, 252], "downsampl": 93, "added_sign": 93, "stream_indic": 93, "superposit": [93, 223], "allowd": 93, "to_interleav": 93, "data_typ": 93, "int16": 93, "stretch": [93, 174, 193], "doubl": 93, "filter_ord": 93, "supoperosit": 93, "frequci": 93, "norm": [94, 143], "from_cartesian": 94, "from_spher": 94, "to_spher": 94, "transformablelink": 94, "kinemat": 94, "set_bas": 94, "detach": 94, "to_local_coordin": 94, "arg_1": [94, 202], "backwards_transform": 94, "forwards_transform": 94, "global_orient": 94, "roll": [94, 174, 176, 178, 241], "pitch": 94, "yaw": 94, "global_posit": 94, "is_bas": 94, "kinetmat": 94, "add_link": 94, "establish": [94, 236, 237, 246], "remove_link": 94, "force_remov": 94, "registerd": 94, "linked_fram": 94, "from_rpi": 94, "rpy": 94, "po": 94, "translat": 94, "rotate_direct": 94, "transform_direct": 94, "transform_posit": 94, "rotation_rpi": 94, "vat": [95, 224], "cyclic": [96, 162, 169, 241, 243, 244], "redund": [96, 98, 103, 106, 237, 238, 245], "scrambl": 96, "term": [98, 116, 124, 174, 225, 250], "wrong": 98, "decis": [98, 189], "demodul": [98, 139, 143, 144, 145, 151, 153, 157, 161, 163, 164, 167, 169, 171, 172, 174, 252, 260, 262], "blockinterleav": [98, 138, 139, 140, 141], "block_siz": [98, 243, 244], "interleave_block": 98, "wise": [98, 103], "fashion": [98, 144, 250], "divid": [98, 124, 126, 128, 175], "k_n": [98, 99, 100, 103, 106], "bit_block_s": [98, 99, 100, 103, 106, 237, 238, 245, 259], "tild": [98, 103, 253, 254], "x_1": [98, 103], "x_2": [98, 103], "x_": [98, 103], "y_1": [98, 103], "y_2": [98, 103], "y_": [98, 103], "y_k": [98, 103], "mod": [98, 103], "encoded_bit": [98, 99, 100, 103, 106, 134, 135, 137], "l_n": [98, 99, 100, 103, 106], "code_block_s": [98, 99, 100, 103, 106, 259], "achiev": [98, 99, 100, 103, 151, 235, 250, 251, 259, 263], "r_n": [98, 99, 103], "concept": [99, 132, 245, 248, 255, 256, 258, 263], "them": [99, 100, 115, 133, 139, 194, 250, 259, 264], "subsequ": [99, 149, 180], "sequenti": [99, 180, 236, 246, 247, 249], "revers": [99, 260], "encodermanag": [99, 133, 139, 141], "m_n": 99, "lceil": 99, "rceil": 99, "exactli": [99, 106], "compliant": [99, 235], "necessari": [99, 243, 250], "simplif": 99, "allow_pad": 99, "allow_trunc": 99, "basemodem": [99, 133, 138, 139, 140, 141, 143, 149, 151, 180], "truncat": 99, "add_encod": [99, 138, 139, 140, 141, 259], "num_data_bit": 99, "plain": 99, "cut": [99, 224], "data_bit": [99, 151, 157, 169, 174, 262], "num_code_bit": 99, "required_num_data_bit": 99, "produc": [99, 250], "crc": 100, "occurr": 100, "cyclicredundancycheck": 100, "check_block_s": 100, "checksum": 100, "among": [103, 250], "repetitionencod": [103, 138, 139, 140, 141], "even": [103, 146, 219, 247, 250], "mask": [106, 162, 250], "prevent": [106, 158, 250], "pseudorandomgener": 106, "init_sequ": 106, "1600": 106, "31": 106, "gold": 106, "generate_sequ": 106, "reset": 106, "gernat": 106, "impli": [106, 250], "revert": 106, "queue": 106, "back": [106, 116, 222, 247, 249, 262], "scrambler3gpp": 106, "scrambler": 106, "technic": 106, "scrambler_3gpp": 106, "scrambler80211a": 106, "802": [106, 263], "11a": [106, 263], "soft": 106, "scrambler_80211a": 106, "07": [106, 253, 263], "2018": [106, 217, 263], "etsi_t": [106, 263], "138200_138299": [106, 263], "138211": [106, 263], "02": [106, 189, 262, 263], "ts_138211v150200p": [106, 263], "lan": [106, 263], "man": [106, 263], "art": [106, 154, 263], "medium": [106, 237, 250, 263], "mac": [106, 263], "layer": [106, 115, 116, 124, 247, 255, 256, 263], "phy": [106, 263], "speed": [106, 237, 263], "std": [106, 263], "1999": [106, 263], "ieeestd": [106, 263], "90606": [106, 263], "real": [108, 115, 154, 183, 219, 220, 247, 252, 258, 261], "usrp": [108, 124, 239, 247, 249], "peripher": 108, "hardawar": [108, 252], "dummi": 108, "uhd": [108, 110, 119, 120, 246, 249], "audio": [108, 239, 247, 249, 264], "sound": [108, 110, 224, 252, 263], "card": [108, 110, 252], "calibr": [108, 115, 116], "testb": [108, 247, 248, 261], "audiodevic": [109, 110, 236, 252], "playback_devic": [109, 236], "record_devic": [109, 236], "playback_channel": [109, 236], "record_channel": [109, 236], "48000": 109, "physicaldevic": [109, 111, 112, 115, 116, 120, 121, 247], "rock": 109, "48": 109, "khz": [109, 169, 252], "audiodeviceantenna": 109, "max_sampling_r": [109, 115, 116, 120], "samplin": [109, 115, 116, 120], "audioscenario": 110, "physicalscenario": [110, 117, 118, 119, 247], "phyical": 110, "audiosystem": [110, 236], "delaycalibr": [111, 112], "physical_devic": [111, 112], "delaycalibrationbas": [111, 115], "num_iter": 111, "wait": 111, "inher": 111, "cabl": [111, 252], "Be": 111, "care": 111, "compens": [111, 174, 234, 238], "idl": 111, "selectiveleakagecalibr": 112, "leakage_respons": 112, "leakagecalibrationbas": [112, 115], "implicit": 112, "mmseestim": 112, "num_prob": 112, "num_wavelet_sampl": 112, "127": [112, 253], "configure_devic": 112, "mmse": [112, 238], "fly": 112, "strictli": [112, 247], "estimate_delai": 112, "remove_leakag": 112, "transmitted_sign": 112, "received_sign": 112, "delay_correct": 112, "recveived_sign": 112, "hardwareloop": [113, 114, 124, 236, 246, 247, 261], "manual_trigg": [113, 236, 246], "plot_inform": [113, 261], "iteration_prior": 113, "iterationprior": 113, "record_drop": 113, "physicalscenariotyp": 113, "pdt": [113, 118], "keyboard": 113, "manual": [113, 235, 236, 246, 249], "add_plot": [113, 124, 247], "hardwareloopplot": [113, 114, 121], "evaluator_index": 113, "imens": 113, "file_loc": 113, "replac": [113, 124, 143, 247, 249, 251, 256], "campa": 113, "prioriti": 113, "prepare_figur": 114, "prepar": 114, "update_plot": 114, "_update_plot": 114, "hardwareloopsampl": 114, "hardware_loop": [114, 124, 247, 252, 261], "max_receive_delai": [115, 116, 236, 252], "leakage_calibr": 115, "delay_calibr": 115, "siganl": 115, "noleakagecalibr": 115, "stub": [115, 147, 256], "nodelaycalibr": 115, "estimate_noise_pow": 115, "unbias": 115, "load_calibr": 115, "hard": [115, 125, 151, 157, 169, 174, 262], "drive": [115, 239, 261], "save_calibr": 115, "under": [115, 190, 191, 192, 193, 235, 248, 249, 250], "trigger_direct": [115, 116], "bypass": [115, 116, 247], "adaptive_sampl": 115, "adapt": [115, 217, 247, 250, 263], "lowpass_bandwidth": 115, "lowpass": 115, "determin": [115, 120, 193, 219, 220, 250], "lowpass_filt": 115, "physicaldevicedummi": [116, 117, 124, 247], "receive_transmiss": 116, "demonstr": [116, 117, 245, 247, 256, 257, 258, 259, 260], "simulatedantenna": [116, 200, 201, 202, 203, 204, 205, 206, 207, 208, 225], "istrop": [116, 225, 255], "rf_chain": [116, 201, 202, 225, 235, 238, 240, 261], "rfchain": [116, 201, 202, 217, 225, 238, 240], "amplif": [116, 224, 225], "isol": [116, 198, 217, 225, 242, 261, 263], "coupl": [116, 198, 225], "mutual": [116, 198, 210, 211, 225], "trigger_model": [116, 225], "triggermodel": [116, 225], "statictrigg": [116, 225], "noiseless": [116, 225], "trigger_r": [116, 117, 225, 226, 227, 230], "inf": [116, 224, 225, 230, 237, 245, 263], "leaking_sign": [116, 202, 225, 226], "simulateddeviceoutput": [116, 225, 227], "triggerr": [116, 117, 225, 226, 227, 230], "infinit": [116, 117, 219, 225, 230], "leak": [116, 212, 214, 225, 226], "processedsimulateddeviceinput": [116, 225, 226, 230], "simulateddevicerecept": [116, 117, 225, 226, 230], "simulateddevicetransmiss": [116, 225, 227, 230], "physicalscenariodummi": [117, 124, 247], "metric": [117, 124, 127, 192, 230], "share": [118, 230, 250], "download": [118, 239, 247, 249, 264], "usrpsystem": [119, 246], "usrpdevic": [119, 120], "ip": [119, 120, 246], "5555": [119, 120, 246], "700000000": 120, "tx_gain": [120, 246], "rx_gain": [120, 246], "scale_transmiss": 120, "num_prepended_zero": 120, "200": [120, 241, 255], "num_appended_zero": 120, "bindung": 120, "700": 120, "mhz": [120, 238, 241, 257], "ensur": [120, 250], "proper": [120, 225, 249, 252], "prepend": 120, "parent": 120, "usrpantenna": 120, "internet": 120, "protocol": [120, 248, 250], "adress": 120, "num_prepeneded_zero": 120, "dac": [120, 218], "artifactplot": 121, "queue_length": 121, "hardwareloopevaluatorplot": 121, "devicereceptionplot": [121, 124, 247], "hardwareloopdeviceplot": 121, "signalplot": 121, "devicetransmissionplot": [121, 124, 247], "evaluationplot": 121, "eyeplot": 121, "radarrangeplot": 121, "receivedconstellationplot": [121, 124, 247], "exemplari": 122, "jcasrecept": 123, "communicationrecept": [123, 134, 135, 139], "radarrecept": [123, 194, 195], "communicationreceptionfram": [123, 134, 135], "jcastransmiss": 123, "communicationtransmiss": [123, 136, 141], "radartransmiss": [123, 194, 196], "communicationtransmissionfram": [123, 136, 137], "matchedfilterjca": [123, 242], "max_rang": [123, 182, 187, 192, 193, 194, 197, 242], "duplexmodem": [123, 124, 133, 138, 252, 256, 259, 260, 262], "enviro": 123, "correlatiom": 123, "range_resolut": [123, 193, 197], "propgram": [124, 159], "framework": [124, 248, 253, 254, 263], "primarili": [124, 141, 250], "compris": 124, "unidirect": [124, 140], "bidirect": 124, "importantli": [124, 154], "commuic": [124, 242], "ye": [124, 151, 156], "rectangular": [124, 151, 156, 174, 242], "ofdm": [124, 143, 151, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 224, 236, 239, 246, 256, 257, 258, 260, 263], "chirp": [124, 151, 156, 157, 175, 193, 239, 241, 245, 261], "fsk": [124, 151, 156, 239], "box": [124, 247], "compar": [124, 126, 128, 247, 253, 254, 255, 257], "throughput": [124, 126, 128, 237, 248, 258], "multipli": [124, 126, 128], "tx_devic": [124, 140, 144, 145, 146, 147, 247], "rx_devic": [124, 140, 144, 145, 146, 147, 247], "specifii": [124, 247, 255], "simplex": [124, 157, 175, 176, 177, 178, 237, 247, 257, 258], "1e6": [124, 138, 139, 140, 141, 144, 145, 146, 147, 175, 176, 177, 178, 238, 240, 241, 247, 259], "roll_off": [124, 144, 145, 146, 147, 174, 176, 178, 241, 247], "freeli": [124, 247], "configuart": 124, "hardware_scenario": [124, 247], "42": [124, 138, 140, 141, 144, 247, 252, 255, 262, 263], "could": [124, 247, 250, 258], "1e9": [124, 157, 193, 242, 246, 247, 255], "similarli": [124, 138, 140], "supervis": 124, "constel": [124, 150, 174, 247, 252, 257, 262], "10e9": [124, 247, 253, 254, 259, 261], "100e9": [124, 247], "bits_sourc": [125, 138, 140, 141], "randombitssourc": [125, 138, 140, 141], "bitssourc": [125, 141], "streambitssourc": 125, "transmittingmodem": [125, 127, 129, 130, 131, 132, 133, 136, 137, 138, 140, 141], "turn": [125, 252], "generate_bit": 125, "num_bit": 125, "kei": [126, 157, 250, 262], "rather": [126, 256], "straightforward": 126, "separ": [126, 219, 220, 225, 226, 238, 239, 250], "modem_alpha": [126, 129, 130, 131, 132, 238, 240, 241, 243, 244, 245], "modem_beta": [126, 129, 130, 131, 132, 241, 245], "communication_evalu": 126, "communication_artifact": 126, "communicationevalu": [127, 129, 130, 131, 132], "monte_carlo": [127, 129, 130, 131, 132], "transmitting_modem": [127, 129, 130, 131, 132, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246], "receiving_modem": [127, 129, 130, 131, 132, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246], "receivingmodem": [127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140], "biterrorartifact": 129, "b_": [129, 130, 131, 132], "ldot": [129, 130, 131, 132], "practic": [129, 130, 131, 132, 250, 262], "shorter": [129, 130, 131, 132], "device_alpha": [129, 130, 131, 132, 237, 238, 240, 241, 243, 244, 245], "device_beta": [129, 130, 131, 132, 241], "waveform_configur": [129, 130, 131, 132], "float64": [129, 130], "blockerrorevalu": 130, "blockerrorartifact": 130, "partit": [130, 131, 132, 154], "segment": [130, 131, 132], "bler": 130, "exepct": [130, 131, 132], "frameerrorevalu": 131, "frameerrorartifact": 131, "fer": 131, "throughputevalu": [132, 237], "throughputartifact": 132, "througput": 132, "drx": 132, "protoc": 132, "dpu": 132, "henc": 132, "bits_per_fram": [132, 151, 262], "frame_error": 132, "symbolprecod": [133, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 260], "communicationwaveform": [133, 139, 141, 151, 152, 153, 154, 155, 157, 165, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 262], "encoder_manag": [133, 138, 139, 140, 141, 259], "num_data_bits_per_fram": 133, "receiving_devic": [133, 138, 139, 140, 141, 190, 237, 257, 258], "unspecifi": [133, 138, 139, 141], "samples_per_fram": [133, 151, 157, 169, 174, 262], "transmitting_devic": [133, 138, 139, 140, 141, 190, 237, 257, 258], "tranmsit": [133, 138, 139, 141], "mandatori": [133, 194], "fec": [134, 136, 137, 264], "equalized_symbol": [134, 135, 247, 252, 257], "num_fram": [134, 136], "decoded_sign": 135, "decoded_symbol": [135, 260], "decoded_bit": 135, "encoded_symbol": [137, 260], "transmittgin": 137, "simulaten": [138, 258], "deleg": [138, 139, 140, 141], "1e10": [138, 139, 140, 141], "dsp": [138, 139, 140, 141], "modulation_ord": [138, 139, 140, 141, 144, 145, 146, 147, 151, 157, 169, 174, 175, 176, 177, 178, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 252, 259, 262], "64": [138, 139, 140, 141, 144, 145, 146, 147, 157, 169, 175, 176, 177, 178, 238, 241, 252], "barebon": [138, 139, 140, 141], "singlecarriercorrelationsynchron": [138, 139, 140, 175, 176, 177, 178, 252], "transmit_stream_cod": [138, 140, 141], "receive_stream_cod": [138, 139, 140], "dft": [138, 139, 140, 141, 143, 236, 243, 244, 246], "192": [138, 139, 140, 141, 246], "incom": [139, 260], "partitionin": 139, "receivestreamcod": [139, 181], "statedsymbol": [139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 157, 167, 169, 174, 260, 262], "pick": [139, 151, 157, 169, 174, 262], "unmap": [139, 151, 153, 157, 169, 174, 260, 262], "bare": [139, 141], "fulli": [139, 141, 235, 255], "wavform": [139, 141, 238], "rx_modem": 139, "public": [139, 194, 250], "consolid": [139, 194, 247], "rxmodem": [139, 242], "betweeen": 140, "moulat": 141, "specic": 141, "subseuent": 141, "place": [141, 151, 157, 169, 174, 250, 255, 262], "transmitstreamcod": [141, 181], "tx_modem": 141, "randomli": 141, "impair": [141, 217, 261], "multiplex": [142, 159, 169, 243, 244], "said": [142, 247, 253, 254], "instruct": [142, 147, 157, 175, 176, 177, 178, 239, 247, 255, 264], "symbol_precod": [143, 144, 145, 146, 147, 148, 149], "demap": 143, "duplexlink": 143, "ofdmwaveform": [143, 163, 165, 166, 167, 168, 169, 170, 256, 257, 258, 260], "num_subcarri": [143, 162, 163, 164, 169, 236, 241, 243, 244, 246], "1024": [143, 169, 238, 256, 258, 260], "frameresourc": [143, 162, 169, 256, 257, 258, 260], "prefix_ratio": [143, 162, 236, 241, 243, 244, 246], "0684": 143, "frameel": [143, 160, 162, 236, 241, 243, 244, 246, 256, 257, 258, 260], "elementtyp": [143, 160, 236, 241, 243, 244, 246, 256, 257, 258, 260], "framesymbolsect": [143, 164, 256, 257, 258, 260], "fft_norm": 143, "ortho": 143, "num_input_stream": [143, 144, 145, 146, 147, 180, 181, 260], "num_output_stream": [143, 144, 145, 146, 147, 180, 181, 260], "ratio_combin": 144, "maximumratiocombin": 144, "1x2": [144, 145], "simulateduniformarrai": [144, 145, 146, 147, 208, 243, 244, 254, 258], "simulatedidealantenna": [144, 145, 146, 147, 205, 243, 244, 254, 255, 258], "singlecarrieridealchannelestim": [144, 145, 146], "kahn": [144, 263], "leanoard": [144, 263], "squarer": [144, 263], "ir": [144, 263], "1698": [144, 263], "1704": [144, 263], "1954": [144, 263], "jrproc": [144, 263], "274666": [144, 263], "single_carri": 145, "singlecarri": [145, 243, 244], "take": [145, 147, 250, 259], "space_time_block_cod": 146, "alamouti": [146, 263], "ganesan": [146, 263], "2x2": [146, 147, 243], "4x4": 146, "stbc": 146, "girish": 146, "petr": 146, "stoica": [146, 263], "schema": 146, "decreas": [146, 254], "thu": [146, 250], "num_block": [146, 150], "four": [146, 150, 194, 247, 256, 257, 258, 260, 262], "divis": [146, 169], "fraction": [146, 147, 180], "divers": [146, 263], "techniqu": [146, 217, 263], "1451": [146, 263], "1458": [146, 263], "1998": [146, 263], "49": [146, 263], "730453": [146, 263], "theori": [146, 217, 263], "47": [146, 263], "1650": [146, 263], "1656": [146, 263], "2001": [146, 263], "923754": [146, 263], "spatial_multiplex": 147, "spatialmultiplex": [147, 258], "orthogon": [147, 159, 169], "parallel": [147, 247, 258], "meant": [148, 180], "intermedi": [149, 180], "account": [149, 180], "num_encoded_block": 149, "num_input_block": 149, "somewher": [150, 255], "deep": 150, "symboltyp": 150, "pilot": [150, 151, 157, 158, 159, 166, 169, 173, 174, 175, 176, 177, 178, 241], "append_symbol": 150, "plot_constel": [150, 247, 252, 257, 262], "pyplot": [150, 254, 255, 256, 257, 258, 259, 260, 261, 262], "carri": [151, 250, 260], "baseband_sign": [151, 157, 161, 169, 174, 226], "oversampl": [151, 174, 177, 252], "symbol_typ": [151, 157], "complex128": 151, "data_r": 151, "equalize_symbol": 151, "estimate_channel": [151, 153, 167], "frame_delai": 151, "data_symbol": [151, 157, 163, 169, 174, 262], "singular": [151, 157, 169, 174], "placed_symbol": [151, 157, 169, 174], "communicaton": [151, 157, 169, 174], "bit_energi": [151, 157, 169, 174, 262], "guard": [151, 157, 158, 159, 166, 169, 174, 177, 193, 236, 241, 243, 244, 246], "bits_per_symbol": [151, 157], "channelequ": [151, 152, 155, 165], "channelestim": [151, 153, 167], "unitless": [151, 157, 169, 174], "symbol_energi": [151, 157, 169, 174, 262], "symbol_precoding_support": [151, 157], "pilotcommunicationwaveform": [151, 157, 174, 175, 176, 177, 178], "pilot_sign": [151, 157, 169, 174], "configurablepilotwaveform": [151, 169, 174, 175, 176, 177, 178], "symbol_sequ": 151, "repeat_symbol_sequ": 151, "pilotsymbolsequ": [151, 174, 177], "pilot_symbol": 151, "pilot_symbol_sequ": [151, 174, 175, 176, 177, 178], "repeat_pilot_symbol_sequ": [151, 174, 177], "waveformtyp": [151, 152, 153, 154, 155], "equalize_channel": [152, 155], "stated_symbol": 152, "widehat": 153, "reli": [153, 250, 260], "sdr": 153, "problem": [154, 250], "underset": 154, "rvert_": 154, "clock": [154, 157, 158], "travel": [154, 232], "shortest": 154, "tend": 154, "vital": 154, "nasir": [154, 263], "side": [154, 158, 173, 217, 225, 230, 248], "tghe": 154, "ali": [154, 263], "salman": [154, 263], "durrani": [154, 263], "hani": [154, 263], "mehrpouyan": [154, 263], "steven": [154, 263], "blostein": [154, 263], "rodnei": [154, 263], "kennedi": [154, 263], "survei": [154, 263], "classif": [154, 263], "research": [154, 248, 263], "year": [154, 250, 263], "eurasip": [154, 263], "1186": [154, 263], "s13638": [154, 263], "016": [154, 263], "0670": [154, 263], "zeroforcingchannelequ": [155, 170], "zeroforc": 155, "waveform_chirp_fsk": 157, "chirpfskwaveform": 157, "chirpfsksynchron": 157, "chirpfskcorrelationsynchron": 157, "waveform_correlation_synchron": [157, 158], "correlationsynchron": [157, 158, 166], "ramp": 157, "chirp_dur": [157, 175, 193, 237, 245, 261], "chirp_bandwidth": [157, 237, 245], "num_pilot_chirp": 157, "num_data_chirp": [157, 237, 245], "08": 157, "1000000000": 157, "freq_differ": [157, 237, 245], "guard_interv": [157, 174, 177, 237, 238, 240, 241, 242, 245], "adjac": 157, "int64": 157, "chirps_in_fram": 157, "neighbour": 157, "samples_in_chirp": 157, "guard_ratio": [157, 158, 166], "peak_promin": [157, 158, 166], "peak": [157, 158, 166, 188], "promin": [157, 158, 166, 250], "chirpfsk": [157, 237, 245], "preambl": [158, 174, 175, 176, 177, 178, 241, 250], "pgt": 158, "kc76": [158, 263], "pre": [158, 249], "span": 158, "pilotcorrel": [158, 166], "devis": 159, "freqeuenc": 159, "forc": [159, 236, 241, 244, 246, 250, 256], "schmidl": [159, 236, 246, 263], "cox": [159, 236, 246, 263], "frameguardsect": 161, "num_repetit": [161, 163, 164, 236, 241, 243, 244, 246], "framesect": [161, 163, 164, 169, 171], "extract_channel": [161, 163, 164], "csi": [161, 163, 164], "reference_posit": [161, 163, 164], "param": [161, 163, 164], "referenceposit": [161, 163, 164], "palc": [161, 163, 164, 171], "prefix_typ": [162, 241, 243, 244], "prefixtyp": [162, 241, 243, 244], "AND": [162, 250], "num_element_typ": 162, "num_refer": [162, 163, 164], "occupi": 162, "subcarri": [162, 163, 164, 169, 171, 172, 236, 241, 243, 244, 246], "prefix": [162, 164, 169], "larger": [162, 174, 234, 250], "zeropad": 162, "pick_symbol": 163, "place_symbol": 163, "reference_symbol": 163, "num_word": [163, 164], "resource_mask": [163, 164], "pattern": [164, 236, 241, 243, 244, 246, 255, 256, 258, 260], "prefix_offset": 164, "skip": [164, 262], "ofdmchannelequ": [165, 256], "ofdmcorrelationsynchron": 166, "ofdmleastsquareschannelestim": [167, 257], "serializt": 167, "ofdmsynchron": [168, 173], "subcarrier_spac": [169, 236, 241, 243, 244, 246], "dc_suppress": [169, 236, 241, 243, 244, 246], "ul": 169, "dl": [169, 243], "sc": [169, 175, 176, 177, 178, 238, 240, 241, 242], "fdma": 169, "bpsk": 169, "qpsk": [169, 238], "256": [169, 237, 243, 244, 245], "qam": [169, 174, 239, 241], "suppress": 169, "add_resourc": 169, "add_sect": 169, "sometim": 169, "pilot_sect": 169, "pilotsect": [169, 171, 172], "references_per_fram": 169, "symbols_per_fram": [169, 262], "words_per_fram": 169, "ofdmzeroforcingchannelequ": [170, 256, 257], "zf": [170, 236, 241, 242, 243, 244, 246, 256], "pilot_el": [171, 172], "communicationwaveformofdm": [171, 172], "from_yaml": [171, 180, 229], "safeconstructor": [171, 180, 229], "subsymbol": [171, 236, 243, 246], "schmidlcoxpilotsect": [172, 173], "schmidlcoxpilot": [172, 236, 246], "45": [172, 173, 263], "1613": [172, 173, 263], "1621": [172, 173, 263], "1997": [172, 173, 263], "650240": [172, 173, 263], "schmidlcoxsynchron": 173, "equz": 173, "schmidlcox": [173, 236, 246], "waveform_single_carri": [174, 175, 176, 177, 178], "filteredsinglecarrierwaveform": [174, 175, 176, 177, 178], "rolledoffsinglecarrierwaveform": [174, 176, 178], "typic": [174, 247, 250, 261], "shape": [174, 175, 176, 177, 178, 217, 253, 254, 258], "num_postamble_symbol": [174, 177], "psk": [174, 243, 262], "off": [174, 176, 178, 224, 241, 255], "psk_qam_map": 174, "pskqammap": 174, "llr": 174, "isi": 174, "awgn": [174, 216, 238, 241, 256, 260, 262], "postambl": [174, 177], "waform": [174, 177], "plot_filt": 174, "plot_filter_correl": 174, "num": 174, "num_guard_sampl": 174, "relative_bandwidth": [174, 176, 177, 178], "filter_length": [174, 176, 178], "longer": 174, "puls": [174, 193, 241, 252], "inter": [174, 176, 178], "overlap": [174, 238], "fmcwwaveform": 175, "rectangl": [175, 177], "128": [175, 238, 244, 252], "10e6": 175, "custompilotsymbolsequ": [175, 176, 177, 178], "25j": [175, 176, 177, 178], "chirp_slop": 175, "slope": [175, 193], "raisedcosinewaveform": 176, "raisedcosin": 176, "rectangularwaveform": 177, "recangular": 177, "rootraisedcosin": [178, 238, 240, 241, 247], "required_num_input_stream": [180, 260], "required_num_output_stream": [180, 260], "precodertyp": 180, "__modem": 180, "__precod": 180, "pop_precod": [180, 260], "required_input": 180, "required_output": 180, "receivecod": 181, "transmitcod": 181, "radarwaveform": [182, 193, 194, 197], "radardetector": [182, 184, 186, 188, 189, 194], "view": [182, 235, 248, 250, 255], "thresholddetector": [182, 188, 189], "detector": [182, 189, 190, 191, 192, 194, 242, 261], "60e9": [182, 189, 191, 192, 193], "statement": [182, 235, 249, 250], "visualizu": 182, "cube": [182, 184, 185, 186, 188, 194, 195], "plot_rang": [182, 183], "profil": [182, 183], "plot_range_veloc": [182, 183], "cloud": [182, 184, 186, 188, 189, 194, 195], "tutori": [182, 247, 248, 260, 261, 262], "reiver": [182, 190], "radarcub": [183, 184, 186, 188, 189, 194, 195], "angle_bin": 183, "doppler_bin": 183, "range_bin": [183, 197], "unexpect": 183, "normalize_pow": 183, "velocity_bin": 183, "maxdetector": [184, 192], "radarpointcloud": [184, 186, 187, 188, 194, 195], "pointdetect": [185, 187], "fromspher": 185, "add_point": 187, "num_point": 187, "min_pow": [188, 242], "peak_detect": 188, "minmal": 188, "betwe": 188, "detectionprobevalu": 189, "success": 189, "would": [189, 191, 192, 193, 250, 259], "reveiv": [189, 191, 192, 193], "detectionprobabilityevalu": 189, "detectionprobartifact": 189, "artifacto": 189, "radarevalu": [190, 191, 192], "receiving_radar": [190, 192], "radar_channel": [190, 191, 192, 242, 253, 254, 261], "bastract": 190, "num_threshold": 191, "101": 191, "graphic": 191, "illustr": 191, "alarm": [191, 248], "versu": 191, "h0_campaign": 191, "h0_measur": [191, 261], "h1_campaign": 191, "h1_measur": [191, 261], "h0": 191, "h1": 191, "rocevaluationresult": 191, "from_scenario": 191, "h0_scenario": 191, "h1_scenario": 191, "h0_oper": 191, "h1_oper": 191, "altern": [191, 250, 257], "rocevalu": 191, "cube_h0": 191, "cube_h1": 191, "rocartifact": 191, "data_h0": 191, "data_h1": 191, "h0_valu": 191, "h1_valu": 191, "detection_prob": 191, "false_alarm_prob": 191, "characteristc": [191, 261], "rootmeansquareerror": 192, "rmse": 192, "wide": [192, 250], "rootmeansquareerrorresult": 192, "rootmeansquareevalu": 192, "pcl": 192, "squre": 192, "rootmeansquareartifact": 192, "num_error": 192, "cummul": 192, "errro": 192, "num_chirp": [193, 261], "100000000": 193, "pulse_rep_interv": [193, 261], "adc_sampling_r": 193, "unmodul": [193, 238], "look": [193, 251, 255], "like": [193, 247, 250, 251, 258], "mu": [193, 238], "input_sign": [193, 217, 219, 220, 221, 222, 224], "2d": [193, 197], "ping": [193, 194, 197], "adc": [193, 217, 218, 219, 220, 221, 222, 225, 240, 261], "valueerorr": 193, "wh": [193, 197], "max_relative_doppl": [193, 197], "radial": [193, 197], "relative_doppler_bin": [193, 197], "realtiv": [193, 197], "1d": [193, 197], "relative_doppler_resolut": [193, 194, 197], "monostat": [194, 261], "composit": 194, "transmit_beamform": 194, "receive_beamform": [194, 253, 254], "those": [194, 249, 250, 253, 254], "beamfor": 194, "though": [194, 247, 250], "indiviu": 194, "velocity_resolut": 194, "amplifi": [198, 235, 238, 240, 263], "imped": [198, 209, 212], "0j": [200, 204, 205, 206, 207], "simulatedantennaport": [200, 201, 202, 203, 204, 205, 206, 207, 208, 255], "analog_digital_convers": 202, "rf_signal": 202, "default_rf_chain": 202, "plot_pattern": [202, 254, 255], "coupling_model": 202, "rf_chain_modifi": 202, "notifi": [202, 250], "simulatedcustomarrai": [203, 255], "simulatedlinearantenna": 206, "simulatedpatchantenna": 207, "anntenna": 208, "impedancecoupl": 210, "transmit_correl": 210, "receive_correl": 210, "transmit_imped": 210, "receive_imped": 210, "matching_imped": 210, "perfectcoupl": 211, "perfectisol": 214, "specificisol": [215, 261], "awgnreal": 216, "white": [216, 223, 262], "gaussian": [216, 262], "noiser": [216, 226], "add_to": 216, "noiserealizationtyp": 216, "kiayani": [217, 263], "phase_offset": [217, 240], "amplitude_imbal": [217, 240], "pa": 217, "add_iq_imbal": 217, "notat": 217, "taken": [217, 249], "en": [217, 250], "wikipedia": 217, "wiki": 217, "iq_imbal": 217, "deterior": 217, "no_antenna": 217, "no_sampl": 217, "analogdigitalconvert": [217, 219], "imbal": [217, 240], "phase_nois": [217, 240], "phasenois": [217, 223], "pase": 217, "power_amplifi": [217, 235, 238, 240], "poweramplifi": [217, 224], "adnan": [217, 263], "muhammad": [217, 263], "zeeshan": [217, 263], "wahe": [217, 263], "lauri": [217, 263], "anttila": [217, 263], "mahmoud": [217, 263], "abdelaziz": [217, 263], "dani": [217, 263], "korpi": [217, 263], "vill": [217, 263], "syrj\u00e4l\u00e4": [217, 263], "marko": [217, 263], "kosunen": [217, 263], "kari": [217, 263], "stadiu": [217, 263], "jussi": [217, 263], "ryyn\u00e4nen": [217, 263], "mikko": [217, 263], "valkama": [217, 263], "nonlinear": [217, 224, 263], "cancel": [217, 263], "improv": [217, 249, 250, 263], "microwav": [217, 263], "66": [217, 263], "2299": [217, 263], "2312": [217, 263], "tmtt": [217, 263], "2017": [217, 263], "2786729": [217, 263], "imperfect": 218, "quantiz": [218, 219, 220, 221, 222, 240, 261], "agc": [218, 220], "num_quantization_bit": [219, 240, 261], "quantizer_typ": [219, 240], "quantizertyp": [219, 240], "mid_ris": [219, 240], "jitter": 219, "symmetr": [219, 263], "still": 219, "indepentedli": 219, "adjust": [219, 220, 221, 222, 224, 234], "plot_quant": 219, "input_sampl": 219, "fig_ax": 219, "depict": [219, 224, 247], "staircas": 219, "imaginari": [219, 220], "charaterist": 219, "num_quantization_level": 219, "quantizationtyp": 219, "mid_tread": 219, "automaticgaincontrol": [220, 240, 261], "agc_typ": 220, "gaincontroltyp": 220, "max_amplitud": 220, "backoff": 220, "rescale_quant": [220, 221, 222], "gaincontrolbas": [220, 221, 222], "rm": [220, 243], "rescal": [220, 221, 222], "estimate_gain": [220, 221, 222], "voltag": [220, 221, 222], "wil": 220, "rms_amplitud": 220, "plu": [220, 250], "greatest": [220, 250], "quantiti": 220, "rtype": 220, "automatig": 220, "volt": [221, 224], "adjust_sign": 222, "scale_quantized_sign": 222, "quantized_sign": 222, "qzanit": 222, "nophasenois": 223, "add_nois": 223, "oscillatorphasenois": [223, 240], "k0": [223, 240], "k2": [223, 240], "k3": [223, 240], "oscil": [223, 263], "kkp": [223, 263], "spectral": [223, 263], "densiti": [223, 263], "psd": 223, "phi_0": 223, "phi_2": 223, "varphi_3": 223, "k_0": 223, "k_2": 223, "flicker": 223, "law": [223, 250, 263], "decai": 223, "phi_3": 223, "k_3": 223, "cubic": 223, "110": 223, "2nd": 223, "3rd": 223, "invari": 224, "memoryless": [224, 263], "satur": 224, "sat": [224, 263], "clippingpoweramplifi": 224, "clip": 224, "custompoweramplifi": 224, "saturation_amplitud": 224, "adjust_pow": 224, "overwritten": 224, "send": 224, "rapppoweramplifi": 224, "smoothness_factor": [224, 238], "rapp": [224, 238, 240, 263], "2p_": 224, "p_": 224, "geq": 224, "smooth": [224, 238], "salehpoweramplifi": 224, "amplitude_alpha": 224, "amplitude_beta": 224, "phase_alpha": 224, "phase_beta": 224, "saleh": [224, 263], "alpha_": 224, "beta_": 224, "ch": [224, 263], "hpa": [224, 263], "dpsk": [224, 263], "conf": [224, 263], "comm": [224, 263], "91": [224, 263], "lieg": [224, 263], "belgium": [224, 263], "179": [224, 263], "184": [224, 263], "1991": [224, 263], "elib": [224, 263], "dlr": [224, 263], "33776": [224, 263], "twt": [224, 263], "1715": [224, 263], "1720": [224, 263], "novemb": [224, 250, 263], "1981": [224, 263], "tcom": [224, 263], "1094911": [224, 263], "process_from_r": 225, "simulateddevicer": 225, "device_sign": 225, "construct": [225, 263], "improperli": 225, "realize_recept": 225, "simulateddevicereceiver": 225, "receive_from_r": 225, "operator_separ": [225, 226, 245], "noise_r": 226, "operator_recept": [226, 247, 257], "from_processedsimulateddeviceinput": 226, "device_input": 226, "from_simulateddeviceoutput": 227, "simulateddrop": [228, 247], "simual": 228, "processedsimulateddevicerecept": 228, "correspond": [228, 237, 250], "plot_result": [229, 237, 238, 240, 241, 242, 243, 244, 245], "dump_result": 229, "transmitter_index": [229, 230], "receiver_index": [229, 230], "arriving_channel": 230, "active_onli": 230, "departing_channel": 230, "depart": 230, "transmissison": 230, "mxm": 230, "lose": 231, "variou": [231, 235], "math": 231, "tile": [231, 259], "amplitude_path_loss": 232, "vacuum": 232, "db2lin": 232, "db_val": 232, "conversion_typ": 232, "lin2db": 232, "val": 232, "marcum_q": 232, "marcum": 232, "q_m": 232, "relationship": [232, 250], "chi": 232, "rms_valu": 232, "delay_resampling_matrix": 233, "num_samples_in": 233, "num_samples_out": 233, "mxn": 233, "necessarili": 233, "curtesi": 234, "stackoverflow": 234, "com": [234, 263], "61503168": 234, "evenli": 234, "screen": 234, "get_monitor": 234, "screen_geometri": 234, "monitor": 234, "screeninfo": 234, "set_figure_geometri": 234, "fig": [234, 258], "backend": 234, "tile_figur": 234, "col": 234, "screen_rect": 234, "tile_offset": 234, "qt": 234, "tk": 234, "qt5agg": 234, "tkagg": 234, "shown": 234, "pixel": 234, "height": 234, "intend": [235, 247, 249, 250, 255], "contribut": [235, 248], "chanc": 235, "regress": 235, "autom": 235, "unittest": 235, "discov": 235, "unit_test": 235, "integration_test": 235, "config_test": 235, "assert": [235, 250], "coverag": [235, 250], "deploi": [235, 248], "test_instal": 235, "cover": [235, 250], "kindli": 235, "ask": [235, 262], "contributor": [235, 250], "maintain": [235, 248, 250], "mypi": 235, "enforc": [235, 250], "pep8": 235, "flake8": 235, "complianc": [235, 250], "violat": [235, 250], "black": 235, "preprocessor": 235, "prior": [235, 250], "choic": [235, 249, 250], "pip": [235, 246, 249], "upgrad": 235, "sphinx": 235, "pypi": 235, "graphviz": 235, "docssourc": 235, "insert": 235, "autodoc": 235, "py": [235, 251, 253], "html": [235, 246, 250], "websit": 235, "open": [235, 248, 249, 250, 257, 263], "web": [235, 250], "browser": 235, "desktop": 236, "soundcard": 236, "30e3": [236, 243, 246], "dc": [236, 243, 244, 246], "4096": [236, 243, 246], "communict": [236, 243, 246], "0703125": [236, 241, 243, 244, 246], "600": 236, "2100": [236, 243], "078125": [236, 241, 243, 244, 246], "35": [236, 243, 246], "677083e": [236, 243, 246], "similar": [237, 250], "500khz": 237, "sf": 237, "delta_f": 237, "1953": [237, 245], "125hz": 237, "bw": 237, "512": 237, "uncod": [237, 238, 241], "log2": [237, 262], "15625": 237, "kbp": 237, "160": 237, "865mhz": 237, "865e6": [237, 244, 245], "multipathfad": [237, 245], "standardcorrel": 237, "device_typ": 237, "base_st": [237, 242], "low": [237, 259, 261, 263], "500e3": [237, 245], "512e": [237, 245], "125": [237, 245], "paus": [237, 241, 245], "01": [237, 241, 242, 243, 244, 245], "finish": [237, 238, 240, 241, 242, 243, 244, 245, 258], "nyquist": 238, "yield": 238, "400": 238, "mbp": [238, 241], "interchirp": 238, "100e6": [238, 240, 242], "post": 238, "95": 238, "chapter": 239, "hermspi": 239, "depth": [239, 248, 255], "knowledg": [239, 250], "suit": [239, 247], "enter": [239, 250], "lora": 239, "driver": [239, 249], "mid": 240, "riser": 240, "1e4": [240, 252], "numerologi": 241, "lte": 241, "501": 241, "501e9": 241, "15e3": [241, 244], "2048": [241, 252], "1200": 241, "2e": [241, 242, 244, 261], "station": [242, 255], "backscatt": 242, "downl": 242, "vicin": 242, "1ghz": 242, "1m": 242, "2m": 242, "5m2": 242, "5gtdl": [242, 243, 244], "base_station_oper": 242, "operat": 242, "2e6": 242, "terminal_oper": 242, "downlink": 242, "tdd": 243, "ddddffuddddffu": 243, "30khz": 243, "ldpc": [243, 244, 263], "sm": 243, "3ghz": 243, "3e9": 243, "isotrop": [243, 244], "10cm": [243, 244], "apart": [243, 244], "interconnect": [243, 244, 247, 258], "100e": 243, "symbolcod": [243, 244], "998": 243, "ddddd": 243, "ffu": 243, "dddd": 243, "quit": 243, "memori": 243, "comparison": [245, 263], "168": 246, "189": 246, "132": 246, "plug": [247, 256], "rough": 247, "introduct": [247, 255], "quickli": 247, "accustom": [247, 248, 258, 260], "aim": [247, 248], "heterogen": [247, 248], "entiti": [247, 250], "flow": [247, 250], "submit": 247, "assigend": 247, "platform": 247, "advantag": 247, "simpli": [247, 249, 255, 258], "seamlessli": 247, "unifi": 247, "modif": [247, 250], "ship": 247, "corret": 247, "subsect": [247, 250], "intial": 247, "multitud": 247, "want": [247, 250], "sole": [247, 250], "choos": [247, 250], "rountin": 247, "recoveri": 247, "conduct": [247, 255], "github": [247, 248, 249, 250, 251], "obvisouli": 247, "lack": 247, "capabl": [247, 256], "air": 247, "world": [247, 261], "behav": 247, "reason": [247, 249, 250, 261], "cours": [247, 255, 262], "lot": 247, "oversight": 247, "h5": [247, 257, 261], "join": [247, 261], "welcom": 248, "offici": [248, 249, 250, 251, 264], "semi": 248, "driven": 248, "mechan": 248, "rat": 248, "engin": [248, 249, 251, 263], "student": 248, "formul": 248, "compact": 248, "experiment": 248, "thrid": 248, "parti": [248, 250], "effort": [248, 250], "publish": [248, 250, 263], "gnu": [248, 250], "agpl": [248, 250], "licens": 248, "cite": 248, "adler": [248, 263], "highli": 248, "pull": [248, 249], "issu": [248, 249], "contact": [248, 250], "jan": [248, 263], "tobia": [248, 263], "kronauer": [248, 263], "andr\u00e9": [248, 263], "noll": [248, 263], "barreto": [248, 263], "6g": [248, 263], "120256": [248, 263], "120273": [248, 263], "3222063": [248, 263], "built": [249, 258], "wheel": 249, "clone": 249, "scratch": 249, "who": [249, 250], "maco": 249, "newest": 249, "env": [249, 251, 253], "plan": 249, "util": 249, "omit": 249, "develop": [249, 250, 251, 260, 262], "mathod": 249, "lf": 249, "git": 249, "repo": 249, "cd": 249, "submodul": [249, 263], "cmake": 249, "studio": 249, "alter": [249, 255, 260], "edit": 249, "extern": 249, "preliminari": 249, "oct2pi": 249, "abl": [249, 257], "setx": 249, "cli": 249, "zip": 249, "archiv": [249, 250], "quadriga_src": 249, "userspac": 249, "streamlin": 249, "inexperienc": 249, "everyon": [249, 250], "affero": 250, "agplv3": 250, "below": 250, "tl": 250, "dr": 250, "legal": 250, "claus": 250, "permiss": 250, "barkausen": 250, "institut": 250, "bi": 250, "copyright": 250, "holder": 250, "approv": 250, "meet": 250, "foundat": 250, "explicitli": 250, "mere": 250, "oblig": 250, "wish": 250, "opensourc": 250, "2007": [250, 263], "inc": 250, "fsf": 250, "verbatim": 250, "copyleft": 250, "kind": [250, 257], "cooper": 250, "awai": [250, 254, 255], "freedom": 250, "contrast": 250, "our": [250, 253, 254, 255, 256, 258, 259, 260, 261, 262], "guarante": 250, "speak": 250, "price": 250, "charg": 250, "piec": 250, "know": 250, "thing": 250, "protect": 250, "secondari": 250, "benefit": 250, "defend": 250, "widespread": 250, "incorpor": 250, "hearten": 250, "come": 250, "ever": 250, "publicli": 250, "older": 250, "accomplish": 250, "goal": 250, "gpl": 250, "relicens": 250, "precis": [250, 252], "semiconductor": 250, "license": 250, "recipi": 250, "organ": 250, "exact": 250, "earlier": 250, "unmodifi": 250, "anyth": 250, "secondarili": 250, "liabl": 250, "infring": 250, "countri": 250, "convei": 250, "transfer": 250, "notic": 250, "tell": 250, "warranti": 250, "menu": 250, "item": 250, "criterion": 250, "bodi": 250, "particular": 250, "languag": 250, "major": [250, 259], "serv": [250, 251], "compil": 250, "subprogram": 250, "intim": 250, "regener": 250, "grant": 250, "irrevoc": 250, "met": 250, "affirm": 250, "unlimit": 250, "constitut": 250, "acknowledg": 250, "fair": 250, "facil": 250, "compli": 250, "materi": 250, "behalf": 250, "prohibit": 250, "circumst": 250, "sublicens": 250, "unnecessari": 250, "circumvent": 250, "deem": 250, "technolog": 250, "fulfil": 250, "articl": [250, 263], "wipo": 250, "treati": 250, "adopt": 250, "decemb": 250, "1996": 250, "restrict": 250, "waiv": 250, "forbid": 250, "exercis": [250, 260], "disclaim": 250, "intent": 250, "against": 250, "conspicu": 250, "keep": 250, "intact": 250, "absenc": 250, "fee": 250, "date": 250, "entir": 250, "anyon": [250, 251], "possess": 250, "regardless": 250, "storag": 250, "aggreg": 250, "beyond": 250, "inclus": 250, "caus": [250, 255], "embodi": 250, "product": [250, 255], "accompani": 250, "durabl": 250, "customarili": 250, "interchang": 250, "spare": 250, "occasion": 250, "noncommerci": 250, "6b": 250, "grati": 250, "sai": 250, "find": 250, "satisfi": 250, "peer": [250, 253, 263], "6d": 250, "portion": [250, 252], "exclud": 250, "consum": 250, "tangibl": 250, "person": 250, "famili": 250, "household": 250, "sold": 250, "dwell": 250, "doubt": 250, "favor": [250, 261], "substanti": 250, "commerci": 250, "industri": [250, 263], "unless": 250, "signific": 250, "procedur": 250, "author": 250, "suffic": 250, "interf": 250, "becaus": 250, "perpetu": 250, "But": [250, 259], "retain": 250, "abil": 250, "rom": 250, "servic": 250, "deni": 250, "itself": 250, "advers": 250, "affect": 250, "rule": 250, "password": 250, "unpack": 250, "supplement": 250, "govern": 250, "regard": 250, "notwithstand": 250, "provis": 250, "liabil": 250, "misrepresent": 250, "mark": 250, "licensor": 250, "declin": 250, "trademark": 250, "trade": 250, "indemnif": 250, "contractu": 250, "impos": 250, "surviv": 250, "expressli": 250, "void": 250, "patent": 250, "paragraph": 250, "ceas": 250, "reinstat": 250, "provision": 250, "until": 250, "perman": 250, "dai": 250, "cessat": 250, "moreov": 250, "cure": 250, "receipt": 250, "qualifi": 250, "Not": 250, "ancillari": 250, "consequ": [250, 258], "likewis": 250, "downstream": 250, "subject": 250, "asset": 250, "subdivid": 250, "merg": 250, "whatev": 250, "predecessor": 250, "had": 250, "royalti": 250, "litig": 250, "claim": 250, "counterclaim": 250, "lawsuit": 250, "alleg": 250, "sell": 250, "sale": 250, "hereaft": 250, "manner": 250, "worldwid": 250, "agreement": 250, "commit": 250, "denomin": 250, "coven": 250, "sue": 250, "knowingli": 250, "readili": 250, "arrang": 250, "depriv": 250, "yourself": [250, 264], "believ": 250, "pursuant": 250, "procur": 250, "convey": 250, "discriminatori": 250, "scope": 250, "busi": 250, "payment": 250, "march": 250, "constru": 250, "defens": 250, "surrend": 250, "court": 250, "contradict": 250, "excus": 250, "pertin": 250, "agre": 250, "whom": 250, "refrain": 250, "opportun": 250, "customari": 250, "facilit": 250, "revis": 250, "Such": [250, 258], "spirit": 250, "concern": 250, "later": [250, 257], "proxi": 250, "decid": [250, 259], "futur": 250, "THERE": 250, "NO": [250, 261], "FOR": 250, "THE": 250, "TO": 250, "BY": 250, "IN": 250, "OR": 250, "AS": 250, "OF": 250, "BUT": 250, "NOT": 250, "merchant": 250, "risk": 250, "qualiti": 250, "WITH": 250, "prove": 250, "defect": 250, "repair": 250, "event": 250, "WILL": 250, "BE": 250, "damag": 250, "incident": 250, "consequenti": 250, "aris": 250, "inabl": 250, "BEING": 250, "inaccur": 250, "sustain": 250, "failur": 250, "IF": 250, "SUCH": 250, "advis": 250, "review": [250, 263], "close": [250, 257], "waiver": 250, "civil": 250, "best": 250, "redistribut": 250, "safest": 250, "pointer": 250, "brief": 250, "idea": 250, "hope": 250, "electron": [250, 263], "paper": [250, 263], "mail": 250, "solut": 250, "better": 250, "employ": 250, "programm": [250, 258], "school": 250, "especi": [251, 252], "disciplin": 251, "mathwork": 251, "popular": 251, "languang": 251, "almost": [251, 255, 261], "esenti": [251, 256, 257], "workflow": [251, 256, 258], "pyenv": 251, "executionmod": 251, "outofprocess": 251, "ex": 251, "someth": 251, "usernam": 251, "simulation_modul": 251, "importlib": 251, "import_modul": 251, "thank": 251, "roberto": 251, "bomfin": 251, "courtesi": 251, "jupyt": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "notebook": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "onlin": [252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264], "diretli": 252, "lokal": 252, "query_devic": 252, "underyl": 252, "sounddevic": 252, "hilbert": 252, "envelop": 252, "higher": [252, 255], "speaker": 252, "clearli": [252, 257], "inspect": [252, 259, 261, 262], "equl": 252, "assess": 252, "cap69": [253, 254, 263], "num_receive_focus_angl": [253, 254], "logic": [253, 254], "def": [253, 254, 256, 258, 259, 260, 262], "__init__": [253, 254, 256, 258], "sample_covari": [253, 254], "linalg": [253, 254], "inv": [253, 254], "conj": [253, 254], "dtype": [253, 254, 256, 258, 262], "array_respons": [253, 254], "beamformed_sampl": [253, 254], "newaxi": [253, 254, 262], "And": [253, 254], "plotreceivepattern": 253, "coventionalbeamform": [253, 254], "scipi": [253, 254, 255], "speed_of_light": [253, 254, 255], "10ghz": [253, 254, 259], "25": [253, 254, 255, 261, 263], "2023": 253, "153": 253, "import_thread": 253, "80": 253, "importthread": 253, "lt": 253, "_multithreadedrendezv": 253, "rpc": 253, "statuscod": 253, "debug_error_str": 253, "ipv4": 253, "65423": 253, "grpc_messag": 253, "grpc_statu": 253, "created_tim": 253, "12t10": 253, "152759853": 253, "gt": 253, "thread": 253, "ray_listen_error_messag": 253, "traceback": 253, "stealth": 253, "appdata": 253, "python310": 253, "lib": 253, "1016": [253, 263], "_bootstrap_inn": 253, "155": 253, "914": 253, "print_log": 253, "153007658": 253, "953": 253, "_target": 253, "_arg": 253, "_kwarg": 253, "310": 253, "site": 253, "_privat": 253, "2004": [253, 263], "listen_error_messag": 253, "error_data": 253, "gcs_error_subscrib": 253, "poll": 253, "gcs_pubsub": 253, "300": [253, 263], "_poll_lock": 253, "timeout": 253, "217": 253, "fut": 253, "grpc": 253, "_channel": 253, "744": 253, "152992559": 253, "8x8": 254, "72e9": 254, "half_wavelength": 254, "5e8": 254, "echo": 254, "showcas": 255, "classic": 255, "hybrid": 255, "furthermor": 255, "atennna": 255, "realis": 255, "itertool": 255, "70e9": 255, "uniform_arrai": 255, "spiral": 255, "spiral_port": 255, "spiral_arrai": 255, "radiat": [255, 256], "beamformingtransmitt": 255, "base_station_devic": 255, "charcterist": 255, "outer": 255, "2j": [255, 256], "base_station_transmitt": 255, "75pi": 255, "3pi": 255, "equip": [255, 264], "quadrant": 255, "user_equipment_devic": 255, "120": 255, "user_equipment_receiv": 255, "lobe": 255, "characerist": 255, "microcel": 255, "hour": 255, "off_target_focu": 255, "on_target_focu": 255, "confirm": 255, "receivedpowerevalu": 255, "switch": 255, "snr_dimens": 255, "focus_dimens": 255, "remind": 255, "hybrid_port": 255, "toplogi": 255, "hybrid_arrai": 255, "pro": 255, "con": 255, "ll": [255, 258, 261], "candid": [255, 261], "array_comparison": 255, "rxpwr": 255, "46": 255, "essenc": 256, "radat": 256, "straightfoward": 256, "fundament": 256, "__future__": [256, 258], "phaseshiftchannelr": 256, "phase_shift": 256, "__phase_shift": 256, "shifted_sampl": 256, "1j": 256, "impulse_respons": 256, "attr": 256, "_parameters_from_hdf": 256, "cl": 256, "phaseshiftchannel": 256, "_rng": 256, "fourth": 256, "ofdmidealchannelestim": 256, "highlight": [256, 260, 262], "roughli": [256, 261], "workspac": 257, "800": 257, "800e6": 257, "Or": 257, "transmitter_idx": 257, "receiver_idx": 257, "recorded_drop": 257, "recalled_scenario": 257, "num_recalled_drop": 257, "deduc": 257, "arguabl": [258, 259], "grasp": 258, "insight": 258, "powerartifact": 258, "__str__": 258, "2f": 258, "powerevalu": 258, "subplot": 258, "suptitl": 258, "stem": 258, "len": 258, "set_xlabel": 258, "set_ylabel": 258, "summed_pow": 258, "keepdim": [258, 259], "powerevaluationresult": 258, "powerestim": 258, "mean_pow": 258, "section_coord": 258, "ndindex": 258, "_plot": 258, "_plot_multidim": 258, "__receiv": 258, "think": 258, "why": 258, "answer": 258, "sent": 258, "embarassingli": 258, "blazingli": 258, "multicor": 258, "power_estim": 258, "funtion": 258, "3k": 259, "vote": 259, "repetitioncod": 259, "reshap": [259, 262], "astyp": [259, 262], "randint": 259, "error_cod": 259, "flip": [259, 260], "corrected_data": 259, "3333333333333333": 259, "39": 259, "capaign": 259, "At": 260, "coher": 260, "jump": 260, "prose": 260, "symbolflipp": 260, "counterpart": 260, "072": 261, "072e9": 261, "simulated_devic": 261, "human": 261, "notabl": 261, "predict": 261, "simulatedphysicalscenario": 261, "offlin": 261, "complementari": 262, "invert": 262, "communc": 262, "sake": 262, "simplic": 262, "amplitudeshiftkei": 262, "symbols_candid": 262, "symbol_indic": 262, "packbit": 262, "bitord": 262, "littl": 262, "flatten": 262, "symbol_index_estim": 262, "ab": 262, "uint8": 262, "unpackbit": 262, "baseband_sampl": 262, "explain": 262, "samples_in_fram": 262, "circl": 262, "symbol_pow": 262, "chosen": 262, "default_rng": 262, "instantiant": 262, "mapped_symbol": 262, "baseband_transmiss": 262, "baseband_recept": 262, "received_symbol": 262, "etsi18": 263, "akb22": 263, "ala98": 263, "ari09": 263, "erdal": 263, "arikan": 263, "capac": 263, "55": 263, "3051": 263, "3073": 263, "2009": 263, "tit": 263, "2021379": 263, "agm": 263, "bcjr74": 263, "bahl": 263, "cock": 263, "jelinek": 263, "raviv": 263, "corresp": 263, "284": 263, "287": 263, "1974": 263, "1055186": 263, "bar50": 263, "bhvst14": 263, "bgt93": 263, "berrou": 263, "glavieux": 263, "thitimajshima": 263, "Near": 263, "turbo": 263, "icc": 263, "93": 263, "1064": 263, "1070": 263, "1993": 263, "397441": 263, "brc60": 263, "bose": 263, "dwijendra": 263, "chaudhuri": 263, "68": 263, "79": 263, "1960": 263, "bjepc14": 263, "chleonardon": 263, "cassagn": 263, "hartmann": 263, "l\u00e9onardon": 263, "he": 263, "leroux": 263, "tajan": 263, "aumag": 263, "barthou": 263, "tonnelli": 263, "pignoli": 263, "le": 263, "gal": 263, "j\u00e9go": 263, "aff3ct": 263, "toolbox": 263, "elsevi": 263, "softwarex": 263, "100345": 263, "octob": 263, "2019": 263, "sciencedirect": 263, "scienc": 263, "pii": 263, "s2352711019300457": 263, "softx": 263, "cb06": 263, "chorti": 263, "brook": 263, "circuit": 263, "regular": 263, "53": 263, "1989": 263, "tcsi": 263, "881182": 263, "cb07": 263, "arsenia": 263, "mike": 263, "infin": 263, "acoust": 263, "speech": 263, "icassp": 263, "iii": 263, "1005": 263, "1008": 263, "366852": 263, "gal63": 263, "robert": 263, "gallag": 263, "pariti": 263, "1963": 263, "gs01": 263, "iee99": 263, "jbtj12": 263, "jrbt14": 263, "kah54": 263, "reza": 263, "khanzadi": 263, "dan": 263, "kuylenstierna": 263, "ashkan": 263, "panahi": 263, "eriksson": 263, "herbert": 263, "zirath": 263, "61": 263, "1553": 263, "1565": 263, "2013": 263, "2285698": 263, "kwa": 263, "knapp": 263, "carter": 263, "320": 263, "327": 263, "1976": 263, "tassp": 263, "1162830": 263, "mei02": 263, "mah": 263, "ndm": 263, "ncmf18": 263, "nimr": 263, "chafii": 263, "matth": 263, "fettwei": 263, "gfdm": 263, "otf": 263, "globecom": 263, "glocom": 263, "8647704": 263, "rap91": 263, "rs60": 263, "reed": 263, "solomon": 263, "polynomi": 263, "finit": 263, "societi": 263, "mathemat": 263, "304": 263, "0108018": 263, "arxiv": 263, "roh83": 263, "hermann": 263, "rohl": 263, "cfar": 263, "situat": 263, "aerospac": 263, "ae": 263, "608": 263, "621": 263, "1983": 263, "tae": 263, "309350": 263, "sal81": 263, "sc97": 263, "slg04": 263, "sharon": 263, "litsyn": 263, "goldberg": 263, "23rd": 263, "electr": 263, "israel": 263, "223": 263, "226": 263, "eeei": 263, "1361130": 263, "tv15": 263, "ido": 263, "tal": 263, "alexand": 263, "vardi": 263, "2213": 263, "2226": 263, "2015": 263, "2410251": 263, "vit67": 263, "viterbi": 263, "optimum": 263, "260": 263, "269": 263, "april": 263, "1967": 263, "1054010": 263, "xzb06": 263, "ybo": 263, "3gpptran04": 263, "gpp": 263, "943": 263, "v6": 263, "eploy": 263, "expand": 264, "googl": 264, "colab": 264}, "objects": {"hermespy.beamforming": [[2, 0, 0, "-", "beamformer"], [3, 0, 0, "-", "capon"], [4, 0, 0, "-", "conventional"]], "hermespy.beamforming.beamformer": [[2, 1, 1, "", "BeamFocus"], [2, 1, 1, "", "BeamformerBase"], [2, 1, 1, "", "CoordinateFocus"], [2, 1, 1, "", "DeviceFocus"], [2, 1, 1, "", "FT"], [2, 1, 1, "", "OT"], [2, 1, 1, "", "ReceiveBeamformer"], [2, 1, 1, "", "SphericalFocus"], [2, 1, 1, "", "TransmitBeamformer"]], "hermespy.beamforming.beamformer.BeamFocus": [[2, 2, 1, "", "beamformer"], [2, 3, 1, "", "copy"], [2, 2, 1, "", "spherical_angles"]], "hermespy.beamforming.beamformer.BeamformerBase": [[2, 2, 1, "", "operator"]], "hermespy.beamforming.beamformer.CoordinateFocus": [[2, 2, 1, "", "coordinates"], [2, 3, 1, "", "copy"], [2, 2, 1, "", "reference"], [2, 2, 1, "", "spherical_angles"]], "hermespy.beamforming.beamformer.DeviceFocus": [[2, 3, 1, "", "copy"], [2, 2, 1, "", "device"], [2, 2, 1, "", "spherical_angles"]], "hermespy.beamforming.beamformer.ReceiveBeamformer": [[2, 3, 1, "", "_decode"], [2, 3, 1, "", "decode_streams"], [2, 2, 1, "", "num_receive_focus_points"], [2, 2, 1, "", "num_receive_input_streams"], [2, 2, 1, "", "num_receive_output_streams"], [2, 2, 1, "", "precoding"], [2, 3, 1, "", "probe"], [2, 2, 1, "", "probe_focus_points"], [2, 3, 1, "", "receive"], [2, 2, 1, "", "receive_focus"]], "hermespy.beamforming.beamformer.SphericalFocus": [[2, 2, 1, "", "angles"], [2, 3, 1, "", "copy"], [2, 2, 1, "", "spherical_angles"]], "hermespy.beamforming.beamformer.TransmitBeamformer": [[2, 3, 1, "", "encode_streams"], [2, 2, 1, "", "num_transmit_focus_points"], [2, 2, 1, "", "num_transmit_input_streams"], [2, 2, 1, "", "num_transmit_output_streams"], [2, 2, 1, "", "precoding"], [2, 3, 1, "", "transmit"], [2, 2, 1, "", "transmit_focus"]], "hermespy.beamforming.capon": [[3, 1, 1, "", "CaponBeamformer"]], "hermespy.beamforming.capon.CaponBeamformer": [[3, 3, 1, "", "_decode"], [3, 2, 1, "", "loading"], [3, 2, 1, "", "num_receive_focus_points"], [3, 2, 1, "", "num_receive_input_streams"], [3, 2, 1, "", "num_receive_output_streams"]], "hermespy.beamforming.conventional": [[4, 1, 1, "", "ConventionalBeamformer"]], "hermespy.beamforming.conventional.ConventionalBeamformer": [[4, 3, 1, "", "_decode"], [4, 3, 1, "", "_encode"], [4, 2, 1, "", "num_receive_focus_points"], [4, 2, 1, "", "num_receive_input_streams"], [4, 2, 1, "", "num_receive_output_streams"], [4, 2, 1, "", "num_transmit_focus_points"], [4, 2, 1, "", "num_transmit_input_streams"], [4, 2, 1, "", "num_transmit_output_streams"], [4, 4, 1, "", "yaml_tag"]], "hermespy.bin": [[6, 0, 0, "-", "hermes"]], "hermespy.bin.hermes": [[6, 5, 1, "", "hermes_simulation"]], "hermespy.channel.channel": [[10, 1, 1, "", "CRT"], [8, 1, 1, "", "Channel"], [9, 1, 1, "", "ChannelPropagation"], [10, 1, 1, "", "ChannelRealization"], [11, 1, 1, "", "DirectiveChannelRealization"], [12, 1, 1, "", "InterpolationMode"]], "hermespy.channel.channel.Channel": [[8, 3, 1, "", "_realize"], [8, 2, 1, "", "alpha_device"], [8, 2, 1, "", "beta_device"], [8, 2, 1, "", "gain"], [8, 2, 1, "", "interpolation_mode"], [8, 3, 1, "", "propagate"], [8, 2, 1, "", "realization"], [8, 3, 1, "", "realize"], [8, 3, 1, "", "recall_realization"], [8, 2, 1, "", "scenario"]], "hermespy.channel.channel.ChannelPropagation": [[9, 2, 1, "", "interpolation_mode"], [9, 2, 1, "", "realization"], [9, 2, 1, "", "receiver"], [9, 2, 1, "", "signal"], [9, 3, 1, "", "state"], [9, 2, 1, "", "transmitter"]], "hermespy.channel.channel.ChannelRealization": [[10, 3, 1, "", "From_HDF"], [10, 3, 1, "", "_propagate"], [10, 2, 1, "", "alpha_device"], [10, 2, 1, "", "beta_device"], [10, 2, 1, "", "gain"], [10, 2, 1, "", "interpolation_mode"], [10, 3, 1, "", "propagate"], [10, 3, 1, "", "state"], [10, 3, 1, "", "to_HDF"]], "hermespy.channel.channel.DirectiveChannelRealization": [[11, 3, 1, "", "propagate"], [11, 2, 1, "", "realization"], [11, 2, 1, "", "receiver"], [11, 3, 1, "", "state"], [11, 2, 1, "", "transmitter"]], "hermespy.channel.channel.InterpolationMode": [[12, 4, 1, "", "NEAREST"], [12, 4, 1, "", "SINC"]], "hermespy.channel.cluster_delay_line_indoor_factory": [[13, 1, 1, "", "IndoorFactoryBase"], [14, 1, 1, "", "IndoorFactoryLineOfSight"], [15, 1, 1, "", "IndoorFactoryNoLineOfSight"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase": [[13, 2, 1, "", "surface"], [13, 2, 1, "", "volume"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight": [[14, 2, 1, "", "aoa_spread_mean"], [14, 2, 1, "", "aoa_spread_std"], [14, 2, 1, "", "aod_spread_mean"], [14, 2, 1, "", "aod_spread_std"], [14, 2, 1, "", "cluster_aoa_spread"], [14, 2, 1, "", "cluster_aod_spread"], [14, 2, 1, "", "cluster_delay_spread"], [14, 2, 1, "", "cluster_shadowing_std"], [14, 2, 1, "", "cluster_zoa_spread"], [14, 2, 1, "", "cross_polarization_power_mean"], [14, 2, 1, "", "cross_polarization_power_std"], [14, 2, 1, "", "delay_scaling"], [14, 2, 1, "", "delay_spread_mean"], [14, 2, 1, "", "delay_spread_std"], [14, 2, 1, "", "line_of_sight"], [14, 2, 1, "", "num_clusters"], [14, 2, 1, "", "num_rays"], [14, 2, 1, "", "rice_factor_mean"], [14, 2, 1, "", "rice_factor_std"], [14, 2, 1, "", "zoa_spread_mean"], [14, 2, 1, "", "zoa_spread_std"], [14, 2, 1, "", "zod_offset"], [14, 2, 1, "", "zod_spread_mean"], [14, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight": [[15, 2, 1, "", "aoa_spread_mean"], [15, 2, 1, "", "aoa_spread_std"], [15, 2, 1, "", "aod_spread_mean"], [15, 2, 1, "", "aod_spread_std"], [15, 2, 1, "", "cluster_aoa_spread"], [15, 2, 1, "", "cluster_aod_spread"], [15, 2, 1, "", "cluster_delay_spread"], [15, 2, 1, "", "cluster_shadowing_std"], [15, 2, 1, "", "cluster_zoa_spread"], [15, 2, 1, "", "cross_polarization_power_mean"], [15, 2, 1, "", "cross_polarization_power_std"], [15, 2, 1, "", "delay_scaling"], [15, 2, 1, "", "delay_spread_mean"], [15, 2, 1, "", "delay_spread_std"], [15, 2, 1, "", "line_of_sight"], [15, 2, 1, "", "num_clusters"], [15, 2, 1, "", "num_rays"], [15, 2, 1, "", "rice_factor_mean"], [15, 2, 1, "", "rice_factor_std"], [15, 2, 1, "", "zoa_spread_mean"], [15, 2, 1, "", "zoa_spread_std"], [15, 2, 1, "", "zod_offset"], [15, 2, 1, "", "zod_spread_mean"], [15, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office": [[16, 1, 1, "", "IndoorOfficeLineOfSight"], [17, 1, 1, "", "IndoorOfficeNoLineOfSight"]], "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight": [[16, 2, 1, "", "aoa_spread_mean"], [16, 2, 1, "", "aoa_spread_std"], [16, 2, 1, "", "aod_spread_mean"], [16, 2, 1, "", "aod_spread_std"], [16, 2, 1, "", "cluster_aoa_spread"], [16, 2, 1, "", "cluster_aod_spread"], [16, 2, 1, "", "cluster_delay_spread"], [16, 2, 1, "", "cluster_shadowing_std"], [16, 2, 1, "", "cluster_zoa_spread"], [16, 2, 1, "", "cross_polarization_power_mean"], [16, 2, 1, "", "cross_polarization_power_std"], [16, 2, 1, "", "delay_scaling"], [16, 2, 1, "", "delay_spread_mean"], [16, 2, 1, "", "delay_spread_std"], [16, 2, 1, "", "line_of_sight"], [16, 2, 1, "", "num_clusters"], [16, 2, 1, "", "num_rays"], [16, 2, 1, "", "rice_factor_mean"], [16, 2, 1, "", "rice_factor_std"], [16, 4, 1, "", "yaml_tag"], [16, 2, 1, "", "zoa_spread_mean"], [16, 2, 1, "", "zoa_spread_std"], [16, 2, 1, "", "zod_offset"], [16, 2, 1, "", "zod_spread_mean"], [16, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight": [[17, 2, 1, "", "aoa_spread_mean"], [17, 2, 1, "", "aoa_spread_std"], [17, 2, 1, "", "aod_spread_mean"], [17, 2, 1, "", "aod_spread_std"], [17, 2, 1, "", "cluster_aoa_spread"], [17, 2, 1, "", "cluster_aod_spread"], [17, 2, 1, "", "cluster_delay_spread"], [17, 2, 1, "", "cluster_shadowing_std"], [17, 2, 1, "", "cluster_zoa_spread"], [17, 2, 1, "", "cross_polarization_power_mean"], [17, 2, 1, "", "cross_polarization_power_std"], [17, 2, 1, "", "delay_scaling"], [17, 2, 1, "", "delay_spread_mean"], [17, 2, 1, "", "delay_spread_std"], [17, 2, 1, "", "line_of_sight"], [17, 2, 1, "", "num_clusters"], [17, 2, 1, "", "num_rays"], [17, 2, 1, "", "rice_factor_mean"], [17, 2, 1, "", "rice_factor_std"], [17, 4, 1, "", "yaml_tag"], [17, 2, 1, "", "zoa_spread_mean"], [17, 2, 1, "", "zoa_spread_std"], [17, 2, 1, "", "zod_offset"], [17, 2, 1, "", "zod_spread_mean"], [17, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells": [[18, 1, 1, "", "RuralMacrocellsLineOfSight"], [19, 1, 1, "", "RuralMacrocellsNoLineOfSight"], [20, 1, 1, "", "RuralMacrocellsOutsideToInside"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight": [[18, 2, 1, "", "aoa_spread_mean"], [18, 2, 1, "", "aoa_spread_std"], [18, 2, 1, "", "aod_spread_mean"], [18, 2, 1, "", "aod_spread_std"], [18, 2, 1, "", "cluster_aoa_spread"], [18, 2, 1, "", "cluster_aod_spread"], [18, 2, 1, "", "cluster_delay_spread"], [18, 2, 1, "", "cluster_shadowing_std"], [18, 2, 1, "", "cluster_zoa_spread"], [18, 2, 1, "", "cross_polarization_power_mean"], [18, 2, 1, "", "cross_polarization_power_std"], [18, 2, 1, "", "delay_scaling"], [18, 2, 1, "", "delay_spread_mean"], [18, 2, 1, "", "delay_spread_std"], [18, 2, 1, "", "line_of_sight"], [18, 2, 1, "", "num_clusters"], [18, 2, 1, "", "num_rays"], [18, 2, 1, "", "rice_factor_mean"], [18, 2, 1, "", "rice_factor_std"], [18, 4, 1, "", "yaml_tag"], [18, 2, 1, "", "zoa_spread_mean"], [18, 2, 1, "", "zoa_spread_std"], [18, 2, 1, "", "zod_offset"], [18, 2, 1, "", "zod_spread_mean"], [18, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight": [[19, 2, 1, "", "aoa_spread_mean"], [19, 2, 1, "", "aoa_spread_std"], [19, 2, 1, "", "aod_spread_mean"], [19, 2, 1, "", "aod_spread_std"], [19, 2, 1, "", "cluster_aoa_spread"], [19, 2, 1, "", "cluster_aod_spread"], [19, 2, 1, "", "cluster_delay_spread"], [19, 2, 1, "", "cluster_shadowing_std"], [19, 2, 1, "", "cluster_zoa_spread"], [19, 2, 1, "", "cross_polarization_power_mean"], [19, 2, 1, "", "cross_polarization_power_std"], [19, 2, 1, "", "delay_scaling"], [19, 2, 1, "", "delay_spread_mean"], [19, 2, 1, "", "delay_spread_std"], [19, 2, 1, "", "line_of_sight"], [19, 2, 1, "", "num_clusters"], [19, 2, 1, "", "num_rays"], [19, 2, 1, "", "rice_factor_mean"], [19, 2, 1, "", "rice_factor_std"], [19, 4, 1, "", "yaml_tag"], [19, 2, 1, "", "zoa_spread_mean"], [19, 2, 1, "", "zoa_spread_std"], [19, 2, 1, "", "zod_offset"], [19, 2, 1, "", "zod_spread_mean"], [19, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside": [[20, 2, 1, "", "aoa_spread_mean"], [20, 2, 1, "", "aoa_spread_std"], [20, 2, 1, "", "aod_spread_mean"], [20, 2, 1, "", "aod_spread_std"], [20, 2, 1, "", "cluster_aoa_spread"], [20, 2, 1, "", "cluster_aod_spread"], [20, 2, 1, "", "cluster_delay_spread"], [20, 2, 1, "", "cluster_shadowing_std"], [20, 2, 1, "", "cluster_zoa_spread"], [20, 2, 1, "", "cross_polarization_power_mean"], [20, 2, 1, "", "cross_polarization_power_std"], [20, 2, 1, "", "delay_scaling"], [20, 2, 1, "", "delay_spread_mean"], [20, 2, 1, "", "delay_spread_std"], [20, 2, 1, "", "line_of_sight"], [20, 2, 1, "", "num_clusters"], [20, 2, 1, "", "num_rays"], [20, 2, 1, "", "rice_factor_mean"], [20, 2, 1, "", "rice_factor_std"], [20, 4, 1, "", "yaml_tag"], [20, 2, 1, "", "zoa_spread_mean"], [20, 2, 1, "", "zoa_spread_std"], [20, 2, 1, "", "zod_offset"], [20, 2, 1, "", "zod_spread_mean"], [20, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon": [[21, 1, 1, "", "StreetCanyonLineOfSight"], [22, 1, 1, "", "StreetCanyonNoLineOfSight"], [23, 1, 1, "", "StreetCanyonOutsideToInside"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight": [[21, 2, 1, "", "aoa_spread_mean"], [21, 2, 1, "", "aoa_spread_std"], [21, 2, 1, "", "aod_spread_mean"], [21, 2, 1, "", "aod_spread_std"], [21, 2, 1, "", "cluster_aoa_spread"], [21, 2, 1, "", "cluster_aod_spread"], [21, 2, 1, "", "cluster_delay_spread"], [21, 2, 1, "", "cluster_shadowing_std"], [21, 2, 1, "", "cluster_zoa_spread"], [21, 2, 1, "", "cross_polarization_power_mean"], [21, 2, 1, "", "cross_polarization_power_std"], [21, 2, 1, "", "delay_scaling"], [21, 2, 1, "", "delay_spread_mean"], [21, 2, 1, "", "delay_spread_std"], [21, 2, 1, "", "line_of_sight"], [21, 2, 1, "", "num_clusters"], [21, 2, 1, "", "num_rays"], [21, 2, 1, "", "rice_factor_mean"], [21, 2, 1, "", "rice_factor_std"], [21, 4, 1, "", "yaml_tag"], [21, 2, 1, "", "zoa_spread_mean"], [21, 2, 1, "", "zoa_spread_std"], [21, 2, 1, "", "zod_offset"], [21, 2, 1, "", "zod_spread_mean"], [21, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight": [[22, 2, 1, "", "aoa_spread_mean"], [22, 2, 1, "", "aoa_spread_std"], [22, 2, 1, "", "aod_spread_mean"], [22, 2, 1, "", "aod_spread_std"], [22, 2, 1, "", "cluster_aoa_spread"], [22, 2, 1, "", "cluster_aod_spread"], [22, 2, 1, "", "cluster_delay_spread"], [22, 2, 1, "", "cluster_shadowing_std"], [22, 2, 1, "", "cluster_zoa_spread"], [22, 2, 1, "", "cross_polarization_power_mean"], [22, 2, 1, "", "cross_polarization_power_std"], [22, 2, 1, "", "delay_scaling"], [22, 2, 1, "", "delay_spread_mean"], [22, 2, 1, "", "delay_spread_std"], [22, 2, 1, "", "line_of_sight"], [22, 2, 1, "", "num_clusters"], [22, 2, 1, "", "num_rays"], [22, 2, 1, "", "rice_factor_mean"], [22, 2, 1, "", "rice_factor_std"], [22, 4, 1, "", "yaml_tag"], [22, 2, 1, "", "zoa_spread_mean"], [22, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside": [[23, 2, 1, "", "aoa_spread_mean"], [23, 2, 1, "", "aoa_spread_std"], [23, 2, 1, "", "aod_spread_mean"], [23, 2, 1, "", "aod_spread_std"], [23, 2, 1, "", "cluster_aoa_spread"], [23, 2, 1, "", "cluster_aod_spread"], [23, 2, 1, "", "cluster_delay_spread"], [23, 2, 1, "", "cluster_shadowing_std"], [23, 2, 1, "", "cluster_zoa_spread"], [23, 2, 1, "", "cross_polarization_power_mean"], [23, 2, 1, "", "cross_polarization_power_std"], [23, 2, 1, "", "delay_scaling"], [23, 2, 1, "", "delay_spread_mean"], [23, 2, 1, "", "delay_spread_std"], [23, 2, 1, "", "line_of_sight"], [23, 2, 1, "", "num_clusters"], [23, 2, 1, "", "num_rays"], [23, 2, 1, "", "rice_factor_mean"], [23, 2, 1, "", "rice_factor_std"], [23, 4, 1, "", "yaml_tag"], [23, 2, 1, "", "zoa_spread_mean"], [23, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells": [[24, 1, 1, "", "UrbanMacrocellsLineOfSight"], [25, 1, 1, "", "UrbanMacrocellsNoLineOfSight"], [26, 1, 1, "", "UrbanMacrocellsOutsideToInside"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight": [[24, 2, 1, "", "aoa_spread_mean"], [24, 2, 1, "", "aoa_spread_std"], [24, 2, 1, "", "aod_spread_mean"], [24, 2, 1, "", "aod_spread_std"], [24, 2, 1, "", "cluster_aoa_spread"], [24, 2, 1, "", "cluster_aod_spread"], [24, 2, 1, "", "cluster_delay_spread"], [24, 2, 1, "", "cluster_shadowing_std"], [24, 2, 1, "", "cluster_zoa_spread"], [24, 2, 1, "", "cross_polarization_power_mean"], [24, 2, 1, "", "cross_polarization_power_std"], [24, 2, 1, "", "delay_scaling"], [24, 2, 1, "", "delay_spread_mean"], [24, 2, 1, "", "delay_spread_std"], [24, 2, 1, "", "line_of_sight"], [24, 2, 1, "", "num_clusters"], [24, 2, 1, "", "num_rays"], [24, 2, 1, "", "rice_factor_mean"], [24, 2, 1, "", "rice_factor_std"], [24, 4, 1, "", "yaml_tag"], [24, 2, 1, "", "zoa_spread_mean"], [24, 2, 1, "", "zoa_spread_std"], [24, 2, 1, "", "zod_offset"], [24, 2, 1, "", "zod_spread_mean"], [24, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight": [[25, 2, 1, "", "aoa_spread_mean"], [25, 2, 1, "", "aoa_spread_std"], [25, 2, 1, "", "aod_spread_mean"], [25, 2, 1, "", "aod_spread_std"], [25, 2, 1, "", "cluster_aoa_spread"], [25, 2, 1, "", "cluster_aod_spread"], [25, 2, 1, "", "cluster_delay_spread"], [25, 2, 1, "", "cluster_shadowing_std"], [25, 2, 1, "", "cluster_zoa_spread"], [25, 2, 1, "", "cross_polarization_power_mean"], [25, 2, 1, "", "cross_polarization_power_std"], [25, 2, 1, "", "delay_scaling"], [25, 2, 1, "", "delay_spread_mean"], [25, 2, 1, "", "delay_spread_std"], [25, 2, 1, "", "line_of_sight"], [25, 2, 1, "", "num_clusters"], [25, 2, 1, "", "num_rays"], [25, 2, 1, "", "rice_factor_mean"], [25, 2, 1, "", "rice_factor_std"], [25, 4, 1, "", "yaml_tag"], [25, 2, 1, "", "zoa_spread_mean"], [25, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside": [[26, 2, 1, "", "aoa_spread_mean"], [26, 2, 1, "", "aoa_spread_std"], [26, 2, 1, "", "aod_spread_mean"], [26, 2, 1, "", "aod_spread_std"], [26, 2, 1, "", "cluster_aoa_spread"], [26, 2, 1, "", "cluster_aod_spread"], [26, 2, 1, "", "cluster_delay_spread"], [26, 2, 1, "", "cluster_shadowing_std"], [26, 2, 1, "", "cluster_zoa_spread"], [26, 2, 1, "", "cross_polarization_power_mean"], [26, 2, 1, "", "cross_polarization_power_std"], [26, 2, 1, "", "delay_scaling"], [26, 2, 1, "", "delay_spread_mean"], [26, 2, 1, "", "delay_spread_std"], [26, 2, 1, "", "line_of_sight"], [26, 2, 1, "", "num_clusters"], [26, 2, 1, "", "num_rays"], [26, 2, 1, "", "rice_factor_mean"], [26, 2, 1, "", "rice_factor_std"], [26, 4, 1, "", "yaml_tag"], [26, 2, 1, "", "zoa_spread_mean"], [26, 2, 1, "", "zoa_spread_std"]], "hermespy.channel.cluster_delay_lines": [[28, 1, 1, "", "ClusterDelayLine"], [29, 1, 1, "", "ClusterDelayLineBase"], [30, 1, 1, "", "ClusterDelayLineRealization"], [31, 1, 1, "", "DelayNormalization"]], "hermespy.channel.cluster_delay_lines.ClusterDelayLine": [[28, 2, 1, "", "aoa_spread_mean"], [28, 2, 1, "", "aoa_spread_std"], [28, 2, 1, "", "aod_spread_mean"], [28, 2, 1, "", "aod_spread_std"], [28, 2, 1, "", "cluster_aoa_spread"], [28, 2, 1, "", "cluster_aod_spread"], [28, 2, 1, "", "cluster_delay_spread"], [28, 2, 1, "", "cluster_shadowing_std"], [28, 2, 1, "", "cluster_zoa_spread"], [28, 2, 1, "", "cross_polarization_power_mean"], [28, 2, 1, "", "cross_polarization_power_std"], [28, 2, 1, "", "delay_scaling"], [28, 2, 1, "", "delay_spread_mean"], [28, 2, 1, "", "delay_spread_std"], [28, 2, 1, "", "line_of_sight"], [28, 2, 1, "", "num_clusters"], [28, 2, 1, "", "num_rays"], [28, 2, 1, "", "rice_factor_mean"], [28, 2, 1, "", "rice_factor_std"], [28, 2, 1, "", "zoa_spread_mean"], [28, 2, 1, "", "zoa_spread_std"], [28, 2, 1, "", "zod_offset"], [28, 2, 1, "", "zod_spread_mean"], [28, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase": [[29, 2, 1, "", "aoa_spread_mean"], [29, 2, 1, "", "aoa_spread_std"], [29, 2, 1, "", "aod_spread_mean"], [29, 2, 1, "", "aod_spread_std"], [29, 2, 1, "", "cluster_aoa_spread"], [29, 2, 1, "", "cluster_aod_spread"], [29, 2, 1, "", "cluster_delay_spread"], [29, 2, 1, "", "cluster_shadowing_std"], [29, 2, 1, "", "cluster_zoa_spread"], [29, 2, 1, "", "cross_polarization_power_mean"], [29, 2, 1, "", "cross_polarization_power_std"], [29, 4, 1, "", "delay_normalization"], [29, 2, 1, "", "delay_scaling"], [29, 2, 1, "", "delay_spread_mean"], [29, 2, 1, "", "delay_spread_std"], [29, 2, 1, "", "line_of_sight"], [29, 2, 1, "", "num_clusters"], [29, 2, 1, "", "num_rays"], [29, 3, 1, "", "recall_realization"], [29, 2, 1, "", "rice_factor_mean"], [29, 2, 1, "", "rice_factor_std"], [29, 4, 1, "", "subcluster_indices"], [29, 2, 1, "", "zoa_spread_mean"], [29, 2, 1, "", "zoa_spread_std"], [29, 2, 1, "", "zod_offset"], [29, 2, 1, "", "zod_spread_mean"], [29, 2, 1, "", "zod_spread_std"]], "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization": [[30, 3, 1, "", "From_HDF"], [30, 2, 1, "", "azimuth_arrival_spread"], [30, 2, 1, "", "azimuth_departure_spread"], [30, 2, 1, "", "azimuth_of_arrival"], [30, 2, 1, "", "azimuth_of_departure"], [30, 2, 1, "", "cluster_delay_spread"], [30, 2, 1, "", "cluster_delays"], [30, 2, 1, "", "cluster_powers"], [30, 2, 1, "", "line_of_sight"], [30, 2, 1, "", "max_delay"], [30, 2, 1, "", "num_clusters"], [30, 2, 1, "", "num_rays"], [30, 3, 1, "", "plot_angles"], [30, 3, 1, "", "plot_power_delay"], [30, 3, 1, "", "plot_rays"], [30, 2, 1, "", "polarization_transformations"], [30, 2, 1, "", "rice_factor"], [30, 3, 1, "", "state"], [30, 3, 1, "", "to_HDF"], [30, 2, 1, "", "zenith_arrival_spread"], [30, 2, 1, "", "zenith_departure_spread"], [30, 2, 1, "", "zenith_of_arrival"], [30, 2, 1, "", "zenith_of_departure"]], "hermespy.channel.cluster_delay_lines.DelayNormalization": [[31, 4, 1, "", "NONE"], [31, 4, 1, "", "TOF"], [31, 4, 1, "", "ZERO"]], "hermespy.channel.delay": [[34, 1, 1, "", "DCRT"], [33, 1, 1, "", "DelayChannelBase"], [34, 1, 1, "", "DelayChannelRealization"], [35, 1, 1, "", "RandomDelayChannel"], [36, 1, 1, "", "RandomDelayChannelRealization"], [37, 1, 1, "", "SpatialDelayChannel"], [38, 1, 1, "", "SpatialDelayChannelRealization"]], "hermespy.channel.delay.DelayChannelBase": [[33, 2, 1, "", "model_propagation_loss"]], "hermespy.channel.delay.DelayChannelRealization": [[34, 2, 1, "", "delay"], [34, 2, 1, "", "model_propagation_loss"], [34, 3, 1, "", "state"], [34, 3, 1, "", "to_HDF"]], "hermespy.channel.delay.RandomDelayChannel": [[35, 2, 1, "", "delay"], [35, 3, 1, "", "recall_realization"]], "hermespy.channel.delay.RandomDelayChannelRealization": [[36, 3, 1, "", "From_HDF"]], "hermespy.channel.delay.SpatialDelayChannel": [[37, 3, 1, "", "recall_realization"]], "hermespy.channel.delay.SpatialDelayChannelRealization": [[38, 3, 1, "", "From_HDF"]], "hermespy.channel.ideal": [[40, 1, 1, "", "IdealChannel"], [41, 1, 1, "", "IdealChannelRealization"]], "hermespy.channel.ideal.IdealChannel": [[40, 3, 1, "", "recall_realization"]], "hermespy.channel.ideal.IdealChannelRealization": [[41, 3, 1, "", "state"]], "hermespy.channel.multipath_fading_channel": [[43, 1, 1, "", "AntennaCorrelation"], [44, 1, 1, "", "CustomAntennaCorrelation"], [45, 1, 1, "", "MultipathFadingChannel"], [46, 1, 1, "", "MultipathFadingRealization"], [47, 1, 1, "", "PathRealization"]], "hermespy.channel.multipath_fading_channel.AntennaCorrelation": [[43, 2, 1, "", "channel"], [43, 2, 1, "", "covariance"], [43, 2, 1, "", "device"]], "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation": [[44, 2, 1, "", "covariance"], [44, 4, 1, "", "yaml_tag"]], "hermespy.channel.multipath_fading_channel.MultipathFadingChannel": [[45, 2, 1, "", "alpha_correlation"], [45, 2, 1, "", "alpha_device"], [45, 2, 1, "", "beta_correlation"], [45, 2, 1, "", "beta_device"], [45, 2, 1, "", "delays"], [45, 2, 1, "", "doppler_frequency"], [45, 2, 1, "", "los_angle"], [45, 2, 1, "", "los_doppler_frequency"], [45, 2, 1, "", "max_delay"], [45, 2, 1, "", "num_resolvable_paths"], [45, 2, 1, "", "num_sinusoids"], [45, 2, 1, "", "power_profile"], [45, 3, 1, "", "recall_realization"], [45, 2, 1, "", "rice_factors"]], "hermespy.channel.multipath_fading_channel.MultipathFadingRealization": [[46, 3, 1, "", "From_HDF"], [46, 3, 1, "", "Realize"], [46, 2, 1, "", "path_realizations"], [46, 3, 1, "", "state"], [46, 3, 1, "", "to_HDF"]], "hermespy.channel.multipath_fading_channel.PathRealization": [[47, 3, 1, "", "Realize"], [47, 2, 1, "", "delay"], [47, 2, 1, "", "los_angle"], [47, 2, 1, "", "los_doppler"], [47, 2, 1, "", "los_gain"], [47, 2, 1, "", "los_phase"], [47, 2, 1, "", "nlos_angles"], [47, 2, 1, "", "nlos_doppler"], [47, 2, 1, "", "nlos_gain"], [47, 2, 1, "", "nlos_phases"], [47, 2, 1, "", "power"], [47, 3, 1, "", "propagate"]], "hermespy.channel.multipath_fading_templates": [[49, 1, 1, "", "Cost259Type"], [48, 1, 1, "", "MultipathFading5GTDL"], [49, 1, 1, "", "MultipathFadingCost259"], [50, 1, 1, "", "MultipathFadingExponential"], [48, 1, 1, "", "TDLType"]], "hermespy.channel.multipath_fading_templates.Cost259Type": [[49, 4, 1, "", "HILLY"], [49, 4, 1, "", "RURAL"], [49, 4, 1, "", "URBAN"]], "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL": [[48, 2, 1, "", "model_type"], [48, 2, 1, "", "rms_delay"]], "hermespy.channel.multipath_fading_templates.MultipathFadingCost259": [[49, 2, 1, "", "model_type"], [49, 3, 1, "", "to_yaml"]], "hermespy.channel.multipath_fading_templates.MultipathFadingExponential": [[50, 2, 1, "", "rms_delay"], [50, 2, 1, "", "tap_interval"]], "hermespy.channel.multipath_fading_templates.TDLType": [[48, 4, 1, "", "A"], [48, 4, 1, "", "B"], [48, 4, 1, "", "C"], [48, 4, 1, "", "D"], [48, 4, 1, "", "E"]], "hermespy.channel.quadriga_channel": [[52, 1, 1, "", "QuadrigaChannel"], [53, 1, 1, "", "QuadrigaChannelRealization"]], "hermespy.channel.quadriga_channel.QuadrigaChannel": [[52, 3, 1, "", "recall_realization"]], "hermespy.channel.quadriga_channel.QuadrigaChannelRealization": [[53, 3, 1, "", "From_HDF"], [53, 2, 1, "", "path_delays"], [53, 2, 1, "", "path_gains"], [53, 3, 1, "", "state"], [53, 3, 1, "", "to_HDF"]], "hermespy.channel.quadriga_interface": [[54, 1, 1, "", "QuadrigaInterface"]], "hermespy.channel.quadriga_interface.QuadrigaInterface": [[54, 3, 1, "", "GlobalInstance"], [54, 3, 1, "", "GlobalInstanceExists"], [54, 3, 1, "", "SetGlobalInstance"], [54, 2, 1, "", "antenna_kind"], [54, 3, 1, "", "channel_registered"], [54, 2, 1, "", "channels"], [54, 3, 1, "", "get_impulse_response"], [54, 2, 1, "", "path_launch_script"], [54, 2, 1, "", "path_quadriga_src"], [54, 3, 1, "", "register_channel"], [54, 2, 1, "", "scenario_label"], [54, 3, 1, "", "unregister_channel"], [54, 4, 1, "", "yaml_tag"]], "hermespy.channel.radar_channel": [[56, 1, 1, "", "FixedCrossSection"], [57, 1, 1, "", "MultiTargetRadarChannel"], [58, 1, 1, "", "MultiTargetRadarChannelRealization"], [59, 1, 1, "", "PhysicalRadarTarget"], [61, 1, 1, "", "RCRT"], [60, 1, 1, "", "RadarChannelBase"], [61, 1, 1, "", "RadarChannelRealization"], [62, 1, 1, "", "RadarCrossSectionModel"], [63, 1, 1, "", "RadarInterferenceRealization"], [64, 1, 1, "", "RadarPathRealization"], [65, 1, 1, "", "RadarTarget"], [66, 1, 1, "", "RadarTargetRealization"], [67, 1, 1, "", "SingleTargetRadarChannel"], [68, 1, 1, "", "SingleTargetRadarChannelRealization"], [69, 1, 1, "", "VirtualRadarTarget"]], "hermespy.channel.radar_channel.FixedCrossSection": [[56, 2, 1, "", "cross_section"], [56, 3, 1, "", "get_cross_section"]], "hermespy.channel.radar_channel.MultiTargetRadarChannel": [[57, 3, 1, "", "add_target"], [57, 4, 1, "", "interfernce"], [57, 3, 1, "", "make_target"], [57, 3, 1, "", "recall_realization"], [57, 2, 1, "", "targets"]], "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization": [[58, 3, 1, "", "From_HDF"], [58, 3, 1, "", "ground_truth"], [58, 2, 1, "", "interference_realization"], [58, 3, 1, "", "null_hypothesis"], [58, 2, 1, "", "num_targets"], [58, 2, 1, "", "target_realizations"], [58, 3, 1, "", "to_HDF"]], "hermespy.channel.radar_channel.PhysicalRadarTarget": [[59, 2, 1, "", "cross_section"], [59, 3, 1, "", "get_backwards_transformation"], [59, 3, 1, "", "get_cross_section"], [59, 3, 1, "", "get_forwards_transformation"], [59, 3, 1, "", "get_velocity"], [59, 2, 1, "", "moveable"]], "hermespy.channel.radar_channel.RadarChannelBase": [[60, 2, 1, "", "attenuate"], [60, 3, 1, "", "null_hypothesis"]], "hermespy.channel.radar_channel.RadarChannelRealization": [[61, 3, 1, "", "ground_truth"], [61, 3, 1, "", "null_hypothesis"], [61, 3, 1, "", "state"]], "hermespy.channel.radar_channel.RadarCrossSectionModel": [[62, 3, 1, "", "get_cross_section"]], "hermespy.channel.radar_channel.RadarInterferenceRealization": [[63, 3, 1, "", "propagation_delay"], [63, 3, 1, "", "propagation_response"], [63, 3, 1, "", "relative_velocity"]], "hermespy.channel.radar_channel.RadarPathRealization": [[64, 3, 1, "", "add_propagation"], [64, 3, 1, "", "add_state"], [64, 2, 1, "", "attenuate"], [64, 3, 1, "", "propagation_delay"], [64, 3, 1, "", "propagation_response"], [64, 3, 1, "", "relative_velocity"], [64, 2, 1, "", "static"]], "hermespy.channel.radar_channel.RadarTarget": [[65, 3, 1, "", "get_backwards_transformation"], [65, 3, 1, "", "get_cross_section"], [65, 3, 1, "", "get_forwards_transformation"], [65, 3, 1, "", "get_velocity"], [65, 2, 1, "", "static"]], "hermespy.channel.radar_channel.RadarTargetRealization": [[66, 2, 1, "", "cross_section"], [66, 2, 1, "", "position"], [66, 3, 1, "", "propagation_delay"], [66, 3, 1, "", "propagation_response"], [66, 2, 1, "", "reflection_phase"], [66, 3, 1, "", "relative_velocity"], [66, 2, 1, "", "velocity"]], "hermespy.channel.radar_channel.SingleTargetRadarChannel": [[67, 2, 1, "", "radar_cross_section"], [67, 3, 1, "", "recall_realization"], [67, 2, 1, "", "target_azimuth"], [67, 2, 1, "", "target_exists"], [67, 2, 1, "", "target_range"], [67, 2, 1, "", "target_velocity"], [67, 2, 1, "", "target_zenith"]], "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization": [[68, 3, 1, "", "From_HDF"], [68, 3, 1, "", "ground_truth"], [68, 3, 1, "", "null_hypothesis"], [68, 2, 1, "", "target_realization"], [68, 3, 1, "", "to_HDF"]], "hermespy.channel.radar_channel.VirtualRadarTarget": [[69, 2, 1, "", "cross_section"], [69, 3, 1, "", "get_backwards_transformation"], [69, 3, 1, "", "get_cross_section"], [69, 3, 1, "", "get_forwards_transformation"], [69, 3, 1, "", "get_velocity"], [69, 2, 1, "", "velocity"]], "hermespy.core": [[71, 0, 0, "-", "animation"], [72, 0, 0, "-", "antennas"], [74, 0, 0, "-", "definitions"], [83, 0, 0, "-", "duplex"], [84, 0, 0, "-", "executable"], [85, 0, 0, "-", "factory"], [86, 0, 0, "-", "logarithmic"], [87, 0, 0, "-", "monte_carlo"], [89, 0, 0, "-", "operators"], [90, 0, 0, "-", "pipeline"], [91, 0, 0, "-", "random_node"], [92, 0, 0, "-", "scenario"], [94, 0, 0, "-", "transformation"], [95, 0, 0, "-", "visualize"]], "hermespy.core.animation": [[71, 1, 1, "", "Moveable"]], "hermespy.core.animation.Moveable": [[71, 2, 1, "", "velocity"]], "hermespy.core.antennas": [[72, 1, 1, "", "AAT"], [72, 1, 1, "", "APT"], [72, 1, 1, "", "AT"], [72, 1, 1, "", "Antenna"], [72, 1, 1, "", "AntennaArray"], [72, 1, 1, "", "AntennaMode"], [72, 1, 1, "", "AntennaPort"], [72, 1, 1, "", "CustomAntennaArray"], [72, 1, 1, "", "Dipole"], [72, 1, 1, "", "IdealAntenna"], [72, 1, 1, "", "LinearAntenna"], [72, 1, 1, "", "PatchAntenna"], [72, 1, 1, "", "UniformArray"]], "hermespy.core.antennas.Antenna": [[72, 3, 1, "", "global_characteristics"], [72, 3, 1, "", "local_characteristics"], [72, 2, 1, "", "mode"], [72, 3, 1, "", "plot_gain"], [72, 3, 1, "", "plot_polarization"], [72, 2, 1, "", "port"]], "hermespy.core.antennas.AntennaArray": [[72, 2, 1, "", "antennas"], [72, 3, 1, "", "cartesian_array_response"], [72, 3, 1, "", "cartesian_phase_response"], [72, 3, 1, "", "characteristics"], [72, 3, 1, "", "count_antennas"], [72, 3, 1, "", "count_receive_antennas"], [72, 3, 1, "", "count_transmit_antennas"], [72, 3, 1, "", "horizontal_phase_response"], [72, 2, 1, "", "num_antennas"], [72, 2, 1, "", "num_ports"], [72, 2, 1, "", "num_receive_antennas"], [72, 2, 1, "", "num_receive_ports"], [72, 2, 1, "", "num_transmit_antennas"], [72, 2, 1, "", "num_transmit_ports"], [72, 3, 1, "", "plot_topology"], [72, 2, 1, "", "ports"], [72, 2, 1, "", "receive_antennas"], [72, 2, 1, "", "receive_ports"], [72, 2, 1, "", "receive_topology"], [72, 3, 1, "", "spherical_phase_response"], [72, 2, 1, "", "topology"], [72, 2, 1, "", "transmit_antennas"], [72, 2, 1, "", "transmit_ports"], [72, 2, 1, "", "transmit_topology"]], "hermespy.core.antennas.AntennaMode": [[72, 4, 1, "", "DUPLEX"], [72, 4, 1, "", "RX"], [72, 4, 1, "", "TX"]], "hermespy.core.antennas.AntennaPort": [[72, 3, 1, "", "add_antenna"], [72, 2, 1, "", "antennas"], [72, 3, 1, "", "antennas_updated"], [72, 2, 1, "", "array"], [72, 2, 1, "", "num_antennas"], [72, 2, 1, "", "num_receive_antennas"], [72, 2, 1, "", "num_transmit_antennas"], [72, 2, 1, "", "receive_antennas"], [72, 2, 1, "", "receiving"], [72, 3, 1, "", "remove_antenna"], [72, 2, 1, "", "transmit_antennas"], [72, 2, 1, "", "transmitting"]], "hermespy.core.antennas.CustomAntennaArray": [[72, 3, 1, "", "add_antenna"], [72, 3, 1, "", "add_port"], [72, 2, 1, "", "ports"], [72, 3, 1, "", "remove_port"]], "hermespy.core.antennas.Dipole": [[72, 3, 1, "", "local_characteristics"], [72, 4, 1, "", "yaml_tag"]], "hermespy.core.antennas.IdealAntenna": [[72, 3, 1, "", "local_characteristics"], [72, 4, 1, "", "yaml_tag"]], "hermespy.core.antennas.LinearAntenna": [[72, 3, 1, "", "local_characteristics"], [72, 2, 1, "", "slant"]], "hermespy.core.antennas.PatchAntenna": [[72, 3, 1, "", "local_characteristics"], [72, 4, 1, "", "yaml_tag"]], "hermespy.core.antennas.UniformArray": [[72, 2, 1, "", "antennas"], [72, 2, 1, "", "base_port"], [72, 2, 1, "", "dimensions"], [72, 2, 1, "", "num_antennas"], [72, 2, 1, "", "ports"], [72, 2, 1, "", "spacing"]], "hermespy.core.channel": [[73, 1, 1, "", "ChannelStateInformation"]], "hermespy.core.channel.ChannelStateInformation": [[73, 3, 1, "", "Ideal"], [73, 4, 1, "", "__num_delay_taps"], [73, 4, 1, "", "__num_frequency_bins"], [73, 4, 1, "", "__state"], [73, 4, 1, "", "__state_format"], [73, 3, 1, "", "concatenate"], [73, 3, 1, "", "dense_state"], [73, 2, 1, "", "linear"], [73, 2, 1, "", "num_delay_taps"], [73, 2, 1, "", "num_receive_streams"], [73, 2, 1, "", "num_samples"], [73, 2, 1, "", "num_symbols"], [73, 2, 1, "", "num_transmit_streams"], [73, 3, 1, "", "plot"], [73, 3, 1, "", "propagate"], [73, 3, 1, "", "received_streams"], [73, 3, 1, "", "reciprocal"], [73, 3, 1, "", "samples"], [73, 3, 1, "", "set_state"], [73, 2, 1, "", "state"], [73, 2, 1, "", "state_format"], [73, 3, 1, "", "to_frequency_selectivity"], [73, 3, 1, "", "to_impulse_response"]], "hermespy.core.definitions": [[74, 1, 1, "", "ConsoleMode"], [74, 1, 1, "", "SNRType"]], "hermespy.core.definitions.ConsoleMode": [[74, 4, 1, "", "INTERACTIVE"], [74, 4, 1, "", "LINEAR"], [74, 4, 1, "", "SILENT"]], "hermespy.core.definitions.SNRType": [[74, 4, 1, "", "CUSTOM"], [74, 4, 1, "", "EBN0"], [74, 4, 1, "", "EN0"], [74, 4, 1, "", "ESN0"], [74, 4, 1, "", "N0"], [74, 4, 1, "", "PN0"]], "hermespy.core.device": [[75, 1, 1, "", "Device"], [76, 1, 1, "", "DeviceOutput"], [77, 1, 1, "", "OperationResult"], [78, 1, 1, "", "Receiver"], [79, 1, 1, "", "Reception"], [80, 1, 1, "", "Transmission"], [81, 1, 1, "", "Transmitter"]], "hermespy.core.device.Device": [[75, 2, 1, "", "antennas"], [75, 3, 1, "", "cache_transmission"], [75, 2, 1, "", "carrier_frequency"], [75, 3, 1, "", "generate_output"], [75, 2, 1, "", "max_frame_duration"], [75, 2, 1, "", "num_antennas"], [75, 2, 1, "", "num_receive_antennas"], [75, 2, 1, "", "num_receive_ports"], [75, 2, 1, "", "num_transmit_antennas"], [75, 2, 1, "", "num_transmit_ports"], [75, 2, 1, "", "power"], [75, 3, 1, "", "process_input"], [75, 3, 1, "", "receive"], [75, 3, 1, "", "receive_operators"], [75, 4, 1, "", "receivers"], [75, 2, 1, "", "sampling_rate"], [75, 2, 1, "", "snr"], [75, 3, 1, "", "transmit"], [75, 3, 1, "", "transmit_operators"], [75, 4, 1, "", "transmitters"], [75, 2, 1, "", "velocity"], [75, 2, 1, "", "wavelength"]], "hermespy.core.device.DeviceOutput": [[76, 2, 1, "", "carrier_frequency"], [76, 2, 1, "", "emerging_signals"], [76, 2, 1, "", "mixed_signal"], [76, 2, 1, "", "num_antennas"], [76, 2, 1, "", "num_emerging_signals"], [76, 2, 1, "", "sampling_rate"]], "hermespy.core.device.OperationResult": [[77, 4, 1, "", "signal"]], "hermespy.core.device.Receiver": [[78, 3, 1, "", "cache_reception"], [78, 2, 1, "", "device"], [78, 3, 1, "", "noise_power"], [78, 2, 1, "", "num_receive_antennas"], [78, 2, 1, "", "num_receive_ports"], [78, 3, 1, "", "receive"], [78, 2, 1, "", "reception"], [78, 2, 1, "", "reference"], [78, 2, 1, "", "selected_receive_ports"], [78, 2, 1, "", "signal"]], "hermespy.core.device.Transmitter": [[81, 3, 1, "", "cache_transmission"], [81, 2, 1, "", "device"], [81, 2, 1, "", "num_transmit_antennas"], [81, 2, 1, "", "num_transmit_ports"], [81, 2, 1, "", "selected_transmit_ports"], [81, 2, 1, "", "transmission"], [81, 3, 1, "", "transmit"]], "hermespy.core.drop": [[82, 1, 1, "", "Drop"]], "hermespy.core.drop.Drop": [[82, 2, 1, "", "device_receptions"], [82, 2, 1, "", "device_transmissions"], [82, 2, 1, "", "num_device_receptions"], [82, 2, 1, "", "num_device_transmissions"], [82, 2, 1, "", "operator_inputs"], [82, 2, 1, "", "timestamp"]], "hermespy.core.duplex": [[83, 1, 1, "", "DuplexOperator"]], "hermespy.core.duplex.DuplexOperator": [[83, 2, 1, "", "device"], [83, 2, 1, "", "frame_duration"], [83, 2, 1, "", "sampling_rate"]], "hermespy.core.executable": [[84, 1, 1, "", "Executable"], [84, 1, 1, "", "Verbosity"]], "hermespy.core.executable.Executable": [[84, 2, 1, "", "console"], [84, 2, 1, "", "console_mode"], [84, 2, 1, "", "debug"], [84, 3, 1, "", "default_results_dir"], [84, 3, 1, "", "execute"], [84, 2, 1, "", "results_dir"], [84, 3, 1, "", "run"], [84, 2, 1, "", "style"], [84, 3, 1, "", "style_context"], [84, 2, 1, "", "verbosity"]], "hermespy.core.executable.Verbosity": [[84, 4, 1, "", "ALL"], [84, 4, 1, "", "ERROR"], [84, 4, 1, "", "INFO"], [84, 4, 1, "", "NONE"], [84, 4, 1, "", "WARNING"]], "hermespy.core.factory": [[85, 1, 1, "", "Factory"], [85, 1, 1, "", "HDFSerializable"], [85, 1, 1, "", "HDFSerializableType"], [85, 1, 1, "", "SET"], [85, 1, 1, "", "Serializable"], [85, 1, 1, "", "SerializableEnum"], [85, 1, 1, "", "SerializableType"]], "hermespy.core.factory.Factory": [[85, 2, 1, "", "clean"], [85, 4, 1, "", "extensions"], [85, 3, 1, "", "from_file"], [85, 3, 1, "", "from_folder"], [85, 3, 1, "", "from_path"], [85, 3, 1, "", "from_str"], [85, 3, 1, "", "from_stream"], [85, 2, 1, "", "registered_classes"], [85, 2, 1, "", "registered_tags"], [85, 2, 1, "", "tag_registry"], [85, 3, 1, "", "to_file"], [85, 3, 1, "", "to_folder"], [85, 3, 1, "", "to_str"], [85, 3, 1, "", "to_stream"]], "hermespy.core.factory.SerializableEnum": [[85, 3, 1, "", "from_parameters"]], "hermespy.core.logarithmic": [[86, 1, 1, "", "Logarithmic"], [86, 1, 1, "", "LogarithmicSequence"], [86, 1, 1, "", "ValueType"], [86, 5, 1, "", "dB"]], "hermespy.core.logarithmic.Logarithmic": [[86, 3, 1, "", "From_Tuple"], [86, 2, 1, "", "conversion"], [86, 2, 1, "", "value_db"]], "hermespy.core.logarithmic.LogarithmicSequence": [[86, 2, 1, "", "conversion"], [86, 3, 1, "", "tolist"]], "hermespy.core.logarithmic.ValueType": [[86, 4, 1, "", "DB"], [86, 4, 1, "", "LIN"]], "hermespy.core.monte_carlo": [[87, 1, 1, "", "ActorRunResult"], [87, 1, 1, "", "Artifact"], [87, 1, 1, "", "ArtifactTemplate"], [87, 1, 1, "", "Evaluation"], [87, 1, 1, "", "EvaluationResult"], [87, 1, 1, "", "EvaluationTemplate"], [88, 1, 1, "", "Evaluator"], [87, 1, 1, "", "GridDimension"], [87, 1, 1, "", "GridSection"], [87, 1, 1, "", "MonteCarlo"], [87, 1, 1, "", "MonteCarloActor"], [87, 1, 1, "", "MonteCarloResult"], [87, 1, 1, "", "MonteCarloSample"], [87, 1, 1, "", "RegisteredDimension"], [87, 1, 1, "", "SampleGrid"], [87, 1, 1, "", "SamplePoint"], [87, 1, 1, "", "ScalarEvaluationResult"], [87, 5, 1, "", "register"]], "hermespy.core.monte_carlo.ActorRunResult": [[87, 4, 1, "", "message"], [87, 4, 1, "", "samples"]], "hermespy.core.monte_carlo.Artifact": [[87, 3, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.ArtifactTemplate": [[87, 2, 1, "", "artifact"], [87, 3, 1, "", "to_scalar"]], "hermespy.core.monte_carlo.Evaluation": [[87, 3, 1, "", "artifact"]], "hermespy.core.monte_carlo.EvaluationResult": [[87, 2, 1, "", "evaluator"], [87, 2, 1, "", "grid"], [87, 3, 1, "", "print"], [87, 3, 1, "", "to_array"]], "hermespy.core.monte_carlo.EvaluationTemplate": [[87, 4, 1, "", "evaluation"]], "hermespy.core.monte_carlo.Evaluator": [[88, 2, 1, "", "abbreviation"], [88, 2, 1, "", "confidence"], [88, 3, 1, "", "evaluate"], [88, 3, 1, "", "generate_result"], [88, 2, 1, "", "plot_scale"], [88, 4, 1, "", "tick_format"], [88, 2, 1, "", "title"], [88, 2, 1, "", "tolerance"]], "hermespy.core.monte_carlo.GridDimension": [[87, 3, 1, "", "configure_point"], [87, 2, 1, "", "considered_objects"], [87, 2, 1, "", "dimension"], [87, 2, 1, "", "first_impact"], [87, 2, 1, "", "last_impact"], [87, 2, 1, "", "num_sample_points"], [87, 2, 1, "", "plot_scale"], [87, 2, 1, "", "sample_points"], [87, 2, 1, "", "tick_format"], [87, 2, 1, "", "title"]], "hermespy.core.monte_carlo.GridSection": [[87, 3, 1, "", "add_samples"], [87, 3, 1, "", "confidence_status"], [87, 2, 1, "", "confidences"], [87, 2, 1, "", "coordinates"], [87, 2, 1, "", "num_samples"], [87, 2, 1, "", "samples"]], "hermespy.core.monte_carlo.MonteCarlo": [[87, 3, 1, "", "add_dimension"], [87, 3, 1, "", "add_evaluator"], [87, 4, 1, "", "catch_exceptions"], [87, 2, 1, "", "console"], [87, 2, 1, "", "console_mode"], [87, 2, 1, "", "cpus_per_actor"], [87, 2, 1, "", "dimensions"], [87, 2, 1, "", "evaluators"], [87, 2, 1, "", "investigated_object"], [87, 2, 1, "", "max_num_samples"], [87, 2, 1, "", "min_num_samples"], [87, 3, 1, "", "new_dimension"], [87, 2, 1, "", "num_actors"], [87, 2, 1, "", "num_samples"], [87, 3, 1, "", "remove_dimension"], [87, 4, 1, "", "runtime_env"], [87, 2, 1, "", "section_block_size"], [87, 3, 1, "", "simulate"]], "hermespy.core.monte_carlo.MonteCarloActor": [[87, 4, 1, "", "catch_exceptions"], [87, 3, 1, "", "run"], [87, 3, 1, "", "stage_executors"], [87, 3, 1, "", "stage_identifiers"]], "hermespy.core.monte_carlo.MonteCarloResult": [[87, 2, 1, "", "evaluation_results"], [87, 2, 1, "", "performance_time"], [87, 3, 1, "", "plot"], [87, 3, 1, "", "print"], [87, 3, 1, "", "save_to_matlab"]], "hermespy.core.monte_carlo.MonteCarloSample": [[87, 2, 1, "", "artifact_scalars"], [87, 2, 1, "", "artifacts"], [87, 2, 1, "", "grid_section"], [87, 2, 1, "", "num_artifacts"], [87, 2, 1, "", "sample_index"]], "hermespy.core.monte_carlo.RegisteredDimension": [[87, 3, 1, "", "deleter"], [87, 2, 1, "", "first_impact"], [87, 3, 1, "", "getter"], [87, 3, 1, "", "is_registered"], [87, 2, 1, "", "last_impact"], [87, 3, 1, "", "setter"], [87, 2, 1, "", "title"]], "hermespy.core.monte_carlo.SamplePoint": [[87, 2, 1, "", "title"], [87, 2, 1, "", "value"]], "hermespy.core.monte_carlo.ScalarEvaluationResult": [[87, 3, 1, "", "From_Artifacts"], [87, 4, 1, "", "plot_surface"], [87, 2, 1, "", "title"], [87, 3, 1, "", "to_array"]], "hermespy.core.operators": [[89, 1, 1, "", "SignalReceiver"], [89, 1, 1, "", "SignalTransmitter"], [89, 1, 1, "", "SilentTransmitter"], [89, 1, 1, "", "StaticOperator"]], "hermespy.core.operators.SignalReceiver": [[89, 2, 1, "", "energy"]], "hermespy.core.operators.SignalTransmitter": [[89, 2, 1, "", "signal"]], "hermespy.core.operators.StaticOperator": [[89, 2, 1, "", "frame_duration"], [89, 2, 1, "", "num_samples"], [89, 2, 1, "", "sampling_rate"]], "hermespy.core.pipeline": [[90, 1, 1, "", "Pipeline"]], "hermespy.core.pipeline.Pipeline": [[90, 3, 1, "", "add_device"], [90, 3, 1, "", "device_index"], [90, 3, 1, "", "new_device"], [90, 2, 1, "", "num_drops"], [90, 2, 1, "", "scenario"]], "hermespy.core.random_node": [[91, 1, 1, "", "RandomNode"], [91, 1, 1, "", "RandomRealization"]], "hermespy.core.random_node.RandomRealization": [[91, 3, 1, "", "generator"], [91, 2, 1, "", "seed"]], "hermespy.core.scenario": [[92, 1, 1, "", "ReplayScenario"], [92, 1, 1, "", "Scenario"], [92, 1, 1, "", "ScenarioMode"], [92, 1, 1, "", "ScenarioType"]], "hermespy.core.scenario.Scenario": [[92, 3, 1, "", "Replay"], [92, 3, 1, "", "add_device"], [92, 2, 1, "", "campaign"], [92, 3, 1, "", "device_index"], [92, 3, 1, "", "device_registered"], [92, 2, 1, "", "devices"], [92, 3, 1, "", "drop"], [92, 2, 1, "", "drop_duration"], [92, 3, 1, "", "generate_outputs"], [92, 2, 1, "", "mode"], [92, 3, 1, "", "new_device"], [92, 2, 1, "", "num_devices"], [92, 2, 1, "", "num_drops"], [92, 2, 1, "", "num_operators"], [92, 2, 1, "", "num_receivers"], [92, 2, 1, "", "num_transmitters"], [92, 2, 1, "", "operators"], [92, 3, 1, "", "process_inputs"], [92, 3, 1, "", "receive_devices"], [92, 3, 1, "", "receive_operators"], [92, 2, 1, "", "receivers"], [92, 3, 1, "", "record"], [92, 3, 1, "", "replay"], [92, 4, 1, "", "serialized_attributes"], [92, 3, 1, "", "stop"], [92, 3, 1, "", "transmit_devices"], [92, 3, 1, "", "transmit_operators"], [92, 2, 1, "", "transmitters"], [92, 4, 1, "", "yaml_tag"]], "hermespy.core.scenario.ScenarioMode": [[92, 4, 1, "", "DEFAULT"], [92, 4, 1, "", "RECORD"], [92, 4, 1, "", "REPLAY"]], "hermespy.core.signal_model": [[93, 1, 1, "", "Signal"]], "hermespy.core.signal_model.Signal": [[93, 4, 1, "", "__carrier_frequency"], [93, 4, 1, "", "__samples"], [93, 4, 1, "", "__sampling_rate"], [93, 3, 1, "", "append_samples"], [93, 3, 1, "", "append_streams"], [93, 2, 1, "", "carrier_frequency"], [93, 3, 1, "", "copy"], [93, 4, 1, "", "delay"], [93, 2, 1, "", "duration"], [93, 3, 1, "", "empty"], [93, 2, 1, "", "energy"], [93, 4, 1, "", "filter_order"], [93, 2, 1, "", "frequencies"], [93, 3, 1, "", "from_interleaved"], [93, 2, 1, "", "noise_power"], [93, 2, 1, "", "num_samples"], [93, 2, 1, "", "num_streams"], [93, 3, 1, "", "plot"], [93, 3, 1, "", "plot_eye"], [93, 2, 1, "", "power"], [93, 3, 1, "", "resample"], [93, 2, 1, "", "samples"], [93, 2, 1, "", "sampling_rate"], [93, 3, 1, "", "superimpose"], [93, 2, 1, "", "timestamps"], [93, 2, 1, "", "title"], [93, 3, 1, "", "to_interleaved"]], "hermespy.core.transformation": [[94, 1, 1, "", "Direction"], [94, 1, 1, "", "Transformable"], [94, 1, 1, "", "TransformableBase"], [94, 1, 1, "", "TransformableLink"], [94, 1, 1, "", "Transformation"]], "hermespy.core.transformation.Direction": [[94, 3, 1, "", "From_Cartesian"], [94, 3, 1, "", "From_Spherical"], [94, 3, 1, "", "to_spherical"]], "hermespy.core.transformation.Transformable": [[94, 2, 1, "", "backwards_transformation"], [94, 2, 1, "", "forwards_transformation"], [94, 2, 1, "", "global_orientation"], [94, 2, 1, "", "global_position"], [94, 2, 1, "", "is_base"], [94, 2, 1, "", "orientation"], [94, 2, 1, "", "pose"], [94, 2, 1, "", "position"], [94, 3, 1, "", "set_base"], [94, 3, 1, "", "to_local_coordinates"]], "hermespy.core.transformation.TransformableBase": [[94, 2, 1, "", "forwards_transformation"], [94, 3, 1, "", "set_base"]], "hermespy.core.transformation.TransformableLink": [[94, 3, 1, "", "add_link"], [94, 2, 1, "", "forwards_transformation"], [94, 2, 1, "", "linked_frames"], [94, 3, 1, "", "remove_link"], [94, 3, 1, "", "set_base"]], "hermespy.core.transformation.Transformation": [[94, 3, 1, "", "From_RPY"], [94, 3, 1, "", "From_Translation"], [94, 3, 1, "", "No"], [94, 3, 1, "", "rotate_direction"], [94, 2, 1, "", "rotation_rpy"], [94, 3, 1, "", "transform_direction"], [94, 3, 1, "", "transform_position"], [94, 2, 1, "", "translation"]], "hermespy.core.visualize": [[95, 4, 1, "", "VAT"], [95, 1, 1, "", "Visualizable"]], "hermespy.core.visualize.Visualizable": [[95, 3, 1, "", "plot"], [95, 2, 1, "", "title"]], "hermespy.fec": [[98, 0, 0, "-", "block_interleaver"], [99, 0, 0, "-", "coding"], [100, 0, 0, "-", "cyclic_redundancy_check"], [103, 0, 0, "-", "repetition_encoder"], [106, 0, 0, "-", "scrambler"]], "hermespy.fec.block_interleaver": [[98, 1, 1, "", "BlockInterleaver"]], "hermespy.fec.block_interleaver.BlockInterleaver": [[98, 2, 1, "", "bit_block_size"], [98, 2, 1, "", "block_size"], [98, 2, 1, "", "code_block_size"], [98, 3, 1, "", "decode"], [98, 3, 1, "", "encode"], [98, 2, 1, "", "interleave_blocks"], [98, 2, 1, "", "rate"], [98, 4, 1, "", "yaml_tag"]], "hermespy.fec.coding": [[99, 1, 1, "", "Encoder"], [99, 1, 1, "", "EncoderManager"]], "hermespy.fec.coding.Encoder": [[99, 2, 1, "", "bit_block_size"], [99, 2, 1, "", "code_block_size"], [99, 3, 1, "", "decode"], [99, 2, 1, "", "enabled"], [99, 3, 1, "", "encode"], [99, 2, 1, "", "manager"], [99, 2, 1, "", "rate"], [99, 4, 1, "", "yaml_tag"]], "hermespy.fec.coding.EncoderManager": [[99, 3, 1, "", "add_encoder"], [99, 4, 1, "", "allow_padding"], [99, 4, 1, "", "allow_truncating"], [99, 2, 1, "", "bit_block_size"], [99, 2, 1, "", "code_block_size"], [99, 3, 1, "", "decode"], [99, 3, 1, "", "encode"], [99, 2, 1, "", "encoders"], [99, 2, 1, "", "modem"], [99, 2, 1, "", "rate"], [99, 3, 1, "", "required_num_data_bits"]], "hermespy.fec.cyclic_redundancy_check": [[100, 1, 1, "", "CyclicRedundancyCheck"]], "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck": [[100, 2, 1, "", "bit_block_size"], [100, 2, 1, "", "check_block_size"], [100, 2, 1, "", "code_block_size"], [100, 3, 1, "", "decode"], [100, 3, 1, "", "encode"], [100, 4, 1, "", "yaml_tag"]], "hermespy.fec.repetition_encoder": [[103, 1, 1, "", "RepetitionEncoder"]], "hermespy.fec.repetition_encoder.RepetitionEncoder": [[103, 2, 1, "", "bit_block_size"], [103, 2, 1, "", "code_block_size"], [103, 3, 1, "", "decode"], [103, 3, 1, "", "encode"], [103, 2, 1, "", "repetitions"], [103, 4, 1, "", "yaml_tag"]], "hermespy.fec.scrambler": [[106, 1, 1, "", "PseudoRandomGenerator"], [106, 1, 1, "", "Scrambler3GPP"], [106, 1, 1, "", "Scrambler80211a"]], "hermespy.fec.scrambler.PseudoRandomGenerator": [[106, 3, 1, "", "generate"], [106, 3, 1, "", "generate_sequence"], [106, 3, 1, "", "reset"]], "hermespy.fec.scrambler.Scrambler3GPP": [[106, 2, 1, "", "bit_block_size"], [106, 2, 1, "", "code_block_size"], [106, 3, 1, "", "decode"], [106, 3, 1, "", "encode"], [106, 4, 1, "", "yaml_tag"]], "hermespy.fec.scrambler.Scrambler80211a": [[106, 2, 1, "", "bit_block_size"], [106, 2, 1, "", "code_block_size"], [106, 3, 1, "", "decode"], [106, 3, 1, "", "encode"], [106, 2, 1, "", "seed"], [106, 4, 1, "", "yaml_tag"]], "hermespy.hardware_loop.audio.device": [[109, 1, 1, "", "AudioDevice"]], "hermespy.hardware_loop.audio.device.AudioDevice": [[109, 2, 1, "", "antennas"], [109, 2, 1, "", "carrier_frequency"], [109, 2, 1, "", "max_sampling_rate"], [109, 2, 1, "", "playback_channels"], [109, 2, 1, "", "playback_device"], [109, 2, 1, "", "record_channels"], [109, 2, 1, "", "record_device"], [109, 2, 1, "", "sampling_rate"], [109, 3, 1, "", "trigger"]], "hermespy.hardware_loop.audio.scenario": [[110, 1, 1, "", "AudioScenario"]], "hermespy.hardware_loop.audio.scenario.AudioScenario": [[110, 3, 1, "", "new_device"], [110, 4, 1, "", "yaml_tag"]], "hermespy.hardware_loop.calibration": [[111, 0, 0, "-", "delay"], [112, 0, 0, "-", "leakage"]], "hermespy.hardware_loop.calibration.delay": [[111, 1, 1, "", "DelayCalibration"]], "hermespy.hardware_loop.calibration.delay.DelayCalibration": [[111, 3, 1, "", "Estimate"], [111, 2, 1, "", "delay"]], "hermespy.hardware_loop.calibration.leakage": [[112, 1, 1, "", "SelectiveLeakageCalibration"]], "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration": [[112, 3, 1, "", "MMSEEstimate"], [112, 2, 1, "", "delay"], [112, 3, 1, "", "estimate_delay"], [112, 2, 1, "", "leakage_response"], [112, 3, 1, "", "remove_leakage"], [112, 2, 1, "", "sampling_rate"], [112, 2, 1, "", "title"]], "hermespy.hardware_loop.hardware_loop": [[113, 1, 1, "", "HardwareLoop"], [114, 1, 1, "", "HardwareLoopPlot"]], "hermespy.hardware_loop.hardware_loop.HardwareLoop": [[113, 3, 1, "", "add_dimension"], [113, 3, 1, "", "add_evaluator"], [113, 3, 1, "", "add_plot"], [113, 3, 1, "", "evaluator_index"], [113, 2, 1, "", "evaluators"], [113, 2, 1, "", "iteration_priority"], [113, 4, 1, "", "manual_triggering"], [113, 3, 1, "", "new_dimension"], [113, 2, 1, "", "num_evaluators"], [113, 4, 1, "", "plot_information"], [113, 4, 1, "", "record_drops"], [113, 3, 1, "", "replay"], [113, 3, 1, "", "run"], [113, 4, 1, "", "yaml_tag"]], "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot": [[114, 2, 1, "", "axes"], [114, 2, 1, "", "figure"], [114, 2, 1, "", "hardware_loop"], [114, 3, 1, "", "prepare_figure"], [114, 2, 1, "", "title"], [114, 3, 1, "", "update_plot"]], "hermespy.hardware_loop.physical_device": [[115, 1, 1, "", "PhysicalDevice"]], "hermespy.hardware_loop.physical_device.PhysicalDevice": [[115, 2, 1, "", "adaptive_sampling"], [115, 2, 1, "", "delay_calibration"], [115, 3, 1, "", "estimate_noise_power"], [115, 2, 1, "", "leakage_calibration"], [115, 3, 1, "", "load_calibration"], [115, 2, 1, "", "lowpass_bandwidth"], [115, 2, 1, "", "lowpass_filter"], [115, 2, 1, "", "max_receive_delay"], [115, 2, 1, "", "max_sampling_rate"], [115, 2, 1, "", "noise_power"], [115, 3, 1, "", "process_input"], [115, 3, 1, "", "receive"], [115, 3, 1, "", "save_calibration"], [115, 3, 1, "", "transmit"], [115, 3, 1, "", "trigger"], [115, 3, 1, "", "trigger_direct"], [115, 2, 1, "", "velocity"]], "hermespy.hardware_loop.physical_device_dummy": [[116, 1, 1, "", "PhysicalDeviceDummy"], [117, 1, 1, "", "PhysicalScenarioDummy"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy": [[116, 2, 1, "", "max_sampling_rate"], [116, 3, 1, "", "process_input"], [116, 3, 1, "", "receive"], [116, 2, 1, "", "receive_transmission"], [116, 3, 1, "", "transmit"], [116, 3, 1, "", "trigger"], [116, 3, 1, "", "trigger_direct"]], "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy": [[117, 3, 1, "", "add_device"], [117, 3, 1, "", "new_device"], [117, 3, 1, "", "receive_devices"]], "hermespy.hardware_loop.scenario": [[118, 1, 1, "", "PhysicalScenario"]], "hermespy.hardware_loop.scenario.PhysicalScenario": [[118, 3, 1, "", "add_device"], [118, 3, 1, "", "receive_devices"]], "hermespy.hardware_loop.uhd.system": [[119, 1, 1, "", "UsrpSystem"]], "hermespy.hardware_loop.uhd.system.UsrpSystem": [[119, 3, 1, "", "add_device"], [119, 3, 1, "", "new_device"], [119, 4, 1, "", "yaml_tag"]], "hermespy.hardware_loop.uhd.usrp": [[120, 1, 1, "", "UsrpDevice"]], "hermespy.hardware_loop.uhd.usrp.UsrpDevice": [[120, 2, 1, "", "antennas"], [120, 2, 1, "", "carrier_frequency"], [120, 2, 1, "", "ip"], [120, 2, 1, "", "max_sampling_rate"], [120, 2, 1, "", "num_appended_zeros"], [120, 2, 1, "", "num_prepeneded_zeros"], [120, 2, 1, "", "num_receive_ports"], [120, 2, 1, "", "num_transmit_ports"], [120, 2, 1, "", "port"], [120, 2, 1, "", "rx_gain"], [120, 2, 1, "", "sampling_rate"], [120, 2, 1, "", "scale_transmission"], [120, 3, 1, "", "trigger"], [120, 2, 1, "", "tx_gain"], [120, 4, 1, "", "yaml_tag"]], "hermespy.hardware_loop": [[121, 0, 0, "-", "visualizers"]], "hermespy.hardware_loop.visualizers": [[121, 1, 1, "", "ArtifactPlot"], [121, 1, 1, "", "DeviceReceptionPlot"], [121, 1, 1, "", "DeviceTransmissionPlot"], [121, 1, 1, "", "EvaluationPlot"], [121, 1, 1, "", "EyePlot"], [121, 1, 1, "", "HardwareLoopDevicePlot"], [121, 1, 1, "", "HardwareLoopEvaluatorPlot"], [121, 1, 1, "", "RadarRangePlot"], [121, 1, 1, "", "ReceivedConstellationPlot"], [121, 1, 1, "", "SignalPlot"]], "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot": [[121, 2, 1, "", "device"]], "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot": [[121, 2, 1, "", "evaluator"]], "hermespy.jcas": [[123, 0, 0, "-", "matched_filtering"]], "hermespy.jcas.matched_filtering": [[123, 1, 1, "", "JCASReception"], [123, 1, 1, "", "JCASTransmission"], [123, 1, 1, "", "MatchedFilterJcas"]], "hermespy.jcas.matched_filtering.MatchedFilterJcas": [[123, 2, 1, "", "device"], [123, 2, 1, "", "frame_duration"], [123, 2, 1, "", "max_range"], [123, 2, 1, "", "range_resolution"], [123, 2, 1, "", "sampling_rate"], [123, 4, 1, "", "yaml_tag"]], "hermespy.modem.bits_source": [[125, 1, 1, "", "BitsSource"], [125, 1, 1, "", "RandomBitsSource"], [125, 1, 1, "", "StreamBitsSource"]], "hermespy.modem.bits_source.BitsSource": [[125, 3, 1, "", "generate_bits"]], "hermespy.modem.bits_source.RandomBitsSource": [[125, 3, 1, "", "generate_bits"]], "hermespy.modem.bits_source.StreamBitsSource": [[125, 3, 1, "", "generate_bits"]], "hermespy.modem.evaluators": [[129, 1, 1, "", "BitErrorArtifact"], [129, 1, 1, "", "BitErrorEvaluation"], [129, 1, 1, "", "BitErrorEvaluator"], [130, 1, 1, "", "BlockErrorArtifact"], [130, 1, 1, "", "BlockErrorEvaluation"], [130, 1, 1, "", "BlockErrorEvaluator"], [127, 1, 1, "", "CommunicationEvaluator"], [131, 1, 1, "", "FrameErrorArtifact"], [131, 1, 1, "", "FrameErrorEvaluation"], [131, 1, 1, "", "FrameErrorEvaluator"], [132, 1, 1, "", "ThroughputArtifact"], [132, 1, 1, "", "ThroughputEvaluation"], [132, 1, 1, "", "ThroughputEvaluator"]], "hermespy.modem.evaluators.BitErrorEvaluation": [[129, 3, 1, "", "artifact"], [129, 2, 1, "", "title"]], "hermespy.modem.evaluators.BitErrorEvaluator": [[129, 2, 1, "", "abbreviation"], [129, 3, 1, "", "evaluate"], [129, 2, 1, "", "title"]], "hermespy.modem.evaluators.BlockErrorEvaluation": [[130, 3, 1, "", "artifact"], [130, 2, 1, "", "title"]], "hermespy.modem.evaluators.BlockErrorEvaluator": [[130, 2, 1, "", "abbreviation"], [130, 3, 1, "", "evaluate"], [130, 2, 1, "", "title"]], "hermespy.modem.evaluators.CommunicationEvaluator": [[127, 3, 1, "", "generate_result"], [127, 2, 1, "", "receiving_modem"], [127, 2, 1, "", "transmitting_modem"]], "hermespy.modem.evaluators.FrameErrorEvaluation": [[131, 3, 1, "", "artifact"], [131, 2, 1, "", "title"]], "hermespy.modem.evaluators.FrameErrorEvaluator": [[131, 2, 1, "", "abbreviation"], [131, 3, 1, "", "evaluate"], [131, 2, 1, "", "title"], [131, 4, 1, "", "yaml_tag"]], "hermespy.modem.evaluators.ThroughputEvaluation": [[132, 3, 1, "", "artifact"], [132, 2, 1, "", "title"]], "hermespy.modem.evaluators.ThroughputEvaluator": [[132, 2, 1, "", "abbreviation"], [132, 3, 1, "", "evaluate"], [132, 2, 1, "", "title"], [132, 4, 1, "", "yaml_tag"]], "hermespy.modem.modem": [[133, 1, 1, "", "BaseModem"], [134, 1, 1, "", "CommunicationReception"], [135, 1, 1, "", "CommunicationReceptionFrame"], [136, 1, 1, "", "CommunicationTransmission"], [137, 1, 1, "", "CommunicationTransmissionFrame"], [138, 1, 1, "", "DuplexModem"], [139, 1, 1, "", "ReceivingModem"], [140, 1, 1, "", "SimplexLink"], [141, 1, 1, "", "TransmittingModem"]], "hermespy.modem.modem.BaseModem": [[133, 2, 1, "", "encoder_manager"], [133, 2, 1, "", "frame_duration"], [133, 2, 1, "", "num_data_bits_per_frame"], [133, 2, 1, "", "num_receive_ports"], [133, 2, 1, "", "num_transmit_ports"], [133, 2, 1, "", "precoding"], [133, 2, 1, "", "receiving_device"], [133, 2, 1, "", "samples_per_frame"], [133, 2, 1, "", "sampling_rate"], [133, 2, 1, "", "symbol_duration"], [133, 2, 1, "", "transmitting_device"], [133, 2, 1, "", "waveform"]], "hermespy.modem.modem.CommunicationReception": [[134, 2, 1, "", "bits"], [134, 2, 1, "", "encoded_bits"], [134, 2, 1, "", "equalized_symbols"], [134, 4, 1, "", "frames"], [134, 2, 1, "", "num_frames"], [134, 2, 1, "", "symbols"]], "hermespy.modem.modem.CommunicationReceptionFrame": [[135, 4, 1, "", "decoded_bits"], [135, 4, 1, "", "decoded_signal"], [135, 4, 1, "", "decoded_symbols"], [135, 4, 1, "", "encoded_bits"], [135, 4, 1, "", "equalized_symbols"], [135, 4, 1, "", "signal"], [135, 4, 1, "", "symbols"], [135, 4, 1, "", "timestamp"]], "hermespy.modem.modem.CommunicationTransmission": [[136, 2, 1, "", "bits"], [136, 4, 1, "", "frames"], [136, 2, 1, "", "num_frames"], [136, 2, 1, "", "symbols"]], "hermespy.modem.modem.CommunicationTransmissionFrame": [[137, 4, 1, "", "bits"], [137, 4, 1, "", "encoded_bits"], [137, 4, 1, "", "encoded_symbols"], [137, 4, 1, "", "signal"], [137, 4, 1, "", "symbols"], [137, 4, 1, "", "timestamp"]], "hermespy.modem.modem.DuplexModem": [[138, 2, 1, "", "device"], [138, 2, 1, "", "receiving_device"], [138, 2, 1, "", "transmitting_device"], [138, 4, 1, "", "yaml_tag"]], "hermespy.modem.modem.ReceivingModem": [[139, 3, 1, "", "_receive"], [139, 2, 1, "", "device"], [139, 2, 1, "", "num_receive_ports"], [139, 2, 1, "", "receive_stream_coding"], [139, 2, 1, "", "receiving_device"], [139, 2, 1, "", "transmitting_device"], [139, 4, 1, "", "yaml_tag"]], "hermespy.modem.modem.SimplexLink": [[140, 2, 1, "", "receiving_device"], [140, 2, 1, "", "reference"], [140, 2, 1, "", "transmitting_device"], [140, 4, 1, "", "yaml_tag"]], "hermespy.modem.modem.TransmittingModem": [[141, 3, 1, "", "_transmit"], [141, 2, 1, "", "bits_source"], [141, 2, 1, "", "device"], [141, 2, 1, "", "num_transmit_ports"], [141, 2, 1, "", "receiving_device"], [141, 2, 1, "", "transmit_stream_coding"], [141, 2, 1, "", "transmitting_device"]], "hermespy.modem.precoding.dft": [[143, 1, 1, "", "DFT"]], "hermespy.modem.precoding.dft.DFT": [[143, 3, 1, "", "decode"], [143, 3, 1, "", "encode"], [143, 2, 1, "", "num_input_streams"], [143, 2, 1, "", "num_output_streams"]], "hermespy.modem.precoding.ratio_combining": [[144, 1, 1, "", "MaximumRatioCombining"]], "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining": [[144, 3, 1, "", "decode"], [144, 3, 1, "", "encode"], [144, 2, 1, "", "num_input_streams"], [144, 2, 1, "", "num_output_streams"]], "hermespy.modem.precoding.single_carrier": [[145, 1, 1, "", "SingleCarrier"]], "hermespy.modem.precoding.single_carrier.SingleCarrier": [[145, 3, 1, "", "decode"], [145, 3, 1, "", "encode"], [145, 2, 1, "", "num_input_streams"], [145, 2, 1, "", "num_output_streams"]], "hermespy.modem.precoding.space_time_block_coding": [[146, 1, 1, "", "Alamouti"], [146, 1, 1, "", "Ganesan"]], "hermespy.modem.precoding.space_time_block_coding.Alamouti": [[146, 3, 1, "", "decode"], [146, 3, 1, "", "encode"], [146, 2, 1, "", "num_input_streams"], [146, 2, 1, "", "num_output_streams"]], "hermespy.modem.precoding.space_time_block_coding.Ganesan": [[146, 3, 1, "", "decode"], [146, 3, 1, "", "encode"], [146, 2, 1, "", "num_input_streams"], [146, 2, 1, "", "num_output_streams"], [146, 2, 1, "", "rate"]], "hermespy.modem.precoding.spatial_multiplexing": [[147, 1, 1, "", "SpatialMultiplexing"]], "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing": [[147, 3, 1, "", "decode"], [147, 3, 1, "", "encode"], [147, 2, 1, "", "num_input_streams"], [147, 2, 1, "", "num_output_streams"], [147, 2, 1, "", "rate"]], "hermespy.modem.precoding.symbol_precoding": [[148, 1, 1, "", "SymbolPrecoder"], [149, 1, 1, "", "SymbolPrecoding"]], "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder": [[148, 3, 1, "", "decode"], [148, 3, 1, "", "encode"]], "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding": [[149, 3, 1, "", "decode"], [149, 3, 1, "", "encode"], [149, 3, 1, "", "num_encoded_blocks"]], "hermespy.modem": [[150, 0, 0, "-", "symbols"]], "hermespy.modem.symbols": [[150, 1, 1, "", "StatedSymbols"], [150, 1, 1, "", "Symbol"], [150, 1, 1, "", "SymbolType"], [150, 1, 1, "", "Symbols"]], "hermespy.modem.symbols.StatedSymbols": [[150, 3, 1, "", "copy"], [150, 3, 1, "", "dense_states"], [150, 2, 1, "", "num_transmit_streams"], [150, 2, 1, "", "states"]], "hermespy.modem.symbols.Symbol": [[150, 4, 1, "", "flag"], [150, 4, 1, "", "value"]], "hermespy.modem.symbols.SymbolType": [[150, 4, 1, "", "DATA"], [150, 4, 1, "", "PILOT"], [150, 4, 1, "", "REFERENCE"]], "hermespy.modem.symbols.Symbols": [[150, 3, 1, "", "append_stream"], [150, 3, 1, "", "append_symbols"], [150, 3, 1, "", "copy"], [150, 2, 1, "", "num_blocks"], [150, 2, 1, "", "num_streams"], [150, 2, 1, "", "num_symbols"], [150, 3, 1, "", "plot_constellation"], [150, 2, 1, "", "raw"]], "hermespy.modem.waveform": [[152, 1, 1, "", "ChannelEqualization"], [153, 1, 1, "", "ChannelEstimation"], [151, 1, 1, "", "CommunicationWaveform"], [151, 1, 1, "", "ConfigurablePilotWaveform"], [151, 1, 1, "", "PilotCommunicationWaveform"], [154, 1, 1, "", "Synchronization"], [151, 1, 1, "", "WaveformType"], [155, 1, 1, "", "ZeroForcingChannelEqualization"]], "hermespy.modem.waveform.ChannelEqualization": [[152, 3, 1, "", "equalize_channel"], [152, 2, 1, "", "waveform"]], "hermespy.modem.waveform.ChannelEstimation": [[153, 3, 1, "", "estimate_channel"], [153, 2, 1, "", "waveform"]], "hermespy.modem.waveform.CommunicationWaveform": [[151, 2, 1, "", "bandwidth"], [151, 2, 1, "", "bit_energy"], [151, 3, 1, "", "bits_per_frame"], [151, 2, 1, "", "bits_per_symbol"], [151, 2, 1, "", "channel_equalization"], [151, 2, 1, "", "channel_estimation"], [151, 3, 1, "", "data_rate"], [151, 3, 1, "", "demodulate"], [151, 3, 1, "", "equalize_symbols"], [151, 3, 1, "", "estimate_channel"], [151, 2, 1, "", "frame_duration"], [151, 3, 1, "", "map"], [151, 2, 1, "", "modem"], [151, 3, 1, "", "modulate"], [151, 2, 1, "", "modulation_order"], [151, 2, 1, "", "num_data_symbols"], [151, 2, 1, "", "oversampling_factor"], [151, 3, 1, "", "pick"], [151, 3, 1, "", "place"], [151, 2, 1, "", "power"], [151, 2, 1, "", "samples_per_frame"], [151, 2, 1, "", "sampling_rate"], [151, 2, 1, "", "symbol_duration"], [151, 2, 1, "", "symbol_energy"], [151, 2, 1, "", "symbol_precoding_support"], [151, 4, 1, "", "symbol_type"], [151, 2, 1, "", "synchronization"], [151, 3, 1, "", "unmap"]], "hermespy.modem.waveform.ConfigurablePilotWaveform": [[151, 4, 1, "", "pilot_symbol_sequence"], [151, 3, 1, "", "pilot_symbols"], [151, 4, 1, "", "repeat_pilot_symbol_sequence"]], "hermespy.modem.waveform.PilotCommunicationWaveform": [[151, 2, 1, "", "pilot_signal"]], "hermespy.modem.waveform.Synchronization": [[154, 3, 1, "", "synchronize"], [154, 2, 1, "", "waveform"]], "hermespy.modem.waveform.ZeroForcingChannelEqualization": [[155, 3, 1, "", "equalize_channel"], [155, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_chirp_fsk": [[157, 1, 1, "", "ChirpFSKCorrelationSynchronization"], [157, 1, 1, "", "ChirpFSKSynchronization"], [157, 1, 1, "", "ChirpFSKWaveform"]], "hermespy.modem.waveform_chirp_fsk.ChirpFSKCorrelationSynchronization": [[157, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform": [[157, 2, 1, "", "bandwidth"], [157, 2, 1, "", "bit_energy"], [157, 2, 1, "", "bits_per_symbol"], [157, 2, 1, "", "chirp_bandwidth"], [157, 2, 1, "", "chirp_duration"], [157, 2, 1, "", "chirps_in_frame"], [157, 3, 1, "", "demodulate"], [157, 2, 1, "", "frame_duration"], [157, 2, 1, "", "freq_difference"], [157, 2, 1, "", "guard_interval"], [157, 3, 1, "", "map"], [157, 3, 1, "", "modulate"], [157, 2, 1, "", "modulation_order"], [157, 2, 1, "", "num_data_chirps"], [157, 2, 1, "", "num_data_symbols"], [157, 2, 1, "", "num_pilot_chirps"], [157, 3, 1, "", "pick"], [157, 2, 1, "", "pilot_signal"], [157, 3, 1, "", "place"], [157, 2, 1, "", "power"], [157, 2, 1, "", "samples_in_chirp"], [157, 2, 1, "", "samples_per_frame"], [157, 2, 1, "", "sampling_rate"], [157, 2, 1, "", "symbol_duration"], [157, 2, 1, "", "symbol_energy"], [157, 2, 1, "", "symbol_precoding_support"], [157, 4, 1, "", "symbol_type"], [157, 3, 1, "", "unmap"]], "hermespy.modem.waveform_correlation_synchronization": [[158, 1, 1, "", "CorrelationSynchronization"]], "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization": [[158, 2, 1, "", "guard_ratio"], [158, 3, 1, "", "synchronize"], [158, 2, 1, "", "threshold"], [158, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm": [[160, 1, 1, "", "ElementType"], [160, 1, 1, "", "FrameElement"], [161, 1, 1, "", "FrameGuardSection"], [162, 1, 1, "", "FrameResource"], [163, 1, 1, "", "FrameSection"], [164, 1, 1, "", "FrameSymbolSection"], [165, 1, 1, "", "OFDMChannelEqualization"], [166, 1, 1, "", "OFDMCorrelationSynchronization"], [167, 1, 1, "", "OFDMLeastSquaresChannelEstimation"], [168, 1, 1, "", "OFDMSynchronization"], [169, 1, 1, "", "OFDMWaveform"], [170, 1, 1, "", "OFDMZeroForcingChannelEqualization"], [171, 1, 1, "", "PilotSection"], [162, 1, 1, "", "PrefixType"], [172, 1, 1, "", "SchmidlCoxPilotSection"], [173, 1, 1, "", "SchmidlCoxSynchronization"]], "hermespy.modem.waveform_ofdm.ElementType": [[160, 4, 1, "", "DATA"], [160, 4, 1, "", "NULL"], [160, 4, 1, "", "REFERENCE"]], "hermespy.modem.waveform_ofdm.FrameElement": [[160, 4, 1, "", "repetitions"], [160, 4, 1, "", "type"]], "hermespy.modem.waveform_ofdm.FrameGuardSection": [[161, 3, 1, "", "demodulate"], [161, 2, 1, "", "duration"], [161, 3, 1, "", "extract_channel"], [161, 3, 1, "", "modulate"], [161, 2, 1, "", "num_samples"]], "hermespy.modem.waveform_ofdm.FrameResource": [[162, 4, 1, "", "elements"], [162, 2, 1, "", "mask"], [162, 2, 1, "", "num_references"], [162, 2, 1, "", "num_subcarriers"], [162, 2, 1, "", "num_symbols"], [162, 2, 1, "", "prefix_ratio"], [162, 4, 1, "", "prefix_type"], [162, 2, 1, "", "repetitions"]], "hermespy.modem.waveform_ofdm.FrameSection": [[163, 3, 1, "", "demodulate"], [163, 3, 1, "", "extract_channel"], [163, 2, 1, "", "frame"], [163, 3, 1, "", "modulate"], [163, 2, 1, "", "num_references"], [163, 2, 1, "", "num_repetitions"], [163, 2, 1, "", "num_samples"], [163, 2, 1, "", "num_subcarriers"], [163, 2, 1, "", "num_symbols"], [163, 2, 1, "", "num_words"], [163, 3, 1, "", "pick_symbols"], [163, 3, 1, "", "place_symbols"], [163, 2, 1, "", "resource_mask"]], "hermespy.modem.waveform_ofdm.FrameSymbolSection": [[164, 3, 1, "", "demodulate"], [164, 3, 1, "", "extract_channel"], [164, 3, 1, "", "modulate"], [164, 2, 1, "", "num_references"], [164, 2, 1, "", "num_samples"], [164, 2, 1, "", "num_subcarriers"], [164, 2, 1, "", "num_symbols"], [164, 2, 1, "", "num_words"], [164, 4, 1, "", "pattern"], [164, 2, 1, "", "prefix_offset"], [164, 2, 1, "", "resource_mask"]], "hermespy.modem.waveform_ofdm.OFDMCorrelationSynchronization": [[166, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation": [[167, 3, 1, "", "estimate_channel"], [167, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.OFDMWaveform": [[169, 3, 1, "", "add_resource"], [169, 3, 1, "", "add_section"], [169, 2, 1, "", "bandwidth"], [169, 2, 1, "", "bit_energy"], [169, 4, 1, "", "dc_suppression"], [169, 3, 1, "", "demodulate"], [169, 3, 1, "", "map"], [169, 3, 1, "", "modulate"], [169, 2, 1, "", "modulation_order"], [169, 2, 1, "", "num_data_symbols"], [169, 2, 1, "", "num_subcarriers"], [169, 3, 1, "", "pick"], [169, 2, 1, "", "pilot_section"], [169, 2, 1, "", "pilot_signal"], [169, 3, 1, "", "place"], [169, 2, 1, "", "power"], [169, 2, 1, "", "references_per_frame"], [169, 2, 1, "", "resources"], [169, 2, 1, "", "samples_per_frame"], [169, 2, 1, "", "sampling_rate"], [169, 2, 1, "", "structure"], [169, 2, 1, "", "subcarrier_spacing"], [169, 2, 1, "", "symbol_duration"], [169, 2, 1, "", "symbol_energy"], [169, 2, 1, "", "symbols_per_frame"], [169, 3, 1, "", "unmap"], [169, 2, 1, "", "words_per_frame"]], "hermespy.modem.waveform_ofdm.OFDMZeroForcingChannelEqualization": [[170, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.PilotSection": [[171, 3, 1, "", "demodulate"], [171, 3, 1, "", "from_yaml"], [171, 3, 1, "", "modulate"], [171, 2, 1, "", "num_samples"], [171, 2, 1, "", "pilot_elements"], [171, 3, 1, "", "to_yaml"], [171, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.PrefixType": [[162, 4, 1, "", "CYCLIC"], [162, 4, 1, "", "NONE"], [162, 4, 1, "", "ZEROPAD"]], "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection": [[172, 3, 1, "", "demodulate"], [172, 2, 1, "", "num_samples"], [172, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization": [[173, 3, 1, "", "synchronize"], [173, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier": [[175, 1, 1, "", "FMCWWaveform"], [174, 1, 1, "", "FilteredSingleCarrierWaveform"], [176, 1, 1, "", "RaisedCosineWaveform"], [177, 1, 1, "", "RectangularWaveform"], [174, 1, 1, "", "RolledOffSingleCarrierWaveform"], [178, 1, 1, "", "RootRaisedCosineWaveform"]], "hermespy.modem.waveform_single_carrier.FMCWWaveform": [[175, 2, 1, "", "bandwidth"], [175, 2, 1, "", "chirp_duration"], [175, 2, 1, "", "chirp_slope"], [175, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform": [[174, 2, 1, "", "bit_energy"], [174, 3, 1, "", "demodulate"], [174, 2, 1, "", "guard_interval"], [174, 3, 1, "", "map"], [174, 3, 1, "", "modulate"], [174, 2, 1, "", "modulation_order"], [174, 2, 1, "", "num_data_symbols"], [174, 2, 1, "", "num_guard_samples"], [174, 2, 1, "", "num_postamble_symbols"], [174, 2, 1, "", "num_preamble_symbols"], [174, 3, 1, "", "pick"], [174, 2, 1, "", "pilot_rate"], [174, 2, 1, "", "pilot_signal"], [174, 3, 1, "", "place"], [174, 3, 1, "", "plot_filter"], [174, 3, 1, "", "plot_filter_correlation"], [174, 2, 1, "", "power"], [174, 2, 1, "", "samples_per_frame"], [174, 2, 1, "", "sampling_rate"], [174, 2, 1, "", "symbol_duration"], [174, 2, 1, "", "symbol_energy"], [174, 2, 1, "", "symbol_rate"], [174, 3, 1, "", "unmap"]], "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform": [[176, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.RectangularWaveform": [[177, 2, 1, "", "bandwidth"], [177, 2, 1, "", "relative_bandwidth"], [177, 4, 1, "", "yaml_tag"]], "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform": [[174, 2, 1, "", "bandwidth"], [174, 2, 1, "", "filter_length"], [174, 2, 1, "", "relative_bandwidth"], [174, 2, 1, "", "roll_off"]], "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform": [[178, 4, 1, "", "yaml_tag"]], "hermespy.precoding": [[180, 0, 0, "-", "precoding"], [181, 0, 0, "-", "stream_precoding"]], "hermespy.precoding.precoding": [[180, 1, 1, "", "Precoder"], [180, 1, 1, "", "PrecoderType"], [180, 1, 1, "", "Precoding"]], "hermespy.precoding.precoding.Precoder": [[180, 2, 1, "", "num_input_streams"], [180, 2, 1, "", "num_output_streams"], [180, 2, 1, "", "precoding"], [180, 2, 1, "", "rate"], [180, 2, 1, "", "required_num_input_streams"], [180, 2, 1, "", "required_num_output_streams"], [180, 4, 1, "", "yaml_tag"]], "hermespy.precoding.precoding.Precoding": [[180, 4, 1, "", "__modem"], [180, 4, 1, "", "__precoders"], [180, 3, 1, "", "from_yaml"], [180, 2, 1, "", "modem"], [180, 2, 1, "", "num_input_streams"], [180, 2, 1, "", "num_output_streams"], [180, 3, 1, "", "pop_precoder"], [180, 2, 1, "", "rate"], [180, 3, 1, "", "required_inputs"], [180, 3, 1, "", "required_outputs"], [180, 3, 1, "", "to_yaml"]], "hermespy.precoding.stream_precoding": [[181, 1, 1, "", "ReceiveStreamCoding"], [181, 1, 1, "", "ReceiveStreamDecoder"], [181, 1, 1, "", "TransmitStreamCoding"], [181, 1, 1, "", "TransmitStreamEncoder"]], "hermespy.precoding.stream_precoding.ReceiveStreamCoding": [[181, 3, 1, "", "decode"], [181, 4, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding.ReceiveStreamDecoder": [[181, 3, 1, "", "decode_streams"], [181, 2, 1, "", "num_input_streams"], [181, 2, 1, "", "num_output_streams"], [181, 2, 1, "", "num_receive_input_streams"], [181, 2, 1, "", "num_receive_output_streams"]], "hermespy.precoding.stream_precoding.TransmitStreamCoding": [[181, 3, 1, "", "encode"], [181, 4, 1, "", "yaml_tag"]], "hermespy.precoding.stream_precoding.TransmitStreamEncoder": [[181, 3, 1, "", "encode_streams"], [181, 2, 1, "", "num_input_streams"], [181, 2, 1, "", "num_output_streams"], [181, 2, 1, "", "num_transmit_input_streams"], [181, 2, 1, "", "num_transmit_output_streams"]], "hermespy.radar.cube": [[183, 1, 1, "", "RadarCube"]], "hermespy.radar.cube.RadarCube": [[183, 2, 1, "", "angle_bins"], [183, 2, 1, "", "data"], [183, 2, 1, "", "doppler_bins"], [183, 3, 1, "", "normalize_power"], [183, 3, 1, "", "plot_range"], [183, 3, 1, "", "plot_range_velocity"], [183, 2, 1, "", "range_bins"], [183, 2, 1, "", "velocity_bins"]], "hermespy.radar.detection": [[184, 1, 1, "", "MaxDetector"], [185, 1, 1, "", "PointDetection"], [186, 1, 1, "", "RadarDetector"], [187, 1, 1, "", "RadarPointCloud"], [188, 1, 1, "", "ThresholdDetector"]], "hermespy.radar.detection.MaxDetector": [[184, 3, 1, "", "detect"], [184, 4, 1, "", "yaml_tag"]], "hermespy.radar.detection.PointDetection": [[185, 3, 1, "", "FromSpherical"], [185, 2, 1, "", "position"], [185, 2, 1, "", "power"], [185, 2, 1, "", "velocity"]], "hermespy.radar.detection.RadarDetector": [[186, 3, 1, "", "detect"]], "hermespy.radar.detection.RadarPointCloud": [[187, 3, 1, "", "add_point"], [187, 2, 1, "", "max_range"], [187, 2, 1, "", "num_points"], [187, 2, 1, "", "points"], [187, 2, 1, "", "title"]], "hermespy.radar.detection.ThresholdDetector": [[188, 3, 1, "", "detect"], [188, 2, 1, "", "min_power"], [188, 2, 1, "", "normalize"], [188, 2, 1, "", "peak_detection"]], "hermespy.radar.evaluators": [[189, 1, 1, "", "DetectionProbArtifact"], [189, 1, 1, "", "DetectionProbEvaluator"], [189, 1, 1, "", "DetectionProbabilityEvaluation"], [190, 1, 1, "", "RadarEvaluator"], [191, 1, 1, "", "ReceiverOperatingCharacteristic"], [191, 1, 1, "", "RocArtifact"], [191, 1, 1, "", "RocEvaluation"], [191, 1, 1, "", "RocEvaluationResult"], [192, 1, 1, "", "RootMeanSquareArtifact"], [192, 1, 1, "", "RootMeanSquareError"], [192, 1, 1, "", "RootMeanSquareErrorResult"], [192, 1, 1, "", "RootMeanSquareEvaluation"]], "hermespy.radar.evaluators.DetectionProbEvaluator": [[189, 2, 1, "", "abbreviation"], [189, 3, 1, "", "evaluate"], [189, 3, 1, "", "generate_result"], [189, 2, 1, "", "radar"], [189, 2, 1, "", "title"]], "hermespy.radar.evaluators.DetectionProbabilityEvaluation": [[189, 3, 1, "", "artifact"]], "hermespy.radar.evaluators.RadarEvaluator": [[190, 3, 1, "", "generate_result"], [190, 2, 1, "", "radar_channel"], [190, 2, 1, "", "receiving_device"], [190, 2, 1, "", "receiving_radar"], [190, 2, 1, "", "transmitting_device"]], "hermespy.radar.evaluators.ReceiverOperatingCharacteristic": [[191, 3, 1, "", "From_HDF"], [191, 3, 1, "", "From_Scenarios"], [191, 2, 1, "", "abbreviation"], [191, 3, 1, "", "evaluate"], [191, 3, 1, "", "from_scenarios"], [191, 3, 1, "", "generate_result"], [191, 2, 1, "", "title"]], "hermespy.radar.evaluators.RocArtifact": [[191, 2, 1, "", "h0_value"], [191, 2, 1, "", "h1_value"], [191, 3, 1, "", "to_scalar"]], "hermespy.radar.evaluators.RocEvaluation": [[191, 3, 1, "", "artifact"], [191, 4, 1, "", "data_h0"], [191, 4, 1, "", "data_h1"]], "hermespy.radar.evaluators.RocEvaluationResult": [[191, 3, 1, "", "to_array"]], "hermespy.radar.evaluators.RootMeanSquareArtifact": [[192, 2, 1, "", "cummulation"], [192, 2, 1, "", "num_errors"], [192, 3, 1, "", "to_scalar"]], "hermespy.radar.evaluators.RootMeanSquareError": [[192, 2, 1, "", "abbreviation"], [192, 3, 1, "", "evaluate"], [192, 3, 1, "", "generate_result"], [192, 2, 1, "", "title"]], "hermespy.radar.evaluators.RootMeanSquareEvaluation": [[192, 3, 1, "", "artifact"]], "hermespy.radar.fmcw": [[193, 1, 1, "", "FMCW"]], "hermespy.radar.fmcw.FMCW": [[193, 2, 1, "", "adc_sampling_rate"], [193, 2, 1, "", "bandwidth"], [193, 2, 1, "", "chirp_duration"], [193, 2, 1, "", "energy"], [193, 3, 1, "", "estimate"], [193, 2, 1, "", "frame_duration"], [193, 2, 1, "", "max_range"], [193, 2, 1, "", "max_relative_doppler"], [193, 2, 1, "", "num_chirps"], [193, 3, 1, "", "ping"], [193, 2, 1, "", "power"], [193, 2, 1, "", "pulse_rep_interval"], [193, 2, 1, "", "range_resolution"], [193, 2, 1, "", "relative_doppler_bins"], [193, 2, 1, "", "relative_doppler_resolution"], [193, 2, 1, "", "sampling_rate"], [193, 2, 1, "", "slope"]], "hermespy.radar.radar": [[194, 1, 1, "", "Radar"], [195, 1, 1, "", "RadarReception"], [196, 1, 1, "", "RadarTransmission"], [197, 1, 1, "", "RadarWaveform"]], "hermespy.radar.radar.Radar": [[194, 3, 1, "", "_receive"], [194, 3, 1, "", "_transmit"], [194, 2, 1, "", "detector"], [194, 2, 1, "", "frame_duration"], [194, 2, 1, "", "max_range"], [194, 2, 1, "", "receive_beamformer"], [194, 2, 1, "", "sampling_rate"], [194, 2, 1, "", "transmit_beamformer"], [194, 2, 1, "", "velocity_resolution"], [194, 2, 1, "", "waveform"]], "hermespy.radar.radar.RadarReception": [[195, 2, 1, "", "cloud"], [195, 2, 1, "", "cube"]], "hermespy.radar.radar.RadarWaveform": [[197, 2, 1, "", "energy"], [197, 3, 1, "", "estimate"], [197, 2, 1, "", "frame_duration"], [197, 2, 1, "", "max_range"], [197, 2, 1, "", "max_relative_doppler"], [197, 3, 1, "", "ping"], [197, 2, 1, "", "power"], [197, 2, 1, "", "range_bins"], [197, 2, 1, "", "range_resolution"], [197, 2, 1, "", "relative_doppler_bins"], [197, 2, 1, "", "relative_doppler_resolution"], [197, 2, 1, "", "sampling_rate"]], "hermespy.simulation.antennas": [[204, 1, 1, "", "SimulatedAntenna"], [201, 1, 1, "", "SimulatedAntennaPort"], [202, 1, 1, "", "SimulatedAntennas"], [203, 1, 1, "", "SimulatedCustomArray"], [205, 1, 1, "", "SimulatedIdealAntenna"], [206, 1, 1, "", "SimulatedLinearAntenna"], [207, 1, 1, "", "SimulatedPatchAntenna"], [208, 1, 1, "", "SimulatedUniformArray"]], "hermespy.simulation.antennas.SimulatedAntenna": [[204, 3, 1, "", "receive"], [204, 3, 1, "", "transmit"], [204, 2, 1, "", "weight"]], "hermespy.simulation.antennas.SimulatedAntennaPort": [[201, 2, 1, "", "rf_chain"]], "hermespy.simulation.antennas.SimulatedAntennas": [[202, 3, 1, "", "analog_digital_conversion"], [202, 3, 1, "", "plot_pattern"], [202, 3, 1, "", "receive"], [202, 3, 1, "", "rf_chain_modified"], [202, 3, 1, "", "transmit"]], "hermespy.simulation.antennas.SimulatedCustomArray": [[203, 3, 1, "", "add_antenna"], [203, 3, 1, "", "add_port"], [203, 3, 1, "", "remove_port"]], "hermespy.simulation.antennas.SimulatedIdealAntenna": [[205, 4, 1, "", "yaml_tag"]], "hermespy.simulation.antennas.SimulatedPatchAntenna": [[207, 4, 1, "", "yaml_tag"]], "hermespy.simulation.coupling": [[209, 0, 0, "-", "coupling"], [210, 0, 0, "-", "impedance"], [211, 0, 0, "-", "perfect"]], "hermespy.simulation.coupling.coupling": [[209, 1, 1, "", "Coupling"]], "hermespy.simulation.coupling.coupling.Coupling": [[209, 2, 1, "", "device"], [209, 3, 1, "", "receive"], [209, 3, 1, "", "transmit"]], "hermespy.simulation.coupling.impedance": [[210, 1, 1, "", "ImpedanceCoupling"]], "hermespy.simulation.coupling.impedance.ImpedanceCoupling": [[210, 2, 1, "", "matching_impedance"], [210, 2, 1, "", "receive_correlation"], [210, 2, 1, "", "receive_impedance"], [210, 2, 1, "", "transmit_correlation"], [210, 2, 1, "", "transmit_impedance"]], "hermespy.simulation.coupling.perfect": [[211, 1, 1, "", "PerfectCoupling"]], "hermespy.simulation.isolation": [[213, 0, 0, "-", "impedance"], [212, 0, 0, "-", "isolation"], [214, 0, 0, "-", "perfect"], [215, 0, 0, "-", "specific"]], "hermespy.simulation.isolation.isolation": [[212, 1, 1, "", "Isolation"]], "hermespy.simulation.isolation.isolation.Isolation": [[212, 2, 1, "", "device"], [212, 3, 1, "", "leak"]], "hermespy.simulation.isolation.perfect": [[214, 1, 1, "", "PerfectIsolation"]], "hermespy.simulation.isolation.perfect.PerfectIsolation": [[214, 3, 1, "", "leak"]], "hermespy.simulation.isolation.specific": [[215, 1, 1, "", "SpecificIsolation"]], "hermespy.simulation.isolation.specific.SpecificIsolation": [[215, 2, 1, "", "isolation"]], "hermespy.simulation.noise": [[216, 0, 0, "-", "noise"]], "hermespy.simulation.noise.noise": [[216, 1, 1, "", "AWGN"], [216, 1, 1, "", "AWGNRealization"], [216, 1, 1, "", "Noise"], [216, 1, 1, "", "NoiseRealization"], [216, 1, 1, "", "NoiseRealizationType"]], "hermespy.simulation.noise.noise.AWGN": [[216, 3, 1, "", "realize"]], "hermespy.simulation.noise.noise.AWGNRealization": [[216, 3, 1, "", "add_to"]], "hermespy.simulation.noise.noise.Noise": [[216, 3, 1, "", "add"], [216, 2, 1, "", "power"], [216, 3, 1, "", "realize"]], "hermespy.simulation.noise.noise.NoiseRealization": [[216, 3, 1, "", "add_to"], [216, 2, 1, "", "power"]], "hermespy.simulation.rf_chain.analog_digital_converter": [[219, 1, 1, "", "AnalogDigitalConverter"], [220, 1, 1, "", "AutomaticGainControl"], [221, 1, 1, "", "Gain"], [222, 1, 1, "", "GainControlBase"], [220, 1, 1, "", "GainControlType"], [219, 1, 1, "", "QuantizerType"]], "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter": [[219, 3, 1, "", "convert"], [219, 4, 1, "", "gain"], [219, 2, 1, "", "num_quantization_bits"], [219, 2, 1, "", "num_quantization_levels"], [219, 3, 1, "", "plot_quantizer"], [219, 2, 1, "", "quantizer_type"], [219, 4, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl": [[220, 2, 1, "", "agc_type"], [220, 2, 1, "", "backoff"], [220, 3, 1, "", "estimate_gain"], [220, 4, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.analog_digital_converter.Gain": [[221, 3, 1, "", "estimate_gain"], [221, 2, 1, "", "gain"], [221, 4, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase": [[222, 3, 1, "", "adjust_signal"], [222, 3, 1, "", "estimate_gain"], [222, 2, 1, "", "rescale_quantization"], [222, 3, 1, "", "scale_quantized_signal"]], "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType": [[220, 4, 1, "", "MAX_AMPLITUDE"], [220, 4, 1, "", "NONE"], [220, 4, 1, "", "RMS_AMPLITUDE"]], "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType": [[219, 4, 1, "", "MID_RISER"], [219, 4, 1, "", "MID_TREAD"]], "hermespy.simulation.rf_chain": [[223, 0, 0, "-", "phase_noise"], [224, 0, 0, "-", "power_amplifier"], [217, 0, 0, "-", "rf_chain"]], "hermespy.simulation.rf_chain.phase_noise": [[223, 1, 1, "", "NoPhaseNoise"], [223, 1, 1, "", "OscillatorPhaseNoise"], [223, 1, 1, "", "PhaseNoise"]], "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise": [[223, 3, 1, "", "add_noise"], [223, 4, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise": [[223, 2, 1, "", "K0"], [223, 2, 1, "", "K2"], [223, 2, 1, "", "K3"], [223, 3, 1, "", "add_noise"]], "hermespy.simulation.rf_chain.phase_noise.PhaseNoise": [[223, 3, 1, "", "add_noise"]], "hermespy.simulation.rf_chain.power_amplifier": [[224, 1, 1, "", "ClippingPowerAmplifier"], [224, 1, 1, "", "CustomPowerAmplifier"], [224, 1, 1, "", "PowerAmplifier"], [224, 1, 1, "", "RappPowerAmplifier"], [224, 1, 1, "", "SalehPowerAmplifier"]], "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier": [[224, 3, 1, "", "model"], [224, 4, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier": [[224, 2, 1, "", "gain"], [224, 2, 1, "", "input"], [224, 3, 1, "", "model"], [224, 2, 1, "", "phase"]], "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier": [[224, 4, 1, "", "adjust_power"], [224, 3, 1, "", "model"], [224, 3, 1, "", "plot"], [224, 2, 1, "", "saturation_amplitude"], [224, 3, 1, "", "send"], [224, 2, 1, "", "title"]], "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier": [[224, 3, 1, "", "model"], [224, 2, 1, "", "smoothness_factor"], [224, 4, 1, "", "yaml_tag"]], "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier": [[224, 2, 1, "", "amplitude_alpha"], [224, 2, 1, "", "amplitude_beta"], [224, 3, 1, "", "model"], [224, 4, 1, "", "phase_alpha"], [224, 4, 1, "", "phase_beta"]], "hermespy.simulation.rf_chain.rf_chain": [[217, 1, 1, "", "RfChain"]], "hermespy.simulation.rf_chain.rf_chain.RfChain": [[217, 2, 1, "", "adc"], [217, 3, 1, "", "add_iq_imbalance"], [217, 2, 1, "", "amplitude_imbalance"], [217, 2, 1, "", "phase_noise"], [217, 2, 1, "", "phase_offset"], [217, 2, 1, "", "power_amplifier"], [217, 3, 1, "", "receive"], [217, 3, 1, "", "transmit"]], "hermespy.simulation.simulated_device": [[225, 1, 1, "", "SimulatedDevice"], [226, 1, 1, "", "SimulatedDeviceReception"], [227, 1, 1, "", "SimulatedDeviceTransmission"]], "hermespy.simulation.simulated_device.SimulatedDevice": [[225, 2, 1, "", "antennas"], [225, 2, 1, "", "attached"], [225, 2, 1, "", "carrier_frequency"], [225, 3, 1, "", "channel_realization"], [225, 2, 1, "", "coupling"], [225, 3, 1, "", "generate_output"], [225, 2, 1, "", "input"], [225, 2, 1, "", "isolation"], [225, 2, 1, "", "noise"], [225, 2, 1, "", "operator_separation"], [225, 2, 1, "", "output"], [225, 3, 1, "", "process_from_realization"], [225, 3, 1, "", "process_input"], [225, 2, 1, "", "realization"], [225, 3, 1, "", "realize_reception"], [225, 3, 1, "", "receive"], [225, 4, 1, "", "rf_chain"], [225, 2, 1, "", "sampling_rate"], [225, 2, 1, "", "scenario"], [225, 4, 1, "", "serialized_attribute"], [225, 2, 1, "", "snr"], [225, 2, 1, "", "snr_type"], [225, 3, 1, "", "transmit"], [225, 2, 1, "", "trigger_model"], [225, 2, 1, "", "velocity"]], "hermespy.simulation.simulated_device.SimulatedDeviceReception": [[226, 3, 1, "", "From_ProcessedSimulatedDeviceInput"]], "hermespy.simulation.simulated_device.SimulatedDeviceTransmission": [[227, 3, 1, "", "From_SimulatedDeviceOutput"]], "hermespy.simulation.simulation": [[228, 1, 1, "", "SimulatedDrop"], [229, 1, 1, "", "Simulation"], [230, 1, 1, "", "SimulationScenario"]], "hermespy.simulation.simulation.SimulatedDrop": [[228, 2, 1, "", "channel_realizations"]], "hermespy.simulation.simulation.Simulation": [[229, 2, 1, "", "console"], [229, 2, 1, "", "console_mode"], [229, 4, 1, "", "dump_results"], [229, 3, 1, "", "from_yaml"], [229, 2, 1, "", "num_samples"], [229, 4, 1, "", "plot_results"], [229, 3, 1, "", "run"], [229, 3, 1, "", "set_channel"], [229, 3, 1, "", "to_yaml"]], "hermespy.simulation.simulation.SimulationScenario": [[230, 3, 1, "", "add_device"], [230, 3, 1, "", "arriving_channels"], [230, 3, 1, "", "channel"], [230, 2, 1, "", "channels"], [230, 3, 1, "", "departing_channels"], [230, 3, 1, "", "new_device"], [230, 3, 1, "", "process_inputs"], [230, 3, 1, "", "propagate"], [230, 3, 1, "", "receive_devices"], [230, 3, 1, "", "set_channel"], [230, 2, 1, "", "snr"], [230, 2, 1, "", "snr_type"], [230, 3, 1, "", "transmit_devices"], [230, 4, 1, "", "yaml_tag"]], "hermespy.tools": [[232, 0, 0, "-", "math"], [233, 0, 0, "-", "resampling"], [234, 0, 0, "-", "tile"]], "hermespy.tools.math": [[232, 1, 1, "", "DbConversionType"], [232, 5, 1, "", "amplitude_path_loss"], [232, 5, 1, "", "db2lin"], [232, 5, 1, "", "lin2db"], [232, 5, 1, "", "marcum_q"], [232, 5, 1, "", "rms_value"]], "hermespy.tools.math.DbConversionType": [[232, 4, 1, "", "AMPLITUDE"], [232, 4, 1, "", "POWER"]], "hermespy.tools.resampling": [[233, 5, 1, "", "delay_resampling_matrix"]], "hermespy.tools.tile": [[234, 5, 1, "", "get_monitors"], [234, 5, 1, "", "screen_geometry"], [234, 5, 1, "", "set_figure_geometry"], [234, 5, 1, "", "tile_figures"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:property", "3": "py:method", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "method", "Python method"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"hermespi": [0, 247, 248], "api": 0, "beamform": [1, 2, 3, 4, 253, 254, 255], "capon": 3, "convent": 4, "entri": 5, "point": [5, 185, 187], "herm": 6, "command": 6, "line": [6, 27, 28, 29, 30], "interfac": [6, 54], "cli": 6, "argument": 6, "option": [6, 249], "channel": [7, 8, 9, 10, 11, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 48, 49, 50, 52, 53, 55, 57, 58, 60, 61, 67, 68, 73, 152, 153, 165, 167, 256], "model": [7, 8, 27, 48, 49, 50, 199, 212, 216, 217, 223, 224, 240], "propag": 9, "realiz": [10, 11, 30, 34, 36, 38, 41, 46, 47, 53, 58, 61, 63, 64, 66, 68], "direct": 11, "interpol": 12, "mode": 12, "indoor": [13, 14, 15, 16, 17], "factori": [13, 14, 15, 85], "base": [13, 29, 33, 60, 133, 222], "lo": [14, 16, 18, 21, 24], "nlo": [15, 17, 19, 22, 25], "offic": [16, 17], "rural": [18, 19, 20], "marocel": [18, 19, 20], "o2i": [20, 23, 26], "street": [21, 22, 23], "canyon": [21, 22, 23], "urban": [24, 25, 26], "macrocel": [24, 25, 26], "3gpp": 27, "cluster": [27, 28, 29, 30], "delai": [27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 111], "custom": [28, 44, 203], "normal": 31, "random": [35, 36, 91], "spatial": [37, 38, 147], "ideal": [39, 40, 41, 205], "multipath": [42, 45, 46], "fade": [42, 45, 46], "antenna": [43, 44, 72, 199, 200, 201, 202, 204, 205, 206, 207, 212], "correl": [43, 44, 158, 166], "path": [47, 64], "5g": [48, 243], "tdl": 48, "cost": 49, "259": 49, "exponenti": 50, "quadriga": [51, 52, 53, 54, 249], "radar": [55, 60, 61, 62, 63, 64, 65, 66, 183, 186, 187, 190, 194, 195, 196, 197], "fix": 56, "cross": [56, 62], "section": [56, 62, 161, 163, 164, 171], "multi": [57, 58], "target": [57, 58, 59, 65, 66, 67, 68, 69], "physic": [59, 115, 116, 117, 118], "interfer": [63, 241], "singl": [67, 68, 145, 174, 244], "virtual": 69, "core": 70, "anim": 71, "descript": 72, "configur": [72, 180], "state": 73, "inform": 73, "gener": 74, "definit": 74, "devic": [75, 76, 109, 115, 116, 120, 225, 226, 227], "output": 76, "oper": [77, 83, 89, 191, 245, 261], "result": 77, "receiv": [78, 139, 261], "recept": [79, 134, 135, 195, 226], "transmiss": [80, 136, 137, 196, 227], "transmitt": 81, "drop": [82, 228], "duplex": [83, 138], "execut": 84, "serial": 85, "logarithm": 86, "pymont": 87, "evalu": [88, 126, 127, 189, 190, 258], "extra": 89, "pipelin": [90, 99], "graph": 91, "wireless": 92, "scenario": [92, 110, 117, 118, 230], "signal": 93, "coordin": 94, "system": [94, 119], "transform": [94, 143], "visual": [95, 121], "error": [96, 129, 130, 131, 192], "correct": 96, "interleav": 98, "code": [99, 103, 146, 235, 259], "cyclic": 100, "redund": 100, "check": [100, 235], "repetit": 103, "scrambl": 106, "hardwar": [108, 114, 217, 236, 240, 246, 247], "loop": [108, 113, 114, 247], "audio": [109, 110, 236, 252], "calibr": [111, 112], "leakag": 112, "hardawar": 113, "plot": 114, "dummi": [116, 117], "usrp": [119, 120, 246], "jca": [122, 123, 242], "match": 123, "filter": 123, "commun": [124, 127, 142, 150, 262], "bit": [125, 129], "sourc": [125, 249], "rate": [129, 130, 131], "block": [130, 146], "frame": [131, 135, 137, 160], "throughput": 132, "modem": [133, 138, 139, 141], "simplex": 140, "link": 140, "transmit": 141, "precod": [142, 148, 149, 179, 180, 181, 260], "discret": 143, "fourier": 143, "maxim": 144, "ratio": 144, "combin": 144, "carrier": [145, 174, 244], "decod": 145, "space": 146, "time": 146, "multiplex": 147, "symbol": [148, 149, 150, 164], "waveform": [151, 169, 197, 262], "equal": [152, 165, 170], "estim": [153, 167], "synchron": [154, 166, 168, 173], "zero": [155, 170], "forc": [155, 170], "c": 157, "fsk": [157, 237], "ofdm": [159, 169, 241, 243, 244], "element": 160, "guard": 161, "resourc": 162, "least": 167, "squar": [167, 192], "pilot": [171, 172], "schmidl": [172, 173], "cox": [172, 173], "fmcw": [175, 193], "puls": [175, 176, 177, 178], "properti": [175, 176, 177, 178], "rais": [176, 178], "cosin": [176, 178], "rectangular": 177, "root": [178, 192], "modul": 179, "content": 179, "stream": 181, "sens": 182, "cube": 183, "max": 184, "detect": [185, 189], "detector": 186, "cloud": 187, "threshold": 188, "probabl": 189, "reiver": 191, "characterist": [191, 261], "mean": 192, "simul": [198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 225, 228, 229, 230, 247], "arrai": [199, 203, 208], "port": 201, "dipol": 204, "linear": 206, "patch": 207, "uniform": 208, "mutual": 209, "coupl": [209, 210, 211], "imped": [210, 213], "perfect": [211, 214], "isol": [212, 213, 214, 215], "specif": 215, "nois": [216, 223], "radio": 217, "frequenc": 217, "chain": 217, "analog": [218, 219], "digit": [218, 219], "convers": 218, "convert": 219, "automat": 220, "gain": [220, 221, 222], "control": [220, 222], "constant": 221, "phase": 223, "power": 224, "amplifi": 224, "tool": [231, 232], "math": 232, "resampl": 233, "routin": [233, 249], "tile": 234, "figur": 234, "For": 235, "develop": 235, "unit": 235, "test": 235, "type": 235, "style": 235, "document": 235, "bind": 236, "chirp": [237, 238], "lora": 237, "qam": 238, "yaml": 239, "exampl": 239, "separ": 245, "driver": 246, "get": 247, "start": 247, "architectur": 247, "instal": 249, "from": 249, "pypi": 249, "featur": 249, "licens": 250, "matlab": 251, "us": [252, 255], "equip": 252, "implement": [253, 254, 256, 258, 259, 260, 262], "record": 257, "dataset": 257, "fec": 259, "refer": 263, "tutori": 264}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinxcontrib.bibtex": 9, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 60}, "alltitles": {"HermesPy API": [[0, "hermespy-api"]], "Beamforming": [[1, "beamforming"]], "Beamformer": [[2, "beamformer"]], "Capon Beamformer": [[3, "capon-beamformer"]], "Conventional Beamformer": [[4, "conventional-beamformer"]], "Entry Points": [[5, "entry-points"]], "Hermes Command Line Interface": [[6, "hermes-command-line-interface"]], "CLI Argument Options": [[6, "id1"]], "Channel Modeling": [[7, "channel-modeling"]], "Channel Model": [[8, "channel-model"]], "Channel Propagation": [[9, "channel-propagation"]], "Channel Realization": [[10, "channel-realization"]], "Directive Channel Realization": [[11, "directive-channel-realization"]], "Interpolation Mode": [[12, "interpolation-mode"]], "Indoor Factory Base": [[13, "indoor-factory-base"]], "Indoor Factory LOS": [[14, "indoor-factory-los"]], "Indoor Factory NLOS": [[15, "indoor-factory-nlos"]], "Indoor Office LOS": [[16, "indoor-office-los"]], "Indoor Office NLOS": [[17, "indoor-office-nlos"]], "Rural Marocells LOS": [[18, "rural-marocells-los"]], "Rural Marocells NLOS": [[19, "rural-marocells-nlos"]], "Rural Marocells O2I": [[20, "rural-marocells-o2i"]], "Street Canyon LOS": [[21, "street-canyon-los"]], "Street Canyon NLOS": [[22, "street-canyon-nlos"]], "Street Canyon O2I": [[23, "street-canyon-o2i"]], "Urban Macrocells LOS": [[24, "urban-macrocells-los"]], "Urban Macrocells NLOS": [[25, "urban-macrocells-nlos"]], "Urban Macrocells O2I": [[26, "urban-macrocells-o2i"]], "3GPP Cluster Delay Line Models": [[27, "gpp-cluster-delay-line-models"]], "Custom Cluster Delay Line": [[28, "custom-cluster-delay-line"]], "Cluster Delay Line Base": [[29, "cluster-delay-line-base"]], "Cluster Delay Line Realization": [[30, "cluster-delay-line-realization"]], "Delay Normalization": [[31, "delay-normalization"]], "Delay Channels": [[32, "delay-channels"]], "Delay Channel Base": [[33, "delay-channel-base"]], "Delay Channel Realization": [[34, "delay-channel-realization"]], "Random Delay Channel": [[35, "random-delay-channel"]], "Random Delay Channel Realization": [[36, "random-delay-channel-realization"]], "Spatial Delay Channel": [[37, "spatial-delay-channel"]], "Spatial Delay Channel Realization": [[38, "spatial-delay-channel-realization"]], "Ideal Channel": [[39, "ideal-channel"], [40, "ideal-channel"]], "Ideal Channel Realization": [[41, "ideal-channel-realization"]], "Multipath Fading Channels": [[42, "multipath-fading-channels"]], "Antenna Correlation": [[43, "antenna-correlation"]], "Custom Antenna Correlation": [[44, "custom-antenna-correlation"]], "Multipath Fading Channel": [[45, "multipath-fading-channel"]], "Multipath Fading Realization": [[46, "multipath-fading-realization"]], "Path Realization": [[47, "path-realization"]], "5G TDL Channel Model": [[48, "g-tdl-channel-model"]], "Cost 259 Channel Model": [[49, "cost-259-channel-model"]], "Exponential Channel Model": [[50, "exponential-channel-model"]], "Quadriga": [[51, "quadriga"]], "Quadriga Channel": [[52, "quadriga-channel"]], "Quadriga Channel Realization": [[53, "quadriga-channel-realization"]], "Quadriga Interface": [[54, "quadriga-interface"]], "Radar Channels": [[55, "radar-channels"]], "Fixed Cross Section": [[56, "fixed-cross-section"]], "Multi Target Channel": [[57, "multi-target-channel"]], "Multi Target Channel Realization": [[58, "multi-target-channel-realization"]], "Physical Target": [[59, "physical-target"]], "Radar Channel Base": [[60, "radar-channel-base"]], "Radar Channel Realization": [[61, "radar-channel-realization"]], "Radar Cross Section": [[62, "radar-cross-section"]], "Radar Interference Realization": [[63, "radar-interference-realization"]], "Radar Path Realization": [[64, "radar-path-realization"]], "Radar Target": [[65, "radar-target"]], "Radar Target Realization": [[66, "radar-target-realization"]], "Single Target Channel": [[67, "single-target-channel"]], "Single Target Channel Realization": [[68, "single-target-channel-realization"]], "Virtual Target": [[69, "virtual-target"]], "Core": [[70, "core"]], "Animation": [[71, "animation"]], "Antenna Descriptions": [[72, "module-hermespy.core.antennas"]], "Antenna Configuration": [[72, "antenna-configuration"]], "Channel State Information": [[73, "channel-state-information"]], "General Definitions": [[74, "general-definitions"]], "Device": [[75, "device"]], "Device Output": [[76, "device-output"]], "Operation Result": [[77, "operation-result"]], "Receiver": [[78, "receiver"]], "Reception": [[79, "reception"], [134, "reception"]], "Transmission": [[80, "transmission"], [136, "transmission"]], "Transmitter": [[81, "transmitter"]], "Drop": [[82, "drop"]], "Duplex Operation": [[83, "duplex-operation"]], "Executable": [[84, "executable"]], "Serialization Factory": [[85, "serialization-factory"]], "Logarithmics": [[86, "logarithmics"]], "PyMonte": [[87, "pymonte"]], "Evaluator": [[88, "evaluator"]], "Extra Operators": [[89, "extra-operators"]], "Pipeline": [[90, "pipeline"]], "Random Graph": [[91, "random-graph"]], "Wireless Scenario": [[92, "wireless-scenario"]], "Signal": [[93, "signal"]], "Coordinate System Transformations": [[94, "coordinate-system-transformations"]], "Visualization": [[95, "visualization"]], "Error Correction": [[96, "error-correction"]], "Interleaving": [[98, "interleaving"]], "Coding Pipeline": [[99, "coding-pipeline"]], "Cyclic Redundancy Checks": [[100, "cyclic-redundancy-checks"]], "Repetition Coding": [[103, "repetition-coding"]], "Scrambling": [[106, "scrambling"]], "Hardware Loop": [[108, "hardware-loop"], [247, "hardware-loop"]], "Audio Device": [[109, "audio-device"]], "Audio Scenario": [[110, "audio-scenario"]], "Delay Calibration": [[111, "delay-calibration"]], "Leakage Calibration": [[112, "leakage-calibration"]], "Hardaware Loop": [[113, "hardaware-loop"]], "Hardware Loop Plot": [[114, "hardware-loop-plot"]], "Physical Device": [[115, "physical-device"]], "Physical Device Dummy": [[116, "physical-device-dummy"]], "Physical Scenario Dummy": [[117, "physical-scenario-dummy"]], "Physical Scenario": [[118, "physical-scenario"]], "USRP System": [[119, "usrp-system"]], "USRP Device": [[120, "usrp-device"]], "Visualizers": [[121, "visualizers"]], "JCAS": [[122, "jcas"], [242, "jcas"]], "Matched Filter JCAS": [[123, "matched-filter-jcas"]], "Communication": [[124, "communication"]], "Bit Sources": [[125, "bit-sources"]], "Evaluators": [[126, "evaluators"]], "Communication Evaluator": [[127, "communication-evaluator"]], "Bit Error Rate": [[129, "bit-error-rate"]], "Block Error Rate": [[130, "block-error-rate"]], "Frame Error Rate": [[131, "frame-error-rate"]], "Throughput": [[132, "throughput"]], "Base Modem": [[133, "base-modem"]], "Reception Frame": [[135, "reception-frame"]], "Transmission Frame": [[137, "transmission-frame"]], "Duplex Modem": [[138, "duplex-modem"]], "Receiving Modem": [[139, "receiving-modem"]], "Simplex Link": [[140, "simplex-link"]], "Transmitting Modem": [[141, "transmitting-modem"]], "Communication Precoding": [[142, "communication-precoding"]], "Discrete Fourier Transform": [[143, "discrete-fourier-transform"]], "Maximal Ratio Combining": [[144, "maximal-ratio-combining"]], "Single Carrier Decoding": [[145, "single-carrier-decoding"]], "Space-Time Block Codes": [[146, "space-time-block-codes"]], "Spatial Multiplexing": [[147, "spatial-multiplexing"]], "Symbol Precoder": [[148, "symbol-precoder"]], "Symbol Precoding": [[149, "symbol-precoding"]], "Communication Symbols": [[150, "communication-symbols"]], "Waveforms": [[151, "waveforms"]], "Channel Equalization": [[152, "channel-equalization"], [165, "channel-equalization"]], "Channel Estimation": [[153, "channel-estimation"]], "Synchronization": [[154, "synchronization"], [168, "synchronization"]], "Zero-Forcing": [[155, "zero-forcing"]], "C-FSK": [[157, "c-fsk"]], "Correlation": [[158, "correlation"]], "OFDM": [[159, "ofdm"]], "Frame Element": [[160, "frame-element"]], "Guard Section": [[161, "guard-section"]], "Resource": [[162, "resource"]], "Section": [[163, "section"]], "Symbol Section": [[164, "symbol-section"]], "Correlation Synchronization": [[166, "correlation-synchronization"]], "Least Squares Channel Estimation": [[167, "least-squares-channel-estimation"]], "OFDM Waveform": [[169, "ofdm-waveform"]], "Zero Forcing Equalization": [[170, "zero-forcing-equalization"]], "Pilot Section": [[171, "pilot-section"]], "Schmidl Cox Pilot": [[172, "schmidl-cox-pilot"]], "Schmidl Cox Synchronization": [[173, "schmidl-cox-synchronization"]], "Single Carrier": [[174, "single-carrier"]], "FMCW": [[175, "fmcw"], [193, "fmcw"]], "Pulse Properties": [[175, "id1"], [176, "id1"], [177, "id1"], [178, "id1"]], "Raised Cosine": [[176, "raised-cosine"]], "Rectangular": [[177, "rectangular"]], "Root Raised Cosine": [[178, "root-raised-cosine"]], "Precoding": [[179, "precoding"]], "Module Content:": [[179, null]], "Precoding Configuration": [[180, "precoding-configuration"]], "Stream Precoding": [[181, "stream-precoding"]], "Sensing": [[182, "sensing"]], "Radar Cube": [[183, "radar-cube"]], "Max": [[184, "max"]], "Point Detection": [[185, "point-detection"]], "Radar Detector": [[186, "radar-detector"]], "Radar Point Cloud": [[187, "radar-point-cloud"]], "Threshold": [[188, "threshold"]], "Detection Probability Evaluator": [[189, "detection-probability-evaluator"]], "Radar Evaluator": [[190, "radar-evaluator"]], "Reiver Operating Characteristic": [[191, "reiver-operating-characteristic"]], "Root Mean Square Error": [[192, "root-mean-square-error"]], "Radar": [[194, "radar"]], "Radar Reception": [[195, "radar-reception"]], "Radar Transmission": [[196, "radar-transmission"]], "Radar Waveform": [[197, "radar-waveform"]], "Simulation": [[198, "simulation"], [229, "simulation"]], "Antenna Arrays Modeling": [[199, "antenna-arrays-modeling"]], "Simulated Antenna": [[200, "simulated-antenna"]], "Simulated Antenna Port": [[201, "simulated-antenna-port"]], "Simulated Antennas": [[202, "simulated-antennas"]], "Simulated Custom Array": [[203, "simulated-custom-array"]], "Simulated Dipole Antenna": [[204, "simulated-dipole-antenna"]], "Simulated Ideal Antenna": [[205, "simulated-ideal-antenna"]], "Simulated Linear Antenna": [[206, "simulated-linear-antenna"]], "Simulated Patch Antenna": [[207, "simulated-patch-antenna"]], "Simulated Uniform Array": [[208, "simulated-uniform-array"]], "Mutual Coupling": [[209, "mutual-coupling"]], "Impedance Coupling": [[210, "impedance-coupling"]], "Perfect Coupling": [[211, "perfect-coupling"]], "Antenna Isolation Modeling": [[212, "antenna-isolation-modeling"]], "Impedance Isolation": [[213, "impedance-isolation"]], "Perfect Isolation": [[214, "perfect-isolation"]], "Specific Isolation": [[215, "specific-isolation"]], "Noise Modeling": [[216, "noise-modeling"]], "Hardware Radio Frequency Chain Modeling": [[217, "hardware-radio-frequency-chain-modeling"]], "Analog-to-Digital Conversion": [[218, "analog-to-digital-conversion"]], "Analog Digital Converter": [[219, "analog-digital-converter"]], "Automatic Gain Control": [[220, "automatic-gain-control"]], "Constant Gain": [[221, "constant-gain"]], "Gain Control Base": [[222, "gain-control-base"]], "Phase Noise Modeling": [[223, "phase-noise-modeling"]], "Power Amplifier Modeling": [[224, "power-amplifier-modeling"]], "Simulated Device": [[225, "simulated-device"]], "Device Reception": [[226, "device-reception"]], "Device Transmission": [[227, "device-transmission"]], "Simulated Drop": [[228, "simulated-drop"]], "Simulation Scenario": [[230, "simulation-scenario"]], "Tools": [[231, "tools"]], "Math Tools": [[232, "math-tools"]], "Resampling Routines": [[233, "resampling-routines"]], "Tile Figures": [[234, "tile-figures"]], "For Developers": [[235, "for-developers"]], "Unit Testing": [[235, "unit-testing"]], "Type Checking": [[235, "type-checking"]], "Coding Style": [[235, "coding-style"]], "Documentation": [[235, "documentation"]], "Audio Hardware Binding": [[236, "audio-hardware-binding"]], "Chirp FSK LORA": [[237, "chirp-fsk-lora"]], "Chirp QAM": [[238, "chirp-qam"]], "YAML Examples": [[239, "yaml-examples"]], "Hardware Modeling": [[240, "hardware-modeling"]], "OFDM Interference": [[241, "ofdm-interference"]], "OFDM 5G": [[243, "ofdm-5g"]], "OFDM Single Carrier": [[244, "ofdm-single-carrier"]], "Operator Separation": [[245, "operator-separation"]], "USRP Hardware Driver": [[246, "usrp-hardware-driver"]], "Getting Started": [[247, "getting-started"]], "HermesPy Architecture": [[247, "hermespy-architecture"]], "Simulations": [[247, "simulations"]], "HermesPy": [[248, "hermespy"]], "Installation": [[249, "installation"]], "Install from PyPi": [[249, "install-from-pypi"]], "Optional Features": [[249, "id2"]], "Install from Source": [[249, "install-from-source"]], "Install Quadriga": [[249, "install-quadriga"]], "Installation Routine": [[249, "installation-routine"]], "License": [[250, "license"]], "Matlab": [[251, "matlab"]], "Using Audio Equipment": [[252, "Using-Audio-Equipment"]], "Implementing Beamformers": [[253, "Implementing-Beamformers"], [254, "Implementing-Beamformers"]], "Using Beamformers": [[255, "Using-Beamformers"]], "Implementing Channels": [[256, "Implementing-Channels"]], "Recording Datasets": [[257, "Recording-Datasets"]], "Implementing Evaluators": [[258, "Implementing-Evaluators"]], "Implementing FEC codings": [[259, "Implementing-FEC-codings"]], "Implementing Precodings": [[260, "Implementing-Precodings"]], "Receiver Operating Characteristics": [[261, "Receiver-Operating-Characteristics"]], "Implementing Communication Waveforms": [[262, "Implementing-Communication-Waveforms"]], "References": [[263, "references"]], "Tutorials": [[264, "tutorials"]]}, "indexentries": {"beamfocus (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.BeamFocus"]], "beamformerbase (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.BeamformerBase"]], "coordinatefocus (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.CoordinateFocus"]], "devicefocus (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.DeviceFocus"]], "ft (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.FT"]], "ot (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.OT"]], "receivebeamformer (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer"]], "sphericalfocus (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.SphericalFocus"]], "transmitbeamformer (class in hermespy.beamforming.beamformer)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer"]], "_decode() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer._decode"]], "angles (sphericalfocus property)": [[2, "hermespy.beamforming.beamformer.SphericalFocus.angles"]], "beamformer (beamfocus property)": [[2, "hermespy.beamforming.beamformer.BeamFocus.beamformer"]], "coordinates (coordinatefocus property)": [[2, "hermespy.beamforming.beamformer.CoordinateFocus.coordinates"]], "copy() (beamfocus method)": [[2, "hermespy.beamforming.beamformer.BeamFocus.copy"]], "copy() (coordinatefocus method)": [[2, "hermespy.beamforming.beamformer.CoordinateFocus.copy"]], "copy() (devicefocus method)": [[2, "hermespy.beamforming.beamformer.DeviceFocus.copy"]], "copy() (sphericalfocus method)": [[2, "hermespy.beamforming.beamformer.SphericalFocus.copy"]], "decode_streams() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.decode_streams"]], "device (devicefocus property)": [[2, "hermespy.beamforming.beamformer.DeviceFocus.device"]], "encode_streams() (transmitbeamformer method)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.encode_streams"]], "hermespy.beamforming.beamformer": [[2, "module-hermespy.beamforming.beamformer"]], "module": [[2, "module-hermespy.beamforming.beamformer"], [3, "module-hermespy.beamforming.capon"], [4, "module-hermespy.beamforming.conventional"], [6, "module-hermespy.bin.hermes"], [71, "module-hermespy.core.animation"], [72, "module-hermespy.core.antennas"], [74, "module-hermespy.core.definitions"], [83, "module-hermespy.core.duplex"], [84, "module-hermespy.core.executable"], [85, "module-hermespy.core.factory"], [86, "module-hermespy.core.logarithmic"], [87, "module-hermespy.core.monte_carlo"], [89, "module-hermespy.core.operators"], [90, "module-hermespy.core.pipeline"], [91, "module-hermespy.core.random_node"], [92, "module-hermespy.core.scenario"], [94, "module-hermespy.core.transformation"], [95, "module-hermespy.core.visualize"], [98, "module-hermespy.fec.block_interleaver"], [99, "module-hermespy.fec.coding"], [100, "module-hermespy.fec.cyclic_redundancy_check"], [103, "module-hermespy.fec.repetition_encoder"], [106, "module-hermespy.fec.scrambler"], [111, "module-hermespy.hardware_loop.calibration.delay"], [112, "module-hermespy.hardware_loop.calibration.leakage"], [121, "module-hermespy.hardware_loop.visualizers"], [123, "module-hermespy.jcas.matched_filtering"], [150, "module-hermespy.modem.symbols"], [180, "module-hermespy.precoding.precoding"], [181, "module-hermespy.precoding.stream_precoding"], [209, "module-hermespy.simulation.coupling.coupling"], [210, "module-hermespy.simulation.coupling.impedance"], [211, "module-hermespy.simulation.coupling.perfect"], [212, "module-hermespy.simulation.isolation.isolation"], [213, "module-hermespy.simulation.isolation.impedance"], [214, "module-hermespy.simulation.isolation.perfect"], [215, "module-hermespy.simulation.isolation.specific"], [216, "module-hermespy.simulation.noise.noise"], [217, "module-hermespy.simulation.rf_chain.rf_chain"], [223, "module-hermespy.simulation.rf_chain.phase_noise"], [224, "module-hermespy.simulation.rf_chain.power_amplifier"], [232, "module-hermespy.tools.math"], [233, "module-hermespy.tools.resampling"], [234, "module-hermespy.tools.tile"]], "num_receive_focus_points (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_focus_points"]], "num_receive_input_streams (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_input_streams"]], "num_receive_output_streams (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.num_receive_output_streams"]], "num_transmit_focus_points (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_focus_points"]], "num_transmit_input_streams (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_input_streams"]], "num_transmit_output_streams (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.num_transmit_output_streams"]], "operator (beamformerbase property)": [[2, "hermespy.beamforming.beamformer.BeamformerBase.operator"]], "precoding (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.precoding"]], "precoding (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.precoding"]], "probe() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe"]], "probe_focus_points (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.probe_focus_points"]], "receive() (receivebeamformer method)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.receive"]], "receive_focus (receivebeamformer property)": [[2, "hermespy.beamforming.beamformer.ReceiveBeamformer.receive_focus"]], "reference (coordinatefocus property)": [[2, "hermespy.beamforming.beamformer.CoordinateFocus.reference"]], "spherical_angles (beamfocus property)": [[2, "hermespy.beamforming.beamformer.BeamFocus.spherical_angles"]], "spherical_angles (coordinatefocus property)": [[2, "hermespy.beamforming.beamformer.CoordinateFocus.spherical_angles"]], "spherical_angles (devicefocus property)": [[2, "hermespy.beamforming.beamformer.DeviceFocus.spherical_angles"]], "spherical_angles (sphericalfocus property)": [[2, "hermespy.beamforming.beamformer.SphericalFocus.spherical_angles"]], "transmit() (transmitbeamformer method)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.transmit"]], "transmit_focus (transmitbeamformer property)": [[2, "hermespy.beamforming.beamformer.TransmitBeamformer.transmit_focus"]], "caponbeamformer (class in hermespy.beamforming.capon)": [[3, "hermespy.beamforming.capon.CaponBeamformer"]], "_decode() (caponbeamformer method)": [[3, "hermespy.beamforming.capon.CaponBeamformer._decode"]], "hermespy.beamforming.capon": [[3, "module-hermespy.beamforming.capon"]], "loading (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.loading"]], "num_receive_focus_points (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_focus_points"]], "num_receive_input_streams (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_input_streams"]], "num_receive_output_streams (caponbeamformer property)": [[3, "hermespy.beamforming.capon.CaponBeamformer.num_receive_output_streams"]], "conventionalbeamformer (class in hermespy.beamforming.conventional)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer"]], "_decode() (conventionalbeamformer method)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer._decode"]], "_encode() (conventionalbeamformer method)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer._encode"]], "hermespy.beamforming.conventional": [[4, "module-hermespy.beamforming.conventional"]], "num_receive_focus_points (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_focus_points"]], "num_receive_input_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_input_streams"]], "num_receive_output_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_receive_output_streams"]], "num_transmit_focus_points (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_focus_points"]], "num_transmit_input_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_input_streams"]], "num_transmit_output_streams (conventionalbeamformer property)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.num_transmit_output_streams"]], "yaml_tag (conventionalbeamformer attribute)": [[4, "hermespy.beamforming.conventional.ConventionalBeamformer.yaml_tag"]], "hermes_simulation() (in module hermespy.bin.hermes)": [[6, "hermespy.bin.hermes.hermes_simulation"]], "hermespy.bin.hermes": [[6, "module-hermespy.bin.hermes"]], "channel (class in hermespy.channel.channel)": [[8, "hermespy.channel.channel.Channel"]], "_realize() (channel method)": [[8, "hermespy.channel.channel.Channel._realize"]], "alpha_device (channel property)": [[8, "hermespy.channel.channel.Channel.alpha_device"]], "beta_device (channel property)": [[8, "hermespy.channel.channel.Channel.beta_device"]], "gain (channel property)": [[8, "hermespy.channel.channel.Channel.gain"]], "interpolation_mode (channel property)": [[8, "hermespy.channel.channel.Channel.interpolation_mode"]], "propagate() (channel method)": [[8, "hermespy.channel.channel.Channel.propagate"]], "realization (channel property)": [[8, "hermespy.channel.channel.Channel.realization"]], "realize() (channel method)": [[8, "hermespy.channel.channel.Channel.realize"]], "recall_realization() (channel method)": [[8, "hermespy.channel.channel.Channel.recall_realization"]], "scenario (channel property)": [[8, "hermespy.channel.channel.Channel.scenario"]], "channelpropagation (class in hermespy.channel.channel)": [[9, "hermespy.channel.channel.ChannelPropagation"]], "interpolation_mode (channelpropagation property)": [[9, "hermespy.channel.channel.ChannelPropagation.interpolation_mode"]], "realization (channelpropagation property)": [[9, "hermespy.channel.channel.ChannelPropagation.realization"]], "receiver (channelpropagation property)": [[9, "hermespy.channel.channel.ChannelPropagation.receiver"]], "signal (channelpropagation property)": [[9, "hermespy.channel.channel.ChannelPropagation.signal"]], "state() (channelpropagation method)": [[9, "hermespy.channel.channel.ChannelPropagation.state"]], "transmitter (channelpropagation property)": [[9, "hermespy.channel.channel.ChannelPropagation.transmitter"]], "crt (class in hermespy.channel.channel)": [[10, "hermespy.channel.channel.CRT"]], "channelrealization (class in hermespy.channel.channel)": [[10, "hermespy.channel.channel.ChannelRealization"]], "from_hdf() (channelrealization class method)": [[10, "hermespy.channel.channel.ChannelRealization.From_HDF"]], "_propagate() (channelrealization method)": [[10, "hermespy.channel.channel.ChannelRealization._propagate"]], "alpha_device (channelrealization property)": [[10, "hermespy.channel.channel.ChannelRealization.alpha_device"]], "beta_device (channelrealization property)": [[10, "hermespy.channel.channel.ChannelRealization.beta_device"]], "gain (channelrealization property)": [[10, "hermespy.channel.channel.ChannelRealization.gain"]], "interpolation_mode (channelrealization property)": [[10, "hermespy.channel.channel.ChannelRealization.interpolation_mode"]], "propagate() (channelrealization method)": [[10, "hermespy.channel.channel.ChannelRealization.propagate"]], "state() (channelrealization method)": [[10, "hermespy.channel.channel.ChannelRealization.state"]], "to_hdf() (channelrealization method)": [[10, "hermespy.channel.channel.ChannelRealization.to_HDF"]], "directivechannelrealization (class in hermespy.channel.channel)": [[11, "hermespy.channel.channel.DirectiveChannelRealization"]], "propagate() (directivechannelrealization method)": [[11, "hermespy.channel.channel.DirectiveChannelRealization.propagate"]], "realization (directivechannelrealization property)": [[11, "hermespy.channel.channel.DirectiveChannelRealization.realization"]], "receiver (directivechannelrealization property)": [[11, "hermespy.channel.channel.DirectiveChannelRealization.receiver"]], "state() (directivechannelrealization method)": [[11, "hermespy.channel.channel.DirectiveChannelRealization.state"]], "transmitter (directivechannelrealization property)": [[11, "hermespy.channel.channel.DirectiveChannelRealization.transmitter"]], "interpolationmode (class in hermespy.channel.channel)": [[12, "hermespy.channel.channel.InterpolationMode"]], "nearest (interpolationmode attribute)": [[12, "hermespy.channel.channel.InterpolationMode.NEAREST"]], "sinc (interpolationmode attribute)": [[12, "hermespy.channel.channel.InterpolationMode.SINC"]], "indoorfactorybase (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[13, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase"]], "surface (indoorfactorybase property)": [[13, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase.surface"]], "volume (indoorfactorybase property)": [[13, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryBase.volume"]], "indoorfactorylineofsight (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight"]], "aoa_spread_mean (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.cross_polarization_power_std"]], "delay_scaling (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_scaling"]], "delay_spread_mean (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.delay_spread_std"]], "line_of_sight (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.line_of_sight"]], "num_clusters (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.num_clusters"]], "num_rays (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.num_rays"]], "rice_factor_mean (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.rice_factor_std"]], "zoa_spread_mean (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zoa_spread_std"]], "zod_offset (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_offset"]], "zod_spread_mean (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorfactorylineofsight property)": [[14, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryLineOfSight.zod_spread_std"]], "indoorfactorynolineofsight (class in hermespy.channel.cluster_delay_line_indoor_factory)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight"]], "aoa_spread_mean (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_scaling"]], "delay_spread_mean (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.delay_spread_std"]], "line_of_sight (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.line_of_sight"]], "num_clusters (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.num_clusters"]], "num_rays (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.num_rays"]], "rice_factor_mean (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.rice_factor_std"]], "zoa_spread_mean (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zoa_spread_std"]], "zod_offset (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_offset"]], "zod_spread_mean (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorfactorynolineofsight property)": [[15, "hermespy.channel.cluster_delay_line_indoor_factory.IndoorFactoryNoLineOfSight.zod_spread_std"]], "indoorofficelineofsight (class in hermespy.channel.cluster_delay_line_indoor_office)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight"]], "aoa_spread_mean (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.cross_polarization_power_std"]], "delay_scaling (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_scaling"]], "delay_spread_mean (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.delay_spread_std"]], "line_of_sight (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.line_of_sight"]], "num_clusters (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.num_clusters"]], "num_rays (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.num_rays"]], "rice_factor_mean (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.rice_factor_std"]], "yaml_tag (indoorofficelineofsight attribute)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.yaml_tag"]], "zoa_spread_mean (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zoa_spread_std"]], "zod_offset (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_offset"]], "zod_spread_mean (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorofficelineofsight property)": [[16, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeLineOfSight.zod_spread_std"]], "indoorofficenolineofsight (class in hermespy.channel.cluster_delay_line_indoor_office)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight"]], "aoa_spread_mean (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aod_spread_mean"]], "aod_spread_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_scaling"]], "delay_spread_mean (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_spread_mean"]], "delay_spread_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.delay_spread_std"]], "line_of_sight (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.line_of_sight"]], "num_clusters (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.num_clusters"]], "num_rays (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.num_rays"]], "rice_factor_mean (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.rice_factor_mean"]], "rice_factor_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.rice_factor_std"]], "yaml_tag (indoorofficenolineofsight attribute)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.yaml_tag"]], "zoa_spread_mean (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zoa_spread_std"]], "zod_offset (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_offset"]], "zod_spread_mean (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_spread_mean"]], "zod_spread_std (indoorofficenolineofsight property)": [[17, "hermespy.channel.cluster_delay_line_indoor_office.IndoorOfficeNoLineOfSight.zod_spread_std"]], "ruralmacrocellslineofsight (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight"]], "aoa_spread_mean (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aoa_spread_mean"]], "aoa_spread_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aoa_spread_std"]], "aod_spread_mean (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aod_spread_mean"]], "aod_spread_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.aod_spread_std"]], "cluster_aoa_spread (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.cross_polarization_power_std"]], "delay_scaling (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_scaling"]], "delay_spread_mean (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_spread_mean"]], "delay_spread_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.delay_spread_std"]], "line_of_sight (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.line_of_sight"]], "num_clusters (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.num_clusters"]], "num_rays (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.num_rays"]], "rice_factor_mean (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.rice_factor_mean"]], "rice_factor_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.rice_factor_std"]], "yaml_tag (ruralmacrocellslineofsight attribute)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.yaml_tag"]], "zoa_spread_mean (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zoa_spread_mean"]], "zoa_spread_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zoa_spread_std"]], "zod_offset (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_offset"]], "zod_spread_mean (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_spread_mean"]], "zod_spread_std (ruralmacrocellslineofsight property)": [[18, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsLineOfSight.zod_spread_std"]], "ruralmacrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight"]], "aoa_spread_mean (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aod_spread_mean"]], "aod_spread_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_scaling"]], "delay_spread_mean (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_spread_mean"]], "delay_spread_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.delay_spread_std"]], "line_of_sight (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.line_of_sight"]], "num_clusters (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.num_clusters"]], "num_rays (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.num_rays"]], "rice_factor_mean (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.rice_factor_mean"]], "rice_factor_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.rice_factor_std"]], "yaml_tag (ruralmacrocellsnolineofsight attribute)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.yaml_tag"]], "zoa_spread_mean (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zoa_spread_std"]], "zod_offset (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_offset"]], "zod_spread_mean (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_spread_mean"]], "zod_spread_std (ruralmacrocellsnolineofsight property)": [[19, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsNoLineOfSight.zod_spread_std"]], "ruralmacrocellsoutsidetoinside (class in hermespy.channel.cluster_delay_line_rural_macrocells)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside"]], "aoa_spread_mean (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aoa_spread_std"]], "aod_spread_mean (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aod_spread_mean"]], "aod_spread_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.cross_polarization_power_std"]], "delay_scaling (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_scaling"]], "delay_spread_mean (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_spread_mean"]], "delay_spread_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.delay_spread_std"]], "line_of_sight (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.line_of_sight"]], "num_clusters (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.num_clusters"]], "num_rays (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.num_rays"]], "rice_factor_mean (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.rice_factor_mean"]], "rice_factor_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.rice_factor_std"]], "yaml_tag (ruralmacrocellsoutsidetoinside attribute)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.yaml_tag"]], "zoa_spread_mean (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zoa_spread_std"]], "zod_offset (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_offset"]], "zod_spread_mean (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_spread_mean"]], "zod_spread_std (ruralmacrocellsoutsidetoinside property)": [[20, "hermespy.channel.cluster_delay_line_rural_macrocells.RuralMacrocellsOutsideToInside.zod_spread_std"]], "streetcanyonlineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight"]], "aoa_spread_mean (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aoa_spread_mean"]], "aoa_spread_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aoa_spread_std"]], "aod_spread_mean (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aod_spread_mean"]], "aod_spread_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.aod_spread_std"]], "cluster_aoa_spread (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.cross_polarization_power_std"]], "delay_scaling (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_scaling"]], "delay_spread_mean (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_spread_mean"]], "delay_spread_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.delay_spread_std"]], "line_of_sight (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.line_of_sight"]], "num_clusters (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.num_clusters"]], "num_rays (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.num_rays"]], "rice_factor_mean (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.rice_factor_mean"]], "rice_factor_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.rice_factor_std"]], "yaml_tag (streetcanyonlineofsight attribute)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.yaml_tag"]], "zoa_spread_mean (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zoa_spread_mean"]], "zoa_spread_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zoa_spread_std"]], "zod_offset (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_offset"]], "zod_spread_mean (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_spread_mean"]], "zod_spread_std (streetcanyonlineofsight property)": [[21, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonLineOfSight.zod_spread_std"]], "streetcanyonnolineofsight (class in hermespy.channel.cluster_delay_line_street_canyon)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight"]], "aoa_spread_mean (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aod_spread_mean"]], "aod_spread_std (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_scaling"]], "delay_spread_mean (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_spread_mean"]], "delay_spread_std (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.delay_spread_std"]], "line_of_sight (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.line_of_sight"]], "num_clusters (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.num_clusters"]], "num_rays (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.num_rays"]], "rice_factor_mean (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.rice_factor_mean"]], "rice_factor_std (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.rice_factor_std"]], "yaml_tag (streetcanyonnolineofsight attribute)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.yaml_tag"]], "zoa_spread_mean (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (streetcanyonnolineofsight property)": [[22, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonNoLineOfSight.zoa_spread_std"]], "streetcanyonoutsidetoinside (class in hermespy.channel.cluster_delay_line_street_canyon)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside"]], "aoa_spread_mean (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aoa_spread_std"]], "aod_spread_mean (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aod_spread_mean"]], "aod_spread_std (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.cross_polarization_power_std"]], "delay_scaling (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_scaling"]], "delay_spread_mean (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_spread_mean"]], "delay_spread_std (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.delay_spread_std"]], "line_of_sight (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.line_of_sight"]], "num_clusters (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.num_clusters"]], "num_rays (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.num_rays"]], "rice_factor_mean (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.rice_factor_mean"]], "rice_factor_std (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.rice_factor_std"]], "yaml_tag (streetcanyonoutsidetoinside attribute)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.yaml_tag"]], "zoa_spread_mean (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (streetcanyonoutsidetoinside property)": [[23, "hermespy.channel.cluster_delay_line_street_canyon.StreetCanyonOutsideToInside.zoa_spread_std"]], "urbanmacrocellslineofsight (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight"]], "aoa_spread_mean (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aoa_spread_mean"]], "aoa_spread_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aoa_spread_std"]], "aod_spread_mean (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aod_spread_mean"]], "aod_spread_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.aod_spread_std"]], "cluster_aoa_spread (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.cross_polarization_power_std"]], "delay_scaling (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_scaling"]], "delay_spread_mean (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_spread_mean"]], "delay_spread_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.delay_spread_std"]], "line_of_sight (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.line_of_sight"]], "num_clusters (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.num_clusters"]], "num_rays (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.num_rays"]], "rice_factor_mean (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.rice_factor_mean"]], "rice_factor_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.rice_factor_std"]], "yaml_tag (urbanmacrocellslineofsight attribute)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.yaml_tag"]], "zoa_spread_mean (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zoa_spread_mean"]], "zoa_spread_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zoa_spread_std"]], "zod_offset (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_offset"]], "zod_spread_mean (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_spread_mean"]], "zod_spread_std (urbanmacrocellslineofsight property)": [[24, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsLineOfSight.zod_spread_std"]], "urbanmacrocellsnolineofsight (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight"]], "aoa_spread_mean (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aoa_spread_mean"]], "aoa_spread_std (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aoa_spread_std"]], "aod_spread_mean (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aod_spread_mean"]], "aod_spread_std (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.aod_spread_std"]], "cluster_aoa_spread (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_aoa_spread"]], "cluster_aod_spread (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_aod_spread"]], "cluster_delay_spread (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_delay_spread"]], "cluster_shadowing_std (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_shadowing_std"]], "cluster_zoa_spread (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cluster_zoa_spread"]], "cross_polarization_power_mean (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cross_polarization_power_mean"]], "cross_polarization_power_std (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.cross_polarization_power_std"]], "delay_scaling (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_scaling"]], "delay_spread_mean (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_spread_mean"]], "delay_spread_std (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.delay_spread_std"]], "line_of_sight (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.line_of_sight"]], "num_clusters (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.num_clusters"]], "num_rays (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.num_rays"]], "rice_factor_mean (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.rice_factor_mean"]], "rice_factor_std (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.rice_factor_std"]], "yaml_tag (urbanmacrocellsnolineofsight attribute)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.yaml_tag"]], "zoa_spread_mean (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.zoa_spread_mean"]], "zoa_spread_std (urbanmacrocellsnolineofsight property)": [[25, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsNoLineOfSight.zoa_spread_std"]], "urbanmacrocellsoutsidetoinside (class in hermespy.channel.cluster_delay_line_urban_macrocells)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside"]], "aoa_spread_mean (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aoa_spread_mean"]], "aoa_spread_std (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aoa_spread_std"]], "aod_spread_mean (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aod_spread_mean"]], "aod_spread_std (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.aod_spread_std"]], "cluster_aoa_spread (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_aoa_spread"]], "cluster_aod_spread (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_aod_spread"]], "cluster_delay_spread (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_delay_spread"]], "cluster_shadowing_std (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_shadowing_std"]], "cluster_zoa_spread (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cluster_zoa_spread"]], "cross_polarization_power_mean (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cross_polarization_power_mean"]], "cross_polarization_power_std (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.cross_polarization_power_std"]], "delay_scaling (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_scaling"]], "delay_spread_mean (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_spread_mean"]], "delay_spread_std (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.delay_spread_std"]], "line_of_sight (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.line_of_sight"]], "num_clusters (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.num_clusters"]], "num_rays (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.num_rays"]], "rice_factor_mean (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.rice_factor_mean"]], "rice_factor_std (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.rice_factor_std"]], "yaml_tag (urbanmacrocellsoutsidetoinside attribute)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.yaml_tag"]], "zoa_spread_mean (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.zoa_spread_mean"]], "zoa_spread_std (urbanmacrocellsoutsidetoinside property)": [[26, "hermespy.channel.cluster_delay_line_urban_macrocells.UrbanMacrocellsOutsideToInside.zoa_spread_std"]], "clusterdelayline (class in hermespy.channel.cluster_delay_lines)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine"]], "aoa_spread_mean (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aoa_spread_mean"]], "aoa_spread_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aoa_spread_std"]], "aod_spread_mean (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aod_spread_mean"]], "aod_spread_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.aod_spread_std"]], "cluster_aoa_spread (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_aoa_spread"]], "cluster_aod_spread (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_aod_spread"]], "cluster_delay_spread (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_delay_spread"]], "cluster_shadowing_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_shadowing_std"]], "cluster_zoa_spread (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cluster_zoa_spread"]], "cross_polarization_power_mean (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cross_polarization_power_mean"]], "cross_polarization_power_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.cross_polarization_power_std"]], "delay_scaling (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_scaling"]], "delay_spread_mean (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_spread_mean"]], "delay_spread_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.delay_spread_std"]], "line_of_sight (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.line_of_sight"]], "num_clusters (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.num_clusters"]], "num_rays (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.num_rays"]], "rice_factor_mean (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.rice_factor_mean"]], "rice_factor_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.rice_factor_std"]], "zoa_spread_mean (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zoa_spread_mean"]], "zoa_spread_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zoa_spread_std"]], "zod_offset (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_offset"]], "zod_spread_mean (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_spread_mean"]], "zod_spread_std (clusterdelayline property)": [[28, "hermespy.channel.cluster_delay_lines.ClusterDelayLine.zod_spread_std"]], "clusterdelaylinebase (class in hermespy.channel.cluster_delay_lines)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase"]], "aoa_spread_mean (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aoa_spread_mean"]], "aoa_spread_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aoa_spread_std"]], "aod_spread_mean (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aod_spread_mean"]], "aod_spread_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.aod_spread_std"]], "cluster_aoa_spread (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_aoa_spread"]], "cluster_aod_spread (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_aod_spread"]], "cluster_delay_spread (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_delay_spread"]], "cluster_shadowing_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_shadowing_std"]], "cluster_zoa_spread (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cluster_zoa_spread"]], "cross_polarization_power_mean (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cross_polarization_power_mean"]], "cross_polarization_power_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.cross_polarization_power_std"]], "delay_normalization (clusterdelaylinebase attribute)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_normalization"]], "delay_scaling (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_scaling"]], "delay_spread_mean (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_spread_mean"]], "delay_spread_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.delay_spread_std"]], "line_of_sight (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.line_of_sight"]], "num_clusters (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.num_clusters"]], "num_rays (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.num_rays"]], "recall_realization() (clusterdelaylinebase method)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.recall_realization"]], "rice_factor_mean (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.rice_factor_mean"]], "rice_factor_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.rice_factor_std"]], "subcluster_indices (clusterdelaylinebase attribute)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.subcluster_indices"]], "zoa_spread_mean (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zoa_spread_mean"]], "zoa_spread_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zoa_spread_std"]], "zod_offset (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_offset"]], "zod_spread_mean (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_spread_mean"]], "zod_spread_std (clusterdelaylinebase property)": [[29, "hermespy.channel.cluster_delay_lines.ClusterDelayLineBase.zod_spread_std"]], "clusterdelaylinerealization (class in hermespy.channel.cluster_delay_lines)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization"]], "from_hdf() (clusterdelaylinerealization class method)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.From_HDF"]], "azimuth_arrival_spread (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.azimuth_arrival_spread"]], "azimuth_departure_spread (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.azimuth_departure_spread"]], "azimuth_of_arrival (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.azimuth_of_arrival"]], "azimuth_of_departure (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.azimuth_of_departure"]], "cluster_delay_spread (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.cluster_delay_spread"]], "cluster_delays (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.cluster_delays"]], "cluster_powers (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.cluster_powers"]], "line_of_sight (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.line_of_sight"]], "max_delay (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.max_delay"]], "num_clusters (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.num_clusters"]], "num_rays (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.num_rays"]], "plot_angles() (clusterdelaylinerealization method)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.plot_angles"]], "plot_power_delay() (clusterdelaylinerealization method)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.plot_power_delay"]], "plot_rays() (clusterdelaylinerealization method)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.plot_rays"]], "polarization_transformations (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.polarization_transformations"]], "rice_factor (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.rice_factor"]], "state() (clusterdelaylinerealization method)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.state"]], "to_hdf() (clusterdelaylinerealization method)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.to_HDF"]], "zenith_arrival_spread (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.zenith_arrival_spread"]], "zenith_departure_spread (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.zenith_departure_spread"]], "zenith_of_arrival (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.zenith_of_arrival"]], "zenith_of_departure (clusterdelaylinerealization property)": [[30, "hermespy.channel.cluster_delay_lines.ClusterDelayLineRealization.zenith_of_departure"]], "delaynormalization (class in hermespy.channel.cluster_delay_lines)": [[31, "hermespy.channel.cluster_delay_lines.DelayNormalization"]], "none (delaynormalization attribute)": [[31, "hermespy.channel.cluster_delay_lines.DelayNormalization.NONE"]], "tof (delaynormalization attribute)": [[31, "hermespy.channel.cluster_delay_lines.DelayNormalization.TOF"]], "zero (delaynormalization attribute)": [[31, "hermespy.channel.cluster_delay_lines.DelayNormalization.ZERO"]], "delaychannelbase (class in hermespy.channel.delay)": [[33, "hermespy.channel.delay.DelayChannelBase"]], "model_propagation_loss (delaychannelbase property)": [[33, "hermespy.channel.delay.DelayChannelBase.model_propagation_loss"]], "dcrt (class in hermespy.channel.delay)": [[34, "hermespy.channel.delay.DCRT"]], "delaychannelrealization (class in hermespy.channel.delay)": [[34, "hermespy.channel.delay.DelayChannelRealization"]], "delay (delaychannelrealization property)": [[34, "hermespy.channel.delay.DelayChannelRealization.delay"]], "model_propagation_loss (delaychannelrealization property)": [[34, "hermespy.channel.delay.DelayChannelRealization.model_propagation_loss"]], "state() (delaychannelrealization method)": [[34, "hermespy.channel.delay.DelayChannelRealization.state"]], "to_hdf() (delaychannelrealization method)": [[34, "hermespy.channel.delay.DelayChannelRealization.to_HDF"]], "randomdelaychannel (class in hermespy.channel.delay)": [[35, "hermespy.channel.delay.RandomDelayChannel"]], "delay (randomdelaychannel property)": [[35, "hermespy.channel.delay.RandomDelayChannel.delay"]], "recall_realization() (randomdelaychannel method)": [[35, "hermespy.channel.delay.RandomDelayChannel.recall_realization"]], "from_hdf() (randomdelaychannelrealization class method)": [[36, "hermespy.channel.delay.RandomDelayChannelRealization.From_HDF"]], "randomdelaychannelrealization (class in hermespy.channel.delay)": [[36, "hermespy.channel.delay.RandomDelayChannelRealization"]], "spatialdelaychannel (class in hermespy.channel.delay)": [[37, "hermespy.channel.delay.SpatialDelayChannel"]], "recall_realization() (spatialdelaychannel method)": [[37, "hermespy.channel.delay.SpatialDelayChannel.recall_realization"]], "from_hdf() (spatialdelaychannelrealization class method)": [[38, "hermespy.channel.delay.SpatialDelayChannelRealization.From_HDF"]], "spatialdelaychannelrealization (class in hermespy.channel.delay)": [[38, "hermespy.channel.delay.SpatialDelayChannelRealization"]], "idealchannel (class in hermespy.channel.ideal)": [[40, "hermespy.channel.ideal.IdealChannel"]], "recall_realization() (idealchannel method)": [[40, "hermespy.channel.ideal.IdealChannel.recall_realization"]], "idealchannelrealization (class in hermespy.channel.ideal)": [[41, "hermespy.channel.ideal.IdealChannelRealization"]], "state() (idealchannelrealization method)": [[41, "hermespy.channel.ideal.IdealChannelRealization.state"]], "antennacorrelation (class in hermespy.channel.multipath_fading_channel)": [[43, "hermespy.channel.multipath_fading_channel.AntennaCorrelation"]], "channel (antennacorrelation property)": [[43, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.channel"]], "covariance (antennacorrelation property)": [[43, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.covariance"]], "device (antennacorrelation property)": [[43, "hermespy.channel.multipath_fading_channel.AntennaCorrelation.device"]], "customantennacorrelation (class in hermespy.channel.multipath_fading_channel)": [[44, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation"]], "covariance (customantennacorrelation property)": [[44, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation.covariance"]], "yaml_tag (customantennacorrelation attribute)": [[44, "hermespy.channel.multipath_fading_channel.CustomAntennaCorrelation.yaml_tag"]], "multipathfadingchannel (class in hermespy.channel.multipath_fading_channel)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel"]], "alpha_correlation (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.alpha_correlation"]], "alpha_device (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.alpha_device"]], "beta_correlation (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.beta_correlation"]], "beta_device (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.beta_device"]], "delays (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.delays"]], "doppler_frequency (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.doppler_frequency"]], "los_angle (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_angle"]], "los_doppler_frequency (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.los_doppler_frequency"]], "max_delay (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.max_delay"]], "num_resolvable_paths (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.num_resolvable_paths"]], "num_sinusoids (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.num_sinusoids"]], "power_profile (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.power_profile"]], "recall_realization() (multipathfadingchannel method)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.recall_realization"]], "rice_factors (multipathfadingchannel property)": [[45, "hermespy.channel.multipath_fading_channel.MultipathFadingChannel.rice_factors"]], "from_hdf() (multipathfadingrealization class method)": [[46, "hermespy.channel.multipath_fading_channel.MultipathFadingRealization.From_HDF"]], "multipathfadingrealization (class in hermespy.channel.multipath_fading_channel)": [[46, "hermespy.channel.multipath_fading_channel.MultipathFadingRealization"]], "realize() (multipathfadingrealization class method)": [[46, "hermespy.channel.multipath_fading_channel.MultipathFadingRealization.Realize"]], "path_realizations (multipathfadingrealization property)": [[46, "hermespy.channel.multipath_fading_channel.MultipathFadingRealization.path_realizations"]], "state() (multipathfadingrealization method)": [[46, "hermespy.channel.multipath_fading_channel.MultipathFadingRealization.state"]], "to_hdf() (multipathfadingrealization method)": [[46, "hermespy.channel.multipath_fading_channel.MultipathFadingRealization.to_HDF"]], "pathrealization (class in hermespy.channel.multipath_fading_channel)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization"]], "realize() (pathrealization class method)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.Realize"]], "delay (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.delay"]], "los_angle (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.los_angle"]], "los_doppler (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.los_doppler"]], "los_gain (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.los_gain"]], "los_phase (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.los_phase"]], "nlos_angles (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.nlos_angles"]], "nlos_doppler (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.nlos_doppler"]], "nlos_gain (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.nlos_gain"]], "nlos_phases (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.nlos_phases"]], "power (pathrealization property)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.power"]], "propagate() (pathrealization method)": [[47, "hermespy.channel.multipath_fading_channel.PathRealization.propagate"]], "a (tdltype attribute)": [[48, "hermespy.channel.multipath_fading_templates.TDLType.A"]], "b (tdltype attribute)": [[48, "hermespy.channel.multipath_fading_templates.TDLType.B"]], "c (tdltype attribute)": [[48, "hermespy.channel.multipath_fading_templates.TDLType.C"]], "d (tdltype attribute)": [[48, "hermespy.channel.multipath_fading_templates.TDLType.D"]], "e (tdltype attribute)": [[48, "hermespy.channel.multipath_fading_templates.TDLType.E"]], "multipathfading5gtdl (class in hermespy.channel.multipath_fading_templates)": [[48, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL"]], "tdltype (class in hermespy.channel.multipath_fading_templates)": [[48, "hermespy.channel.multipath_fading_templates.TDLType"]], "model_type (multipathfading5gtdl property)": [[48, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.model_type"]], "rms_delay (multipathfading5gtdl property)": [[48, "hermespy.channel.multipath_fading_templates.MultipathFading5GTDL.rms_delay"]], "cost259type (class in hermespy.channel.multipath_fading_templates)": [[49, "hermespy.channel.multipath_fading_templates.Cost259Type"]], "hilly (cost259type attribute)": [[49, "hermespy.channel.multipath_fading_templates.Cost259Type.HILLY"]], "multipathfadingcost259 (class in hermespy.channel.multipath_fading_templates)": [[49, "hermespy.channel.multipath_fading_templates.MultipathFadingCost259"]], "rural (cost259type attribute)": [[49, "hermespy.channel.multipath_fading_templates.Cost259Type.RURAL"]], "urban (cost259type attribute)": [[49, "hermespy.channel.multipath_fading_templates.Cost259Type.URBAN"]], "model_type (multipathfadingcost259 property)": [[49, "hermespy.channel.multipath_fading_templates.MultipathFadingCost259.model_type"]], "to_yaml() (multipathfadingcost259 class method)": [[49, "hermespy.channel.multipath_fading_templates.MultipathFadingCost259.to_yaml"]], "multipathfadingexponential (class in hermespy.channel.multipath_fading_templates)": [[50, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential"]], "rms_delay (multipathfadingexponential property)": [[50, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.rms_delay"]], "tap_interval (multipathfadingexponential property)": [[50, "hermespy.channel.multipath_fading_templates.MultipathFadingExponential.tap_interval"]], "quadrigachannel (class in hermespy.channel.quadriga_channel)": [[52, "hermespy.channel.quadriga_channel.QuadrigaChannel"]], "recall_realization() (quadrigachannel method)": [[52, "hermespy.channel.quadriga_channel.QuadrigaChannel.recall_realization"]], "from_hdf() (quadrigachannelrealization class method)": [[53, "hermespy.channel.quadriga_channel.QuadrigaChannelRealization.From_HDF"]], "quadrigachannelrealization (class in hermespy.channel.quadriga_channel)": [[53, "hermespy.channel.quadriga_channel.QuadrigaChannelRealization"]], "path_delays (quadrigachannelrealization property)": [[53, "hermespy.channel.quadriga_channel.QuadrigaChannelRealization.path_delays"]], "path_gains (quadrigachannelrealization property)": [[53, "hermespy.channel.quadriga_channel.QuadrigaChannelRealization.path_gains"]], "state() (quadrigachannelrealization method)": [[53, "hermespy.channel.quadriga_channel.QuadrigaChannelRealization.state"]], "to_hdf() (quadrigachannelrealization method)": [[53, "hermespy.channel.quadriga_channel.QuadrigaChannelRealization.to_HDF"]], "globalinstance() (quadrigainterface class method)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.GlobalInstance"]], "globalinstanceexists() (quadrigainterface class method)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.GlobalInstanceExists"]], "quadrigainterface (class in hermespy.channel.quadriga_interface)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface"]], "setglobalinstance() (quadrigainterface class method)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.SetGlobalInstance"]], "antenna_kind (quadrigainterface property)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.antenna_kind"]], "channel_registered() (quadrigainterface method)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.channel_registered"]], "channels (quadrigainterface property)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.channels"]], "get_impulse_response() (quadrigainterface method)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.get_impulse_response"]], "path_launch_script (quadrigainterface property)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.path_launch_script"]], "path_quadriga_src (quadrigainterface property)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.path_quadriga_src"]], "register_channel() (quadrigainterface method)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.register_channel"]], "scenario_label (quadrigainterface property)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.scenario_label"]], "unregister_channel() (quadrigainterface method)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.unregister_channel"]], "yaml_tag (quadrigainterface attribute)": [[54, "hermespy.channel.quadriga_interface.QuadrigaInterface.yaml_tag"]], "fixedcrosssection (class in hermespy.channel.radar_channel)": [[56, "hermespy.channel.radar_channel.FixedCrossSection"]], "cross_section (fixedcrosssection property)": [[56, "hermespy.channel.radar_channel.FixedCrossSection.cross_section"]], "get_cross_section() (fixedcrosssection method)": [[56, "hermespy.channel.radar_channel.FixedCrossSection.get_cross_section"]], "multitargetradarchannel (class in hermespy.channel.radar_channel)": [[57, "hermespy.channel.radar_channel.MultiTargetRadarChannel"]], "add_target() (multitargetradarchannel method)": [[57, "hermespy.channel.radar_channel.MultiTargetRadarChannel.add_target"]], "interfernce (multitargetradarchannel attribute)": [[57, "hermespy.channel.radar_channel.MultiTargetRadarChannel.interfernce"]], "make_target() (multitargetradarchannel method)": [[57, "hermespy.channel.radar_channel.MultiTargetRadarChannel.make_target"]], "recall_realization() (multitargetradarchannel method)": [[57, "hermespy.channel.radar_channel.MultiTargetRadarChannel.recall_realization"]], "targets (multitargetradarchannel property)": [[57, "hermespy.channel.radar_channel.MultiTargetRadarChannel.targets"]], "from_hdf() (multitargetradarchannelrealization class method)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.From_HDF"]], "multitargetradarchannelrealization (class in hermespy.channel.radar_channel)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization"]], "ground_truth() (multitargetradarchannelrealization method)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.ground_truth"]], "interference_realization (multitargetradarchannelrealization property)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.interference_realization"]], "null_hypothesis() (multitargetradarchannelrealization method)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.null_hypothesis"]], "num_targets (multitargetradarchannelrealization property)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.num_targets"]], "target_realizations (multitargetradarchannelrealization property)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.target_realizations"]], "to_hdf() (multitargetradarchannelrealization method)": [[58, "hermespy.channel.radar_channel.MultiTargetRadarChannelRealization.to_HDF"]], "physicalradartarget (class in hermespy.channel.radar_channel)": [[59, "hermespy.channel.radar_channel.PhysicalRadarTarget"]], "cross_section (physicalradartarget property)": [[59, "hermespy.channel.radar_channel.PhysicalRadarTarget.cross_section"]], "get_backwards_transformation() (physicalradartarget method)": [[59, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_backwards_transformation"]], "get_cross_section() (physicalradartarget method)": [[59, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_cross_section"]], "get_forwards_transformation() (physicalradartarget method)": [[59, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_forwards_transformation"]], "get_velocity() (physicalradartarget method)": [[59, "hermespy.channel.radar_channel.PhysicalRadarTarget.get_velocity"]], "moveable (physicalradartarget property)": [[59, "hermespy.channel.radar_channel.PhysicalRadarTarget.moveable"]], "radarchannelbase (class in hermespy.channel.radar_channel)": [[60, "hermespy.channel.radar_channel.RadarChannelBase"]], "attenuate (radarchannelbase property)": [[60, "hermespy.channel.radar_channel.RadarChannelBase.attenuate"]], "null_hypothesis() (radarchannelbase method)": [[60, "hermespy.channel.radar_channel.RadarChannelBase.null_hypothesis"]], "rcrt (class in hermespy.channel.radar_channel)": [[61, "hermespy.channel.radar_channel.RCRT"]], "radarchannelrealization (class in hermespy.channel.radar_channel)": [[61, "hermespy.channel.radar_channel.RadarChannelRealization"]], "ground_truth() (radarchannelrealization method)": [[61, "hermespy.channel.radar_channel.RadarChannelRealization.ground_truth"]], "null_hypothesis() (radarchannelrealization method)": [[61, "hermespy.channel.radar_channel.RadarChannelRealization.null_hypothesis"]], "state() (radarchannelrealization method)": [[61, "hermespy.channel.radar_channel.RadarChannelRealization.state"]], "radarcrosssectionmodel (class in hermespy.channel.radar_channel)": [[62, "hermespy.channel.radar_channel.RadarCrossSectionModel"]], "get_cross_section() (radarcrosssectionmodel method)": [[62, "hermespy.channel.radar_channel.RadarCrossSectionModel.get_cross_section"]], "radarinterferencerealization (class in hermespy.channel.radar_channel)": [[63, "hermespy.channel.radar_channel.RadarInterferenceRealization"]], "propagation_delay() (radarinterferencerealization method)": [[63, "hermespy.channel.radar_channel.RadarInterferenceRealization.propagation_delay"]], "propagation_response() (radarinterferencerealization method)": [[63, "hermespy.channel.radar_channel.RadarInterferenceRealization.propagation_response"]], "relative_velocity() (radarinterferencerealization method)": [[63, "hermespy.channel.radar_channel.RadarInterferenceRealization.relative_velocity"]], "radarpathrealization (class in hermespy.channel.radar_channel)": [[64, "hermespy.channel.radar_channel.RadarPathRealization"]], "add_propagation() (radarpathrealization method)": [[64, "hermespy.channel.radar_channel.RadarPathRealization.add_propagation"]], "add_state() (radarpathrealization method)": [[64, "hermespy.channel.radar_channel.RadarPathRealization.add_state"]], "attenuate (radarpathrealization property)": [[64, "hermespy.channel.radar_channel.RadarPathRealization.attenuate"]], "propagation_delay() (radarpathrealization method)": [[64, "hermespy.channel.radar_channel.RadarPathRealization.propagation_delay"]], "propagation_response() (radarpathrealization method)": [[64, "hermespy.channel.radar_channel.RadarPathRealization.propagation_response"]], "relative_velocity() (radarpathrealization method)": [[64, "hermespy.channel.radar_channel.RadarPathRealization.relative_velocity"]], "static (radarpathrealization property)": [[64, "hermespy.channel.radar_channel.RadarPathRealization.static"]], "radartarget (class in hermespy.channel.radar_channel)": [[65, "hermespy.channel.radar_channel.RadarTarget"]], "get_backwards_transformation() (radartarget method)": [[65, "hermespy.channel.radar_channel.RadarTarget.get_backwards_transformation"]], "get_cross_section() (radartarget method)": [[65, "hermespy.channel.radar_channel.RadarTarget.get_cross_section"]], "get_forwards_transformation() (radartarget method)": [[65, "hermespy.channel.radar_channel.RadarTarget.get_forwards_transformation"]], "get_velocity() (radartarget method)": [[65, "hermespy.channel.radar_channel.RadarTarget.get_velocity"]], "static (radartarget property)": [[65, "hermespy.channel.radar_channel.RadarTarget.static"]], "radartargetrealization (class in hermespy.channel.radar_channel)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization"]], "cross_section (radartargetrealization property)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization.cross_section"]], "position (radartargetrealization property)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization.position"]], "propagation_delay() (radartargetrealization method)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization.propagation_delay"]], "propagation_response() (radartargetrealization method)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization.propagation_response"]], "reflection_phase (radartargetrealization property)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization.reflection_phase"]], "relative_velocity() (radartargetrealization method)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization.relative_velocity"]], "velocity (radartargetrealization property)": [[66, "hermespy.channel.radar_channel.RadarTargetRealization.velocity"]], "singletargetradarchannel (class in hermespy.channel.radar_channel)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel"]], "radar_cross_section (singletargetradarchannel property)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel.radar_cross_section"]], "recall_realization() (singletargetradarchannel method)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel.recall_realization"]], "target_azimuth (singletargetradarchannel property)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_azimuth"]], "target_exists (singletargetradarchannel property)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_exists"]], "target_range (singletargetradarchannel property)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_range"]], "target_velocity (singletargetradarchannel property)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_velocity"]], "target_zenith (singletargetradarchannel property)": [[67, "hermespy.channel.radar_channel.SingleTargetRadarChannel.target_zenith"]], "from_hdf() (singletargetradarchannelrealization class method)": [[68, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.From_HDF"]], "singletargetradarchannelrealization (class in hermespy.channel.radar_channel)": [[68, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization"]], "ground_truth() (singletargetradarchannelrealization method)": [[68, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.ground_truth"]], "null_hypothesis() (singletargetradarchannelrealization method)": [[68, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.null_hypothesis"]], "target_realization (singletargetradarchannelrealization property)": [[68, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.target_realization"]], "to_hdf() (singletargetradarchannelrealization method)": [[68, "hermespy.channel.radar_channel.SingleTargetRadarChannelRealization.to_HDF"]], "virtualradartarget (class in hermespy.channel.radar_channel)": [[69, "hermespy.channel.radar_channel.VirtualRadarTarget"]], "cross_section (virtualradartarget property)": [[69, "hermespy.channel.radar_channel.VirtualRadarTarget.cross_section"]], "get_backwards_transformation() (virtualradartarget method)": [[69, "hermespy.channel.radar_channel.VirtualRadarTarget.get_backwards_transformation"]], "get_cross_section() (virtualradartarget method)": [[69, "hermespy.channel.radar_channel.VirtualRadarTarget.get_cross_section"]], "get_forwards_transformation() (virtualradartarget method)": [[69, "hermespy.channel.radar_channel.VirtualRadarTarget.get_forwards_transformation"]], "get_velocity() (virtualradartarget method)": [[69, "hermespy.channel.radar_channel.VirtualRadarTarget.get_velocity"]], "velocity (virtualradartarget property)": [[69, "hermespy.channel.radar_channel.VirtualRadarTarget.velocity"]], "moveable (class in hermespy.core.animation)": [[71, "hermespy.core.animation.Moveable"]], "hermespy.core.animation": [[71, "module-hermespy.core.animation"]], "velocity (moveable property)": [[71, "hermespy.core.animation.Moveable.velocity"]], "aat (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.AAT"]], "apt (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.APT"]], "at (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.AT"]], "antenna (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.Antenna"]], "antennaarray (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.AntennaArray"]], "antennamode (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.AntennaMode"]], "antennaport (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.AntennaPort"]], "customantennaarray (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.CustomAntennaArray"]], "duplex (antennamode attribute)": [[72, "hermespy.core.antennas.AntennaMode.DUPLEX"]], "dipole (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.Dipole"]], "idealantenna (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.IdealAntenna"]], "linearantenna (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.LinearAntenna"]], "patchantenna (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.PatchAntenna"]], "rx (antennamode attribute)": [[72, "hermespy.core.antennas.AntennaMode.RX"]], "tx (antennamode attribute)": [[72, "hermespy.core.antennas.AntennaMode.TX"]], "uniformarray (class in hermespy.core.antennas)": [[72, "hermespy.core.antennas.UniformArray"]], "add_antenna() (antennaport method)": [[72, "hermespy.core.antennas.AntennaPort.add_antenna"]], "add_antenna() (customantennaarray method)": [[72, "hermespy.core.antennas.CustomAntennaArray.add_antenna"]], "add_port() (customantennaarray method)": [[72, "hermespy.core.antennas.CustomAntennaArray.add_port"]], "antennas (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.antennas"]], "antennas (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.antennas"]], "antennas (uniformarray property)": [[72, "hermespy.core.antennas.UniformArray.antennas"]], "antennas_updated() (antennaport method)": [[72, "hermespy.core.antennas.AntennaPort.antennas_updated"]], "array (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.array"]], "base_port (uniformarray property)": [[72, "hermespy.core.antennas.UniformArray.base_port"]], "cartesian_array_response() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.cartesian_array_response"]], "cartesian_phase_response() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.cartesian_phase_response"]], "characteristics() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.characteristics"]], "count_antennas() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.count_antennas"]], "count_receive_antennas() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.count_receive_antennas"]], "count_transmit_antennas() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.count_transmit_antennas"]], "dimensions (uniformarray property)": [[72, "hermespy.core.antennas.UniformArray.dimensions"]], "global_characteristics() (antenna method)": [[72, "hermespy.core.antennas.Antenna.global_characteristics"]], "hermespy.core.antennas": [[72, "module-hermespy.core.antennas"]], "horizontal_phase_response() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.horizontal_phase_response"]], "local_characteristics() (antenna method)": [[72, "hermespy.core.antennas.Antenna.local_characteristics"]], "local_characteristics() (dipole method)": [[72, "hermespy.core.antennas.Dipole.local_characteristics"]], "local_characteristics() (idealantenna method)": [[72, "hermespy.core.antennas.IdealAntenna.local_characteristics"]], "local_characteristics() (linearantenna method)": [[72, "hermespy.core.antennas.LinearAntenna.local_characteristics"]], "local_characteristics() (patchantenna method)": [[72, "hermespy.core.antennas.PatchAntenna.local_characteristics"]], "mode (antenna property)": [[72, "hermespy.core.antennas.Antenna.mode"]], "num_antennas (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.num_antennas"]], "num_antennas (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.num_antennas"]], "num_antennas (uniformarray property)": [[72, "hermespy.core.antennas.UniformArray.num_antennas"]], "num_ports (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.num_ports"]], "num_receive_antennas (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.num_receive_antennas"]], "num_receive_antennas (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.num_receive_antennas"]], "num_receive_ports (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.num_receive_ports"]], "num_transmit_antennas (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.num_transmit_antennas"]], "num_transmit_antennas (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.num_transmit_antennas"]], "num_transmit_ports (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.num_transmit_ports"]], "plot_gain() (antenna method)": [[72, "hermespy.core.antennas.Antenna.plot_gain"]], "plot_polarization() (antenna method)": [[72, "hermespy.core.antennas.Antenna.plot_polarization"]], "plot_topology() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.plot_topology"]], "port (antenna property)": [[72, "hermespy.core.antennas.Antenna.port"]], "ports (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.ports"]], "ports (customantennaarray property)": [[72, "hermespy.core.antennas.CustomAntennaArray.ports"]], "ports (uniformarray property)": [[72, "hermespy.core.antennas.UniformArray.ports"]], "receive_antennas (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.receive_antennas"]], "receive_antennas (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.receive_antennas"]], "receive_ports (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.receive_ports"]], "receive_topology (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.receive_topology"]], "receiving (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.receiving"]], "remove_antenna() (antennaport method)": [[72, "hermespy.core.antennas.AntennaPort.remove_antenna"]], "remove_port() (customantennaarray method)": [[72, "hermespy.core.antennas.CustomAntennaArray.remove_port"]], "slant (linearantenna property)": [[72, "hermespy.core.antennas.LinearAntenna.slant"]], "spacing (uniformarray property)": [[72, "hermespy.core.antennas.UniformArray.spacing"]], "spherical_phase_response() (antennaarray method)": [[72, "hermespy.core.antennas.AntennaArray.spherical_phase_response"]], "topology (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.topology"]], "transmit_antennas (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.transmit_antennas"]], "transmit_antennas (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.transmit_antennas"]], "transmit_ports (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.transmit_ports"]], "transmit_topology (antennaarray property)": [[72, "hermespy.core.antennas.AntennaArray.transmit_topology"]], "transmitting (antennaport property)": [[72, "hermespy.core.antennas.AntennaPort.transmitting"]], "yaml_tag (dipole attribute)": [[72, "hermespy.core.antennas.Dipole.yaml_tag"]], "yaml_tag (idealantenna attribute)": [[72, "hermespy.core.antennas.IdealAntenna.yaml_tag"]], "yaml_tag (patchantenna attribute)": [[72, "hermespy.core.antennas.PatchAntenna.yaml_tag"]], "channelstateinformation (class in hermespy.core.channel)": [[73, "hermespy.core.channel.ChannelStateInformation"]], "ideal() (channelstateinformation static method)": [[73, "hermespy.core.channel.ChannelStateInformation.Ideal"]], "__num_delay_taps (channelstateinformation attribute)": [[73, "hermespy.core.channel.ChannelStateInformation.__num_delay_taps"]], "__num_frequency_bins (channelstateinformation attribute)": [[73, "hermespy.core.channel.ChannelStateInformation.__num_frequency_bins"]], "__state (channelstateinformation attribute)": [[73, "hermespy.core.channel.ChannelStateInformation.__state"]], "__state_format (channelstateinformation attribute)": [[73, "hermespy.core.channel.ChannelStateInformation.__state_format"]], "concatenate() (channelstateinformation static method)": [[73, "hermespy.core.channel.ChannelStateInformation.concatenate"]], "dense_state() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.dense_state"]], "linear (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.linear"]], "num_delay_taps (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.num_delay_taps"]], "num_receive_streams (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.num_receive_streams"]], "num_samples (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.num_samples"]], "num_symbols (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.num_symbols"]], "num_transmit_streams (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.num_transmit_streams"]], "plot() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.plot"]], "propagate() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.propagate"]], "received_streams() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.received_streams"]], "reciprocal() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.reciprocal"]], "samples() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.samples"]], "set_state() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.set_state"]], "state (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.state"]], "state_format (channelstateinformation property)": [[73, "hermespy.core.channel.ChannelStateInformation.state_format"]], "to_frequency_selectivity() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.to_frequency_selectivity"]], "to_impulse_response() (channelstateinformation method)": [[73, "hermespy.core.channel.ChannelStateInformation.to_impulse_response"]], "custom (snrtype attribute)": [[74, "hermespy.core.definitions.SNRType.CUSTOM"]], "consolemode (class in hermespy.core.definitions)": [[74, "hermespy.core.definitions.ConsoleMode"]], "ebn0 (snrtype attribute)": [[74, "hermespy.core.definitions.SNRType.EBN0"]], "en0 (snrtype attribute)": [[74, "hermespy.core.definitions.SNRType.EN0"]], "esn0 (snrtype attribute)": [[74, "hermespy.core.definitions.SNRType.ESN0"]], "interactive (consolemode attribute)": [[74, "hermespy.core.definitions.ConsoleMode.INTERACTIVE"]], "linear (consolemode attribute)": [[74, "hermespy.core.definitions.ConsoleMode.LINEAR"]], "n0 (snrtype attribute)": [[74, "hermespy.core.definitions.SNRType.N0"]], "pn0 (snrtype attribute)": [[74, "hermespy.core.definitions.SNRType.PN0"]], "silent (consolemode attribute)": [[74, "hermespy.core.definitions.ConsoleMode.SILENT"]], "snrtype (class in hermespy.core.definitions)": [[74, "hermespy.core.definitions.SNRType"]], "hermespy.core.definitions": [[74, "module-hermespy.core.definitions"]], "device (class in hermespy.core.device)": [[75, "hermespy.core.device.Device"]], "antennas (device property)": [[75, "hermespy.core.device.Device.antennas"]], "cache_transmission() (device method)": [[75, "hermespy.core.device.Device.cache_transmission"]], "carrier_frequency (device property)": [[75, "hermespy.core.device.Device.carrier_frequency"]], "generate_output() (device method)": [[75, "hermespy.core.device.Device.generate_output"]], "max_frame_duration (device property)": [[75, "hermespy.core.device.Device.max_frame_duration"]], "num_antennas (device property)": [[75, "hermespy.core.device.Device.num_antennas"]], "num_receive_antennas (device property)": [[75, "hermespy.core.device.Device.num_receive_antennas"]], "num_receive_ports (device property)": [[75, "hermespy.core.device.Device.num_receive_ports"]], "num_transmit_antennas (device property)": [[75, "hermespy.core.device.Device.num_transmit_antennas"]], "num_transmit_ports (device property)": [[75, "hermespy.core.device.Device.num_transmit_ports"]], "power (device property)": [[75, "hermespy.core.device.Device.power"]], "process_input() (device method)": [[75, "hermespy.core.device.Device.process_input"]], "receive() (device method)": [[75, "hermespy.core.device.Device.receive"]], "receive_operators() (device method)": [[75, "hermespy.core.device.Device.receive_operators"]], "receivers (device attribute)": [[75, "hermespy.core.device.Device.receivers"]], "sampling_rate (device property)": [[75, "hermespy.core.device.Device.sampling_rate"]], "snr (device property)": [[75, "hermespy.core.device.Device.snr"]], "transmit() (device method)": [[75, "hermespy.core.device.Device.transmit"]], "transmit_operators() (device method)": [[75, "hermespy.core.device.Device.transmit_operators"]], "transmitters (device attribute)": [[75, "hermespy.core.device.Device.transmitters"]], "velocity (device property)": [[75, "hermespy.core.device.Device.velocity"]], "wavelength (device property)": [[75, "hermespy.core.device.Device.wavelength"]], "deviceoutput (class in hermespy.core.device)": [[76, "hermespy.core.device.DeviceOutput"]], "carrier_frequency (deviceoutput property)": [[76, "hermespy.core.device.DeviceOutput.carrier_frequency"]], "emerging_signals (deviceoutput property)": [[76, "hermespy.core.device.DeviceOutput.emerging_signals"]], "mixed_signal (deviceoutput property)": [[76, "hermespy.core.device.DeviceOutput.mixed_signal"]], "num_antennas (deviceoutput property)": [[76, "hermespy.core.device.DeviceOutput.num_antennas"]], "num_emerging_signals (deviceoutput property)": [[76, "hermespy.core.device.DeviceOutput.num_emerging_signals"]], "sampling_rate (deviceoutput property)": [[76, "hermespy.core.device.DeviceOutput.sampling_rate"]], "operationresult (class in hermespy.core.device)": [[77, "hermespy.core.device.OperationResult"]], "signal (operationresult attribute)": [[77, "hermespy.core.device.OperationResult.signal"]], "receiver (class in hermespy.core.device)": [[78, "hermespy.core.device.Receiver"]], "cache_reception() (receiver method)": [[78, "hermespy.core.device.Receiver.cache_reception"]], "device (receiver property)": [[78, "hermespy.core.device.Receiver.device"]], "noise_power() (receiver method)": [[78, "hermespy.core.device.Receiver.noise_power"]], "num_receive_antennas (receiver property)": [[78, "hermespy.core.device.Receiver.num_receive_antennas"]], "num_receive_ports (receiver property)": [[78, "hermespy.core.device.Receiver.num_receive_ports"]], "receive() (receiver method)": [[78, "hermespy.core.device.Receiver.receive"]], "reception (receiver property)": [[78, "hermespy.core.device.Receiver.reception"]], "reference (receiver property)": [[78, "hermespy.core.device.Receiver.reference"]], "selected_receive_ports (receiver property)": [[78, "hermespy.core.device.Receiver.selected_receive_ports"]], "signal (receiver property)": [[78, "hermespy.core.device.Receiver.signal"]], "reception (class in hermespy.core.device)": [[79, "hermespy.core.device.Reception"]], "transmission (class in hermespy.core.device)": [[80, "hermespy.core.device.Transmission"]], "transmitter (class in hermespy.core.device)": [[81, "hermespy.core.device.Transmitter"]], "cache_transmission() (transmitter method)": [[81, "hermespy.core.device.Transmitter.cache_transmission"]], "device (transmitter property)": [[81, "hermespy.core.device.Transmitter.device"]], "num_transmit_antennas (transmitter property)": [[81, "hermespy.core.device.Transmitter.num_transmit_antennas"]], "num_transmit_ports (transmitter property)": [[81, "hermespy.core.device.Transmitter.num_transmit_ports"]], "selected_transmit_ports (transmitter property)": [[81, "hermespy.core.device.Transmitter.selected_transmit_ports"]], "transmission (transmitter property)": [[81, "hermespy.core.device.Transmitter.transmission"]], "transmit() (transmitter method)": [[81, "hermespy.core.device.Transmitter.transmit"]], "drop (class in hermespy.core.drop)": [[82, "hermespy.core.drop.Drop"]], "device_receptions (drop property)": [[82, "hermespy.core.drop.Drop.device_receptions"]], "device_transmissions (drop property)": [[82, "hermespy.core.drop.Drop.device_transmissions"]], "num_device_receptions (drop property)": [[82, "hermespy.core.drop.Drop.num_device_receptions"]], "num_device_transmissions (drop property)": [[82, "hermespy.core.drop.Drop.num_device_transmissions"]], "operator_inputs (drop property)": [[82, "hermespy.core.drop.Drop.operator_inputs"]], "timestamp (drop property)": [[82, "hermespy.core.drop.Drop.timestamp"]], "duplexoperator (class in hermespy.core.duplex)": [[83, "hermespy.core.duplex.DuplexOperator"]], "device (duplexoperator property)": [[83, "hermespy.core.duplex.DuplexOperator.device"]], "frame_duration (duplexoperator property)": [[83, "hermespy.core.duplex.DuplexOperator.frame_duration"]], "hermespy.core.duplex": [[83, "module-hermespy.core.duplex"]], "sampling_rate (duplexoperator property)": [[83, "hermespy.core.duplex.DuplexOperator.sampling_rate"]], "all (verbosity attribute)": [[84, "hermespy.core.executable.Verbosity.ALL"]], "error (verbosity attribute)": [[84, "hermespy.core.executable.Verbosity.ERROR"]], "executable (class in hermespy.core.executable)": [[84, "hermespy.core.executable.Executable"]], "info (verbosity attribute)": [[84, "hermespy.core.executable.Verbosity.INFO"]], "none (verbosity attribute)": [[84, "hermespy.core.executable.Verbosity.NONE"]], "verbosity (class in hermespy.core.executable)": [[84, "hermespy.core.executable.Verbosity"]], "warning (verbosity attribute)": [[84, "hermespy.core.executable.Verbosity.WARNING"]], "console (executable property)": [[84, "hermespy.core.executable.Executable.console"]], "console_mode (executable property)": [[84, "hermespy.core.executable.Executable.console_mode"]], "debug (executable property)": [[84, "hermespy.core.executable.Executable.debug"]], "default_results_dir() (executable static method)": [[84, "hermespy.core.executable.Executable.default_results_dir"]], "execute() (executable method)": [[84, "hermespy.core.executable.Executable.execute"]], "hermespy.core.executable": [[84, "module-hermespy.core.executable"]], "results_dir (executable property)": [[84, "hermespy.core.executable.Executable.results_dir"]], "run() (executable method)": [[84, "hermespy.core.executable.Executable.run"]], "style (executable property)": [[84, "hermespy.core.executable.Executable.style"]], "style_context() (executable static method)": [[84, "hermespy.core.executable.Executable.style_context"]], "verbosity (executable property)": [[84, "hermespy.core.executable.Executable.verbosity"]], "factory (class in hermespy.core.factory)": [[85, "hermespy.core.factory.Factory"]], "hdfserializable (class in hermespy.core.factory)": [[85, "hermespy.core.factory.HDFSerializable"]], "hdfserializabletype (class in hermespy.core.factory)": [[85, "hermespy.core.factory.HDFSerializableType"]], "set (class in hermespy.core.factory)": [[85, "hermespy.core.factory.SET"]], "serializable (class in hermespy.core.factory)": [[85, "hermespy.core.factory.Serializable"]], "serializableenum (class in hermespy.core.factory)": [[85, "hermespy.core.factory.SerializableEnum"]], "serializabletype (class in hermespy.core.factory)": [[85, "hermespy.core.factory.SerializableType"]], "clean (factory property)": [[85, "hermespy.core.factory.Factory.clean"]], "extensions (factory attribute)": [[85, "hermespy.core.factory.Factory.extensions"]], "from_file() (factory method)": [[85, "hermespy.core.factory.Factory.from_file"]], "from_folder() (factory method)": [[85, "hermespy.core.factory.Factory.from_folder"]], "from_parameters() (serializableenum class method)": [[85, "hermespy.core.factory.SerializableEnum.from_parameters"]], "from_path() (factory method)": [[85, "hermespy.core.factory.Factory.from_path"]], "from_str() (factory method)": [[85, "hermespy.core.factory.Factory.from_str"]], "from_stream() (factory method)": [[85, "hermespy.core.factory.Factory.from_stream"]], "hermespy.core.factory": [[85, "module-hermespy.core.factory"]], "registered_classes (factory property)": [[85, "hermespy.core.factory.Factory.registered_classes"]], "registered_tags (factory property)": [[85, "hermespy.core.factory.Factory.registered_tags"]], "tag_registry (factory property)": [[85, "hermespy.core.factory.Factory.tag_registry"]], "to_file() (factory method)": [[85, "hermespy.core.factory.Factory.to_file"]], "to_folder() (factory method)": [[85, "hermespy.core.factory.Factory.to_folder"]], "to_str() (factory method)": [[85, "hermespy.core.factory.Factory.to_str"]], "to_stream() (factory method)": [[85, "hermespy.core.factory.Factory.to_stream"]], "db (valuetype attribute)": [[86, "hermespy.core.logarithmic.ValueType.DB"]], "from_tuple() (logarithmic class method)": [[86, "hermespy.core.logarithmic.Logarithmic.From_Tuple"]], "lin (valuetype attribute)": [[86, "hermespy.core.logarithmic.ValueType.LIN"]], "logarithmic (class in hermespy.core.logarithmic)": [[86, "hermespy.core.logarithmic.Logarithmic"]], "logarithmicsequence (class in hermespy.core.logarithmic)": [[86, "hermespy.core.logarithmic.LogarithmicSequence"]], "valuetype (class in hermespy.core.logarithmic)": [[86, "hermespy.core.logarithmic.ValueType"]], "conversion (logarithmic property)": [[86, "hermespy.core.logarithmic.Logarithmic.conversion"]], "conversion (logarithmicsequence property)": [[86, "hermespy.core.logarithmic.LogarithmicSequence.conversion"]], "db() (in module hermespy.core.logarithmic)": [[86, "hermespy.core.logarithmic.dB"]], "hermespy.core.logarithmic": [[86, "module-hermespy.core.logarithmic"]], "tolist() (logarithmicsequence method)": [[86, "hermespy.core.logarithmic.LogarithmicSequence.tolist"]], "value_db (logarithmic property)": [[86, "hermespy.core.logarithmic.Logarithmic.value_db"]], "actorrunresult (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.ActorRunResult"]], "artifact (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.Artifact"]], "artifacttemplate (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.ArtifactTemplate"]], "evaluation (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.Evaluation"]], "evaluationresult (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.EvaluationResult"]], "evaluationtemplate (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.EvaluationTemplate"]], "evaluator (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.Evaluator"], [88, "hermespy.core.monte_carlo.Evaluator"]], "from_artifacts() (scalarevaluationresult class method)": [[87, "hermespy.core.monte_carlo.ScalarEvaluationResult.From_Artifacts"]], "griddimension (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.GridDimension"]], "gridsection (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.GridSection"]], "montecarlo (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.MonteCarlo"]], "montecarloactor (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.MonteCarloActor"]], "montecarloresult (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.MonteCarloResult"]], "montecarlosample (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.MonteCarloSample"]], "registereddimension (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.RegisteredDimension"]], "samplegrid (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.SampleGrid"]], "samplepoint (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.SamplePoint"]], "scalarevaluationresult (class in hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.ScalarEvaluationResult"]], "abbreviation (evaluator property)": [[87, "hermespy.core.monte_carlo.Evaluator.abbreviation"], [88, "hermespy.core.monte_carlo.Evaluator.abbreviation"]], "add_dimension() (montecarlo method)": [[87, "hermespy.core.monte_carlo.MonteCarlo.add_dimension"]], "add_evaluator() (montecarlo method)": [[87, "hermespy.core.monte_carlo.MonteCarlo.add_evaluator"]], "add_samples() (gridsection method)": [[87, "hermespy.core.monte_carlo.GridSection.add_samples"]], "artifact (artifacttemplate property)": [[87, "hermespy.core.monte_carlo.ArtifactTemplate.artifact"]], "artifact() (evaluation method)": [[87, "hermespy.core.monte_carlo.Evaluation.artifact"]], "artifact_scalars (montecarlosample property)": [[87, "hermespy.core.monte_carlo.MonteCarloSample.artifact_scalars"]], "artifacts (montecarlosample property)": [[87, "hermespy.core.monte_carlo.MonteCarloSample.artifacts"]], "catch_exceptions (montecarlo attribute)": [[87, "hermespy.core.monte_carlo.MonteCarlo.catch_exceptions"]], "catch_exceptions (montecarloactor attribute)": [[87, "hermespy.core.monte_carlo.MonteCarloActor.catch_exceptions"]], "confidence (evaluator property)": [[87, "hermespy.core.monte_carlo.Evaluator.confidence"], [88, "hermespy.core.monte_carlo.Evaluator.confidence"]], "confidence_status() (gridsection method)": [[87, "hermespy.core.monte_carlo.GridSection.confidence_status"]], "confidences (gridsection property)": [[87, "hermespy.core.monte_carlo.GridSection.confidences"]], "configure_point() (griddimension method)": [[87, "hermespy.core.monte_carlo.GridDimension.configure_point"]], "considered_objects (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.considered_objects"]], "console (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.console"]], "console_mode (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.console_mode"]], "coordinates (gridsection property)": [[87, "hermespy.core.monte_carlo.GridSection.coordinates"]], "cpus_per_actor (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.cpus_per_actor"]], "deleter() (registereddimension method)": [[87, "hermespy.core.monte_carlo.RegisteredDimension.deleter"]], "dimension (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.dimension"]], "dimensions (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.dimensions"]], "evaluate() (evaluator method)": [[87, "hermespy.core.monte_carlo.Evaluator.evaluate"], [88, "hermespy.core.monte_carlo.Evaluator.evaluate"]], "evaluation (evaluationtemplate attribute)": [[87, "hermespy.core.monte_carlo.EvaluationTemplate.evaluation"]], "evaluation_results (montecarloresult property)": [[87, "hermespy.core.monte_carlo.MonteCarloResult.evaluation_results"]], "evaluator (evaluationresult property)": [[87, "hermespy.core.monte_carlo.EvaluationResult.evaluator"]], "evaluators (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.evaluators"]], "first_impact (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.first_impact"]], "first_impact (registereddimension property)": [[87, "hermespy.core.monte_carlo.RegisteredDimension.first_impact"]], "generate_result() (evaluator method)": [[87, "hermespy.core.monte_carlo.Evaluator.generate_result"], [88, "hermespy.core.monte_carlo.Evaluator.generate_result"]], "getter() (registereddimension method)": [[87, "hermespy.core.monte_carlo.RegisteredDimension.getter"]], "grid (evaluationresult property)": [[87, "hermespy.core.monte_carlo.EvaluationResult.grid"]], "grid_section (montecarlosample property)": [[87, "hermespy.core.monte_carlo.MonteCarloSample.grid_section"]], "hermespy.core.monte_carlo": [[87, "module-hermespy.core.monte_carlo"]], "investigated_object (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.investigated_object"]], "is_registered() (registereddimension class method)": [[87, "hermespy.core.monte_carlo.RegisteredDimension.is_registered"]], "last_impact (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.last_impact"]], "last_impact (registereddimension property)": [[87, "hermespy.core.monte_carlo.RegisteredDimension.last_impact"]], "max_num_samples (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.max_num_samples"]], "message (actorrunresult attribute)": [[87, "hermespy.core.monte_carlo.ActorRunResult.message"]], "min_num_samples (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.min_num_samples"]], "new_dimension() (montecarlo method)": [[87, "hermespy.core.monte_carlo.MonteCarlo.new_dimension"]], "num_actors (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.num_actors"]], "num_artifacts (montecarlosample property)": [[87, "hermespy.core.monte_carlo.MonteCarloSample.num_artifacts"]], "num_sample_points (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.num_sample_points"]], "num_samples (gridsection property)": [[87, "hermespy.core.monte_carlo.GridSection.num_samples"]], "num_samples (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.num_samples"]], "performance_time (montecarloresult property)": [[87, "hermespy.core.monte_carlo.MonteCarloResult.performance_time"]], "plot() (montecarloresult method)": [[87, "hermespy.core.monte_carlo.MonteCarloResult.plot"]], "plot_scale (evaluator property)": [[87, "hermespy.core.monte_carlo.Evaluator.plot_scale"], [88, "hermespy.core.monte_carlo.Evaluator.plot_scale"]], "plot_scale (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.plot_scale"]], "plot_surface (scalarevaluationresult attribute)": [[87, "hermespy.core.monte_carlo.ScalarEvaluationResult.plot_surface"]], "print() (evaluationresult method)": [[87, "hermespy.core.monte_carlo.EvaluationResult.print"]], "print() (montecarloresult method)": [[87, "hermespy.core.monte_carlo.MonteCarloResult.print"]], "register() (in module hermespy.core.monte_carlo)": [[87, "hermespy.core.monte_carlo.register"]], "remove_dimension() (montecarlo method)": [[87, "hermespy.core.monte_carlo.MonteCarlo.remove_dimension"]], "run() (montecarloactor method)": [[87, "hermespy.core.monte_carlo.MonteCarloActor.run"]], "runtime_env (montecarlo attribute)": [[87, "hermespy.core.monte_carlo.MonteCarlo.runtime_env"]], "sample_index (montecarlosample property)": [[87, "hermespy.core.monte_carlo.MonteCarloSample.sample_index"]], "sample_points (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.sample_points"]], "samples (actorrunresult attribute)": [[87, "hermespy.core.monte_carlo.ActorRunResult.samples"]], "samples (gridsection property)": [[87, "hermespy.core.monte_carlo.GridSection.samples"]], "save_to_matlab() (montecarloresult method)": [[87, "hermespy.core.monte_carlo.MonteCarloResult.save_to_matlab"]], "section_block_size (montecarlo property)": [[87, "hermespy.core.monte_carlo.MonteCarlo.section_block_size"]], "setter() (registereddimension method)": [[87, "hermespy.core.monte_carlo.RegisteredDimension.setter"]], "simulate() (montecarlo method)": [[87, "hermespy.core.monte_carlo.MonteCarlo.simulate"]], "stage_executors() (montecarloactor method)": [[87, "hermespy.core.monte_carlo.MonteCarloActor.stage_executors"]], "stage_identifiers() (montecarloactor static method)": [[87, "hermespy.core.monte_carlo.MonteCarloActor.stage_identifiers"]], "tick_format (evaluator attribute)": [[87, "hermespy.core.monte_carlo.Evaluator.tick_format"], [88, "hermespy.core.monte_carlo.Evaluator.tick_format"]], "tick_format (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.tick_format"]], "title (evaluator property)": [[87, "hermespy.core.monte_carlo.Evaluator.title"], [88, "hermespy.core.monte_carlo.Evaluator.title"]], "title (griddimension property)": [[87, "hermespy.core.monte_carlo.GridDimension.title"]], "title (registereddimension property)": [[87, "hermespy.core.monte_carlo.RegisteredDimension.title"]], "title (samplepoint property)": [[87, "hermespy.core.monte_carlo.SamplePoint.title"]], "title (scalarevaluationresult property)": [[87, "hermespy.core.monte_carlo.ScalarEvaluationResult.title"]], "to_array() (evaluationresult method)": [[87, "hermespy.core.monte_carlo.EvaluationResult.to_array"]], "to_array() (scalarevaluationresult method)": [[87, "hermespy.core.monte_carlo.ScalarEvaluationResult.to_array"]], "to_scalar() (artifact method)": [[87, "hermespy.core.monte_carlo.Artifact.to_scalar"]], "to_scalar() (artifacttemplate method)": [[87, "hermespy.core.monte_carlo.ArtifactTemplate.to_scalar"]], "tolerance (evaluator property)": [[87, "hermespy.core.monte_carlo.Evaluator.tolerance"], [88, "hermespy.core.monte_carlo.Evaluator.tolerance"]], "value (samplepoint property)": [[87, "hermespy.core.monte_carlo.SamplePoint.value"]], "signalreceiver (class in hermespy.core.operators)": [[89, "hermespy.core.operators.SignalReceiver"]], "signaltransmitter (class in hermespy.core.operators)": [[89, "hermespy.core.operators.SignalTransmitter"]], "silenttransmitter (class in hermespy.core.operators)": [[89, "hermespy.core.operators.SilentTransmitter"]], "staticoperator (class in hermespy.core.operators)": [[89, "hermespy.core.operators.StaticOperator"]], "energy (signalreceiver property)": [[89, "hermespy.core.operators.SignalReceiver.energy"]], "frame_duration (staticoperator property)": [[89, "hermespy.core.operators.StaticOperator.frame_duration"]], "hermespy.core.operators": [[89, "module-hermespy.core.operators"]], "num_samples (staticoperator property)": [[89, "hermespy.core.operators.StaticOperator.num_samples"]], "sampling_rate (staticoperator property)": [[89, "hermespy.core.operators.StaticOperator.sampling_rate"]], "signal (signaltransmitter property)": [[89, "hermespy.core.operators.SignalTransmitter.signal"]], "pipeline (class in hermespy.core.pipeline)": [[90, "hermespy.core.pipeline.Pipeline"]], "add_device() (pipeline method)": [[90, "hermespy.core.pipeline.Pipeline.add_device"]], "device_index() (pipeline method)": [[90, "hermespy.core.pipeline.Pipeline.device_index"]], "hermespy.core.pipeline": [[90, "module-hermespy.core.pipeline"]], "new_device() (pipeline method)": [[90, "hermespy.core.pipeline.Pipeline.new_device"]], "num_drops (pipeline property)": [[90, "hermespy.core.pipeline.Pipeline.num_drops"]], "scenario (pipeline property)": [[90, "hermespy.core.pipeline.Pipeline.scenario"]], "randomnode (class in hermespy.core.random_node)": [[91, "hermespy.core.random_node.RandomNode"]], "randomrealization (class in hermespy.core.random_node)": [[91, "hermespy.core.random_node.RandomRealization"]], "generator() (randomrealization method)": [[91, "hermespy.core.random_node.RandomRealization.generator"]], "hermespy.core.random_node": [[91, "module-hermespy.core.random_node"]], "seed (randomrealization property)": [[91, "hermespy.core.random_node.RandomRealization.seed"]], "default (scenariomode attribute)": [[92, "hermespy.core.scenario.ScenarioMode.DEFAULT"]], "record (scenariomode attribute)": [[92, "hermespy.core.scenario.ScenarioMode.RECORD"]], "replay (scenariomode attribute)": [[92, "hermespy.core.scenario.ScenarioMode.REPLAY"]], "replay() (scenario class method)": [[92, "hermespy.core.scenario.Scenario.Replay"]], "replayscenario (class in hermespy.core.scenario)": [[92, "hermespy.core.scenario.ReplayScenario"]], "scenario (class in hermespy.core.scenario)": [[92, "hermespy.core.scenario.Scenario"]], "scenariomode (class in hermespy.core.scenario)": [[92, "hermespy.core.scenario.ScenarioMode"]], "scenariotype (class in hermespy.core.scenario)": [[92, "hermespy.core.scenario.ScenarioType"]], "add_device() (scenario method)": [[92, "hermespy.core.scenario.Scenario.add_device"]], "campaign (scenario property)": [[92, "hermespy.core.scenario.Scenario.campaign"]], "device_index() (scenario method)": [[92, "hermespy.core.scenario.Scenario.device_index"]], "device_registered() (scenario method)": [[92, "hermespy.core.scenario.Scenario.device_registered"]], "devices (scenario property)": [[92, "hermespy.core.scenario.Scenario.devices"]], "drop() (scenario method)": [[92, "hermespy.core.scenario.Scenario.drop"]], "drop_duration (scenario property)": [[92, "hermespy.core.scenario.Scenario.drop_duration"]], "generate_outputs() (scenario method)": [[92, "hermespy.core.scenario.Scenario.generate_outputs"]], "hermespy.core.scenario": [[92, "module-hermespy.core.scenario"]], "mode (scenario property)": [[92, "hermespy.core.scenario.Scenario.mode"]], "new_device() (scenario method)": [[92, "hermespy.core.scenario.Scenario.new_device"]], "num_devices (scenario property)": [[92, "hermespy.core.scenario.Scenario.num_devices"]], "num_drops (scenario property)": [[92, "hermespy.core.scenario.Scenario.num_drops"]], "num_operators (scenario property)": [[92, "hermespy.core.scenario.Scenario.num_operators"]], "num_receivers (scenario property)": [[92, "hermespy.core.scenario.Scenario.num_receivers"]], "num_transmitters (scenario property)": [[92, "hermespy.core.scenario.Scenario.num_transmitters"]], "operators (scenario property)": [[92, "hermespy.core.scenario.Scenario.operators"]], "process_inputs() (scenario method)": [[92, "hermespy.core.scenario.Scenario.process_inputs"]], "receive_devices() (scenario method)": [[92, "hermespy.core.scenario.Scenario.receive_devices"]], "receive_operators() (scenario method)": [[92, "hermespy.core.scenario.Scenario.receive_operators"]], "receivers (scenario property)": [[92, "hermespy.core.scenario.Scenario.receivers"]], "record() (scenario method)": [[92, "hermespy.core.scenario.Scenario.record"]], "replay() (scenario method)": [[92, "hermespy.core.scenario.Scenario.replay"]], "serialized_attributes (scenario attribute)": [[92, "hermespy.core.scenario.Scenario.serialized_attributes"]], "stop() (scenario method)": [[92, "hermespy.core.scenario.Scenario.stop"]], "transmit_devices() (scenario method)": [[92, "hermespy.core.scenario.Scenario.transmit_devices"]], "transmit_operators() (scenario method)": [[92, "hermespy.core.scenario.Scenario.transmit_operators"]], "transmitters (scenario property)": [[92, "hermespy.core.scenario.Scenario.transmitters"]], "yaml_tag (scenario attribute)": [[92, "hermespy.core.scenario.Scenario.yaml_tag"]], "signal (class in hermespy.core.signal_model)": [[93, "hermespy.core.signal_model.Signal"]], "__carrier_frequency (signal attribute)": [[93, "hermespy.core.signal_model.Signal.__carrier_frequency"]], "__samples (signal attribute)": [[93, "hermespy.core.signal_model.Signal.__samples"]], "__sampling_rate (signal attribute)": [[93, "hermespy.core.signal_model.Signal.__sampling_rate"]], "append_samples() (signal method)": [[93, "hermespy.core.signal_model.Signal.append_samples"]], "append_streams() (signal method)": [[93, "hermespy.core.signal_model.Signal.append_streams"]], "carrier_frequency (signal property)": [[93, "hermespy.core.signal_model.Signal.carrier_frequency"]], "copy() (signal method)": [[93, "hermespy.core.signal_model.Signal.copy"]], "delay (signal attribute)": [[93, "hermespy.core.signal_model.Signal.delay"]], "duration (signal property)": [[93, "hermespy.core.signal_model.Signal.duration"]], "empty() (signal class method)": [[93, "hermespy.core.signal_model.Signal.empty"]], "energy (signal property)": [[93, "hermespy.core.signal_model.Signal.energy"]], "filter_order (signal attribute)": [[93, "hermespy.core.signal_model.Signal.filter_order"]], "frequencies (signal property)": [[93, "hermespy.core.signal_model.Signal.frequencies"]], "from_interleaved() (signal class method)": [[93, "hermespy.core.signal_model.Signal.from_interleaved"]], "noise_power (signal property)": [[93, "hermespy.core.signal_model.Signal.noise_power"]], "num_samples (signal property)": [[93, "hermespy.core.signal_model.Signal.num_samples"]], "num_streams (signal property)": [[93, "hermespy.core.signal_model.Signal.num_streams"]], "plot() (signal method)": [[93, "hermespy.core.signal_model.Signal.plot"]], "plot_eye() (signal method)": [[93, "hermespy.core.signal_model.Signal.plot_eye"]], "power (signal property)": [[93, "hermespy.core.signal_model.Signal.power"]], "resample() (signal method)": [[93, "hermespy.core.signal_model.Signal.resample"]], "samples (signal property)": [[93, "hermespy.core.signal_model.Signal.samples"]], "sampling_rate (signal property)": [[93, "hermespy.core.signal_model.Signal.sampling_rate"]], "superimpose() (signal method)": [[93, "hermespy.core.signal_model.Signal.superimpose"]], "timestamps (signal property)": [[93, "hermespy.core.signal_model.Signal.timestamps"]], "title (signal property)": [[93, "hermespy.core.signal_model.Signal.title"]], "to_interleaved() (signal method)": [[93, "hermespy.core.signal_model.Signal.to_interleaved"]], "direction (class in hermespy.core.transformation)": [[94, "hermespy.core.transformation.Direction"]], "from_cartesian() (direction class method)": [[94, "hermespy.core.transformation.Direction.From_Cartesian"]], "from_rpy() (transformation class method)": [[94, "hermespy.core.transformation.Transformation.From_RPY"]], "from_spherical() (direction class method)": [[94, "hermespy.core.transformation.Direction.From_Spherical"]], "from_translation() (transformation class method)": [[94, "hermespy.core.transformation.Transformation.From_Translation"]], "no() (transformation class method)": [[94, "hermespy.core.transformation.Transformation.No"]], "transformable (class in hermespy.core.transformation)": [[94, "hermespy.core.transformation.Transformable"]], "transformablebase (class in hermespy.core.transformation)": [[94, "hermespy.core.transformation.TransformableBase"]], "transformablelink (class in hermespy.core.transformation)": [[94, "hermespy.core.transformation.TransformableLink"]], "transformation (class in hermespy.core.transformation)": [[94, "hermespy.core.transformation.Transformation"]], "add_link() (transformablelink method)": [[94, "hermespy.core.transformation.TransformableLink.add_link"]], "backwards_transformation (transformable property)": [[94, "hermespy.core.transformation.Transformable.backwards_transformation"]], "forwards_transformation (transformable property)": [[94, "hermespy.core.transformation.Transformable.forwards_transformation"]], "forwards_transformation (transformablebase property)": [[94, "hermespy.core.transformation.TransformableBase.forwards_transformation"]], "forwards_transformation (transformablelink property)": [[94, "hermespy.core.transformation.TransformableLink.forwards_transformation"]], "global_orientation (transformable property)": [[94, "hermespy.core.transformation.Transformable.global_orientation"]], "global_position (transformable property)": [[94, "hermespy.core.transformation.Transformable.global_position"]], "hermespy.core.transformation": [[94, "module-hermespy.core.transformation"]], "is_base (transformable property)": [[94, "hermespy.core.transformation.Transformable.is_base"]], "linked_frames (transformablelink property)": [[94, "hermespy.core.transformation.TransformableLink.linked_frames"]], "orientation (transformable property)": [[94, "hermespy.core.transformation.Transformable.orientation"]], "pose (transformable property)": [[94, "hermespy.core.transformation.Transformable.pose"]], "position (transformable property)": [[94, "hermespy.core.transformation.Transformable.position"]], "remove_link() (transformablelink method)": [[94, "hermespy.core.transformation.TransformableLink.remove_link"]], "rotate_direction() (transformation method)": [[94, "hermespy.core.transformation.Transformation.rotate_direction"]], "rotation_rpy (transformation property)": [[94, "hermespy.core.transformation.Transformation.rotation_rpy"]], "set_base() (transformable method)": [[94, "hermespy.core.transformation.Transformable.set_base"]], "set_base() (transformablebase method)": [[94, "hermespy.core.transformation.TransformableBase.set_base"]], "set_base() (transformablelink method)": [[94, "hermespy.core.transformation.TransformableLink.set_base"]], "to_local_coordinates() (transformable method)": [[94, "hermespy.core.transformation.Transformable.to_local_coordinates"]], "to_spherical() (direction method)": [[94, "hermespy.core.transformation.Direction.to_spherical"]], "transform_direction() (transformation method)": [[94, "hermespy.core.transformation.Transformation.transform_direction"]], "transform_position() (transformation method)": [[94, "hermespy.core.transformation.Transformation.transform_position"]], "translation (transformation property)": [[94, "hermespy.core.transformation.Transformation.translation"]], "vat (in module hermespy.core.visualize)": [[95, "hermespy.core.visualize.VAT"]], "visualizable (class in hermespy.core.visualize)": [[95, "hermespy.core.visualize.Visualizable"]], "hermespy.core.visualize": [[95, "module-hermespy.core.visualize"]], "plot() (visualizable method)": [[95, "hermespy.core.visualize.Visualizable.plot"]], "title (visualizable property)": [[95, "hermespy.core.visualize.Visualizable.title"]], "blockinterleaver (class in hermespy.fec.block_interleaver)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver"]], "bit_block_size (blockinterleaver property)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.bit_block_size"]], "block_size (blockinterleaver property)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.block_size"]], "code_block_size (blockinterleaver property)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.code_block_size"]], "decode() (blockinterleaver method)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.decode"]], "encode() (blockinterleaver method)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.encode"]], "hermespy.fec.block_interleaver": [[98, "module-hermespy.fec.block_interleaver"]], "interleave_blocks (blockinterleaver property)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.interleave_blocks"]], "rate (blockinterleaver property)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.rate"]], "yaml_tag (blockinterleaver attribute)": [[98, "hermespy.fec.block_interleaver.BlockInterleaver.yaml_tag"]], "encoder (class in hermespy.fec.coding)": [[99, "hermespy.fec.coding.Encoder"]], "encodermanager (class in hermespy.fec.coding)": [[99, "hermespy.fec.coding.EncoderManager"]], "add_encoder() (encodermanager method)": [[99, "hermespy.fec.coding.EncoderManager.add_encoder"]], "allow_padding (encodermanager attribute)": [[99, "hermespy.fec.coding.EncoderManager.allow_padding"]], "allow_truncating (encodermanager attribute)": [[99, "hermespy.fec.coding.EncoderManager.allow_truncating"]], "bit_block_size (encoder property)": [[99, "hermespy.fec.coding.Encoder.bit_block_size"]], "bit_block_size (encodermanager property)": [[99, "hermespy.fec.coding.EncoderManager.bit_block_size"]], "code_block_size (encoder property)": [[99, "hermespy.fec.coding.Encoder.code_block_size"]], "code_block_size (encodermanager property)": [[99, "hermespy.fec.coding.EncoderManager.code_block_size"]], "decode() (encoder method)": [[99, "hermespy.fec.coding.Encoder.decode"]], "decode() (encodermanager method)": [[99, "hermespy.fec.coding.EncoderManager.decode"]], "enabled (encoder property)": [[99, "hermespy.fec.coding.Encoder.enabled"]], "encode() (encoder method)": [[99, "hermespy.fec.coding.Encoder.encode"]], "encode() (encodermanager method)": [[99, "hermespy.fec.coding.EncoderManager.encode"]], "encoders (encodermanager property)": [[99, "hermespy.fec.coding.EncoderManager.encoders"]], "hermespy.fec.coding": [[99, "module-hermespy.fec.coding"]], "manager (encoder property)": [[99, "hermespy.fec.coding.Encoder.manager"]], "modem (encodermanager property)": [[99, "hermespy.fec.coding.EncoderManager.modem"]], "rate (encoder property)": [[99, "hermespy.fec.coding.Encoder.rate"]], "rate (encodermanager property)": [[99, "hermespy.fec.coding.EncoderManager.rate"]], "required_num_data_bits() (encodermanager method)": [[99, "hermespy.fec.coding.EncoderManager.required_num_data_bits"]], "yaml_tag (encoder attribute)": [[99, "hermespy.fec.coding.Encoder.yaml_tag"]], "cyclicredundancycheck (class in hermespy.fec.cyclic_redundancy_check)": [[100, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck"]], "bit_block_size (cyclicredundancycheck property)": [[100, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.bit_block_size"]], "check_block_size (cyclicredundancycheck property)": [[100, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.check_block_size"]], "code_block_size (cyclicredundancycheck property)": [[100, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.code_block_size"]], "decode() (cyclicredundancycheck method)": [[100, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.decode"]], "encode() (cyclicredundancycheck method)": [[100, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.encode"]], "hermespy.fec.cyclic_redundancy_check": [[100, "module-hermespy.fec.cyclic_redundancy_check"]], "yaml_tag (cyclicredundancycheck attribute)": [[100, "hermespy.fec.cyclic_redundancy_check.CyclicRedundancyCheck.yaml_tag"]], "repetitionencoder (class in hermespy.fec.repetition_encoder)": [[103, "hermespy.fec.repetition_encoder.RepetitionEncoder"]], "bit_block_size (repetitionencoder property)": [[103, "hermespy.fec.repetition_encoder.RepetitionEncoder.bit_block_size"]], "code_block_size (repetitionencoder property)": [[103, "hermespy.fec.repetition_encoder.RepetitionEncoder.code_block_size"]], "decode() (repetitionencoder method)": [[103, "hermespy.fec.repetition_encoder.RepetitionEncoder.decode"]], "encode() (repetitionencoder method)": [[103, "hermespy.fec.repetition_encoder.RepetitionEncoder.encode"]], "hermespy.fec.repetition_encoder": [[103, "module-hermespy.fec.repetition_encoder"]], "repetitions (repetitionencoder property)": [[103, "hermespy.fec.repetition_encoder.RepetitionEncoder.repetitions"]], "yaml_tag (repetitionencoder attribute)": [[103, "hermespy.fec.repetition_encoder.RepetitionEncoder.yaml_tag"]], "pseudorandomgenerator (class in hermespy.fec.scrambler)": [[106, "hermespy.fec.scrambler.PseudoRandomGenerator"]], "scrambler3gpp (class in hermespy.fec.scrambler)": [[106, "hermespy.fec.scrambler.Scrambler3GPP"]], "scrambler80211a (class in hermespy.fec.scrambler)": [[106, "hermespy.fec.scrambler.Scrambler80211a"]], "bit_block_size (scrambler3gpp property)": [[106, "hermespy.fec.scrambler.Scrambler3GPP.bit_block_size"]], "bit_block_size (scrambler80211a property)": [[106, "hermespy.fec.scrambler.Scrambler80211a.bit_block_size"]], "code_block_size (scrambler3gpp property)": [[106, "hermespy.fec.scrambler.Scrambler3GPP.code_block_size"]], "code_block_size (scrambler80211a property)": [[106, "hermespy.fec.scrambler.Scrambler80211a.code_block_size"]], "decode() (scrambler3gpp method)": [[106, "hermespy.fec.scrambler.Scrambler3GPP.decode"]], "decode() (scrambler80211a method)": [[106, "hermespy.fec.scrambler.Scrambler80211a.decode"]], "encode() (scrambler3gpp method)": [[106, "hermespy.fec.scrambler.Scrambler3GPP.encode"]], "encode() (scrambler80211a method)": [[106, "hermespy.fec.scrambler.Scrambler80211a.encode"]], "generate() (pseudorandomgenerator method)": [[106, "hermespy.fec.scrambler.PseudoRandomGenerator.generate"]], "generate_sequence() (pseudorandomgenerator method)": [[106, "hermespy.fec.scrambler.PseudoRandomGenerator.generate_sequence"]], "hermespy.fec.scrambler": [[106, "module-hermespy.fec.scrambler"]], "reset() (pseudorandomgenerator method)": [[106, "hermespy.fec.scrambler.PseudoRandomGenerator.reset"]], "seed (scrambler80211a property)": [[106, "hermespy.fec.scrambler.Scrambler80211a.seed"]], "yaml_tag (scrambler3gpp attribute)": [[106, "hermespy.fec.scrambler.Scrambler3GPP.yaml_tag"]], "yaml_tag (scrambler80211a attribute)": [[106, "hermespy.fec.scrambler.Scrambler80211a.yaml_tag"]], "audiodevice (class in hermespy.hardware_loop.audio.device)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice"]], "antennas (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.antennas"]], "carrier_frequency (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.carrier_frequency"]], "max_sampling_rate (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.max_sampling_rate"]], "playback_channels (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.playback_channels"]], "playback_device (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.playback_device"]], "record_channels (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.record_channels"]], "record_device (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.record_device"]], "sampling_rate (audiodevice property)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.sampling_rate"]], "trigger() (audiodevice method)": [[109, "hermespy.hardware_loop.audio.device.AudioDevice.trigger"]], "audioscenario (class in hermespy.hardware_loop.audio.scenario)": [[110, "hermespy.hardware_loop.audio.scenario.AudioScenario"]], "new_device() (audioscenario method)": [[110, "hermespy.hardware_loop.audio.scenario.AudioScenario.new_device"]], "yaml_tag (audioscenario attribute)": [[110, "hermespy.hardware_loop.audio.scenario.AudioScenario.yaml_tag"]], "delaycalibration (class in hermespy.hardware_loop.calibration.delay)": [[111, "hermespy.hardware_loop.calibration.delay.DelayCalibration"]], "estimate() (delaycalibration static method)": [[111, "hermespy.hardware_loop.calibration.delay.DelayCalibration.Estimate"]], "delay (delaycalibration property)": [[111, "hermespy.hardware_loop.calibration.delay.DelayCalibration.delay"]], "hermespy.hardware_loop.calibration.delay": [[111, "module-hermespy.hardware_loop.calibration.delay"]], "mmseestimate() (selectiveleakagecalibration static method)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.MMSEEstimate"]], "selectiveleakagecalibration (class in hermespy.hardware_loop.calibration.leakage)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration"]], "delay (selectiveleakagecalibration property)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.delay"]], "estimate_delay() (selectiveleakagecalibration method)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.estimate_delay"]], "hermespy.hardware_loop.calibration.leakage": [[112, "module-hermespy.hardware_loop.calibration.leakage"]], "leakage_response (selectiveleakagecalibration property)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.leakage_response"]], "remove_leakage() (selectiveleakagecalibration method)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.remove_leakage"]], "sampling_rate (selectiveleakagecalibration property)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.sampling_rate"]], "title (selectiveleakagecalibration property)": [[112, "hermespy.hardware_loop.calibration.leakage.SelectiveLeakageCalibration.title"]], "hardwareloop (class in hermespy.hardware_loop.hardware_loop)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop"]], "add_dimension() (hardwareloop method)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_dimension"]], "add_evaluator() (hardwareloop method)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_evaluator"]], "add_plot() (hardwareloop method)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.add_plot"]], "evaluator_index() (hardwareloop method)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.evaluator_index"]], "evaluators (hardwareloop property)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.evaluators"]], "iteration_priority (hardwareloop property)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.iteration_priority"]], "manual_triggering (hardwareloop attribute)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.manual_triggering"]], "new_dimension() (hardwareloop method)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.new_dimension"]], "num_evaluators (hardwareloop property)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.num_evaluators"]], "plot_information (hardwareloop attribute)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.plot_information"]], "record_drops (hardwareloop attribute)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.record_drops"]], "replay() (hardwareloop method)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.replay"]], "run() (hardwareloop method)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.run"]], "yaml_tag (hardwareloop attribute)": [[113, "hermespy.hardware_loop.hardware_loop.HardwareLoop.yaml_tag"]], "hardwareloopplot (class in hermespy.hardware_loop.hardware_loop)": [[114, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot"]], "axes (hardwareloopplot property)": [[114, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.axes"]], "figure (hardwareloopplot property)": [[114, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.figure"]], "hardware_loop (hardwareloopplot property)": [[114, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.hardware_loop"]], "prepare_figure() (hardwareloopplot method)": [[114, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.prepare_figure"]], "title (hardwareloopplot property)": [[114, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.title"]], "update_plot() (hardwareloopplot method)": [[114, "hermespy.hardware_loop.hardware_loop.HardwareLoopPlot.update_plot"]], "physicaldevice (class in hermespy.hardware_loop.physical_device)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice"]], "adaptive_sampling (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.adaptive_sampling"]], "delay_calibration (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.delay_calibration"]], "estimate_noise_power() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.estimate_noise_power"]], "leakage_calibration (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.leakage_calibration"]], "load_calibration() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.load_calibration"]], "lowpass_bandwidth (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_bandwidth"]], "lowpass_filter (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.lowpass_filter"]], "max_receive_delay (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_receive_delay"]], "max_sampling_rate (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.max_sampling_rate"]], "noise_power (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.noise_power"]], "process_input() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.process_input"]], "receive() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.receive"]], "save_calibration() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.save_calibration"]], "transmit() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.transmit"]], "trigger() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.trigger"]], "trigger_direct() (physicaldevice method)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.trigger_direct"]], "velocity (physicaldevice property)": [[115, "hermespy.hardware_loop.physical_device.PhysicalDevice.velocity"]], "physicaldevicedummy (class in hermespy.hardware_loop.physical_device_dummy)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy"]], "max_sampling_rate (physicaldevicedummy property)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.max_sampling_rate"]], "process_input() (physicaldevicedummy method)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.process_input"]], "receive() (physicaldevicedummy method)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.receive"]], "receive_transmission (physicaldevicedummy property)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.receive_transmission"]], "transmit() (physicaldevicedummy method)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.transmit"]], "trigger() (physicaldevicedummy method)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.trigger"]], "trigger_direct() (physicaldevicedummy method)": [[116, "hermespy.hardware_loop.physical_device_dummy.PhysicalDeviceDummy.trigger_direct"]], "physicalscenariodummy (class in hermespy.hardware_loop.physical_device_dummy)": [[117, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy"]], "add_device() (physicalscenariodummy method)": [[117, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.add_device"]], "new_device() (physicalscenariodummy method)": [[117, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.new_device"]], "receive_devices() (physicalscenariodummy method)": [[117, "hermespy.hardware_loop.physical_device_dummy.PhysicalScenarioDummy.receive_devices"]], "physicalscenario (class in hermespy.hardware_loop.scenario)": [[118, "hermespy.hardware_loop.scenario.PhysicalScenario"]], "add_device() (physicalscenario method)": [[118, "hermespy.hardware_loop.scenario.PhysicalScenario.add_device"]], "receive_devices() (physicalscenario method)": [[118, "hermespy.hardware_loop.scenario.PhysicalScenario.receive_devices"]], "usrpsystem (class in hermespy.hardware_loop.uhd.system)": [[119, "hermespy.hardware_loop.uhd.system.UsrpSystem"]], "add_device() (usrpsystem method)": [[119, "hermespy.hardware_loop.uhd.system.UsrpSystem.add_device"]], "new_device() (usrpsystem method)": [[119, "hermespy.hardware_loop.uhd.system.UsrpSystem.new_device"]], "yaml_tag (usrpsystem attribute)": [[119, "hermespy.hardware_loop.uhd.system.UsrpSystem.yaml_tag"]], "usrpdevice (class in hermespy.hardware_loop.uhd.usrp)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice"]], "antennas (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.antennas"]], "carrier_frequency (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.carrier_frequency"]], "ip (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.ip"]], "max_sampling_rate (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.max_sampling_rate"]], "num_appended_zeros (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_appended_zeros"]], "num_prepeneded_zeros (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_prepeneded_zeros"]], "num_receive_ports (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_receive_ports"]], "num_transmit_ports (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.num_transmit_ports"]], "port (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.port"]], "rx_gain (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.rx_gain"]], "sampling_rate (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.sampling_rate"]], "scale_transmission (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.scale_transmission"]], "trigger() (usrpdevice method)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.trigger"]], "tx_gain (usrpdevice property)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.tx_gain"]], "yaml_tag (usrpdevice attribute)": [[120, "hermespy.hardware_loop.uhd.usrp.UsrpDevice.yaml_tag"]], "artifactplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.ArtifactPlot"]], "devicereceptionplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.DeviceReceptionPlot"]], "devicetransmissionplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.DeviceTransmissionPlot"]], "evaluationplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.EvaluationPlot"]], "eyeplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.EyePlot"]], "hardwareloopdeviceplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot"]], "hardwareloopevaluatorplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot"]], "radarrangeplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.RadarRangePlot"]], "receivedconstellationplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.ReceivedConstellationPlot"]], "signalplot (class in hermespy.hardware_loop.visualizers)": [[121, "hermespy.hardware_loop.visualizers.SignalPlot"]], "device (hardwareloopdeviceplot property)": [[121, "hermespy.hardware_loop.visualizers.HardwareLoopDevicePlot.device"]], "evaluator (hardwareloopevaluatorplot property)": [[121, "hermespy.hardware_loop.visualizers.HardwareLoopEvaluatorPlot.evaluator"]], "hermespy.hardware_loop.visualizers": [[121, "module-hermespy.hardware_loop.visualizers"]], "jcasreception (class in hermespy.jcas.matched_filtering)": [[123, "hermespy.jcas.matched_filtering.JCASReception"]], "jcastransmission (class in hermespy.jcas.matched_filtering)": [[123, "hermespy.jcas.matched_filtering.JCASTransmission"]], "matchedfilterjcas (class in hermespy.jcas.matched_filtering)": [[123, "hermespy.jcas.matched_filtering.MatchedFilterJcas"]], "device (matchedfilterjcas property)": [[123, "hermespy.jcas.matched_filtering.MatchedFilterJcas.device"]], "frame_duration (matchedfilterjcas property)": [[123, "hermespy.jcas.matched_filtering.MatchedFilterJcas.frame_duration"]], "hermespy.jcas.matched_filtering": [[123, "module-hermespy.jcas.matched_filtering"]], "max_range (matchedfilterjcas property)": [[123, "hermespy.jcas.matched_filtering.MatchedFilterJcas.max_range"]], "range_resolution (matchedfilterjcas property)": [[123, "hermespy.jcas.matched_filtering.MatchedFilterJcas.range_resolution"]], "sampling_rate (matchedfilterjcas property)": [[123, "hermespy.jcas.matched_filtering.MatchedFilterJcas.sampling_rate"]], "yaml_tag (matchedfilterjcas attribute)": [[123, "hermespy.jcas.matched_filtering.MatchedFilterJcas.yaml_tag"]], "bitssource (class in hermespy.modem.bits_source)": [[125, "hermespy.modem.bits_source.BitsSource"]], "randombitssource (class in hermespy.modem.bits_source)": [[125, "hermespy.modem.bits_source.RandomBitsSource"]], "streambitssource (class in hermespy.modem.bits_source)": [[125, "hermespy.modem.bits_source.StreamBitsSource"]], "generate_bits() (bitssource method)": [[125, "hermespy.modem.bits_source.BitsSource.generate_bits"]], "generate_bits() (randombitssource method)": [[125, "hermespy.modem.bits_source.RandomBitsSource.generate_bits"]], "generate_bits() (streambitssource method)": [[125, "hermespy.modem.bits_source.StreamBitsSource.generate_bits"]], "communicationevaluator (class in hermespy.modem.evaluators)": [[127, "hermespy.modem.evaluators.CommunicationEvaluator"]], "generate_result() (communicationevaluator method)": [[127, "hermespy.modem.evaluators.CommunicationEvaluator.generate_result"]], "receiving_modem (communicationevaluator property)": [[127, "hermespy.modem.evaluators.CommunicationEvaluator.receiving_modem"]], "transmitting_modem (communicationevaluator property)": [[127, "hermespy.modem.evaluators.CommunicationEvaluator.transmitting_modem"]], "biterrorartifact (class in hermespy.modem.evaluators)": [[129, "hermespy.modem.evaluators.BitErrorArtifact"]], "biterrorevaluation (class in hermespy.modem.evaluators)": [[129, "hermespy.modem.evaluators.BitErrorEvaluation"]], "biterrorevaluator (class in hermespy.modem.evaluators)": [[129, "hermespy.modem.evaluators.BitErrorEvaluator"]], "abbreviation (biterrorevaluator property)": [[129, "hermespy.modem.evaluators.BitErrorEvaluator.abbreviation"]], "artifact() (biterrorevaluation method)": [[129, "hermespy.modem.evaluators.BitErrorEvaluation.artifact"]], "evaluate() (biterrorevaluator method)": [[129, "hermespy.modem.evaluators.BitErrorEvaluator.evaluate"]], "title (biterrorevaluation property)": [[129, "hermespy.modem.evaluators.BitErrorEvaluation.title"]], "title (biterrorevaluator property)": [[129, "hermespy.modem.evaluators.BitErrorEvaluator.title"]], "blockerrorartifact (class in hermespy.modem.evaluators)": [[130, "hermespy.modem.evaluators.BlockErrorArtifact"]], "blockerrorevaluation (class in hermespy.modem.evaluators)": [[130, "hermespy.modem.evaluators.BlockErrorEvaluation"]], "blockerrorevaluator (class in hermespy.modem.evaluators)": [[130, "hermespy.modem.evaluators.BlockErrorEvaluator"]], "abbreviation (blockerrorevaluator property)": [[130, "hermespy.modem.evaluators.BlockErrorEvaluator.abbreviation"]], "artifact() (blockerrorevaluation method)": [[130, "hermespy.modem.evaluators.BlockErrorEvaluation.artifact"]], "evaluate() (blockerrorevaluator method)": [[130, "hermespy.modem.evaluators.BlockErrorEvaluator.evaluate"]], "title (blockerrorevaluation property)": [[130, "hermespy.modem.evaluators.BlockErrorEvaluation.title"]], "title (blockerrorevaluator property)": [[130, "hermespy.modem.evaluators.BlockErrorEvaluator.title"]], "frameerrorartifact (class in hermespy.modem.evaluators)": [[131, "hermespy.modem.evaluators.FrameErrorArtifact"]], "frameerrorevaluation (class in hermespy.modem.evaluators)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluation"]], "frameerrorevaluator (class in hermespy.modem.evaluators)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluator"]], "abbreviation (frameerrorevaluator property)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluator.abbreviation"]], "artifact() (frameerrorevaluation method)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluation.artifact"]], "evaluate() (frameerrorevaluator method)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluator.evaluate"]], "title (frameerrorevaluation property)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluation.title"]], "title (frameerrorevaluator property)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluator.title"]], "yaml_tag (frameerrorevaluator attribute)": [[131, "hermespy.modem.evaluators.FrameErrorEvaluator.yaml_tag"]], "throughputartifact (class in hermespy.modem.evaluators)": [[132, "hermespy.modem.evaluators.ThroughputArtifact"]], "throughputevaluation (class in hermespy.modem.evaluators)": [[132, "hermespy.modem.evaluators.ThroughputEvaluation"]], "throughputevaluator (class in hermespy.modem.evaluators)": [[132, "hermespy.modem.evaluators.ThroughputEvaluator"]], "abbreviation (throughputevaluator property)": [[132, "hermespy.modem.evaluators.ThroughputEvaluator.abbreviation"]], "artifact() (throughputevaluation method)": [[132, "hermespy.modem.evaluators.ThroughputEvaluation.artifact"]], "evaluate() (throughputevaluator method)": [[132, "hermespy.modem.evaluators.ThroughputEvaluator.evaluate"]], "title (throughputevaluation property)": [[132, "hermespy.modem.evaluators.ThroughputEvaluation.title"]], "title (throughputevaluator property)": [[132, "hermespy.modem.evaluators.ThroughputEvaluator.title"]], "yaml_tag (throughputevaluator attribute)": [[132, "hermespy.modem.evaluators.ThroughputEvaluator.yaml_tag"]], "basemodem (class in hermespy.modem.modem)": [[133, "hermespy.modem.modem.BaseModem"]], "encoder_manager (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.encoder_manager"]], "frame_duration (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.frame_duration"]], "num_data_bits_per_frame (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.num_data_bits_per_frame"]], "num_receive_ports (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.num_receive_ports"]], "num_transmit_ports (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.num_transmit_ports"]], "precoding (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.precoding"]], "receiving_device (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.receiving_device"]], "samples_per_frame (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.samples_per_frame"]], "sampling_rate (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.sampling_rate"]], "symbol_duration (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.symbol_duration"]], "transmitting_device (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.transmitting_device"]], "waveform (basemodem property)": [[133, "hermespy.modem.modem.BaseModem.waveform"]], "communicationreception (class in hermespy.modem.modem)": [[134, "hermespy.modem.modem.CommunicationReception"]], "bits (communicationreception property)": [[134, "hermespy.modem.modem.CommunicationReception.bits"]], "encoded_bits (communicationreception property)": [[134, "hermespy.modem.modem.CommunicationReception.encoded_bits"]], "equalized_symbols (communicationreception property)": [[134, "hermespy.modem.modem.CommunicationReception.equalized_symbols"]], "frames (communicationreception attribute)": [[134, "hermespy.modem.modem.CommunicationReception.frames"]], "num_frames (communicationreception property)": [[134, "hermespy.modem.modem.CommunicationReception.num_frames"]], "symbols (communicationreception property)": [[134, "hermespy.modem.modem.CommunicationReception.symbols"]], "communicationreceptionframe (class in hermespy.modem.modem)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame"]], "decoded_bits (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_bits"]], "decoded_signal (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_signal"]], "decoded_symbols (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.decoded_symbols"]], "encoded_bits (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.encoded_bits"]], "equalized_symbols (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.equalized_symbols"]], "signal (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.signal"]], "symbols (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.symbols"]], "timestamp (communicationreceptionframe attribute)": [[135, "hermespy.modem.modem.CommunicationReceptionFrame.timestamp"]], "communicationtransmission (class in hermespy.modem.modem)": [[136, "hermespy.modem.modem.CommunicationTransmission"]], "bits (communicationtransmission property)": [[136, "hermespy.modem.modem.CommunicationTransmission.bits"]], "frames (communicationtransmission attribute)": [[136, "hermespy.modem.modem.CommunicationTransmission.frames"]], "num_frames (communicationtransmission property)": [[136, "hermespy.modem.modem.CommunicationTransmission.num_frames"]], "symbols (communicationtransmission property)": [[136, "hermespy.modem.modem.CommunicationTransmission.symbols"]], "communicationtransmissionframe (class in hermespy.modem.modem)": [[137, "hermespy.modem.modem.CommunicationTransmissionFrame"]], "bits (communicationtransmissionframe attribute)": [[137, "hermespy.modem.modem.CommunicationTransmissionFrame.bits"]], "encoded_bits (communicationtransmissionframe attribute)": [[137, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_bits"]], "encoded_symbols (communicationtransmissionframe attribute)": [[137, "hermespy.modem.modem.CommunicationTransmissionFrame.encoded_symbols"]], "signal (communicationtransmissionframe attribute)": [[137, "hermespy.modem.modem.CommunicationTransmissionFrame.signal"]], "symbols (communicationtransmissionframe attribute)": [[137, "hermespy.modem.modem.CommunicationTransmissionFrame.symbols"]], "timestamp (communicationtransmissionframe attribute)": [[137, "hermespy.modem.modem.CommunicationTransmissionFrame.timestamp"]], "duplexmodem (class in hermespy.modem.modem)": [[138, "hermespy.modem.modem.DuplexModem"]], "device (duplexmodem property)": [[138, "hermespy.modem.modem.DuplexModem.device"]], "receiving_device (duplexmodem property)": [[138, "hermespy.modem.modem.DuplexModem.receiving_device"]], "transmitting_device (duplexmodem property)": [[138, "hermespy.modem.modem.DuplexModem.transmitting_device"]], "yaml_tag (duplexmodem attribute)": [[138, "hermespy.modem.modem.DuplexModem.yaml_tag"]], "receivingmodem (class in hermespy.modem.modem)": [[139, "hermespy.modem.modem.ReceivingModem"]], "_receive() (receivingmodem method)": [[139, "hermespy.modem.modem.ReceivingModem._receive"]], "device (receivingmodem property)": [[139, "hermespy.modem.modem.ReceivingModem.device"]], "num_receive_ports (receivingmodem property)": [[139, "hermespy.modem.modem.ReceivingModem.num_receive_ports"]], "receive_stream_coding (receivingmodem property)": [[139, "hermespy.modem.modem.ReceivingModem.receive_stream_coding"]], "receiving_device (receivingmodem property)": [[139, "hermespy.modem.modem.ReceivingModem.receiving_device"]], "transmitting_device (receivingmodem property)": [[139, "hermespy.modem.modem.ReceivingModem.transmitting_device"]], "yaml_tag (receivingmodem attribute)": [[139, "hermespy.modem.modem.ReceivingModem.yaml_tag"]], "simplexlink (class in hermespy.modem.modem)": [[140, "hermespy.modem.modem.SimplexLink"]], "receiving_device (simplexlink property)": [[140, "hermespy.modem.modem.SimplexLink.receiving_device"]], "reference (simplexlink property)": [[140, "hermespy.modem.modem.SimplexLink.reference"]], "transmitting_device (simplexlink property)": [[140, "hermespy.modem.modem.SimplexLink.transmitting_device"]], "yaml_tag (simplexlink attribute)": [[140, "hermespy.modem.modem.SimplexLink.yaml_tag"]], "transmittingmodem (class in hermespy.modem.modem)": [[141, "hermespy.modem.modem.TransmittingModem"]], "_transmit() (transmittingmodem method)": [[141, "hermespy.modem.modem.TransmittingModem._transmit"]], "bits_source (transmittingmodem property)": [[141, "hermespy.modem.modem.TransmittingModem.bits_source"]], "device (transmittingmodem property)": [[141, "hermespy.modem.modem.TransmittingModem.device"]], "num_transmit_ports (transmittingmodem property)": [[141, "hermespy.modem.modem.TransmittingModem.num_transmit_ports"]], "receiving_device (transmittingmodem property)": [[141, "hermespy.modem.modem.TransmittingModem.receiving_device"]], "transmit_stream_coding (transmittingmodem property)": [[141, "hermespy.modem.modem.TransmittingModem.transmit_stream_coding"]], "transmitting_device (transmittingmodem property)": [[141, "hermespy.modem.modem.TransmittingModem.transmitting_device"]], "dft (class in hermespy.modem.precoding.dft)": [[143, "hermespy.modem.precoding.dft.DFT"]], "decode() (dft method)": [[143, "hermespy.modem.precoding.dft.DFT.decode"]], "encode() (dft method)": [[143, "hermespy.modem.precoding.dft.DFT.encode"]], "num_input_streams (dft property)": [[143, "hermespy.modem.precoding.dft.DFT.num_input_streams"]], "num_output_streams (dft property)": [[143, "hermespy.modem.precoding.dft.DFT.num_output_streams"]], "maximumratiocombining (class in hermespy.modem.precoding.ratio_combining)": [[144, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining"]], "decode() (maximumratiocombining method)": [[144, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.decode"]], "encode() (maximumratiocombining method)": [[144, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.encode"]], "num_input_streams (maximumratiocombining property)": [[144, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.num_input_streams"]], "num_output_streams (maximumratiocombining property)": [[144, "hermespy.modem.precoding.ratio_combining.MaximumRatioCombining.num_output_streams"]], "singlecarrier (class in hermespy.modem.precoding.single_carrier)": [[145, "hermespy.modem.precoding.single_carrier.SingleCarrier"]], "decode() (singlecarrier method)": [[145, "hermespy.modem.precoding.single_carrier.SingleCarrier.decode"]], "encode() (singlecarrier method)": [[145, "hermespy.modem.precoding.single_carrier.SingleCarrier.encode"]], "num_input_streams (singlecarrier property)": [[145, "hermespy.modem.precoding.single_carrier.SingleCarrier.num_input_streams"]], "num_output_streams (singlecarrier property)": [[145, "hermespy.modem.precoding.single_carrier.SingleCarrier.num_output_streams"]], "alamouti (class in hermespy.modem.precoding.space_time_block_coding)": [[146, "hermespy.modem.precoding.space_time_block_coding.Alamouti"]], "ganesan (class in hermespy.modem.precoding.space_time_block_coding)": [[146, "hermespy.modem.precoding.space_time_block_coding.Ganesan"]], "decode() (alamouti method)": [[146, "hermespy.modem.precoding.space_time_block_coding.Alamouti.decode"]], "decode() (ganesan method)": [[146, "hermespy.modem.precoding.space_time_block_coding.Ganesan.decode"]], "encode() (alamouti method)": [[146, "hermespy.modem.precoding.space_time_block_coding.Alamouti.encode"]], "encode() (ganesan method)": [[146, "hermespy.modem.precoding.space_time_block_coding.Ganesan.encode"]], "num_input_streams (alamouti property)": [[146, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_input_streams"]], "num_input_streams (ganesan property)": [[146, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_input_streams"]], "num_output_streams (alamouti property)": [[146, "hermespy.modem.precoding.space_time_block_coding.Alamouti.num_output_streams"]], "num_output_streams (ganesan property)": [[146, "hermespy.modem.precoding.space_time_block_coding.Ganesan.num_output_streams"]], "rate (ganesan property)": [[146, "hermespy.modem.precoding.space_time_block_coding.Ganesan.rate"]], "spatialmultiplexing (class in hermespy.modem.precoding.spatial_multiplexing)": [[147, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing"]], "decode() (spatialmultiplexing method)": [[147, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.decode"]], "encode() (spatialmultiplexing method)": [[147, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.encode"]], "num_input_streams (spatialmultiplexing property)": [[147, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.num_input_streams"]], "num_output_streams (spatialmultiplexing property)": [[147, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.num_output_streams"]], "rate (spatialmultiplexing property)": [[147, "hermespy.modem.precoding.spatial_multiplexing.SpatialMultiplexing.rate"]], "symbolprecoder (class in hermespy.modem.precoding.symbol_precoding)": [[148, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder"]], "decode() (symbolprecoder method)": [[148, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder.decode"]], "encode() (symbolprecoder method)": [[148, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoder.encode"]], "symbolprecoding (class in hermespy.modem.precoding.symbol_precoding)": [[149, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding"]], "decode() (symbolprecoding method)": [[149, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding.decode"]], "encode() (symbolprecoding method)": [[149, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding.encode"]], "num_encoded_blocks() (symbolprecoding method)": [[149, "hermespy.modem.precoding.symbol_precoding.SymbolPrecoding.num_encoded_blocks"]], "data (symboltype attribute)": [[150, "hermespy.modem.symbols.SymbolType.DATA"]], "pilot (symboltype attribute)": [[150, "hermespy.modem.symbols.SymbolType.PILOT"]], "reference (symboltype attribute)": [[150, "hermespy.modem.symbols.SymbolType.REFERENCE"]], "statedsymbols (class in hermespy.modem.symbols)": [[150, "hermespy.modem.symbols.StatedSymbols"]], "symbol (class in hermespy.modem.symbols)": [[150, "hermespy.modem.symbols.Symbol"]], "symboltype (class in hermespy.modem.symbols)": [[150, "hermespy.modem.symbols.SymbolType"]], "symbols (class in hermespy.modem.symbols)": [[150, "hermespy.modem.symbols.Symbols"]], "append_stream() (symbols method)": [[150, "hermespy.modem.symbols.Symbols.append_stream"]], "append_symbols() (symbols method)": [[150, "hermespy.modem.symbols.Symbols.append_symbols"]], "copy() (statedsymbols method)": [[150, "hermespy.modem.symbols.StatedSymbols.copy"]], "copy() (symbols method)": [[150, "hermespy.modem.symbols.Symbols.copy"]], "dense_states() (statedsymbols method)": [[150, "hermespy.modem.symbols.StatedSymbols.dense_states"]], "flag (symbol attribute)": [[150, "hermespy.modem.symbols.Symbol.flag"]], "hermespy.modem.symbols": [[150, "module-hermespy.modem.symbols"]], "num_blocks (symbols property)": [[150, "hermespy.modem.symbols.Symbols.num_blocks"]], "num_streams (symbols property)": [[150, "hermespy.modem.symbols.Symbols.num_streams"]], "num_symbols (symbols property)": [[150, "hermespy.modem.symbols.Symbols.num_symbols"]], "num_transmit_streams (statedsymbols property)": [[150, "hermespy.modem.symbols.StatedSymbols.num_transmit_streams"]], "plot_constellation() (symbols method)": [[150, "hermespy.modem.symbols.Symbols.plot_constellation"]], "raw (symbols property)": [[150, "hermespy.modem.symbols.Symbols.raw"]], "states (statedsymbols property)": [[150, "hermespy.modem.symbols.StatedSymbols.states"]], "value (symbol attribute)": [[150, "hermespy.modem.symbols.Symbol.value"]], "communicationwaveform (class in hermespy.modem.waveform)": [[151, "hermespy.modem.waveform.CommunicationWaveform"]], "configurablepilotwaveform (class in hermespy.modem.waveform)": [[151, "hermespy.modem.waveform.ConfigurablePilotWaveform"]], "pilotcommunicationwaveform (class in hermespy.modem.waveform)": [[151, "hermespy.modem.waveform.PilotCommunicationWaveform"]], "waveformtype (class in hermespy.modem.waveform)": [[151, "hermespy.modem.waveform.WaveformType"]], "bandwidth (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.bandwidth"]], "bit_energy (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.bit_energy"]], "bits_per_frame() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.bits_per_frame"]], "bits_per_symbol (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.bits_per_symbol"]], "channel_equalization (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.channel_equalization"]], "channel_estimation (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.channel_estimation"]], "data_rate() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.data_rate"]], "demodulate() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.demodulate"]], "equalize_symbols() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.equalize_symbols"]], "estimate_channel() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.estimate_channel"]], "frame_duration (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.frame_duration"]], "map() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.map"]], "modem (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.modem"]], "modulate() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.modulate"]], "modulation_order (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.modulation_order"]], "num_data_symbols (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.num_data_symbols"]], "oversampling_factor (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.oversampling_factor"]], "pick() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.pick"]], "pilot_signal (pilotcommunicationwaveform property)": [[151, "hermespy.modem.waveform.PilotCommunicationWaveform.pilot_signal"]], "pilot_symbol_sequence (configurablepilotwaveform attribute)": [[151, "hermespy.modem.waveform.ConfigurablePilotWaveform.pilot_symbol_sequence"]], "pilot_symbols() (configurablepilotwaveform method)": [[151, "hermespy.modem.waveform.ConfigurablePilotWaveform.pilot_symbols"]], "place() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.place"]], "power (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.power"]], "repeat_pilot_symbol_sequence (configurablepilotwaveform attribute)": [[151, "hermespy.modem.waveform.ConfigurablePilotWaveform.repeat_pilot_symbol_sequence"]], "samples_per_frame (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.samples_per_frame"]], "sampling_rate (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.sampling_rate"]], "symbol_duration (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.symbol_duration"]], "symbol_energy (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.symbol_energy"]], "symbol_precoding_support (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.symbol_precoding_support"]], "symbol_type (communicationwaveform attribute)": [[151, "hermespy.modem.waveform.CommunicationWaveform.symbol_type"]], "synchronization (communicationwaveform property)": [[151, "hermespy.modem.waveform.CommunicationWaveform.synchronization"]], "unmap() (communicationwaveform method)": [[151, "hermespy.modem.waveform.CommunicationWaveform.unmap"]], "channelequalization (class in hermespy.modem.waveform)": [[152, "hermespy.modem.waveform.ChannelEqualization"]], "equalize_channel() (channelequalization method)": [[152, "hermespy.modem.waveform.ChannelEqualization.equalize_channel"]], "waveform (channelequalization property)": [[152, "hermespy.modem.waveform.ChannelEqualization.waveform"]], "channelestimation (class in hermespy.modem.waveform)": [[153, "hermespy.modem.waveform.ChannelEstimation"]], "estimate_channel() (channelestimation method)": [[153, "hermespy.modem.waveform.ChannelEstimation.estimate_channel"]], "waveform (channelestimation property)": [[153, "hermespy.modem.waveform.ChannelEstimation.waveform"]], "synchronization (class in hermespy.modem.waveform)": [[154, "hermespy.modem.waveform.Synchronization"]], "synchronize() (synchronization method)": [[154, "hermespy.modem.waveform.Synchronization.synchronize"]], "waveform (synchronization property)": [[154, "hermespy.modem.waveform.Synchronization.waveform"]], "zeroforcingchannelequalization (class in hermespy.modem.waveform)": [[155, "hermespy.modem.waveform.ZeroForcingChannelEqualization"]], "equalize_channel() (zeroforcingchannelequalization method)": [[155, "hermespy.modem.waveform.ZeroForcingChannelEqualization.equalize_channel"]], "yaml_tag (zeroforcingchannelequalization attribute)": [[155, "hermespy.modem.waveform.ZeroForcingChannelEqualization.yaml_tag"]], "chirpfskcorrelationsynchronization (class in hermespy.modem.waveform_chirp_fsk)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKCorrelationSynchronization"]], "chirpfsksynchronization (class in hermespy.modem.waveform_chirp_fsk)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKSynchronization"]], "chirpfskwaveform (class in hermespy.modem.waveform_chirp_fsk)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform"]], "bandwidth (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bandwidth"]], "bit_energy (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bit_energy"]], "bits_per_symbol (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.bits_per_symbol"]], "chirp_bandwidth (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirp_bandwidth"]], "chirp_duration (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirp_duration"]], "chirps_in_frame (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.chirps_in_frame"]], "demodulate() (chirpfskwaveform method)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.demodulate"]], "frame_duration (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.frame_duration"]], "freq_difference (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.freq_difference"]], "guard_interval (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.guard_interval"]], "map() (chirpfskwaveform method)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.map"]], "modulate() (chirpfskwaveform method)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.modulate"]], "modulation_order (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.modulation_order"]], "num_data_chirps (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_data_chirps"]], "num_data_symbols (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_data_symbols"]], "num_pilot_chirps (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.num_pilot_chirps"]], "pick() (chirpfskwaveform method)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.pick"]], "pilot_signal (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.pilot_signal"]], "place() (chirpfskwaveform method)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.place"]], "power (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.power"]], "samples_in_chirp (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.samples_in_chirp"]], "samples_per_frame (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.samples_per_frame"]], "sampling_rate (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.sampling_rate"]], "symbol_duration (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_duration"]], "symbol_energy (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_energy"]], "symbol_precoding_support (chirpfskwaveform property)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_precoding_support"]], "symbol_type (chirpfskwaveform attribute)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.symbol_type"]], "unmap() (chirpfskwaveform method)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKWaveform.unmap"]], "yaml_tag (chirpfskcorrelationsynchronization attribute)": [[157, "hermespy.modem.waveform_chirp_fsk.ChirpFSKCorrelationSynchronization.yaml_tag"]], "correlationsynchronization (class in hermespy.modem.waveform_correlation_synchronization)": [[158, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization"]], "guard_ratio (correlationsynchronization property)": [[158, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.guard_ratio"]], "synchronize() (correlationsynchronization method)": [[158, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.synchronize"]], "threshold (correlationsynchronization property)": [[158, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.threshold"]], "yaml_tag (correlationsynchronization attribute)": [[158, "hermespy.modem.waveform_correlation_synchronization.CorrelationSynchronization.yaml_tag"]], "data (elementtype attribute)": [[160, "hermespy.modem.waveform_ofdm.ElementType.DATA"]], "elementtype (class in hermespy.modem.waveform_ofdm)": [[160, "hermespy.modem.waveform_ofdm.ElementType"]], "frameelement (class in hermespy.modem.waveform_ofdm)": [[160, "hermespy.modem.waveform_ofdm.FrameElement"]], "null (elementtype attribute)": [[160, "hermespy.modem.waveform_ofdm.ElementType.NULL"]], "reference (elementtype attribute)": [[160, "hermespy.modem.waveform_ofdm.ElementType.REFERENCE"]], "repetitions (frameelement attribute)": [[160, "hermespy.modem.waveform_ofdm.FrameElement.repetitions"]], "type (frameelement attribute)": [[160, "hermespy.modem.waveform_ofdm.FrameElement.type"]], "frameguardsection (class in hermespy.modem.waveform_ofdm)": [[161, "hermespy.modem.waveform_ofdm.FrameGuardSection"]], "demodulate() (frameguardsection method)": [[161, "hermespy.modem.waveform_ofdm.FrameGuardSection.demodulate"]], "duration (frameguardsection property)": [[161, "hermespy.modem.waveform_ofdm.FrameGuardSection.duration"]], "extract_channel() (frameguardsection method)": [[161, "hermespy.modem.waveform_ofdm.FrameGuardSection.extract_channel"]], "modulate() (frameguardsection method)": [[161, "hermespy.modem.waveform_ofdm.FrameGuardSection.modulate"]], "num_samples (frameguardsection property)": [[161, "hermespy.modem.waveform_ofdm.FrameGuardSection.num_samples"]], "cyclic (prefixtype attribute)": [[162, "hermespy.modem.waveform_ofdm.PrefixType.CYCLIC"]], "frameresource (class in hermespy.modem.waveform_ofdm)": [[162, "hermespy.modem.waveform_ofdm.FrameResource"]], "none (prefixtype attribute)": [[162, "hermespy.modem.waveform_ofdm.PrefixType.NONE"]], "prefixtype (class in hermespy.modem.waveform_ofdm)": [[162, "hermespy.modem.waveform_ofdm.PrefixType"]], "zeropad (prefixtype attribute)": [[162, "hermespy.modem.waveform_ofdm.PrefixType.ZEROPAD"]], "elements (frameresource attribute)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.elements"]], "mask (frameresource property)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.mask"]], "num_references (frameresource property)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.num_references"]], "num_subcarriers (frameresource property)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.num_subcarriers"]], "num_symbols (frameresource property)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.num_symbols"]], "prefix_ratio (frameresource property)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.prefix_ratio"]], "prefix_type (frameresource attribute)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.prefix_type"]], "repetitions (frameresource property)": [[162, "hermespy.modem.waveform_ofdm.FrameResource.repetitions"]], "framesection (class in hermespy.modem.waveform_ofdm)": [[163, "hermespy.modem.waveform_ofdm.FrameSection"]], "demodulate() (framesection method)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.demodulate"]], "extract_channel() (framesection method)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.extract_channel"]], "frame (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.frame"]], "modulate() (framesection method)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.modulate"]], "num_references (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.num_references"]], "num_repetitions (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.num_repetitions"]], "num_samples (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.num_samples"]], "num_subcarriers (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.num_subcarriers"]], "num_symbols (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.num_symbols"]], "num_words (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.num_words"]], "pick_symbols() (framesection method)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.pick_symbols"]], "place_symbols() (framesection method)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.place_symbols"]], "resource_mask (framesection property)": [[163, "hermespy.modem.waveform_ofdm.FrameSection.resource_mask"]], "framesymbolsection (class in hermespy.modem.waveform_ofdm)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection"]], "demodulate() (framesymbolsection method)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.demodulate"]], "extract_channel() (framesymbolsection method)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.extract_channel"]], "modulate() (framesymbolsection method)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.modulate"]], "num_references (framesymbolsection property)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_references"]], "num_samples (framesymbolsection property)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_samples"]], "num_subcarriers (framesymbolsection property)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_subcarriers"]], "num_symbols (framesymbolsection property)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_symbols"]], "num_words (framesymbolsection property)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.num_words"]], "pattern (framesymbolsection attribute)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.pattern"]], "prefix_offset (framesymbolsection property)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.prefix_offset"]], "resource_mask (framesymbolsection property)": [[164, "hermespy.modem.waveform_ofdm.FrameSymbolSection.resource_mask"]], "ofdmchannelequalization (class in hermespy.modem.waveform_ofdm)": [[165, "hermespy.modem.waveform_ofdm.OFDMChannelEqualization"]], "ofdmcorrelationsynchronization (class in hermespy.modem.waveform_ofdm)": [[166, "hermespy.modem.waveform_ofdm.OFDMCorrelationSynchronization"]], "yaml_tag (ofdmcorrelationsynchronization attribute)": [[166, "hermespy.modem.waveform_ofdm.OFDMCorrelationSynchronization.yaml_tag"]], "ofdmleastsquareschannelestimation (class in hermespy.modem.waveform_ofdm)": [[167, "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation"]], "estimate_channel() (ofdmleastsquareschannelestimation method)": [[167, "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation.estimate_channel"]], "yaml_tag (ofdmleastsquareschannelestimation attribute)": [[167, "hermespy.modem.waveform_ofdm.OFDMLeastSquaresChannelEstimation.yaml_tag"]], "ofdmsynchronization (class in hermespy.modem.waveform_ofdm)": [[168, "hermespy.modem.waveform_ofdm.OFDMSynchronization"]], "ofdmwaveform (class in hermespy.modem.waveform_ofdm)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform"]], "add_resource() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.add_resource"]], "add_section() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.add_section"]], "bandwidth (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.bandwidth"]], "bit_energy (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.bit_energy"]], "dc_suppression (ofdmwaveform attribute)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.dc_suppression"]], "demodulate() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.demodulate"]], "map() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.map"]], "modulate() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.modulate"]], "modulation_order (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.modulation_order"]], "num_data_symbols (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.num_data_symbols"]], "num_subcarriers (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.num_subcarriers"]], "pick() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.pick"]], "pilot_section (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.pilot_section"]], "pilot_signal (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.pilot_signal"]], "place() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.place"]], "power (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.power"]], "references_per_frame (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.references_per_frame"]], "resources (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.resources"]], "samples_per_frame (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.samples_per_frame"]], "sampling_rate (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.sampling_rate"]], "structure (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.structure"]], "subcarrier_spacing (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.subcarrier_spacing"]], "symbol_duration (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.symbol_duration"]], "symbol_energy (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.symbol_energy"]], "symbols_per_frame (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.symbols_per_frame"]], "unmap() (ofdmwaveform method)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.unmap"]], "words_per_frame (ofdmwaveform property)": [[169, "hermespy.modem.waveform_ofdm.OFDMWaveform.words_per_frame"]], "ofdmzeroforcingchannelequalization (class in hermespy.modem.waveform_ofdm)": [[170, "hermespy.modem.waveform_ofdm.OFDMZeroForcingChannelEqualization"]], "yaml_tag (ofdmzeroforcingchannelequalization attribute)": [[170, "hermespy.modem.waveform_ofdm.OFDMZeroForcingChannelEqualization.yaml_tag"]], "pilotsection (class in hermespy.modem.waveform_ofdm)": [[171, "hermespy.modem.waveform_ofdm.PilotSection"]], "demodulate() (pilotsection method)": [[171, "hermespy.modem.waveform_ofdm.PilotSection.demodulate"]], "from_yaml() (pilotsection class method)": [[171, "hermespy.modem.waveform_ofdm.PilotSection.from_yaml"]], "modulate() (pilotsection method)": [[171, "hermespy.modem.waveform_ofdm.PilotSection.modulate"]], "num_samples (pilotsection property)": [[171, "hermespy.modem.waveform_ofdm.PilotSection.num_samples"]], "pilot_elements (pilotsection property)": [[171, "hermespy.modem.waveform_ofdm.PilotSection.pilot_elements"]], "to_yaml() (pilotsection class method)": [[171, "hermespy.modem.waveform_ofdm.PilotSection.to_yaml"]], "yaml_tag (pilotsection attribute)": [[171, "hermespy.modem.waveform_ofdm.PilotSection.yaml_tag"]], "schmidlcoxpilotsection (class in hermespy.modem.waveform_ofdm)": [[172, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection"]], "demodulate() (schmidlcoxpilotsection method)": [[172, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection.demodulate"]], "num_samples (schmidlcoxpilotsection property)": [[172, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection.num_samples"]], "yaml_tag (schmidlcoxpilotsection attribute)": [[172, "hermespy.modem.waveform_ofdm.SchmidlCoxPilotSection.yaml_tag"]], "schmidlcoxsynchronization (class in hermespy.modem.waveform_ofdm)": [[173, "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization"]], "synchronize() (schmidlcoxsynchronization method)": [[173, "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization.synchronize"]], "yaml_tag (schmidlcoxsynchronization attribute)": [[173, "hermespy.modem.waveform_ofdm.SchmidlCoxSynchronization.yaml_tag"]], "filteredsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform"]], "rolledoffsinglecarrierwaveform (class in hermespy.modem.waveform_single_carrier)": [[174, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform"]], "bandwidth (rolledoffsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.bandwidth"]], "bit_energy (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.bit_energy"]], "demodulate() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.demodulate"]], "filter_length (rolledoffsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.filter_length"]], "guard_interval (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.guard_interval"]], "map() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.map"]], "modulate() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulate"]], "modulation_order (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.modulation_order"]], "num_data_symbols (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_data_symbols"]], "num_guard_samples (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_guard_samples"]], "num_postamble_symbols (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_postamble_symbols"]], "num_preamble_symbols (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.num_preamble_symbols"]], "pick() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pick"]], "pilot_rate (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_rate"]], "pilot_signal (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.pilot_signal"]], "place() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.place"]], "plot_filter() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter"]], "plot_filter_correlation() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.plot_filter_correlation"]], "power (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.power"]], "relative_bandwidth (rolledoffsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.relative_bandwidth"]], "roll_off (rolledoffsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.RolledOffSingleCarrierWaveform.roll_off"]], "samples_per_frame (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.samples_per_frame"]], "sampling_rate (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.sampling_rate"]], "symbol_duration (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_duration"]], "symbol_energy (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_energy"]], "symbol_rate (filteredsinglecarrierwaveform property)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.symbol_rate"]], "unmap() (filteredsinglecarrierwaveform method)": [[174, "hermespy.modem.waveform_single_carrier.FilteredSingleCarrierWaveform.unmap"]], "fmcwwaveform (class in hermespy.modem.waveform_single_carrier)": [[175, "hermespy.modem.waveform_single_carrier.FMCWWaveform"]], "bandwidth (fmcwwaveform property)": [[175, "hermespy.modem.waveform_single_carrier.FMCWWaveform.bandwidth"]], "chirp_duration (fmcwwaveform property)": [[175, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_duration"]], "chirp_slope (fmcwwaveform property)": [[175, "hermespy.modem.waveform_single_carrier.FMCWWaveform.chirp_slope"]], "yaml_tag (fmcwwaveform attribute)": [[175, "hermespy.modem.waveform_single_carrier.FMCWWaveform.yaml_tag"]], "raisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[176, "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform"]], "yaml_tag (raisedcosinewaveform attribute)": [[176, "hermespy.modem.waveform_single_carrier.RaisedCosineWaveform.yaml_tag"]], "rectangularwaveform (class in hermespy.modem.waveform_single_carrier)": [[177, "hermespy.modem.waveform_single_carrier.RectangularWaveform"]], "bandwidth (rectangularwaveform property)": [[177, "hermespy.modem.waveform_single_carrier.RectangularWaveform.bandwidth"]], "relative_bandwidth (rectangularwaveform property)": [[177, "hermespy.modem.waveform_single_carrier.RectangularWaveform.relative_bandwidth"]], "yaml_tag (rectangularwaveform attribute)": [[177, "hermespy.modem.waveform_single_carrier.RectangularWaveform.yaml_tag"]], "rootraisedcosinewaveform (class in hermespy.modem.waveform_single_carrier)": [[178, "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform"]], "yaml_tag (rootraisedcosinewaveform attribute)": [[178, "hermespy.modem.waveform_single_carrier.RootRaisedCosineWaveform.yaml_tag"]], "precoder (class in hermespy.precoding.precoding)": [[180, "hermespy.precoding.precoding.Precoder"]], "precodertype (class in hermespy.precoding.precoding)": [[180, "hermespy.precoding.precoding.PrecoderType"]], "precoding (class in hermespy.precoding.precoding)": [[180, "hermespy.precoding.precoding.Precoding"]], "__modem (precoding attribute)": [[180, "hermespy.precoding.precoding.Precoding.__modem"]], "__precoders (precoding attribute)": [[180, "hermespy.precoding.precoding.Precoding.__precoders"]], "from_yaml() (precoding class method)": [[180, "hermespy.precoding.precoding.Precoding.from_yaml"]], "hermespy.precoding.precoding": [[180, "module-hermespy.precoding.precoding"]], "modem (precoding property)": [[180, "hermespy.precoding.precoding.Precoding.modem"]], "num_input_streams (precoder property)": [[180, "hermespy.precoding.precoding.Precoder.num_input_streams"]], "num_input_streams (precoding property)": [[180, "hermespy.precoding.precoding.Precoding.num_input_streams"]], "num_output_streams (precoder property)": [[180, "hermespy.precoding.precoding.Precoder.num_output_streams"]], "num_output_streams (precoding property)": [[180, "hermespy.precoding.precoding.Precoding.num_output_streams"]], "pop_precoder() (precoding method)": [[180, "hermespy.precoding.precoding.Precoding.pop_precoder"]], "precoding (precoder property)": [[180, "hermespy.precoding.precoding.Precoder.precoding"]], "rate (precoder property)": [[180, "hermespy.precoding.precoding.Precoder.rate"]], "rate (precoding property)": [[180, "hermespy.precoding.precoding.Precoding.rate"]], "required_inputs() (precoding method)": [[180, "hermespy.precoding.precoding.Precoding.required_inputs"]], "required_num_input_streams (precoder property)": [[180, "hermespy.precoding.precoding.Precoder.required_num_input_streams"]], "required_num_output_streams (precoder property)": [[180, "hermespy.precoding.precoding.Precoder.required_num_output_streams"]], "required_outputs() (precoding method)": [[180, "hermespy.precoding.precoding.Precoding.required_outputs"]], "to_yaml() (precoding class method)": [[180, "hermespy.precoding.precoding.Precoding.to_yaml"]], "yaml_tag (precoder attribute)": [[180, "hermespy.precoding.precoding.Precoder.yaml_tag"]], "receivestreamcoding (class in hermespy.precoding.stream_precoding)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamCoding"]], "receivestreamdecoder (class in hermespy.precoding.stream_precoding)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder"]], "transmitstreamcoding (class in hermespy.precoding.stream_precoding)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamCoding"]], "transmitstreamencoder (class in hermespy.precoding.stream_precoding)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamEncoder"]], "decode() (receivestreamcoding method)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamCoding.decode"]], "decode_streams() (receivestreamdecoder method)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.decode_streams"]], "encode() (transmitstreamcoding method)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamCoding.encode"]], "encode_streams() (transmitstreamencoder method)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.encode_streams"]], "hermespy.precoding.stream_precoding": [[181, "module-hermespy.precoding.stream_precoding"]], "num_input_streams (receivestreamdecoder property)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_input_streams"]], "num_input_streams (transmitstreamencoder property)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_input_streams"]], "num_output_streams (receivestreamdecoder property)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_output_streams"]], "num_output_streams (transmitstreamencoder property)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_output_streams"]], "num_receive_input_streams (receivestreamdecoder property)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_receive_input_streams"]], "num_receive_output_streams (receivestreamdecoder property)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamDecoder.num_receive_output_streams"]], "num_transmit_input_streams (transmitstreamencoder property)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_transmit_input_streams"]], "num_transmit_output_streams (transmitstreamencoder property)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamEncoder.num_transmit_output_streams"]], "yaml_tag (receivestreamcoding attribute)": [[181, "hermespy.precoding.stream_precoding.ReceiveStreamCoding.yaml_tag"]], "yaml_tag (transmitstreamcoding attribute)": [[181, "hermespy.precoding.stream_precoding.TransmitStreamCoding.yaml_tag"]], "radarcube (class in hermespy.radar.cube)": [[183, "hermespy.radar.cube.RadarCube"]], "angle_bins (radarcube property)": [[183, "hermespy.radar.cube.RadarCube.angle_bins"]], "data (radarcube property)": [[183, "hermespy.radar.cube.RadarCube.data"]], "doppler_bins (radarcube property)": [[183, "hermespy.radar.cube.RadarCube.doppler_bins"]], "normalize_power() (radarcube method)": [[183, "hermespy.radar.cube.RadarCube.normalize_power"]], "plot_range() (radarcube method)": [[183, "hermespy.radar.cube.RadarCube.plot_range"]], "plot_range_velocity() (radarcube method)": [[183, "hermespy.radar.cube.RadarCube.plot_range_velocity"]], "range_bins (radarcube property)": [[183, "hermespy.radar.cube.RadarCube.range_bins"]], "velocity_bins (radarcube property)": [[183, "hermespy.radar.cube.RadarCube.velocity_bins"]], "maxdetector (class in hermespy.radar.detection)": [[184, "hermespy.radar.detection.MaxDetector"]], "detect() (maxdetector method)": [[184, "hermespy.radar.detection.MaxDetector.detect"]], "yaml_tag (maxdetector attribute)": [[184, "hermespy.radar.detection.MaxDetector.yaml_tag"]], "fromspherical() (pointdetection class method)": [[185, "hermespy.radar.detection.PointDetection.FromSpherical"]], "pointdetection (class in hermespy.radar.detection)": [[185, "hermespy.radar.detection.PointDetection"]], "position (pointdetection property)": [[185, "hermespy.radar.detection.PointDetection.position"]], "power (pointdetection property)": [[185, "hermespy.radar.detection.PointDetection.power"]], "velocity (pointdetection property)": [[185, "hermespy.radar.detection.PointDetection.velocity"]], "radardetector (class in hermespy.radar.detection)": [[186, "hermespy.radar.detection.RadarDetector"]], "detect() (radardetector method)": [[186, "hermespy.radar.detection.RadarDetector.detect"]], "radarpointcloud (class in hermespy.radar.detection)": [[187, "hermespy.radar.detection.RadarPointCloud"]], "add_point() (radarpointcloud method)": [[187, "hermespy.radar.detection.RadarPointCloud.add_point"]], "max_range (radarpointcloud property)": [[187, "hermespy.radar.detection.RadarPointCloud.max_range"]], "num_points (radarpointcloud property)": [[187, "hermespy.radar.detection.RadarPointCloud.num_points"]], "points (radarpointcloud property)": [[187, "hermespy.radar.detection.RadarPointCloud.points"]], "title (radarpointcloud property)": [[187, "hermespy.radar.detection.RadarPointCloud.title"]], "thresholddetector (class in hermespy.radar.detection)": [[188, "hermespy.radar.detection.ThresholdDetector"]], "detect() (thresholddetector method)": [[188, "hermespy.radar.detection.ThresholdDetector.detect"]], "min_power (thresholddetector property)": [[188, "hermespy.radar.detection.ThresholdDetector.min_power"]], "normalize (thresholddetector property)": [[188, "hermespy.radar.detection.ThresholdDetector.normalize"]], "peak_detection (thresholddetector property)": [[188, "hermespy.radar.detection.ThresholdDetector.peak_detection"]], "detectionprobartifact (class in hermespy.radar.evaluators)": [[189, "hermespy.radar.evaluators.DetectionProbArtifact"]], "detectionprobevaluator (class in hermespy.radar.evaluators)": [[189, "hermespy.radar.evaluators.DetectionProbEvaluator"]], "detectionprobabilityevaluation (class in hermespy.radar.evaluators)": [[189, "hermespy.radar.evaluators.DetectionProbabilityEvaluation"]], "abbreviation (detectionprobevaluator property)": [[189, "hermespy.radar.evaluators.DetectionProbEvaluator.abbreviation"]], "artifact() (detectionprobabilityevaluation method)": [[189, "hermespy.radar.evaluators.DetectionProbabilityEvaluation.artifact"]], "evaluate() (detectionprobevaluator method)": [[189, "hermespy.radar.evaluators.DetectionProbEvaluator.evaluate"]], "generate_result() (detectionprobevaluator method)": [[189, "hermespy.radar.evaluators.DetectionProbEvaluator.generate_result"]], "radar (detectionprobevaluator property)": [[189, "hermespy.radar.evaluators.DetectionProbEvaluator.radar"]], "title (detectionprobevaluator property)": [[189, "hermespy.radar.evaluators.DetectionProbEvaluator.title"]], "radarevaluator (class in hermespy.radar.evaluators)": [[190, "hermespy.radar.evaluators.RadarEvaluator"]], "generate_result() (radarevaluator method)": [[190, "hermespy.radar.evaluators.RadarEvaluator.generate_result"]], "radar_channel (radarevaluator property)": [[190, "hermespy.radar.evaluators.RadarEvaluator.radar_channel"]], "receiving_device (radarevaluator property)": [[190, "hermespy.radar.evaluators.RadarEvaluator.receiving_device"]], "receiving_radar (radarevaluator property)": [[190, "hermespy.radar.evaluators.RadarEvaluator.receiving_radar"]], "transmitting_device (radarevaluator property)": [[190, "hermespy.radar.evaluators.RadarEvaluator.transmitting_device"]], "from_hdf() (receiveroperatingcharacteristic class method)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.From_HDF"]], "from_scenarios() (receiveroperatingcharacteristic class method)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.From_Scenarios"]], "receiveroperatingcharacteristic (class in hermespy.radar.evaluators)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic"]], "rocartifact (class in hermespy.radar.evaluators)": [[191, "hermespy.radar.evaluators.RocArtifact"]], "rocevaluation (class in hermespy.radar.evaluators)": [[191, "hermespy.radar.evaluators.RocEvaluation"]], "rocevaluationresult (class in hermespy.radar.evaluators)": [[191, "hermespy.radar.evaluators.RocEvaluationResult"]], "abbreviation (receiveroperatingcharacteristic property)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.abbreviation"]], "artifact() (rocevaluation method)": [[191, "hermespy.radar.evaluators.RocEvaluation.artifact"]], "data_h0 (rocevaluation attribute)": [[191, "hermespy.radar.evaluators.RocEvaluation.data_h0"]], "data_h1 (rocevaluation attribute)": [[191, "hermespy.radar.evaluators.RocEvaluation.data_h1"]], "evaluate() (receiveroperatingcharacteristic method)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.evaluate"]], "from_scenarios() (receiveroperatingcharacteristic method)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.from_scenarios"]], "generate_result() (receiveroperatingcharacteristic method)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.generate_result"]], "h0_value (rocartifact property)": [[191, "hermespy.radar.evaluators.RocArtifact.h0_value"]], "h1_value (rocartifact property)": [[191, "hermespy.radar.evaluators.RocArtifact.h1_value"]], "title (receiveroperatingcharacteristic property)": [[191, "hermespy.radar.evaluators.ReceiverOperatingCharacteristic.title"]], "to_array() (rocevaluationresult method)": [[191, "hermespy.radar.evaluators.RocEvaluationResult.to_array"]], "to_scalar() (rocartifact method)": [[191, "hermespy.radar.evaluators.RocArtifact.to_scalar"]], "rootmeansquareartifact (class in hermespy.radar.evaluators)": [[192, "hermespy.radar.evaluators.RootMeanSquareArtifact"]], "rootmeansquareerror (class in hermespy.radar.evaluators)": [[192, "hermespy.radar.evaluators.RootMeanSquareError"]], "rootmeansquareerrorresult (class in hermespy.radar.evaluators)": [[192, "hermespy.radar.evaluators.RootMeanSquareErrorResult"]], "rootmeansquareevaluation (class in hermespy.radar.evaluators)": [[192, "hermespy.radar.evaluators.RootMeanSquareEvaluation"]], "abbreviation (rootmeansquareerror property)": [[192, "hermespy.radar.evaluators.RootMeanSquareError.abbreviation"]], "artifact() (rootmeansquareevaluation method)": [[192, "hermespy.radar.evaluators.RootMeanSquareEvaluation.artifact"]], "cummulation (rootmeansquareartifact property)": [[192, "hermespy.radar.evaluators.RootMeanSquareArtifact.cummulation"]], "evaluate() (rootmeansquareerror method)": [[192, "hermespy.radar.evaluators.RootMeanSquareError.evaluate"]], "generate_result() (rootmeansquareerror method)": [[192, "hermespy.radar.evaluators.RootMeanSquareError.generate_result"]], "num_errors (rootmeansquareartifact property)": [[192, "hermespy.radar.evaluators.RootMeanSquareArtifact.num_errors"]], "title (rootmeansquareerror property)": [[192, "hermespy.radar.evaluators.RootMeanSquareError.title"]], "to_scalar() (rootmeansquareartifact method)": [[192, "hermespy.radar.evaluators.RootMeanSquareArtifact.to_scalar"]], "fmcw (class in hermespy.radar.fmcw)": [[193, "hermespy.radar.fmcw.FMCW"]], "adc_sampling_rate (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.adc_sampling_rate"]], "bandwidth (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.bandwidth"]], "chirp_duration (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.chirp_duration"]], "energy (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.energy"]], "estimate() (fmcw method)": [[193, "hermespy.radar.fmcw.FMCW.estimate"]], "frame_duration (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.frame_duration"]], "max_range (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.max_range"]], "max_relative_doppler (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.max_relative_doppler"]], "num_chirps (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.num_chirps"]], "ping() (fmcw method)": [[193, "hermespy.radar.fmcw.FMCW.ping"]], "power (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.power"]], "pulse_rep_interval (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.pulse_rep_interval"]], "range_resolution (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.range_resolution"]], "relative_doppler_bins (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.relative_doppler_bins"]], "relative_doppler_resolution (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.relative_doppler_resolution"]], "sampling_rate (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.sampling_rate"]], "slope (fmcw property)": [[193, "hermespy.radar.fmcw.FMCW.slope"]], "radar (class in hermespy.radar.radar)": [[194, "hermespy.radar.radar.Radar"]], "_receive() (radar method)": [[194, "hermespy.radar.radar.Radar._receive"]], "_transmit() (radar method)": [[194, "hermespy.radar.radar.Radar._transmit"]], "detector (radar property)": [[194, "hermespy.radar.radar.Radar.detector"]], "frame_duration (radar property)": [[194, "hermespy.radar.radar.Radar.frame_duration"]], "max_range (radar property)": [[194, "hermespy.radar.radar.Radar.max_range"]], "receive_beamformer (radar property)": [[194, "hermespy.radar.radar.Radar.receive_beamformer"]], "sampling_rate (radar property)": [[194, "hermespy.radar.radar.Radar.sampling_rate"]], "transmit_beamformer (radar property)": [[194, "hermespy.radar.radar.Radar.transmit_beamformer"]], "velocity_resolution (radar property)": [[194, "hermespy.radar.radar.Radar.velocity_resolution"]], "waveform (radar property)": [[194, "hermespy.radar.radar.Radar.waveform"]], "radarreception (class in hermespy.radar.radar)": [[195, "hermespy.radar.radar.RadarReception"]], "cloud (radarreception property)": [[195, "hermespy.radar.radar.RadarReception.cloud"]], "cube (radarreception property)": [[195, "hermespy.radar.radar.RadarReception.cube"]], "radartransmission (class in hermespy.radar.radar)": [[196, "hermespy.radar.radar.RadarTransmission"]], "radarwaveform (class in hermespy.radar.radar)": [[197, "hermespy.radar.radar.RadarWaveform"]], "energy (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.energy"]], "estimate() (radarwaveform method)": [[197, "hermespy.radar.radar.RadarWaveform.estimate"]], "frame_duration (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.frame_duration"]], "max_range (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.max_range"]], "max_relative_doppler (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.max_relative_doppler"]], "ping() (radarwaveform method)": [[197, "hermespy.radar.radar.RadarWaveform.ping"]], "power (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.power"]], "range_bins (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.range_bins"]], "range_resolution (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.range_resolution"]], "relative_doppler_bins (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.relative_doppler_bins"]], "relative_doppler_resolution (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.relative_doppler_resolution"]], "sampling_rate (radarwaveform property)": [[197, "hermespy.radar.radar.RadarWaveform.sampling_rate"]], "simulatedantenna (class in hermespy.simulation.antennas)": [[200, "hermespy.simulation.antennas.SimulatedAntenna"], [204, "hermespy.simulation.antennas.SimulatedAntenna"]], "receive() (simulatedantenna method)": [[200, "hermespy.simulation.antennas.SimulatedAntenna.receive"], [204, "hermespy.simulation.antennas.SimulatedAntenna.receive"]], "transmit() (simulatedantenna method)": [[200, "hermespy.simulation.antennas.SimulatedAntenna.transmit"], [204, "hermespy.simulation.antennas.SimulatedAntenna.transmit"]], "weight (simulatedantenna property)": [[200, "hermespy.simulation.antennas.SimulatedAntenna.weight"], [204, "hermespy.simulation.antennas.SimulatedAntenna.weight"]], "simulatedantennaport (class in hermespy.simulation.antennas)": [[201, "hermespy.simulation.antennas.SimulatedAntennaPort"]], "rf_chain (simulatedantennaport property)": [[201, "hermespy.simulation.antennas.SimulatedAntennaPort.rf_chain"]], "simulatedantennas (class in hermespy.simulation.antennas)": [[202, "hermespy.simulation.antennas.SimulatedAntennas"]], "analog_digital_conversion() (simulatedantennas method)": [[202, "hermespy.simulation.antennas.SimulatedAntennas.analog_digital_conversion"]], "plot_pattern() (simulatedantennas method)": [[202, "hermespy.simulation.antennas.SimulatedAntennas.plot_pattern"]], "receive() (simulatedantennas method)": [[202, "hermespy.simulation.antennas.SimulatedAntennas.receive"]], "rf_chain_modified() (simulatedantennas method)": [[202, "hermespy.simulation.antennas.SimulatedAntennas.rf_chain_modified"]], "transmit() (simulatedantennas method)": [[202, "hermespy.simulation.antennas.SimulatedAntennas.transmit"]], "simulatedcustomarray (class in hermespy.simulation.antennas)": [[203, "hermespy.simulation.antennas.SimulatedCustomArray"]], "add_antenna() (simulatedcustomarray method)": [[203, "hermespy.simulation.antennas.SimulatedCustomArray.add_antenna"]], "add_port() (simulatedcustomarray method)": [[203, "hermespy.simulation.antennas.SimulatedCustomArray.add_port"]], "remove_port() (simulatedcustomarray method)": [[203, "hermespy.simulation.antennas.SimulatedCustomArray.remove_port"]], "simulatedidealantenna (class in hermespy.simulation.antennas)": [[205, "hermespy.simulation.antennas.SimulatedIdealAntenna"]], "yaml_tag (simulatedidealantenna attribute)": [[205, "hermespy.simulation.antennas.SimulatedIdealAntenna.yaml_tag"]], "simulatedlinearantenna (class in hermespy.simulation.antennas)": [[206, "hermespy.simulation.antennas.SimulatedLinearAntenna"]], "simulatedpatchantenna (class in hermespy.simulation.antennas)": [[207, "hermespy.simulation.antennas.SimulatedPatchAntenna"]], "yaml_tag (simulatedpatchantenna attribute)": [[207, "hermespy.simulation.antennas.SimulatedPatchAntenna.yaml_tag"]], "simulateduniformarray (class in hermespy.simulation.antennas)": [[208, "hermespy.simulation.antennas.SimulatedUniformArray"]], "coupling (class in hermespy.simulation.coupling.coupling)": [[209, "hermespy.simulation.coupling.coupling.Coupling"]], "device (coupling property)": [[209, "hermespy.simulation.coupling.coupling.Coupling.device"]], "hermespy.simulation.coupling.coupling": [[209, "module-hermespy.simulation.coupling.coupling"]], "receive() (coupling method)": [[209, "hermespy.simulation.coupling.coupling.Coupling.receive"]], "transmit() (coupling method)": [[209, "hermespy.simulation.coupling.coupling.Coupling.transmit"]], "impedancecoupling (class in hermespy.simulation.coupling.impedance)": [[210, "hermespy.simulation.coupling.impedance.ImpedanceCoupling"]], "hermespy.simulation.coupling.impedance": [[210, "module-hermespy.simulation.coupling.impedance"]], "matching_impedance (impedancecoupling property)": [[210, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.matching_impedance"]], "receive_correlation (impedancecoupling property)": [[210, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_correlation"]], "receive_impedance (impedancecoupling property)": [[210, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.receive_impedance"]], "transmit_correlation (impedancecoupling property)": [[210, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_correlation"]], "transmit_impedance (impedancecoupling property)": [[210, "hermespy.simulation.coupling.impedance.ImpedanceCoupling.transmit_impedance"]], "perfectcoupling (class in hermespy.simulation.coupling.perfect)": [[211, "hermespy.simulation.coupling.perfect.PerfectCoupling"]], "hermespy.simulation.coupling.perfect": [[211, "module-hermespy.simulation.coupling.perfect"]], "isolation (class in hermespy.simulation.isolation.isolation)": [[212, "hermespy.simulation.isolation.isolation.Isolation"]], "device (isolation property)": [[212, "hermespy.simulation.isolation.isolation.Isolation.device"]], "hermespy.simulation.isolation.isolation": [[212, "module-hermespy.simulation.isolation.isolation"]], "leak() (isolation method)": [[212, "hermespy.simulation.isolation.isolation.Isolation.leak"]], "hermespy.simulation.isolation.impedance": [[213, "module-hermespy.simulation.isolation.impedance"]], "perfectisolation (class in hermespy.simulation.isolation.perfect)": [[214, "hermespy.simulation.isolation.perfect.PerfectIsolation"]], "hermespy.simulation.isolation.perfect": [[214, "module-hermespy.simulation.isolation.perfect"]], "leak() (perfectisolation method)": [[214, "hermespy.simulation.isolation.perfect.PerfectIsolation.leak"]], "specificisolation (class in hermespy.simulation.isolation.specific)": [[215, "hermespy.simulation.isolation.specific.SpecificIsolation"]], "hermespy.simulation.isolation.specific": [[215, "module-hermespy.simulation.isolation.specific"]], "isolation (specificisolation property)": [[215, "hermespy.simulation.isolation.specific.SpecificIsolation.isolation"]], "awgn (class in hermespy.simulation.noise.noise)": [[216, "hermespy.simulation.noise.noise.AWGN"]], "awgnrealization (class in hermespy.simulation.noise.noise)": [[216, "hermespy.simulation.noise.noise.AWGNRealization"]], "noise (class in hermespy.simulation.noise.noise)": [[216, "hermespy.simulation.noise.noise.Noise"]], "noiserealization (class in hermespy.simulation.noise.noise)": [[216, "hermespy.simulation.noise.noise.NoiseRealization"]], "noiserealizationtype (class in hermespy.simulation.noise.noise)": [[216, "hermespy.simulation.noise.noise.NoiseRealizationType"]], "add() (noise method)": [[216, "hermespy.simulation.noise.noise.Noise.add"]], "add_to() (awgnrealization method)": [[216, "hermespy.simulation.noise.noise.AWGNRealization.add_to"]], "add_to() (noiserealization method)": [[216, "hermespy.simulation.noise.noise.NoiseRealization.add_to"]], "hermespy.simulation.noise.noise": [[216, "module-hermespy.simulation.noise.noise"]], "power (noise property)": [[216, "hermespy.simulation.noise.noise.Noise.power"]], "power (noiserealization property)": [[216, "hermespy.simulation.noise.noise.NoiseRealization.power"]], "realize() (awgn method)": [[216, "hermespy.simulation.noise.noise.AWGN.realize"]], "realize() (noise method)": [[216, "hermespy.simulation.noise.noise.Noise.realize"]], "rfchain (class in hermespy.simulation.rf_chain.rf_chain)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain"]], "adc (rfchain property)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.adc"]], "add_iq_imbalance() (rfchain method)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.add_iq_imbalance"]], "amplitude_imbalance (rfchain property)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.amplitude_imbalance"]], "hermespy.simulation.rf_chain.rf_chain": [[217, "module-hermespy.simulation.rf_chain.rf_chain"]], "phase_noise (rfchain property)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_noise"]], "phase_offset (rfchain property)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.phase_offset"]], "power_amplifier (rfchain property)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.power_amplifier"]], "receive() (rfchain method)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.receive"]], "transmit() (rfchain method)": [[217, "hermespy.simulation.rf_chain.rf_chain.RfChain.transmit"]], "analogdigitalconverter (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter"]], "mid_riser (quantizertype attribute)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType.MID_RISER"]], "mid_tread (quantizertype attribute)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType.MID_TREAD"]], "quantizertype (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.QuantizerType"]], "convert() (analogdigitalconverter method)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.convert"]], "gain (analogdigitalconverter attribute)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.gain"]], "num_quantization_bits (analogdigitalconverter property)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.num_quantization_bits"]], "num_quantization_levels (analogdigitalconverter property)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.num_quantization_levels"]], "plot_quantizer() (analogdigitalconverter method)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.plot_quantizer"]], "quantizer_type (analogdigitalconverter property)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.quantizer_type"]], "yaml_tag (analogdigitalconverter attribute)": [[219, "hermespy.simulation.rf_chain.analog_digital_converter.AnalogDigitalConverter.yaml_tag"]], "automaticgaincontrol (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl"]], "gaincontroltype (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType"]], "max_amplitude (gaincontroltype attribute)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType.MAX_AMPLITUDE"]], "none (gaincontroltype attribute)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType.NONE"]], "rms_amplitude (gaincontroltype attribute)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlType.RMS_AMPLITUDE"]], "agc_type (automaticgaincontrol property)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.agc_type"]], "backoff (automaticgaincontrol property)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.backoff"]], "estimate_gain() (automaticgaincontrol method)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.estimate_gain"]], "yaml_tag (automaticgaincontrol attribute)": [[220, "hermespy.simulation.rf_chain.analog_digital_converter.AutomaticGainControl.yaml_tag"]], "gain (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[221, "hermespy.simulation.rf_chain.analog_digital_converter.Gain"]], "estimate_gain() (gain method)": [[221, "hermespy.simulation.rf_chain.analog_digital_converter.Gain.estimate_gain"]], "gain (gain property)": [[221, "hermespy.simulation.rf_chain.analog_digital_converter.Gain.gain"]], "yaml_tag (gain attribute)": [[221, "hermespy.simulation.rf_chain.analog_digital_converter.Gain.yaml_tag"]], "gaincontrolbase (class in hermespy.simulation.rf_chain.analog_digital_converter)": [[222, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase"]], "adjust_signal() (gaincontrolbase method)": [[222, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.adjust_signal"]], "estimate_gain() (gaincontrolbase method)": [[222, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.estimate_gain"]], "rescale_quantization (gaincontrolbase property)": [[222, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.rescale_quantization"]], "scale_quantized_signal() (gaincontrolbase method)": [[222, "hermespy.simulation.rf_chain.analog_digital_converter.GainControlBase.scale_quantized_signal"]], "k0 (oscillatorphasenoise property)": [[223, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K0"]], "k2 (oscillatorphasenoise property)": [[223, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K2"]], "k3 (oscillatorphasenoise property)": [[223, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.K3"]], "nophasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[223, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise"]], "oscillatorphasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[223, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise"]], "phasenoise (class in hermespy.simulation.rf_chain.phase_noise)": [[223, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise"]], "add_noise() (nophasenoise method)": [[223, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.add_noise"]], "add_noise() (oscillatorphasenoise method)": [[223, "hermespy.simulation.rf_chain.phase_noise.OscillatorPhaseNoise.add_noise"]], "add_noise() (phasenoise method)": [[223, "hermespy.simulation.rf_chain.phase_noise.PhaseNoise.add_noise"]], "hermespy.simulation.rf_chain.phase_noise": [[223, "module-hermespy.simulation.rf_chain.phase_noise"]], "yaml_tag (nophasenoise attribute)": [[223, "hermespy.simulation.rf_chain.phase_noise.NoPhaseNoise.yaml_tag"]], "clippingpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[224, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier"]], "custompoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[224, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier"]], "poweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[224, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier"]], "rapppoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[224, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier"]], "salehpoweramplifier (class in hermespy.simulation.rf_chain.power_amplifier)": [[224, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier"]], "adjust_power (poweramplifier attribute)": [[224, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.adjust_power"]], "amplitude_alpha (salehpoweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_alpha"]], "amplitude_beta (salehpoweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.amplitude_beta"]], "gain (custompoweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.gain"]], "hermespy.simulation.rf_chain.power_amplifier": [[224, "module-hermespy.simulation.rf_chain.power_amplifier"]], "input (custompoweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.input"]], "model() (clippingpoweramplifier method)": [[224, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.model"]], "model() (custompoweramplifier method)": [[224, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.model"]], "model() (poweramplifier method)": [[224, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.model"]], "model() (rapppoweramplifier method)": [[224, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.model"]], "model() (salehpoweramplifier method)": [[224, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.model"]], "phase (custompoweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.CustomPowerAmplifier.phase"]], "phase_alpha (salehpoweramplifier attribute)": [[224, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_alpha"]], "phase_beta (salehpoweramplifier attribute)": [[224, "hermespy.simulation.rf_chain.power_amplifier.SalehPowerAmplifier.phase_beta"]], "plot() (poweramplifier method)": [[224, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.plot"]], "saturation_amplitude (poweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.saturation_amplitude"]], "send() (poweramplifier method)": [[224, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.send"]], "smoothness_factor (rapppoweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.smoothness_factor"]], "title (poweramplifier property)": [[224, "hermespy.simulation.rf_chain.power_amplifier.PowerAmplifier.title"]], "yaml_tag (clippingpoweramplifier attribute)": [[224, "hermespy.simulation.rf_chain.power_amplifier.ClippingPowerAmplifier.yaml_tag"]], "yaml_tag (rapppoweramplifier attribute)": [[224, "hermespy.simulation.rf_chain.power_amplifier.RappPowerAmplifier.yaml_tag"]], "simulateddevice (class in hermespy.simulation.simulated_device)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice"]], "antennas (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.antennas"]], "attached (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.attached"]], "carrier_frequency (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.carrier_frequency"]], "channel_realization() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.channel_realization"]], "coupling (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.coupling"]], "generate_output() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.generate_output"]], "input (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.input"]], "isolation (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.isolation"]], "noise (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.noise"]], "operator_separation (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.operator_separation"]], "output (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.output"]], "process_from_realization() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.process_from_realization"]], "process_input() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.process_input"]], "realization (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.realization"]], "realize_reception() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.realize_reception"]], "receive() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.receive"]], "rf_chain (simulateddevice attribute)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.rf_chain"]], "sampling_rate (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.sampling_rate"]], "scenario (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.scenario"]], "serialized_attribute (simulateddevice attribute)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.serialized_attribute"]], "snr (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.snr"]], "snr_type (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.snr_type"]], "transmit() (simulateddevice method)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.transmit"]], "trigger_model (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.trigger_model"]], "velocity (simulateddevice property)": [[225, "hermespy.simulation.simulated_device.SimulatedDevice.velocity"]], "from_processedsimulateddeviceinput() (simulateddevicereception class method)": [[226, "hermespy.simulation.simulated_device.SimulatedDeviceReception.From_ProcessedSimulatedDeviceInput"]], "simulateddevicereception (class in hermespy.simulation.simulated_device)": [[226, "hermespy.simulation.simulated_device.SimulatedDeviceReception"]], "from_simulateddeviceoutput() (simulateddevicetransmission class method)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission.From_SimulatedDeviceOutput"]], "simulateddevicetransmission (class in hermespy.simulation.simulated_device)": [[227, "hermespy.simulation.simulated_device.SimulatedDeviceTransmission"]], "simulateddrop (class in hermespy.simulation.simulation)": [[228, "hermespy.simulation.simulation.SimulatedDrop"]], "channel_realizations (simulateddrop property)": [[228, "hermespy.simulation.simulation.SimulatedDrop.channel_realizations"]], "simulation (class in hermespy.simulation.simulation)": [[229, "hermespy.simulation.simulation.Simulation"]], "console (simulation property)": [[229, "hermespy.simulation.simulation.Simulation.console"]], "console_mode (simulation property)": [[229, "hermespy.simulation.simulation.Simulation.console_mode"]], "dump_results (simulation attribute)": [[229, "hermespy.simulation.simulation.Simulation.dump_results"]], "from_yaml() (simulation class method)": [[229, "hermespy.simulation.simulation.Simulation.from_yaml"]], "num_samples (simulation property)": [[229, "hermespy.simulation.simulation.Simulation.num_samples"]], "plot_results (simulation attribute)": [[229, "hermespy.simulation.simulation.Simulation.plot_results"]], "run() (simulation method)": [[229, "hermespy.simulation.simulation.Simulation.run"]], "set_channel() (simulation method)": [[229, "hermespy.simulation.simulation.Simulation.set_channel"]], "to_yaml() (simulation class method)": [[229, "hermespy.simulation.simulation.Simulation.to_yaml"]], "simulationscenario (class in hermespy.simulation.simulation)": [[230, "hermespy.simulation.simulation.SimulationScenario"]], "add_device() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.add_device"]], "arriving_channels() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.arriving_channels"]], "channel() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.channel"]], "channels (simulationscenario property)": [[230, "hermespy.simulation.simulation.SimulationScenario.channels"]], "departing_channels() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.departing_channels"]], "new_device() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.new_device"]], "process_inputs() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.process_inputs"]], "propagate() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.propagate"]], "receive_devices() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.receive_devices"]], "set_channel() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.set_channel"]], "snr (simulationscenario property)": [[230, "hermespy.simulation.simulation.SimulationScenario.snr"]], "snr_type (simulationscenario property)": [[230, "hermespy.simulation.simulation.SimulationScenario.snr_type"]], "transmit_devices() (simulationscenario method)": [[230, "hermespy.simulation.simulation.SimulationScenario.transmit_devices"]], "yaml_tag (simulationscenario attribute)": [[230, "hermespy.simulation.simulation.SimulationScenario.yaml_tag"]], "amplitude (dbconversiontype attribute)": [[232, "hermespy.tools.math.DbConversionType.AMPLITUDE"]], "dbconversiontype (class in hermespy.tools.math)": [[232, "hermespy.tools.math.DbConversionType"]], "power (dbconversiontype attribute)": [[232, "hermespy.tools.math.DbConversionType.POWER"]], "amplitude_path_loss() (in module hermespy.tools.math)": [[232, "hermespy.tools.math.amplitude_path_loss"]], "db2lin() (in module hermespy.tools.math)": [[232, "hermespy.tools.math.db2lin"]], "hermespy.tools.math": [[232, "module-hermespy.tools.math"]], "lin2db() (in module hermespy.tools.math)": [[232, "hermespy.tools.math.lin2db"]], "marcum_q() (in module hermespy.tools.math)": [[232, "hermespy.tools.math.marcum_q"]], "rms_value() (in module hermespy.tools.math)": [[232, "hermespy.tools.math.rms_value"]], "delay_resampling_matrix() (in module hermespy.tools.resampling)": [[233, "hermespy.tools.resampling.delay_resampling_matrix"]], "hermespy.tools.resampling": [[233, "module-hermespy.tools.resampling"]], "get_monitors() (in module hermespy.tools.tile)": [[234, "hermespy.tools.tile.get_monitors"]], "hermespy.tools.tile": [[234, "module-hermespy.tools.tile"]], "screen_geometry() (in module hermespy.tools.tile)": [[234, "hermespy.tools.tile.screen_geometry"]], "set_figure_geometry() (in module hermespy.tools.tile)": [[234, "hermespy.tools.tile.set_figure_geometry"]], "tile_figures() (in module hermespy.tools.tile)": [[234, "hermespy.tools.tile.tile_figures"]]}})
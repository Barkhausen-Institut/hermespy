[build-system]
requires = [
    "setuptools>=75.6.0",
    "wheel>=0.45.1",
    "pybind11>=3.0.0",
    "scikit-build-core>=0.10.7",
]
build-backend = "scikit_build_core.build"

[project]
name = "hermespy"
version = "1.5.0"
authors = [
    {name = "Jan Adler", email ="jan.adler@barkhauseninstitut.org"},
]
maintainers = [
    {name = "Jan Adler", email = "jan.adler@barkhauseninstitut.org"},
]
description = "The Heterogeneous Radio Mobile Simulator"
readme = {file = "README.md", content-type = "text/markdown"}
license = {file = "LICENSE"}
keywords = [
    "simulation", "link-level", "communication", "radar", "channel",
    "signal processing", "MIMO", "monte carlo",
]
classifiers = [
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering",
    "Intended Audience :: Science/Research",
]
requires-python = ">=3.8"
dependencies = [
    "numpy(>=2.1.3, <2.3.0)",  # <2.3 required for numba 0.61 compatibility compatibility
    "matplotlib>=3.10.0",
    "h5py>=3.8.0",
    "scipy>=1.14.1",
    "pybind11>=3.0.0",
    "ray>=2.47.1",
    "sparse>=0.15.5",
    "numba>=0.61.0",
    "rich>=13.9.4",
]

[project.urls]
Documentation = "https://hermespy.org/"
Homepage = "https://github.com/Barkhausen-Institut/hermespy.git"
Issues = "https://github.com/Barkhausen-Institut/hermespy/issues"

[project.optional-dependencies]
test = [
    "pytest>=7.4.2",
    "coverage>=7.5.1",
    "mypy>=1.17.0",
    "nbformat",
    "nbconvert",
    "flake8>=7.3.0",
]
quadriga = [
    "oct2py>=5.6.0",
]
documentation = [
    "sphinx>=8.0.0, <8.2.0",  # 8.2.0 is not compatible nbsphinx 0.9.7
    "furo>=2024.8.6",
    "sphinx-autodoc-typehints>=3.0.1",
    "sphinxcontrib-apidoc>=0.5.0",
    "sphinxcontrib-mermaid>=1.0.0",
    "sphinxcontrib-bibtex>=2.6.3",
    "sphinx-tabs>=3.4.7",
    "sphinx-copybutton>=0.5.2",
    "sphinx-carousel>=1.2.0",
    "nbsphinx>=0.9.7",
    "ipywidgets==8.1.6",  # Required for sionna 0.19.1 compatibility, which requires jupyterlab-widgets==3.0.5
]
uhd = [
    "usrp-uhd-client==1.7.3",
]
audio = [
    "sounddevice>=0.4.6",
]
develop = [
    "pybind11>=2.13.6",
    "scikit-build-core>=0.10.7",
    "cmake>=3.31.2",
    "wheel>=0.45.1",
    "black>=25.10.0",
    "flake8>=7.3.0",
    "coverage>=7.6.9",
    "mypy>=1.17.0",
]
sionna = [
    "mitsuba<=3.6.2",
    "sionna-rt>=1.1.0",
    "tensorflow(>=2.14, !=2.16, !=2.17)",
]
scapy = [
    "scapy>=2.5.0",
]

[project.scripts]
shermes = "hermespy.tools.shermes:sHermes"

[tool.scikit-build]
cmake.build-type = "Release"  # "Debug" or "Release"
cmake.args = [
    "-DCMAKE_POLICY_VERSION_MINIMUM=3.5",
]
editable.mode = "redirect"
ninja.make-fallback = true
logging.level = "INFO"
sdist.include = []
sdist.exclude = [
    "/_examples/",
    "/docssource/",
    "/scripts/",
    "/submodules/quadriga",
    "/submodules/affect/ci/",
    "/submodules/affect/conf/",
    "/submodules/affect/doc/",
    "/submodules/affect/refs/",
    ".flake8",
    "/.git*",
    "/tests/",
]
sdist.reproducible = true
sdist.cmake = true
wheel.packages = ["hermespy", "hermespy/*"]
wheel.license-files = ["LICENSE"]
wheel.cmake = true
wheel.exclude = [
    "*.cpp",
    "CMakeLists.txt",
]
experimental = false
build-dir = "build/{wheel_tag}"
strict-config = true
install.components = ["PythonModule"]
install.strip = false

[tool.black]
line-length = 100
target-version = ['py39']

[tool.coverage.run]
omit = [
    "*/tests/*",
    "*__init__.py*",
]

[tool.mypy] 
namespace_packages = true 
strict_optional = false  # should be changed to true
no_implicit_optional = true
explicit_package_bases = true
packages = "hermespy.beamforming, hermespy.channel, hermespy.core, hermespy.fec, hermespy.hardware_loop, hermespy.jcas, hermespy.modem, hermespy.radar, hermespy.simulation, hermespy.tools"
plugins = "numpy.typing.mypy_plugin"
disallow_untyped_calls = false  # should be changed to true
disable_error_code = "type-abstract"

[[tool.mypy.overrides]]
module = "numpy.*,scipy.*,oct2py.*,matlab.*,matplotlib.*,ruamel.*,numba.*,h5py.*,hermespy.fec.aff3ct.*,zerorpc.*,sounddevice.*,usrp_client.*,uhd_wrapper.*"
ignore_missing_imports = true

[bumpver]
current_version = "1.5.0"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "Bump to version {new_version}"
commit = false
tag = false
push = false

[bumpver.file_patterns]
# Root directory files
"pyproject.toml" = [ 'current_version = "{version}"', 'version = "{version}"' ]
".gitlab-ci.yml" = [ 'HERMES_VERSION: "{version}"' ]
"scripts/docker/build_manylinux.sh" = [ 'version={version}' ]

# Source files
"hermespy/beamforming/*.py" = [ '__version__ = "{version}"' ]
"hermespy/channel/*.py" = [ '__version__ = "{version}"' ]
"hermespy/channel/cdl/*.py" = [ '__version__ = "{version}"' ]
"hermespy/channel/delay/*.py" = [ '__version__ = "{version}"' ]
"hermespy/channel/fading/*.py" = [ '__version__ = "{version}"' ]
"hermespy/channel/quadriga/*.py" = [ '__version__ = "{version}"' ]
"hermespy/channel/radar/*.py" = [ '__version__ = "{version}"' ]
"hermespy/core/*.py" = [ '__version__ = "{version}"' ]
"hermespy/fec/*.py" = [ '__version__ = "{version}"' ]
"hermespy/hardware_loop/*.py" = [ '__version__ = "{version}"' ]
"hermespy/hardware_loop/audio/*.py" = [ '__version__ = "{version}"' ]
"hermespy/hardware_loop/calibration/*.py" = [ '__version__ = "{version}"' ]
"hermespy/hardware_loop/uhd/*.py" = [ '__version__ = "{version}"' ]
"hermespy/jcas/*.py" = [ '__version__ = "{version}"' ]
"hermespy/modem/*.py" = [ '__version__ = "{version}"' ]
"hermespy/modem/frame_generator/*.py" = [ '__version__ = "{version}"' ]
"hermespy/modem/precoding/*.py" = [ '__version__ = "{version}"' ]
"hermespy/modem/tools/*.py" = [ '__version__ = "{version}"' ]
"hermespy/modem/waveforms/*.py" = [ '__version__ = "{version}"' ]
"hermespy/modem/waveforms/orthogonal/*.py" = [ '__version__ = "{version}"' ]
"hermespy/radar/*.py" = [ '__version__ = "{version}"' ]
"hermespy/simulation/*.py" = [ '__version__ = "{version}"' ]
"hermespy/simulation/coupling/*.py" = [ '__version__ = "{version}"' ]
"hermespy/simulation/isolation/*.py" = [ '__version__ = "{version}"' ]
"hermespy/simulation/modem/*.py" = [ '__version__ = "{version}"' ]
"hermespy/simulation/noise/*.py" = [ '__version__ = "{version}"' ]
"hermespy/simulation/rf_chain/*.py" = [ '__version__ = "{version}"' ]
"hermespy/tools/*.py" = [ '__version__ = "{version}"' ]

# Test files
"tests/integration_tests/*.py" = [ '__version__ = "{version}"' ]
"tests/integrity_tests/documentation/*.py" = [ '__version__ = "{version}"' ]
"tests/integrity_tests/examples/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/beamforming/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/channel/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/core/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/fec/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/hardware_loop/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/hardware_loop/audio/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/hardware_loop/calibration/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/hardware_loop/uhd/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/jcas/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/modem/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/modem/precoding/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/modem/tools/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/modem/waveforms/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/modem/waveforms/orthogonal/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/radar/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/simulation/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/simulation/coupling/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/simulation/isolation/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/simulation/modem/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/simulation/noise/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/simulation/rf_chain/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/tools/*.py" = [ '__version__ = "{version}"' ]
"tests/unit_tests/*.py" = [ '__version__ = "{version}"' ]

from abc import ABC, abstractmethod
from typing import List

import numpy as np

from parameters_parser.parameters_encoder import ParametersEncoder


class Encoder(ABC):
    """This class serves as an abstract class for all encoders.

    All deriving classes must overwrite the `encode(data_bits)` and
    `decode(encoded_bits)` function.
    """

    def __init__(self, params: ParametersEncoder,
                       bits_in_frame: int,
                       rng: np.random.RandomState) -> None:
        """
        Args:
            params (ParametersEncoder): Parameters necessary for Encoder.
            bits_in_frame (int): Number of bits that fit into one frame.
            rng (RandomState): RNG for random numbers if required.
        """
        self.params = params
        self.bits_in_frame = bits_in_frame
        self.rng = rng

    @abstractmethod
    def encode(self, data_bits: List[np.array]) -> List[np.array]:
        """This method encodes the incoming bits.

        Args:
            bits(List[np.array]):
                List of data_bits that are contained in the current frame.
                Each list element is one block with bits created by the BitSource.

        Returns:
            List[np.array]:
                List of blocks with the encoded bits. Each list item corresponds
                to a block containing a code word.
        """
        pass

    @abstractmethod
    def decode(self, encoded_bits: List[np.array]) -> List[np.array]:
        """Decode code words.

        Args:
            encoded_bits(List[np.array]):
                List of blocks with the encoded bits. Each list item corresponds
                to a block containing a code word. The expected input is soft bits.
        Returns:
            List[np.array]:
                List of data_bits that are contained in the current frame.
                Each list element is one block with bits created by the BitsSource.
        """
        pass

    @property
    def encoded_bits_n(self) -> int:
        """int: Number of encoded bits that the encoding of k data bits result in."""
        return self.params.encoded_bits_n

    @property
    def data_bits_k(self) -> int:
        """int: Number of bits that are to be encoded into n bits."""
        return self.params.data_bits_k

    @property
    def code_blocks(self) -> int:
        """int: Number of code blocks which are to encoded."""
        return int(np.floor(self.bits_in_frame / self.encoded_bits_n))

    @property
    def source_bits(self) -> int:
        """int: Number of bits to be generated by the source given n/k."""
        return int(self.code_blocks * self.data_bits_k)
